diff -Naur -x .svn ecmh-2005.02.09/src/common.c ecmh-2005.02.09.NEW/src/common.c
--- ecmh-2005.02.09/src/common.c	2005-02-10 01:58:06.000000000 +0800
+++ ecmh-2005.02.09.NEW/src/common.c	2009-09-17 19:49:15.000000000 +0800
@@ -13,8 +13,10 @@
 	va_list ap;
 	if (g_conf && !g_conf->verbose && level == LOG_DEBUG) return;
 	va_start(ap, fmt);
+#if 0
 	if (g_conf && g_conf->daemonize) vsyslog(LOG_LOCAL7|level, fmt, ap);
 	else
+#endif
 	{
 		if (g_conf->verbose)
 		{
diff -Naur -x .svn ecmh-2005.02.09/src/ecmh.c ecmh-2005.02.09.NEW/src/ecmh.c
--- ecmh-2005.02.09/src/ecmh.c	2005-02-10 01:58:06.000000000 +0800
+++ ecmh-2005.02.09.NEW/src/ecmh.c	2009-09-18 11:00:36.000000000 +0800
@@ -32,12 +32,15 @@
 /* Configuration Variables */
 struct conf	*g_conf;
 volatile int	g_needs_timeout = false;
+time_t		last_update = 0;
 
 /* Prototypes, to forward some functions */
-void update_interfaces(struct intnode *intn);
+void update_interfaces(struct intnode *intn, int updatemtu);
 void l2_ethtype(struct intnode *intn, const uint8_t *packet, const unsigned int len, const unsigned int ether_type);
 void l2_eth(struct intnode *intn, struct ether_header *eth, const unsigned int len);
 
+void icmp6_send_pkbig(struct intnode *intn, const struct in6_addr *src, int type, int code, void *data, unsigned int dlen, unsigned int mtu);
+
 /*
  * 6to4 relay address 192.88.99.1
  * This is because some people also run 6to4 on their machines
@@ -130,7 +133,7 @@
 }, icmpv6_codes_unreach[] = {
 	{ ICMP6_DST_UNREACH_NOROUTE,		"No route to destination"		},
 	{ ICMP6_DST_UNREACH_ADMIN,		"Administratively prohibited"		},
-	{ ICMP6_DST_UNREACH_NOTNEIGHBOR,	"Not a neighbor (obsolete)"		},
+//	{ ICMP6_DST_UNREACH_NOTNEIGHBOR,	"Not a neighbor (obsolete)"		},
 	{ ICMP6_DST_UNREACH_BEYONDSCOPE,	"Beyond scope of source address"	},
 	{ ICMP6_DST_UNREACH_ADDR,		"Address Unreachable"			},
 	{ ICMP6_DST_UNREACH_NOPORT,		"Port Unreachable"			},
@@ -189,8 +192,8 @@
 }
 
 /* Send a packet */
-void sendpacket6(struct intnode *intn, const struct ip6_hdr *iph, const uint16_t len);
-void sendpacket6(struct intnode *intn, const struct ip6_hdr *iph, const uint16_t len)
+void sendpacket6(struct intnode *rcvfrom, struct intnode *intn, const struct ip6_hdr *iph, const uint16_t len);
+void sendpacket6(struct intnode *rcvfrom, struct intnode *intn, const struct ip6_hdr *iph, const uint16_t len)
 {
 	int     sent;
 #ifndef ECMH_BPF
@@ -315,6 +318,32 @@
 			dolog(LOG_DEBUG, "[%-5s] couldn't send %u bytes, received ENXIO, destroying interface %u\n", intn->name, len, intn->ifindex);
 			/* Destroy the interface itself */
 			int_destroy(intn);
+		} else if (errno == EMSGSIZE){
+			
+			/* for IPv6 Ready Logo Selftest, S5-No.16 */
+
+			dolog(LOG_DEBUG, "[%-5s] sending %u bytes failed, mtu = %u: %s (%d)\n", intn->name, len, intn->mtu, strerror(errno), errno);
+			// force update specific interfaces
+			last_update = 0;
+			update_interfaces(intn, 1);
+			dolog(LOG_DEBUG, "[%-5s] after force update interface, now mtu = %u\n", intn->name, intn->mtu);
+			if (rcvfrom != NULL) {
+				if ( !IN6_IS_ADDR_UNSPECIFIED(&rcvfrom->global) ) //only allow src addr of rcvfrom is global
+				{
+					/* only allow icmpv6 echo request */
+
+					if (iph->ip6_nxt == IPPROTO_ICMPV6) // is next header ICMPv6 ?
+					{
+						struct ip6_ext *ipe = (struct ip6_ext *)(((char *)iph) + sizeof(*iph)); //Step to the next heade
+						struct icmp6_hdr * icmpv6 = (struct icmp6_hdr *)ipe; // casting to icmp6_hdr
+						if ( icmpv6->icmp6_type == ICMP6_ECHO_REQUEST )
+							icmp6_send_pkbig(rcvfrom, &iph->ip6_src, ICMP6_PACKET_TOO_BIG, 0, (void*)iph, len, intn->mtu);
+					}
+
+				}
+				else
+					dolog(LOG_DEBUG, "[%-5s] prepare send ICMPv6 Packet Too Big with src is unspecified ... abrogating this action!!\n", intn->name);
+			} 
 		}
 		else dolog(LOG_DEBUG, "[%-5s] sending %u bytes failed, mtu = %u: %s (%d)\n", intn->name, len, intn->mtu, strerror(errno), errno);
 		return;
@@ -333,6 +362,10 @@
 /*
  * This is used for the ICMPv6 reply code, to allow sending Hoplimit's :)
  * Thus allowing neat tricks like traceroute6's to work.
+ * intn		= The interface we want send icmpv6 reply 
+ * src		= src addr of ICMPv6 echo request packet
+ * data		= payload of ICMPv6 echo request packet
+ * dlen		= length of data
  */
 void icmp6_send(struct intnode *intn, const struct in6_addr *src, int type, int code, void *data, unsigned int dlen);
 void icmp6_send(struct intnode *intn, const struct in6_addr *src, int type, int code, void *data, unsigned int dlen)
@@ -377,7 +410,78 @@
 	packet.icmp6.icmp6_cksum	= ipv6_checksum(&packet.ip6, IPPROTO_ICMPV6, (uint8_t *)&packet.icmp6, sizeof(packet.icmp6) + dlen - sizeof(packet.icmp6.icmp6_data32));
 
 	dolog(LOG_DEBUG, "Sending ICMPv6 Type %s (%u) code %s (%u) on %s/%u\n", icmpv6_type(type), type, icmpv6_code(type, code), code, intn->name, intn->ifindex);
-	sendpacket6(intn, (const struct ip6_hdr *)&packet, sizeof(packet) - (sizeof(packet.data) - dlen) - sizeof(packet.icmp6.icmp6_data32));
+	sendpacket6(NULL, intn, (const struct ip6_hdr *)&packet, sizeof(packet) - (sizeof(packet.data) - dlen) - sizeof(packet.icmp6.icmp6_data32));
+
+	/* Increase ICMP sent statistics */
+	g_conf->stat_icmp_sent++;
+	intn->stat_icmp_sent++;
+}
+
+/*
+ * This is used for the ICMPv6 error code, to send ICMPv6 Packet Too Big error mesg. 
+ * just for IPv6 Ready Logo Selftest program
+ * intn		= The interface that we want send ICMPv6 Packet Too Big error mesg back
+ * src		= src addr of ICMPv6 echo request packet send from
+ * data		= total ICMPv6 echo request packet
+ * dlen		= length of ICMPv6 echo request packet
+ * mtu		= mtu of interface that ICMPv6 echo request forward to
+ *
+ * NOTE: basically, dlen should great than mtu.
+ */
+void icmp6_send_pkbig(struct intnode *intn, const struct in6_addr *src, int type, int code, void *data, unsigned int dlen, unsigned int mtu)
+{
+	int icmp6sockopt, icmp6sock, send;
+	struct sockaddr_in6 addr;
+		
+	uint16_t r_dlen = 1280-40-8; // Min IPv6 MTU - IPv6 header - ICMPv6 Header
+	r_dlen = r_dlen > dlen ? dlen : r_dlen;		// re-calculate data size that we really send out
+
+	struct icmp6_pkgbig
+	{
+		struct icmp6_hdr	icmp6;
+		char			data[r_dlen];
+	} packet;
+
+	memset(&packet, 0, sizeof(packet));
+
+
+	/* ICMPv6 Error Report */
+	packet.icmp6.icmp6_type	= type;
+	packet.icmp6.icmp6_code	= code;
+	
+	/* assign mtu field */
+	packet.icmp6.icmp6_mtu = ntohl(mtu);
+	
+	/* Add the data, we start at the data in the packet.data[0] */
+	memcpy(&packet.data, data,  r_dlen);
+
+	icmp6sock = socket(AF_INET6, SOCK_RAW, IPPROTO_ICMPV6);	
+	if (icmp6sock < 0 )
+	{
+		dolog(LOG_ERR, "Create icmpv6 socket to sending ICMPv6 Type %s (%u) code %s (%u) on %s/%u fail - %s (%d)\n",
+			icmpv6_type(type), type, icmpv6_code(type, code), code, intn->name, intn->ifindex, strerror(errno), errno);
+		return;
+	}
+
+	/* checksum offset */
+	icmp6sockopt = offsetof(struct icmp6_hdr, icmp6_cksum);
+	setsockopt(icmp6sock, SOL_RAW, IPV6_CHECKSUM, &icmp6sockopt, sizeof(icmp6sockopt));
+
+	addr.sin6_family = AF_INET6;
+	addr.sin6_addr = *src;
+	addr.sin6_port = htons(IPPROTO_ICMPV6);
+	dolog(LOG_DEBUG, "Sending ICMPv6 Type %s (%u) code %s (%u) on %s/%u\n",
+		icmpv6_type(type), type, icmpv6_code(type, code), code, intn->name, intn->ifindex);
+
+	send = sendto(icmp6sock, &packet, sizeof(packet), 0, (struct sockaddr *) &addr, sizeof(struct sockaddr_in6));
+	if (send < 0 )
+	{
+		dolog(LOG_ERR, "Sending ICMPv6 Type %s (%u) code %s (%u) on %s/%u fail - %s (%d)\n",
+			icmpv6_type(type), type, icmpv6_code(type, code), code, intn->name, intn->ifindex, strerror(errno), errno);
+		return;
+	}
+
+	close(icmp6sock);
 
 	/* Increase ICMP sent statistics */
 	g_conf->stat_icmp_sent++;
@@ -506,7 +610,7 @@
 		dolog(LOG_DEBUG, "Sending MLDv2 Query on %s/%u with %u sources\n", intn->name, intn->ifindex, ntohs(packet.mldq.nsrcs));
 	}
 #endif
-	sendpacket6(intn, (const struct ip6_hdr *)&packet, packetlen);
+	sendpacket6(NULL, intn, (const struct ip6_hdr *)&packet, packetlen);
 
 	/* Increase ICMP sent statistics */
 	g_conf->stat_icmp_sent++;
@@ -571,7 +675,7 @@
 	packet.mld1.csum		= ipv6_checksum(&packet.ip6, IPPROTO_ICMPV6, (uint8_t *)&packet.mld1, sizeof(packet.mld1));
 
 	dolog(LOG_DEBUG, "Sending MLDv1 Report on %s/%u\n", intn->name, intn->ifindex);
-	sendpacket6(intn, (const struct ip6_hdr *)&packet, sizeof(packet));
+	sendpacket6(NULL, intn, (const struct ip6_hdr *)&packet, sizeof(packet));
 
 	/* Increase ICMP sent statistics */
 	g_conf->stat_icmp_sent++;
@@ -760,7 +864,7 @@
 					packet->mld2r.csum	= ipv6_checksum(&packet->ip6, IPPROTO_ICMPV6, (uint8_t *)&packet->mld2r, length-sizeof(struct ip6_hbh)-sizeof(packet->routeralert));
 
 					dolog(LOG_DEBUG, "Sending2 MLDv2 Report on %s/%u, ngrec=%u, length=%u sources=%u (in last grec)\n", intn->name, intn->ifindex, ntohs(packet->mld2r.ngrec), length, ntohs(grec->grec_nsrcs));
-					sendpacket6(intn, (const struct ip6_hdr *)packet, length + sizeof(packet->ip6));
+					sendpacket6(NULL, intn, (const struct ip6_hdr *)packet, length + sizeof(packet->ip6));
 
 					/* Increase ICMP sent statistics */
 					g_conf->stat_icmp_sent++;
@@ -844,7 +948,7 @@
 	packet->mld2r.csum	= ipv6_checksum(&packet->ip6, IPPROTO_ICMPV6, (uint8_t *)&packet->mld2r, length-sizeof(struct ip6_hbh)-sizeof(packet->routeralert));
 
 	dolog(LOG_DEBUG, "Sending2 MLDv2 Report on %s/%u, ngrec=%u, length=%u sources=%u (in last grec)\n", intn->name, intn->ifindex, ntohs(packet->mld2r.ngrec), length, ntohs(grec->grec_nsrcs));
-	sendpacket6(intn, (const struct ip6_hdr *)packet, length + sizeof(packet->ip6));
+	sendpacket6(NULL, intn, (const struct ip6_hdr *)packet, length + sizeof(packet->ip6));
 
 	/* Increase ICMP sent statistics */
 	g_conf->stat_icmp_sent++;
@@ -881,7 +985,7 @@
 {
 	unsigned int		i;
 	struct intnode		*intn;
-	struct groupnode	*groupn;
+//	struct groupnode	*groupn;
 
 	dolog(LOG_DEBUG, "Broadcasting group to all interfaces but %s...\n", interface->name);
 
@@ -949,7 +1053,7 @@
 	if (!tun)
 	{
 		/* Try to update the list */
-		update_interfaces(NULL);
+		update_interfaces(NULL, 0);
 
 		/* Try to find it again */
 		tun = int_find_ipv4(false, &iph->ip_src);
@@ -1414,13 +1518,16 @@
 	 * - src = linklocal
 	 * - dst = node local multicast
 	 * - dst = link local multicast
+	 * - dst = scope value is 0
 	 */
-	if (	IN6_IS_ADDR_MULTICAST(&iph->ip6_src) ||
-		IN6_IS_ADDR_UNSPECIFIED(&iph->ip6_src) ||
-		IN6_IS_ADDR_UNSPECIFIED(&iph->ip6_dst) ||
-		IN6_IS_ADDR_LINKLOCAL(&iph->ip6_src) ||
+	if (IN6_IS_ADDR_MULTICAST(&iph->ip6_src)	||
+		IN6_IS_ADDR_UNSPECIFIED(&iph->ip6_src)	||
+		IN6_IS_ADDR_UNSPECIFIED(&iph->ip6_dst)	||
+		IN6_IS_ADDR_LINKLOCAL(&iph->ip6_src)	||
 		IN6_IS_ADDR_MC_NODELOCAL(&iph->ip6_dst) ||
-		IN6_IS_ADDR_MC_LINKLOCAL(&iph->ip6_dst)) return;
+		IN6_IS_ADDR_MC_LINKLOCAL(&iph->ip6_dst) ||
+		IN6_IS_ADDR_MC_SCOP_RESV_0(&iph->ip6_dst)
+	) return;
 #if 0
 D(
 	{
@@ -1480,7 +1587,7 @@
 			if (!interface) continue;
 
 			/* Send the packet to this interface */
-			sendpacket6(interface, iph, len);
+			sendpacket6(intn, interface, iph, len);
 			
 			/* Packet is forwarded thus proceed to next interface */
 			break;
@@ -1498,8 +1605,8 @@
  * data		= the payload
  * plen		= Payload length (should match up to at least icmpv6
  */
-void l4_ipv6_icmpv6(struct intnode *intn, struct ip6_hdr *iph, const uint16_t len, struct icmp6_hdr *icmpv6, const uint16_t plen);
-void l4_ipv6_icmpv6(struct intnode *intn, struct ip6_hdr *iph, const uint16_t len, struct icmp6_hdr *icmpv6, const uint16_t plen)
+void l4_ipv6_icmpv6(struct intnode *intn, struct ip6_hdr *iph, const uint16_t len, struct icmp6_hdr *icmpv6, const uint16_t plen, uint8_t with_ext);
+void l4_ipv6_icmpv6(struct intnode *intn, struct ip6_hdr *iph, const uint16_t len, struct icmp6_hdr *icmpv6, const uint16_t plen, uint8_t with_ext)
 {
 	uint16_t		csum;
 
@@ -1565,8 +1672,13 @@
 			icmp6_send(intn, &iph->ip6_src, ICMP6_ECHO_REPLY, ICMP6_TIME_EXCEED_TRANSIT, &icmpv6->icmp6_data32, plen-sizeof(*icmpv6)+sizeof(icmpv6->icmp6_data32));
 			return;
 		}
-		/* Send this packet along it's way */
-		else l4_ipv6_multicast(intn, iph, len);
+		else if ( with_ext ) {// ICMPv6 Echo Req but with extension headers, don't process it
+			dolog(LOG_WARNING, "Ignoring (%s): ICMPv6 Echo Req because header chain includes some of extension headers\n",
+				intn->name);
+			return;
+		} else
+			/* Send this packet along it's way */
+			l4_ipv6_multicast(intn, iph, len);
 	}
 	else
 	{
@@ -1612,6 +1724,7 @@
 	uint8_t			ipe_type;
 	uint16_t		plen;
 	uint32_t		l;
+	uint8_t			with_ext=0;
 
 	/*
 	 * Destination must be multicast
@@ -1644,6 +1757,7 @@
 		ipe_type == IPPROTO_DSTOPTS ||
 		ipe_type == IPPROTO_AH)
 	{
+		with_ext = 1; // sign this ipv6 packet includes extension headers
 		/* Save the type of the next header */
 		ipe_type = ipe->ip6e_nxt;
 
@@ -1664,9 +1778,9 @@
 	if (ipe_type == IPPROTO_ICMPV6)
 	{
 		/* Take care of ICMPv6 */
-		l4_ipv6_icmpv6(intn, iph, len, (struct icmp6_hdr *)ipe, plen);
+		l4_ipv6_icmpv6(intn, iph, len, (struct icmp6_hdr *)ipe, plen, with_ext);
 		return;
-	}
+	} 
 
 	/* Handle multicast packets */
 	if (IN6_IS_ADDR_MULTICAST(&iph->ip6_dst))
@@ -1707,21 +1821,23 @@
 }
 
 /* Initiliaze interfaces */
-void update_interfaces(struct intnode *intn)
+void update_interfaces(struct intnode *intn, int updatemtu)
 {
-	static time_t		last_update = 0;
 
 	struct intnode		*specific = intn;
 	struct in6_addr		addr;
 	unsigned int		ifindex = 0;
 	bool			newintn	= false;
-	bool			ignore = false;
+	struct ifreq    ifreq;
+	int sock;
 #ifndef ECMH_GETIFADDR
 	FILE			*file;
 	unsigned int		prefixlen, scope, flags;
 	char			devname[IFNAMSIZ];
+	char			buf[256]; //number of char per line, assume not greater than 256
 #else
 	struct ifaddrs		*ifap, *ifa;
+	bool			ignore = false;
 
 #endif /* !ECMH_GETIFADDR */
 	int			gotlinkl = false, gotglobal = false, gotipv4 = false;
@@ -1731,7 +1847,7 @@
 
 	last_update = time(NULL);
 
-	dolog(LOG_DEBUG, "Updating Interfaces\n");
+	dolog(LOG_DEBUG, "Updating Interfaces --> \n");
 
 #ifndef ECMH_GETIFADDR
 	/* Get link local addresses from /proc/net/if_inet6 */
@@ -1758,6 +1874,14 @@
 			dolog(LOG_WARNING, "/proc/net/if_inet6 has a broken line, ignoring");
 			continue;
 		}
+		/* only add upstream and downstream */
+		if ( g_conf->upstream && g_conf->downstream)
+		{
+			if ( (strcasecmp(devname, g_conf->upstream) != 0) && (strcasecmp(devname, g_conf->downstream) != 0) )
+				continue;
+		}
+		dolog(LOG_DEBUG, "Updating Interfaces, checking: ifindex:%x, prefixlen:%x, scope:%x, flags:%x, devname:%8s\n",
+					ifindex, prefixlen, scope, flags, devname);
 #else /* !ECMH_GETIFADDR */
 	/* FreeBSD etc style */
 	if (getifaddrs(&ifap) == 0)
@@ -1868,8 +1992,35 @@
 
 		if (specific)
 		{
+			dolog(LOG_DEBUG, "Updating Interfaces for specific, intn->ifindex:%d, ifindex:%d\n", intn->ifindex, ifindex);
 			intn = specific;
-			if (intn->ifindex == ifindex) continue;
+			if ( !updatemtu )
+			{
+				if (intn->ifindex == ifindex) continue;
+			} else {// updatemtu == 1
+				dolog(LOG_DEBUG, "Force updateing interfaces mtu for specific, OLD intn->ifindex:%d, mtu:%d\n", intn->ifindex, intn->mtu);
+				/* force update MTU */
+				memset(&ifreq, 0, sizeof(ifreq));	
+				memcpy(&ifreq.ifr_name, &intn->name, sizeof(ifreq.ifr_name));
+				sock = socket(AF_INET, SOCK_DGRAM, 0);
+				if (sock < 0)
+					dolog(LOG_ERR, "Couldn't create tempory socket for ioctl's (called by update_interfaces())\n");
+				else
+				{
+					/* Get the MTU size of this interface */
+					/* We will use that for fragmentation */
+					if (ioctl(sock, SIOCGIFMTU, &ifreq) != 0) // ioctl fail
+					{
+						dolog(LOG_ERR, "Couldn't determine MTU size for %s, link %d : %s\n", intn->name, intn->ifindex, strerror(errno));
+						perror("Error");
+					}else // ioctl success
+					{
+						intn->mtu = ifreq.ifr_mtu; // update mtu
+					}
+					close(sock);
+					dolog(LOG_DEBUG, "Force updateing interfaces mtu for specific, NEW intn->ifindex:%d, mtu:%d\n", intn->ifindex, intn->mtu);
+				}
+			} /*!updatemtu */
 		}
 		else
 		{
@@ -1905,7 +2056,10 @@
 			}
 			else
 			{
+#ifdef ECMH_SUPPORT_IPV4 // Dirty hacking - force ignore ipv4 support !!!!!!!!!!!!!!!!!!!!!
+#ifdef ECMH_GETIFADDR // Dirty hacking - force ignore getifaddr() support !!!!!!!!!!!!!!!!!!!!!
 				if (ifa->ifa_addr->sa_family == AF_INET)
+#endif /* ECMH_GETIFADDR */
 				{
 #ifdef ECMH_BPF
 					int num=0;
@@ -1955,7 +2109,11 @@
 					dolog(LOG_DEBUG, "Ignoring local IPv4 address for %s\n", intn->name);
 #endif /* ECMH_BPF*/
 				}
-				else if (ifa->ifa_addr->sa_family == AF_INET6)
+				else
+#endif /* ECMH_SUPPORT_IPV4 */
+#ifdef ECMH_GETIFADDR // Dirty hacking - force ignore getifaddr() support !!!!!!!!!!!!!!!!!!!!!
+				if (ifa->ifa_addr->sa_family == AF_INET6)
+#endif /* ECMH_GETIFADDR */
 				{
 #ifdef DEBUG
 					char txt[INET6_ADDRSTRLEN];
@@ -1971,10 +2129,12 @@
 					memcpy(&intn->global, &addr, sizeof(intn->global));
 					gotglobal = true;
 				}
+#ifdef ECMH_GETIFADDR // Dirty hacking - force ignore getifaddr() support !!!!!!!!!!!!!!!!!!!!!
 				else
 				{
 					dolog(LOG_ERR, "Unknown Address Family %u - Ignoring\n", ifa->ifa_addr->sa_family);
 				}
+#endif /* ECMH_GETIFADDR */
 			}
 		}
 
@@ -2016,7 +2176,7 @@
 		freeifaddrs(ifap);
 #endif
 	}
-	dolog(LOG_DEBUG, "Updating Interfaces - done, highest ifindex: %u\n", g_conf->maxinterfaces);
+	dolog(LOG_DEBUG, "Updating Interfaces <--, highest ifindex: %u\n", g_conf->maxinterfaces);
 #ifndef ECMH_GETIFADDR
 	fclose(file);
 #else
@@ -2334,7 +2494,7 @@
 	dolog(LOG_DEBUG, "Timeout\n");
 
 	/* Update the complete interfaces list */
-	update_interfaces(NULL);
+	update_interfaces(NULL, 0);
 
 	/* Get the current time */
 	time_tee = time(NULL);
@@ -2342,10 +2502,10 @@
 	/* Timeout all the groups that didn't refresh yet */
 	LIST_LOOP2(g_conf->groups, groupn, ln, ln2)
 	{
-		printf("Groups\n");
+		//printf("Groups\n");
 		LIST_LOOP2(groupn->interfaces, grpintn, gn, gn2)
 		{
-			printf("Group Interfaces\n");
+			//printf("Group Interfaces\n");
 			LIST_LOOP2(grpintn->subscriptions, subscrn, ssn, ssn2)
 			{
 				/* Calculate the difference */
@@ -2438,7 +2598,7 @@
 		if (intn)
 		{
 			/* Determine linklocal address etc. */
-			update_interfaces(intn);
+			update_interfaces(intn, 0);
 		}
 	}
 	if (intn)
@@ -2451,7 +2611,7 @@
 	}
 	else
 	{
-		dolog(LOG_ERR, "Couldn't find interface link %u\n", i);
+		dolog(LOG_DEBUG, "Couldn't find interface link %u\n", i);
 	}
 	return true;
 #else /* !ECMH_BPF */
@@ -2517,6 +2677,7 @@
 static struct option const long_options[] = {
 	{"foreground",		no_argument,		NULL, 'f'},
 	{"upstream",		required_argument,	NULL, 'i'},
+	{"downstream",		required_argument,	NULL, 'd'},
 	{"promisc",		no_argument,		NULL, 'p'},
 	{"nopromisc",		no_argument,		NULL, 'P'},
 	{"user",		required_argument,	NULL, 'u'},
@@ -2544,7 +2705,7 @@
 	init();
 
 	/* Handle arguments */
-	while ((i = getopt_long(argc, argv, "fi:pPu:"
+	while ((i = getopt_long(argc, argv, "fi:d:pPu:"
 #ifdef ECMH_BPF
 		"tT"
 #endif
@@ -2572,6 +2733,15 @@
 			}
 			g_conf->upstream = strdup(optarg);
 			break;
+
+		case 'd':
+			if (g_conf->downstream)
+			{
+				fprintf(stderr, "Only one downstream interface (was: %s) can be specified\n", g_conf->downstream);
+				return -1;
+			}
+			g_conf->downstream = strdup(optarg);
+			break;
 			
 		case 'p':
 			g_conf->promisc = true;
@@ -2605,7 +2775,7 @@
 			break;
 
 		case 'V':
-			printf(ECMH_VERSION_STRING, ECMH_VERSION);
+			printf(ECMH_VERSION_STRING, ECMH_VERSION, ALPHA_VERSION, ALPHA_BUILD_DATE);
 			return 0;
 #ifdef ECMH_SUPPORT_MLD2
 		case '1':
@@ -2634,6 +2804,7 @@
 				"-f, --foreground           don't daemonize\n"
 				"-u, --user username        drop (setuid+setgid) to user after startup\n"
 				"-i, --upstream interface   upstream interface\n"
+				"-d, --downstream interface downstream interface\n"
 #ifdef ECMH_BPF
 				"-t, --tunnelmode           Don't attach to tunnels, but use proto-41 decapsulation (default)\n"
 				"-T, --notunnelmode         Attach to tunnels seperatly\n"
@@ -2684,8 +2855,8 @@
 		setsid();
 		/* Cleanup stdin/out/err */
 		freopen("/dev/null","r",stdin);
-		freopen("/dev/null","w",stdout);
-		freopen("/dev/null","w",stderr);
+//		freopen("/dev/null","w",stdout);
+//		freopen("/dev/null","w",stderr);
 	}
 
 	/* Handle a SIGHUP to reload the config */
@@ -2698,7 +2869,7 @@
 
 	/* Timeout handling */
 	signal(SIGALRM, &timeout_signal);
-	alarm(ECMH_SUBSCRIPTION_TIMEOUT);
+	alarm(ECMH_SIGNAL_TIMEOUT);
 
 	/* Dump operations */
 	signal(SIGUSR1,	&sigusr1);
@@ -2706,13 +2877,18 @@
 	signal(SIGUSR2, &sigusr2);
 
 	/* Show our version in the startup logs ;) */
-	dolog(LOG_INFO, ECMH_VERSION_STRING, ECMH_VERSION);
+	dolog(LOG_INFO, ECMH_VERSION_STRING, ECMH_VERSION, ALPHA_VERSION, ALPHA_BUILD_DATE);
 #ifdef ECMH_BPF
 	dolog(LOG_INFO, "Tunnelmode is %s\n", g_conf->tunnelmode ? "Active" : "Disabled");
 #endif
-	if (g_conf->upstream)
+	if (g_conf->upstream && g_conf->downstream)
 	{
 		dolog(LOG_INFO, "Using %s as an upstream interface\n", g_conf->upstream);
+		dolog(LOG_INFO, "Using %s as an downstream interface\n", g_conf->downstream);
+	}else
+	{
+		dolog(LOG_ERR, "\n!!! Need specify upstream and downstream !!!\n");
+		return -1;
 	}
 
 #ifdef ECMH_SUPPORT_MLD2
@@ -2782,7 +2958,7 @@
 	if (drop_gid != 0) setgid(drop_gid);
 
 	/* Update the complete interfaces list */
-	update_interfaces(NULL);
+	update_interfaces(NULL, 0);
 
 	send_mld_querys();
 
@@ -2799,7 +2975,7 @@
 
 			/* Reset the alarm */
 			signal(SIGALRM, &timeout_signal);
-			alarm(ECMH_SUBSCRIPTION_TIMEOUT);
+			alarm(ECMH_SIGNAL_TIMEOUT);
 		}
 
 		quit = !handleinterfaces(g_conf->buffer);
diff -Naur -x .svn ecmh-2005.02.09/src/ecmh.h ecmh-2005.02.09.NEW/src/ecmh.h
--- ecmh-2005.02.09/src/ecmh.h	2005-02-10 01:58:06.000000000 +0800
+++ ecmh-2005.02.09.NEW/src/ecmh.h	2009-09-17 21:08:53.000000000 +0800
@@ -27,6 +27,7 @@
 #include <syslog.h>
 #include <pwd.h>
 #include <getopt.h>
+#include <stddef.h>
 
 #include <net/if.h>
 #include <netinet/if_ether.h>
@@ -43,7 +44,9 @@
 #define ETH_P_IPV6 ETHERTYPE_IPV6
 #define ETH_P_IP ETHERTYPE_IP
 #endif
+#ifdef ECMH_GETIFADDR
 #include <ifaddrs.h>
+#endif
 #include <netinet/ip.h>
 #include <netinet/ip6.h>
 #include <netinet/icmp6.h>
@@ -53,10 +56,43 @@
 #include <sys/ioctl.h>
 #include "mld.h"
 
+/***************************************************************/
+/* Fixups following defines:
+ * ICMP6_MEMBERSHIP_QUERY		-> MLD_LISTENER_QUERY
+ * ICMP6_MEMBERSHIP_REPORT		-> MLD_LISTENER_REPORT
+ * ICMP6_MEMBERSHIP_REDUCTION	-> MLD_LISTENER_REDUCTION
+*/
+#ifndef ICMP6_MEMBERSHIP_QUERY
+#ifdef MLD_LISTENER_QUERY
+#define ICMP6_MEMBERSHIP_QUERY MLD_LISTENER_QUERY
+#endif
+#endif
+
+#ifndef ICMP6_MEMBERSHIP_REPORT
+#ifdef MLD_LISTENER_REPORT
+#define ICMP6_MEMBERSHIP_REPORT MLD_LISTENER_REPORT
+#endif
+#endif
+
+#ifndef ICMP6_MEMBERSHIP_REDUCTION
+#ifdef MLD_LISTENER_REDUCTION
+#define ICMP6_MEMBERSHIP_REDUCTION MLD_LISTENER_REDUCTION
+#endif
+#endif
+/***************************************************************/
+#define IN6_IS_ADDR_MC_SCOP_RESV_0(a) \
+    (IN6_IS_ADDR_MULTICAST(a)                         \
+     && ((((__const uint8_t *) (a))[1] & 0xf) == 0x0))
+
+#define IN6_IS_ADDR_MC_SCOP_RESV_F(a) \
+    (IN6_IS_ADDR_MULTICAST(a)                         \
+     && ((((__const uint8_t *) (a))[1] & 0xf) == 0xf))
+
+/***************************************************************/
 #define PIDFILE "/var/run/ecmh.pid"
 #define ECMH_DUMPFILE "/var/run/ecmh.dump"
 
-#define ECMH_VERSION_STRING "Easy Cast du Multi Hub (ecmh) %s by Jeroen Massar <jeroen@unfix.org>\n"
+#define ECMH_VERSION_STRING "Easy Cast du Multi Hub (ecmh) %s by Jeroen Massar <jeroen@unfix.org>\nThis is ALPHA modified version: %s, build date: %s\n"
 
 #ifdef DEBUG
 #define D(x) x
@@ -67,6 +103,7 @@
 /* The timeout for queries */
 /* as per RFC3810 MLDv2 "9.2.  Query Interval" */
 #define ECMH_SUBSCRIPTION_TIMEOUT	125
+#define ECMH_SIGNAL_TIMEOUT			ECMH_SUBSCRIPTION_TIMEOUT
 
 /* Robustness Factor, per RFC3810 MLDv2 "9.1.  Robustness Variable" */
 #define ECMH_ROBUSTNESS_FACTOR		2
@@ -93,7 +130,9 @@
 	struct list		*groups;			/* The groups we are joined to */
 
 	char			*upstream;			/* Upstream interface */
+	char			*downstream;		/* downstream interface */
 	unsigned int		upstream_id;			/* Interface ID of upstream interface */
+	unsigned int		downstream_id;			/* Interface ID of downstream interface */
 
 	bool			daemonize;			/* To Daemonize or to not to Daemonize */
 	bool			verbose;			/* Verbose Operation ? */
diff -Naur -x .svn ecmh-2005.02.09/src/interfaces.c ecmh-2005.02.09.NEW/src/interfaces.c
--- ecmh-2005.02.09/src/interfaces.c	2005-02-10 01:58:06.000000000 +0800
+++ ecmh-2005.02.09.NEW/src/interfaces.c	2009-09-18 11:00:47.000000000 +0800
@@ -310,6 +310,7 @@
 	/* Cleanup the socket */
 	close(sock);
 
+	#if 0
 	if (	g_conf->upstream &&
 		strcasecmp(intn->name, g_conf->upstream) == 0)
 	{
@@ -317,6 +318,37 @@
 		g_conf->upstream_id = intn->ifindex;
 	}
 	else intn->upstream = false;
+	#endif
+
+    /**************************************************/
+	if (    g_conf->upstream && g_conf->downstream )
+	{
+		if (strcasecmp(intn->name, g_conf->upstream) == 0 || strcasecmp(intn->name, g_conf->downstream) == 0)
+		{
+			if (strcasecmp(intn->name, g_conf->upstream) == 0 )
+			{
+				intn->upstream = true;
+				g_conf->upstream_id = intn->ifindex;
+			} else intn->upstream = false;
+
+			if (strcasecmp(intn->name, g_conf->downstream) == 0 )
+			{
+				intn->downstream = true;
+				g_conf->downstream_id = intn->ifindex;
+			} else intn->downstream = false;
+
+		} else {
+		
+			dolog(LOG_DEBUG, "Neither upstream nor downstream interface of %u/%s\n",
+					intn->ifindex, intn->name);
+			int_destroy(intn);
+			return NULL;
+		}
+	} else {
+        dolog(LOG_ERR, "\n!!! Need specify upstream and downstream (should't happen)!!!\n");
+		int_destroy(intn);
+        return NULL;
+	}
 
 	/* All okay */
 	return intn;
diff -Naur -x .svn ecmh-2005.02.09/src/interfaces.h ecmh-2005.02.09.NEW/src/interfaces.h
--- ecmh-2005.02.09/src/interfaces.h	2005-02-10 01:58:06.000000000 +0800
+++ ecmh-2005.02.09.NEW/src/interfaces.h	2009-09-17 21:09:11.000000000 +0800
@@ -46,6 +46,7 @@
 	uint64_t	stat_icmp_sent;		/* Number of ICMP's sent */
 
 	bool		upstream;		/* This interface is an upstream */
+	bool		downstream;		/* This interface is an downstream */
 };
 
 /* Node functions */
