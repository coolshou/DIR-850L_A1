cscope 15 $HOME/project/wd_av2/progs.gpl/itunes_server/mt-daapd-svn-1696/src -q 0000006469 0001259527
	@bsd-snprintf.c

59 #ifde‡
HAVE_CONFIG_H


60 
	~"c⁄fig.h
"

63 
	~<˘y≥.h
>

64 
	~<limôs.h
>

65 
	~<°d¨g.h
>

66 
	~<°dio.h
>

67 
	~<°rög.h
>

68 
	~<°dlib.h
>

70 
	~<sys/ty≥s.h
>

72 
	#MAX
(
a
,
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

75 
d›r
(*
buf„r
, 
size_t
 
maxÀn
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
);

78 
fmt°r
(*
buf„r
, 
size_t
 *
cuºÀn
, size_à
maxÀn
, *
vÆue
, 
Êags
,

79 
mö
, 
max
);

82 
fmtuæ
(*
buf„r
, 
size_t
 *
cuºÀn
, size_à
maxÀn
, *
vÆue
, 
Êags
,

83 
mö
, 
max
);

86 
fmtöt
(*
buf„r
, 
size_t
 *
cuºÀn
, size_à
maxÀn
, 
vÆue
, 
ba£
,

87 
mö
, 
max
, 
Êags
);

90 
fmtÂ
(*
buf„r
, 
size_t
 *
cuºÀn
, size_à
maxÀn
, 
fvÆue
,

91 
mö
, 
max
, 
Êags
);

94 
d›r_outch
(*
buf„r
, 
size_t
 *
cuºÀn
, size_à
maxÀn
, 
c
);

101 
	#DP_S_DEFAULT
 0

	)

102 
	#DP_S_FLAGS
 1

	)

103 
	#DP_S_MIN
 2

	)

104 
	#DP_S_DOT
 3

	)

105 
	#DP_S_MAX
 4

	)

106 
	#DP_S_MOD
 5

	)

107 
	#DP_S_CONV
 6

	)

108 
	#DP_S_DONE
 7

	)

111 
	#DP_F_MINUS
 (1 << 0)

	)

112 
	#DP_F_PLUS
 (1 << 1)

	)

113 
	#DP_F_SPACE
 (1 << 2)

	)

114 
	#DP_F_NUM
 (1 << 3)

	)

115 
	#DP_F_ZERO
 (1 << 4)

	)

116 
	#DP_F_UP
 (1 << 5)

	)

117 
	#DP_F_UNSIGNED
 (1 << 6)

	)

120 
	#DP_C_SHORT
 1

	)

121 
	#DP_C_LONG
 2

	)

122 
	#DP_C_LDOUBLE
 3

	)

123 
	#DP_C_LONG_LONG
 4

	)

125 
	#ch¨_to_öt
(
p
Ë’ - '0')

	)

126 
	#abs_vÆ
(
p
Ë’ < 0 ? -∞:Ö)

	)

130 
	$d›r
(*
buf„r
, 
size_t
 
maxÀn
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

132 *
°rvÆue
, 
ch
;

133 
vÆue
;

134 
fvÆue
;

135 
mö
 = 0, 
max
 = -1, 
°©e
 = 
DP_S_DEFAULT
, 
Êags
 = 0, 
cÊags
 = 0;

136 
size_t
 
cuºÀn
 = 0;

138 
ch
 = *
f‹m©
++;

140 
°©e
 !
DP_S_DONE
) {

141 i‡((
ch
 ='\0'Ë|| (
cuºÀn
 >
maxÀn
))

142 
°©e
 = 
DP_S_DONE
;

144 
°©e
) {

145 
DP_S_DEFAULT
:

146 i‡(
ch
 == '%')

147 
°©e
 = 
DP_S_FLAGS
;

149 
	`d›r_outch
(
buf„r
, &
cuºÀn
, 
maxÀn
, 
ch
);

150 
ch
 = *
f‹m©
++;

152 
DP_S_FLAGS
:

153 
ch
) {

155 
Êags
 |
DP_F_MINUS
;

156 
ch
 = *
f‹m©
++;

159 
Êags
 |
DP_F_PLUS
;

160 
ch
 = *
f‹m©
++;

163 
Êags
 |
DP_F_SPACE
;

164 
ch
 = *
f‹m©
++;

167 
Êags
 |
DP_F_NUM
;

168 
ch
 = *
f‹m©
++;

171 
Êags
 |
DP_F_ZERO
;

172 
ch
 = *
f‹m©
++;

175 
°©e
 = 
DP_S_MIN
;

179 
DP_S_MIN
:

180 i‡(
	`isdigô
(()
ch
)) {

181 
mö
 = 10 * mö + 
	`ch¨_to_öt
 (
ch
);

182 
ch
 = *
f‹m©
++;

183 } i‡(
ch
 == '*') {

184 
mö
 = 
	`va_¨g
 (
¨gs
, );

185 
ch
 = *
f‹m©
++;

186 
°©e
 = 
DP_S_DOT
;

188 
°©e
 = 
DP_S_DOT
;

190 
DP_S_DOT
:

191 i‡(
ch
 == '.') {

192 
°©e
 = 
DP_S_MAX
;

193 
ch
 = *
f‹m©
++;

195 
°©e
 = 
DP_S_MOD
;

197 
DP_S_MAX
:

198 i‡(
	`isdigô
(()
ch
)) {

199 i‡(
max
 < 0)

200 
max
 = 0;

201 
max
 = 10 * max + 
	`ch¨_to_öt
(
ch
);

202 
ch
 = *
f‹m©
++;

203 } i‡(
ch
 == '*') {

204 
max
 = 
	`va_¨g
 (
¨gs
, );

205 
ch
 = *
f‹m©
++;

206 
°©e
 = 
DP_S_MOD
;

208 
°©e
 = 
DP_S_MOD
;

210 
DP_S_MOD
:

211 
ch
) {

213 
cÊags
 = 
DP_C_SHORT
;

214 
ch
 = *
f‹m©
++;

217 
cÊags
 = 
DP_C_LONG
;

218 
ch
 = *
f‹m©
++;

219 i‡(
ch
 == 'l') {

220 
cÊags
 = 
DP_C_LONG_LONG
;

221 
ch
 = *
f‹m©
++;

225 
cÊags
 = 
DP_C_LONG_LONG
;

226 
ch
 = *
f‹m©
++;

229 
cÊags
 = 
DP_C_LDOUBLE
;

230 
ch
 = *
f‹m©
++;

235 
°©e
 = 
DP_S_CONV
;

237 
DP_S_CONV
:

238 
ch
) {

241 i‡(
cÊags
 =
DP_C_SHORT
)

242 
vÆue
 = 
	`va_¨g
(
¨gs
, );

243 i‡(
cÊags
 =
DP_C_LONG
)

244 
vÆue
 = 
	`va_¨g
(
¨gs
, );

245 i‡(
cÊags
 =
DP_C_LONG_LONG
)

246 
vÆue
 = 
	`va_¨g
 (
¨gs
, );

248 
vÆue
 = 
	`va_¨g
 (
¨gs
, );

249 
	`fmtöt
(
buf„r
, &
cuºÀn
, 
maxÀn
, 
vÆue
, 10, 
mö
, 
max
, 
Êags
);

252 
Êags
 |
DP_F_UNSIGNED
;

253 i‡(
cÊags
 =
DP_C_SHORT
)

254 
vÆue
 = 
	`va_¨g
(
¨gs
, );

255 i‡(
cÊags
 =
DP_C_LONG
)

256 
vÆue
 = 
	`va_¨g
(
¨gs
, );

257 i‡(
cÊags
 =
DP_C_LONG_LONG
)

258 
vÆue
 = 
	`va_¨g
(
¨gs
, );

260 
vÆue
 = 
	`va_¨g
(
¨gs
, );

261 
	`fmtöt
(
buf„r
, &
cuºÀn
, 
maxÀn
, 
vÆue
, 8, 
mö
, 
max
, 
Êags
);

264 
Êags
 |
DP_F_UNSIGNED
;

265 i‡(
cÊags
 =
DP_C_SHORT
)

266 
vÆue
 = 
	`va_¨g
(
¨gs
, );

267 i‡(
cÊags
 =
DP_C_LONG
)

268 
vÆue
 = 
	`va_¨g
(
¨gs
, );

269 i‡(
cÊags
 =
DP_C_LONG_LONG
)

270 
vÆue
 = 
	`va_¨g
(
¨gs
, );

272 
vÆue
 = 
	`va_¨g
(
¨gs
, );

273 
	`fmtöt
 (
buf„r
, &
cuºÀn
, 
maxÀn
, 
vÆue
, 10, 
mö
, 
max
, 
Êags
);

276 
Êags
 |
DP_F_UP
;

278 
Êags
 |
DP_F_UNSIGNED
;

279 i‡(
cÊags
 =
DP_C_SHORT
)

280 
vÆue
 = 
	`va_¨g
(
¨gs
, );

281 i‡(
cÊags
 =
DP_C_LONG
)

282 
vÆue
 = 
	`va_¨g
(
¨gs
, );

283 i‡(
cÊags
 =
DP_C_LONG_LONG
)

284 
vÆue
 = 
	`va_¨g
(
¨gs
, );

286 
vÆue
 = 
	`va_¨g
(
¨gs
, );

287 
	`fmtöt
(
buf„r
, &
cuºÀn
, 
maxÀn
, 
vÆue
, 16, 
mö
, 
max
, 
Êags
);

290 i‡(
cÊags
 =
DP_C_LDOUBLE
)

291 
fvÆue
 = 
	`va_¨g
(
¨gs
, );

293 
fvÆue
 = 
	`va_¨g
(
¨gs
, );

295 
	`fmtÂ
(
buf„r
, &
cuºÀn
, 
maxÀn
, 
fvÆue
, 
mö
, 
max
, 
Êags
);

298 
Êags
 |
DP_F_UP
;

300 i‡(
cÊags
 =
DP_C_LDOUBLE
)

301 
fvÆue
 = 
	`va_¨g
(
¨gs
, );

303 
fvÆue
 = 
	`va_¨g
(
¨gs
, );

306 
Êags
 |
DP_F_UP
;

308 i‡(
cÊags
 =
DP_C_LDOUBLE
)

309 
fvÆue
 = 
	`va_¨g
(
¨gs
, );

311 
fvÆue
 = 
	`va_¨g
(
¨gs
, );

314 
	`d›r_outch
(
buf„r
, &
cuºÀn
, 
maxÀn
, 
	`va_¨g
(
¨gs
, ));

317 
°rvÆue
 = 
	`va_¨g
(
¨gs
, *);

318 i‡(
max
 < 0)

319 
max
 = 
maxÀn
;

320 
	`fmt°r
(
buf„r
, &
cuºÀn
, 
maxÀn
, 
°rvÆue
, 
Êags
, 
mö
, 
max
);

323 
°rvÆue
 = 
	`va_¨g
(
¨gs
, *);

324 i‡(
max
 < 0)

325 
max
 = 
maxÀn
;

326 
	`fmtuæ
(
buf„r
, &
cuºÀn
, 
maxÀn
, 
°rvÆue
, 
Êags
, 
mö
, 
max
);

329 
°rvÆue
 = 
	`va_¨g
(
¨gs
, *);

330 
	`fmtöt
(
buf„r
, &
cuºÀn
, 
maxÀn
, (Ë
°rvÆue
, 16, 
mö
, 
max
, 
Êags
);

333 i‡(
cÊags
 =
DP_C_SHORT
) {

334 *
num
;

335 
num
 = 
	`va_¨g
(
¨gs
, *);

336 *
num
 = 
cuºÀn
;

337 } i‡(
cÊags
 =
DP_C_LONG
) {

338 *
num
;

339 
num
 = 
	`va_¨g
(
¨gs
, *);

340 *
num
 = 
cuºÀn
;

341 } i‡(
cÊags
 =
DP_C_LONG_LONG
) {

342 *
num
;

343 
num
 = 
	`va_¨g
(
¨gs
, *);

344 *
num
 = 
cuºÀn
;

346 *
num
;

347 
num
 = 
	`va_¨g
(
¨gs
, *);

348 *
num
 = 
cuºÀn
;

352 
	`d›r_outch
(
buf„r
, &
cuºÀn
, 
maxÀn
, 
ch
);

355 
ch
 = *
f‹m©
++;

360 
ch
 = *
f‹m©
++;

361 
°©e
 = 
DP_S_DEFAULT
;

362 
Êags
 = 
cÊags
 = 
mö
 = 0;

363 
max
 = -1;

365 
DP_S_DONE
:

371 i‡(
cuºÀn
 < 
maxÀn
 - 1)

372 
buf„r
[
cuºÀn
] = '\0';

374 
buf„r
[
maxÀn
 - 1] = '\0';

375 
	}
}

380 
	$fmtuæ
(*
buf„r
, 
size_t
 *
cuºÀn
, size_à
maxÀn
,

381 *
vÆue
, 
Êags
, 
mö
, 
max
)

383 
Àn
=0;

385 *
cuºít
, *
de°
;

386 *
√w_°rög
;

387 
digô1
, 
digô2
;

388 *
digôs
 = "0123456789abcdef";

389 *
ß„
 = "abcdefghijklmnopqrstuvwxyz"

392 
cuºít
=(*)
vÆue
;

393 *
cuºít
) {

394 if(
	`°rchr
(
ß„
,*
cuºít
)) {

395 
Àn
++;

397 
Àn
 += 3;

399 
cuºít
++;

402 
√w_°rög
 = (*Ë
	`mÆloc
(
Àn
+1);

403 if(!
√w_°rög
) {

404 
	`fmt°r
(
buf„r
,
cuºÀn
,
maxÀn
,
vÆue
,
Êags
,
mö
,
max
);

408 
cuºít
 = (*)
vÆue
;

409 
de°
 = 
√w_°rög
;

410 *
cuºít
) {

411 if(
	`°rchr
(
ß„
,*
cuºít
)) {

412 *
de°
++ = *
cuºít
++;

413 } if(*
cuºít
 == ' ') {

414 *
de°
++ = '+';

415 *
cuºít
++;

417 *
de°
++ = '%';

418 
digô1
=(*
cuºít
)/16;

419 
digô2
=(*
cuºít
)%16;

420 *
de°
++ = 
digôs
[
digô1
];

421 *
de°
++ = 
digôs
[
digô2
];

422 
cuºít
++;

425 *
de°
 = '\0';

426 
	`fmt°r
(
buf„r
,
cuºÀn
,
maxÀn
,(*)
√w_°rög
,
Êags
,
mö
,
max
);

427 
	`‰ì
(
√w_°rög
);

429 
	}
}

432 
	$fmt°r
(*
buf„r
, 
size_t
 *
cuºÀn
, size_à
maxÀn
,

433 *
vÆue
, 
Êags
, 
mö
, 
max
)

435 
˙t
 = 0, 
∑dÀn
, 
°æn
;

437 i‡(
vÆue
 == 0)

438 
vÆue
 = "<NULL>";

440 
°æn
 = 0; 
vÆue
[strln]; ++strln);

441 
∑dÀn
 = 
mö
 - 
°æn
;

442 i‡(
∑dÀn
 < 0)

443 
∑dÀn
 = 0;

444 i‡(
Êags
 & 
DP_F_MINUS
)

445 
∑dÀn
 = -padlen;

447 (
∑dÀn
 > 0Ë&& (
˙t
 < 
max
)) {

448 
	`d›r_outch
(
buf„r
, 
cuºÀn
, 
maxÀn
, ' ');

449 --
∑dÀn
;

450 ++
˙t
;

452 *
vÆue
 && (
˙t
 < 
max
)) {

453 
	`d›r_outch
(
buf„r
, 
cuºÀn
, 
maxÀn
, *
vÆue
++);

454 ++
˙t
;

456 (
∑dÀn
 < 0Ë&& (
˙t
 < 
max
)) {

457 
	`d›r_outch
(
buf„r
, 
cuºÀn
, 
maxÀn
, ' ');

458 ++
∑dÀn
;

459 ++
˙t
;

461 
	}
}

466 
	$fmtöt
(*
buf„r
, 
size_t
 *
cuºÀn
, size_à
maxÀn
,

467 
vÆue
, 
ba£
, 
mö
, 
max
, 
Êags
)

469 
uvÆue
;

470 
c⁄vît
[20];

471 
signvÆue
 = 0, 
∂a˚
 = 0, 
ˇps
 = 0;

472 
•adÀn
 = 0;

473 
z∑dÀn
 = 0;

475 i‡(
max
 < 0)

476 
max
 = 0;

478 
uvÆue
 = 
vÆue
;

480 i‡(!(
Êags
 & 
DP_F_UNSIGNED
)) {

481 i‡(
vÆue
 < 0) {

482 
signvÆue
 = '-';

483 
uvÆue
 = -
vÆue
;

484 } i‡(
Êags
 & 
DP_F_PLUS
)

485 
signvÆue
 = '+';

486 i‡(
Êags
 & 
DP_F_SPACE
)

487 
signvÆue
 = ' ';

490 i‡(
Êags
 & 
DP_F_UP
)

491 
ˇps
 = 1;

493 
c⁄vît
[
∂a˚
++] =

494 (
ˇps
 ? "0123456789ABCDEF" : "0123456789abcdef")

495 [
uvÆue
 % ()
ba£
];

496 
uvÆue
 = (uvÆuê/ ()
ba£
 );

497 } 
uvÆue
 && (
∂a˚
 < 20));

498 i‡(
∂a˚
 == 20)

499 
∂a˚
--;

500 
c⁄vît
[
∂a˚
] = 0;

502 
z∑dÀn
 = 
max
 - 
∂a˚
;

503 
•adÀn
 = 
mö
 - 
	`MAX
 (
max
, 
∂a˚
Ë- (
signvÆue
 ? 1 : 0);

504 i‡(
z∑dÀn
 < 0)

505 
z∑dÀn
 = 0;

506 i‡(
•adÀn
 < 0)

507 
•adÀn
 = 0;

508 i‡(
Êags
 & 
DP_F_ZERO
) {

509 
z∑dÀn
 = 
	`MAX
(z∑dÀn, 
•adÀn
);

510 
•adÀn
 = 0;

512 i‡(
Êags
 & 
DP_F_MINUS
)

513 
•adÀn
 = -spadlen;

516 
•adÀn
 > 0) {

517 
	`d›r_outch
(
buf„r
, 
cuºÀn
, 
maxÀn
, ' ');

518 --
•adÀn
;

522 i‡(
signvÆue
)

523 
	`d›r_outch
(
buf„r
, 
cuºÀn
, 
maxÀn
, 
signvÆue
);

526 i‡(
z∑dÀn
 > 0) {

527 
z∑dÀn
 > 0) {

528 
	`d›r_outch
(
buf„r
, 
cuºÀn
, 
maxÀn
, '0');

529 --
z∑dÀn
;

534 
∂a˚
 > 0)

535 
	`d›r_outch
(
buf„r
, 
cuºÀn
, 
maxÀn
, 
c⁄vît
[--
∂a˚
]);

538 
•adÀn
 < 0) {

539 
	`d›r_outch
 (
buf„r
, 
cuºÀn
, 
maxÀn
, ' ');

540 ++
•adÀn
;

542 
	}
}

545 
	$io_utû_pow10
(
exp
)

547 
ªsu…
 = 1;

549 
exp
) {

550 
ªsu…
 *= 10;

551 
exp
--;

554  
ªsu…
;

555 
	}
}

558 
	$io_utû_round
(
vÆue
)

560 
öç¨t
 = 
vÆue
;

562 
vÆue
 -
öç¨t
;

563 i‡(
vÆue
 >= 0.5)

564 
öç¨t
++;

566  
öç¨t
;

567 
	}
}

570 
	$fmtÂ
(*
buf„r
, 
size_t
 *
cuºÀn
, size_à
maxÀn
, 
fvÆue
,

571 
mö
, 
max
, 
Êags
)

573 
ic⁄vît
[20], 
fc⁄vît
[20];

574 
signvÆue
 = 0, 
ùœ˚
 = 0, 
Âœ˚
 = 0;

575 
∑dÀn
 = 0;

576 
z∑dÀn
 = 0, 
ˇps
 = 0;

577 
öç¨t
, 
‰a˝¨t
;

578 
ufvÆue
;

584 i‡(
max
 < 0)

585 
max
 = 6;

587 
ufvÆue
 = 
	`abs_vÆ
(
fvÆue
);

589 i‡(
fvÆue
 < 0)

590 
signvÆue
 = '-';

591 i‡(
Êags
 & 
DP_F_PLUS
)

592 
signvÆue
 = '+';

593 i‡(
Êags
 & 
DP_F_SPACE
)

594 
signvÆue
 = ' ';

596 
öç¨t
 = 
ufvÆue
;

602 i‡(
max
 > 9)

603 
max
 = 9;

608 
‰a˝¨t
 = 
	`io_utû_round
((
	`io_utû_pow10
 (
max
)Ë* (
ufvÆue
 - 
öç¨t
));

610 i‡(
‰a˝¨t
 >
	`io_utû_pow10
 (
max
)) {

611 
öç¨t
++;

612 
‰a˝¨t
 -
	`io_utû_pow10
 (
max
);

617 
ic⁄vît
[
ùœ˚
++] =

618 (
ˇps
 ? "0123456789ABCDEF" : "0123456789abcdef")

619 [
öç¨t
 % 10];

620 
öç¨t
 = (intpart / 10);

621 } 
öç¨t
 && (
ùœ˚
 < 20));

622 i‡(
ùœ˚
 == 20)

623 
ùœ˚
--;

624 
ic⁄vît
[
ùœ˚
] = 0;

628 
fc⁄vît
[
Âœ˚
++] =

629 (
ˇps
 ? "0123456789ABCDEF" : "0123456789abcdef")

630 [
‰a˝¨t
 % 10];

631 
‰a˝¨t
 = (fracpart / 10);

632 } 
‰a˝¨t
 && (
Âœ˚
 < 20));

633 i‡(
Âœ˚
 == 20)

634 
Âœ˚
--;

635 
fc⁄vît
[
Âœ˚
] = 0;

638 
∑dÀn
 = 
mö
 - 
ùœ˚
 - 
max
 - 1 - ((
signvÆue
) ? 1 : 0);

639 
z∑dÀn
 = 
max
 - 
Âœ˚
;

640 i‡(
z∑dÀn
 < 0)

641 
z∑dÀn
 = 0;

642 i‡(
∑dÀn
 < 0)

643 
∑dÀn
 = 0;

644 i‡(
Êags
 & 
DP_F_MINUS
)

645 
∑dÀn
 = -padlen;

647 i‡((
Êags
 & 
DP_F_ZERO
Ë&& (
∑dÀn
 > 0)) {

648 i‡(
signvÆue
) {

649 
	`d›r_outch
(
buf„r
, 
cuºÀn
, 
maxÀn
, 
signvÆue
);

650 --
∑dÀn
;

651 
signvÆue
 = 0;

653 
∑dÀn
 > 0) {

654 
	`d›r_outch
(
buf„r
, 
cuºÀn
, 
maxÀn
, '0');

655 --
∑dÀn
;

658 
∑dÀn
 > 0) {

659 
	`d›r_outch
(
buf„r
, 
cuºÀn
, 
maxÀn
, ' ');

660 --
∑dÀn
;

662 i‡(
signvÆue
)

663 
	`d›r_outch
(
buf„r
, 
cuºÀn
, 
maxÀn
, 
signvÆue
);

665 
ùœ˚
 > 0)

666 
	`d›r_outch
(
buf„r
, 
cuºÀn
, 
maxÀn
, 
ic⁄vît
[--
ùœ˚
]);

672 
	`d›r_outch
(
buf„r
, 
cuºÀn
, 
maxÀn
, '.');

674 
Âœ˚
 > 0)

675 
	`d›r_outch
(
buf„r
, 
cuºÀn
, 
maxÀn
, 
fc⁄vît
[--
Âœ˚
]);

677 
z∑dÀn
 > 0) {

678 
	`d›r_outch
(
buf„r
, 
cuºÀn
, 
maxÀn
, '0');

679 --
z∑dÀn
;

682 
∑dÀn
 < 0) {

683 
	`d›r_outch
(
buf„r
, 
cuºÀn
, 
maxÀn
, ' ');

684 ++
∑dÀn
;

686 
	}
}

689 
	$d›r_outch
(*
buf„r
, 
size_t
 *
cuºÀn
, size_à
maxÀn
, 
c
)

691 i‡(*
cuºÀn
 < 
maxÀn
)

692 
buf„r
[(*
cuºÀn
)++] = 
c
;

693 
	}
}

696 
	$io_utû_v¢¥ötf
(*
°r
, 
size_t
 
cou¡
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

698 
°r
[0] = 0;

699 
	`d›r
(
°r
, 
cou¡
, 
fmt
, 
¨gs
);

701 (
	`°æí
(
°r
));

702 
	}
}

705 
	$io_utû_¢¥ötf
(*
°r
,
size_t
 
cou¡
,c⁄° *
fmt
,...)

707 
va_li°
 
≠
;

709 
	`va_°¨t
(
≠
, 
fmt
);

710 (Ë
	`v¢¥ötf
(
°r
, 
cou¡
, 
fmt
, 
≠
);

711 
	`va_íd
(
≠
);

713 (
	`°æí
(
°r
));

714 
	}
}

	@bsd-snprintf.h

23 #i‚de‡
_BSD_SNPRINTF_H_


24 
	#_BSD_SNPRINTF_H_


	)

26 
io_utû_v¢¥ötf
(*
°r
, 
size_t
 
cou¡
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

27 
io_utû_¢¥ötf
(*
°r
,
size_t
 
cou¡
,c⁄° *
fmt
,...);

	@chardetect.h

38 #i‚de‡
___CHARDET_H___


39 
	#___CHARDET_H___


	)

41 #ifde‡
_WIN32


42 #ifde‡
DLL_EXPORTS


43 
	#CHARDET_IMEXPORT
 
	`_de˛•ec
(
dŒexp‹t
)

	)

45 
	#CHARDET_IMEXPORT
 
	`_de˛•ec
(
dŒimp‹t
)

	)

48 
	#CHARDET_IMEXPORT
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

51 
	~<°ddef.h
>

53 
	#CHARDET_RESULT_OK
 0

	)

54 
	#CHARDET_RESULT_NOMEMORY
 (-1)

	)

55 
	#CHARDET_RESULT_INVALID_DETECTOR
 (-2)

	)

57 
	#CHARDET_MAX_ENCODING_NAME
 64

	)

60 * 
	tch¨dë_t
;

62 #ifde‡
__˝lu•lus


72 
CHARDET_IMEXPORT
 
ch¨dë_¸óã
(
ch¨dë_t
* 
pdë
);

78 
CHARDET_IMEXPORT
 
ch¨dë_de°roy
(
ch¨dë_t
 
dë
);

89 
CHARDET_IMEXPORT
 
ch¨dë_h™dÀ_d©a
(
ch¨dë_t
 
dë
, c⁄° * 
d©a
, 
Àn
);

97 
CHARDET_IMEXPORT
 
ch¨dë_d©a_íd
(
ch¨dë_t
 
dë
);

105 
CHARDET_IMEXPORT
 
ch¨dë_ª£t
(
ch¨dë_t
 
dë
);

121 
CHARDET_IMEXPORT
 
ch¨dë_gë_ch¨£t
(
ch¨dë_t
 
dë
, * 
«mebuf
, 
buÊí
);

124 #ifde‡
__˝lu•lus


	@compat.c

1 #ifde‡
HAVE_CONFIG_H


2 
	~"c⁄fig.h
"

5 
	~<°rög.h
>

6 
	~<˘y≥.h
>

7 
	~<time.h
>

8 
	~<°rög.h
>

9 
	~<°dio.h
>

11 
	~"dØpd.h
"

13 #i‡!
HAVE_STRCASESTR


16 * 
	$°rˇ£°r
(* 
hay°ack
, * 
√edÀ
) {

17 
i
;

18 
∆ígth
 = (Ë
	`°æí
 (
√edÀ
);

19 
hÀngth
 = (Ë
	`°æí
 (
hay°ack
);

21 i‡(
∆ígth
 > 
hÀngth
Ë 
NULL
;

22 i‡(
hÀngth
 <0Ë 
NULL
;

23 i‡(
∆ígth
 <0Ë 
hay°ack
;

25 
i
 = 0; i <(
hÀngth
 - 
∆ígth
); i++) {

26 i‡(
	`°∫ˇ£cmp
 (
hay°ack
 + 
i
, 
√edÀ
, 
∆ígth
) == 0) {

27  
hay°ack
 + 
i
;

31  
NULL
;

32 
	}
}

67 #i‚de‡
HAVE_STRPTIME


69 
	#asizeof
(
a
Ë( (aË/  (◊)[0]))

	)

72 #i‚de‡
sun


73 
	sdtc⁄v
 {

74 *
	mabbªv_m⁄th_«mes
[12];

75 *
	mm⁄th_«mes
[12];

76 *
	mabbªv_wìkday_«mes
[7];

77 *
	mwìkday_«mes
[7];

78 *
	mtime_f‹m©
;

79 *
	msd©e_f‹m©
;

80 *
	mdtime_f‹m©
;

81 *
	mam_°rög
;

82 *
	mpm_°rög
;

83 *
	mld©e_f‹m©
;

87 
dtc⁄v
 
	gEn_US
 = {

104 #ifde‡
SUNOS4


105 
°∫ˇ£cmp
();

108 
	$lowîˇ£_°rög
(*
buf„r
) {

109 *
buf„r
) {

110 *
buf„r
 = 
	`tﬁowî
(*buffer);

111 
buf„r
++;

113 
	}
}

115 *
	$°Ωtime
(*
buf
, *
fmt
, 
tm
 *tm) {

116 
c
,

117 *
±r
;

118 
i
, 
j
,

119 
Àn
;

120 
±r
 = 
fmt
;

121 *
±r
 != 0) {

122 i‡(*
buf
 == 0)

125 
c
 = *
±r
++;

127 i‡(
c
 != '%') {

128 i‡(
	`is•a˚
(
c
))

129 *
buf
 !0 && 
	`is•a˚
(*buf))

130 
buf
++;

131 i‡(
c
 !*
buf
++)

136 
c
 = *
±r
++;

137 
c
) {

140 i‡(*
buf
++ != '%')

145 
buf
 = 
	`°Ωtime
(buf, 
En_US
.
ld©e_f‹m©
, 
tm
);

146 i‡(
buf
 == 0)

151 
buf
 = 
	`°Ωtime
(buf, "%x %X", 
tm
);

152 i‡(
buf
 == 0)

157 
buf
 = 
	`°Ωtime
(buf, "%m/%d/%y", 
tm
);

158 i‡(
buf
 == 0)

163 
buf
 = 
	`°Ωtime
(buf, "%H:%M", 
tm
);

164 i‡(
buf
 == 0)

169 
buf
 = 
	`°Ωtime
(buf, "%I:%M:%S %p", 
tm
);

170 i‡(
buf
 == 0)

175 
buf
 = 
	`°Ωtime
(buf, "%H:%M:%S", 
tm
);

176 i‡(
buf
 == 0)

181 
buf
 = 
	`°Ωtime
(buf, 
En_US
.
time_f‹m©
, 
tm
);

182 i‡(
buf
 == 0)

187 
buf
 = 
	`°Ωtime
(buf, 
En_US
.
sd©e_f‹m©
, 
tm
);

188 i‡(
buf
 == 0)

193 i‡(!
	`isdigô
(*
buf
))

196 
i
 = 0; *
buf
 !0 && 
	`isdigô
(*buf); buf++) {

197 
i
 *= 10;

198 
i
 +*
buf
 - '0';

200 i‡(
i
 > 365)

203 
tm
->
tm_yday
 = 
i
;

208 i‡(*
buf
 =0 || 
	`is•a˚
(*buf))

211 i‡(!
	`isdigô
(*
buf
))

214 
j
=0,
i
 = 0; *
buf
 !0 && 
	`isdigô
(*buf) && j<2; j++,buf++) {

215 
i
 *= 10;

216 
i
 +*
buf
 - '0';

218 i‡(
i
 > 59)

221 i‡(
c
 == 'M')

222 
tm
->
tm_mö
 = 
i
;

224 
tm
->
tm_£c
 = 
i
;

226 i‡(*
buf
 !0 && 
	`is•a˚
(*buf))

227 *
±r
 !0 && !
	`is•a˚
(*ptr))

228 
±r
++;

235 i‡(!
	`isdigô
(*
buf
))

238 
j
=0,
i
 = 0; *
buf
 !0 && 
	`isdigô
(*buf) && j<2; j++,buf++) {

239 
i
 *= 10;

240 
i
 +*
buf
 - '0';

242 i‡(
c
 == 'H' || c == 'k') {

243 i‡(
i
 > 23)

245 } i‡(
i
 > 11)

248 
tm
->
tm_hour
 = 
i
;

250 i‡(*
buf
 !0 && 
	`is•a˚
(*buf))

251 *
±r
 !0 && !
	`is•a˚
(*ptr))

252 
±r
++;

256 
Àn
 = (Ë
	`°æí
(
En_US
.
am_°rög
);

257 
	`lowîˇ£_°rög
–
buf
 );

259 i‡(
	`°∫cmp
(
buf
, 
En_US
.
am_°rög
, 
Àn
) == 0) {

260 i‡(
tm
->
tm_hour
 > 12)

262 i‡(
tm
->
tm_hour
 == 12)

263 
tm
->
tm_hour
 = 0;

264 
buf
 +
Àn
;

268 
Àn
 = (Ë
	`°æí
(
En_US
.
pm_°rög
);

270 i‡(
	`°∫cmp
(
buf
, 
En_US
.
pm_°rög
, 
Àn
) == 0) {

271 i‡(
tm
->
tm_hour
 > 12)

273 i‡(
tm
->
tm_hour
 != 12)

274 
tm
->
tm_hour
 += 12;

275 
buf
 +
Àn
;

283 
i
 = 0; i < 
	`asizeof
(
En_US
.
wìkday_«mes
); i++) {

284 
Àn
 = (Ë
	`°æí
(
En_US
.
wìkday_«mes
[
i
]);

286 
	`lowîˇ£_°rög
–
buf
 );

288 i‡(
	`°∫cmp
(
buf
,

289 
En_US
.
wìkday_«mes
[
i
],

290 
Àn
) == 0)

293 
Àn
 = (Ë
	`°æí
(
En_US
.
abbªv_wìkday_«mes
[
i
]);

294 i‡(
	`°∫cmp
(
buf
,

295 
En_US
.
abbªv_wìkday_«mes
[
i
],

296 
Àn
) == 0)

299 i‡(
i
 =
	`asizeof
(
En_US
.
wìkday_«mes
))

302 
tm
->
tm_wday
 = 
i
;

303 
buf
 +
Àn
;

308 i‡(!
	`isdigô
(*
buf
))

311 
j
=0,
i
 = 0; *
buf
 !0 && 
	`isdigô
(*buf) && j<2; j++,buf++) {

312 
i
 *= 10;

313 
i
 +*
buf
 - '0';

315 i‡(
i
 > 31)

318 
tm
->
tm_mday
 = 
i
;

320 i‡(*
buf
 !0 && 
	`is•a˚
(*buf))

321 *
±r
 !0 && !
	`is•a˚
(*ptr))

322 
±r
++;

328 
i
 = 0; i < 
	`asizeof
(
En_US
.
m⁄th_«mes
); i++) {

329 
Àn
 = (Ë
	`°æí
(
En_US
.
m⁄th_«mes
[
i
]);

331 
	`lowîˇ£_°rög
–
buf
 );

332 i‡(
	`°∫cmp
(
buf
, 
En_US
.
m⁄th_«mes
[
i
],
Àn
) == 0)

335 
Àn
 = (Ë
	`°æí
(
En_US
.
abbªv_m⁄th_«mes
[
i
]);

336 i‡(
	`°∫cmp
(
buf
,

337 
En_US
.
abbªv_m⁄th_«mes
[
i
],

338 
Àn
) == 0)

341 i‡(
i
 =
	`asizeof
(
En_US
.
m⁄th_«mes
))

344 
tm
->
tm_m⁄
 = 
i
;

345 
buf
 +
Àn
;

349 i‡(!
	`isdigô
(*
buf
))

352 
j
=0,
i
 = 0; *
buf
 !0 && 
	`isdigô
(*buf) && j<2; j++,buf++) {

353 
i
 *= 10;

354 
i
 +*
buf
 - '0';

356 i‡(
i
 < 1 || i > 12)

359 
tm
->
tm_m⁄
 = 
i
 - 1;

361 i‡(*
buf
 !0 && 
	`is•a˚
(*buf))

362 *
±r
 !0 && !
	`is•a˚
(*ptr))

363 
±r
++;

368 i‡(*
buf
 =0 || 
	`is•a˚
(*buf))

371 i‡(!
	`isdigô
(*
buf
))

374 
j
=0,
i
 = 0; *
buf
 !0 && 
	`isdigô
(*bufË&& j<((
c
=='Y')?4:2); j++,buf++) {

375 
i
 *= 10;

376 
i
 +*
buf
 - '0';

379 i‡(
c
 == 'Y')

380 
i
 -= 1900;

381 i‡(
i
 < 69)

382 
i
 += 100;

384 i‡(
i
 < 0)

387 
tm
->
tm_yór
 = 
i
;

389 i‡(*
buf
 !0 && 
	`is•a˚
(*buf))

390 *
±r
 !0 && !
	`is•a˚
(*ptr))

391 
±r
++;

396  
buf
;

397 
	}
}

403 #i‡!
HAVE_STRSEP


404 *
	$°r£p
(**
°rögp
, c⁄° *
dñim
) {

405 *
ªt
 = *
°rögp
;

406 i‡(
ªt
 =
NULL
) (NULL);

407 i‡((*
°rögp
 = 
	`°Ωbrk
(*°rögp, 
dñim
)Ë!
NULL
) {

408 *((*
°rögp
)++) = '\0';

410 (
ªt
);

411 
	}
}

432 #i‚de‡
HAVE_STRTOK_R


434 
	~<°dio.h
>

446 *
	$°πok_r
(*
s
, c⁄° *
dñim
, **
œ°
)

448 *
•™p
;

449 
c
, 
sc
;

450 *
tok
;

452 i‡(
s
 =
NULL
 && (†*
œ°
) == NULL) {

453  
NULL
;

459 
c⁄t
:

460 
c
 = *
s
++;

461 
•™p
 = (*)
dñim
; (
sc
 = *spanp++) != 0; ) {

462 i‡(
c
 =
sc
) {

463 
c⁄t
;

467 i‡(
c
 == 0) {

468 *
œ°
 = 
NULL
;

469  
NULL
;

471 
tok
 = 
s
 - 1;

478 
c
 = *
s
++;

479 
•™p
 = (*)
dñim
;

481 i‡((
sc
 = *
•™p
++Ë=
c
) {

482 i‡(
c
 == 0) {

483 
s
 = 
NULL
;

486 *
w
 = 
s
 - 1;

487 *
w
 = '\0';

489 *
œ°
 = 
s
;

490  
tok
;

493 
sc
 != 0);

496 
	}
}

499 #i‚de‡
HAVE_TIMEGM


500 
time_t
 
	$timegm
(
tm
 *tm) {

501 
time_t
 
ªt
;

502 *
tz
;

503 
buf„r
[255];

505 
tz
 = 
	`gëív
("TZ");

506 
	`puãnv
("TZ=UTC0");

507 
	`tz£t
();

508 
ªt
 = 
	`mktime
(
tm
);

510 if(
tz
)

511 
	`•rötf
(
buf„r
,"TZ=%s",
tz
);

513 
	`°r˝y
(
buf„r
,"TZ=");

514 
	`puãnv
(
buf„r
);

515 
	`tz£t
();

516  
ªt
;

517 
	}
}

	@compat.h

1 #i‚de‡
_COMPAT_H_


2 
	#_COMPAT_H_


	)

4 #ifde‡
HAVE_CONFIG_H


5 
	~"c⁄fig.h
"

8 #i‡!
HAVE_STRCASESTR


9 *
°rˇ£°r
(* 
hay°ack
, * 
√edÀ
);

12 #i‚de‡
HAVE_STRPTIME


13 *
°Ωtime
(*
buf
, *
fmt
, 
tm
 *tm );

16 #i‡!
HAVE_STRSEP


17 *
°r£p
(**
°rögp
, c⁄° *
dñim
);

20 #i‚de‡
HAVE_STRTOK_R


21 #unde‡
°πok_r


22 *
°πok_r
(*
s
, *
dñim
, **
œ°
);

25 #i‚de‡
HAVE_TIMEGM


26 
time_t
 
timegm
(
tm
 *tm);

	@conf.c

29 #ifde‡
HAVE_CONFIG_H


30 
	~"c⁄fig.h
"

33 
	~<˘y≥.h
>

34 
	~<î∫o.h
>

35 
	~<limôs.h
>

36 
	~<±hªad.h
>

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<°rög.h
>

41 #ifde‡
HAVE_UNISTD_H


42 
	~<uni°d.h
>

45 #ifde‡
HAVE_SYS_PARAM_H


46 
	~<sys/∑øm.h
>

48 
	~<sys/°©.h
>

49 
	~<sys/ty≥s.h
>

51 
	~"dØpd.h
"

52 
	~"c⁄f.h
"

53 
	~"îr.h
"

54 
	~"Œ.h
"

55 
	~"os.h
"

56 
	~"utû.h
"

57 
	~"web£rvî.h
"

58 
	~"xml-Ωc.h
"

60 
	~"io.h
"

62 #i‚de‡
HOST_NAME_MAX


63 
	#HOST_NAME_MAX
 255

	)

66 
	#MAX_REND_LEN
 62

	)

70 
LL_HANDLE
 
	gc⁄f_maö
=
NULL
;

71 
LL_HANDLE
 
	gc⁄f_commíts
=
NULL
;

73 *
	gc⁄f_maö_fûe
 = 
NULL
;

75 
	#CONF_LINEBUFFER
 1024

	)

77 
	#CONF_T_INT
 0

	)

78 
	#CONF_T_STRING
 1

	)

79 
	#CONF_T_EXISTPATH
 2

	)

80 
	#CONF_T_MULTICOMMA
 3

	)

81 
	#CONF_T_MULTIPATH
 4

	)

83 
	s_CONF_ELEMENTS
 {

84 
	mªquúed
;

85 
	mdïªˇãd
;

86 
	mty≥
;

87 *
	m£˘i⁄
;

88 *
	mãrm
;

89 } 
	tCONF_ELEMENTS
;

91 
	s_CONF_MAP
 {

92 *
	mﬁd_£˘i⁄
;

93 *
	mﬁd_key
;

94 *
	m√w_£˘i⁄
;

95 *
	m√w_key
;

96 } 
	tCONF_MAP
;

99 
_c⁄f_vîify
(
LL_HANDLE
 
∂l
);

100 
LL_ITEM
 *
_c⁄f_„tch_ôem
(
LL_HANDLE
 
∂l
, *
£˘i⁄
, *
key
);

101 
_c⁄f_exi°s
(
LL_HANDLE
 
∂l
, *
£˘i⁄
, *
key
);

102 
_c⁄f_wrôe
(
IOHANDLE
 
hfûe
, 
LL
 *
∂l
, 
subÀvñ
, *
∑ª¡
);

103 
CONF_ELEMENTS
 *
_c⁄f_gë_keyöfo
(*
£˘i⁄
, *
key
);

104 
_c⁄f_makedú
(*
∑th
, *
u£r
);

105 
_c⁄f_exi°dú
(*
∑th
);

106 
_c⁄f_xml_dump
(
XMLSTRUCT
 *
pxml
,
LL
 *
∂l
,
subÀvñ
,*
∑ª¡
);

107 
_c⁄f_vîify_ñemít
(*
£˘i⁄
, *
key
, *
vÆue
);

108 
_c⁄f_ªm≠_íåy
(*
ﬁd_£˘i⁄
, *
ﬁd_key
, **
√w_£˘i⁄
, **
√w_key
);

110 
CONF_ELEMENTS
 
	gc⁄f_ñemíts
[] = {

111 { 1, 0, 
CONF_T_STRING
,"general","runas" },

112 { 1, 0, 
CONF_T_EXISTPATH
,"general","web_root" },

113 { 0, 0, 
CONF_T_INT
,"general","port" },

114 { 0, 0, 
CONF_T_STRING
,"general","admin_pw" },

115 { 1, 0, 
CONF_T_MULTIPATH
,"general","mp3_dir" },

116 { 0, 1, 
CONF_T_EXISTPATH
,"general","db_dir" },

117 { 0, 0, 
CONF_T_STRING
,"general","db_type" },

118 { 0, 0, 
CONF_T_EXISTPATH
,"general","db_parms" },

119 { 0, 0, 
CONF_T_INT
,"general","debuglevel" },

120 { 0, 0, 
CONF_T_STRING
,"general","servername" },

121 { 0, 0, 
CONF_T_INT
,"general","rescan_interval" },

122 { 0, 0, 
CONF_T_INT
,"general","always_scan" },

123 { 0, 1, 
CONF_T_INT
,"general","latin1_tags" },

124 { 0, 0, 
CONF_T_INT
,"general","process_m3u" },

125 { 0, 0, 
CONF_T_INT
,"general","scan_type" },

126 { 0, 1, 
CONF_T_INT
,"general","compress" },

127 { 0, 1, 
CONF_T_STRING
,"general","playlist" },

128 { 0, 0, 
CONF_T_STRING
,"general","extensions" },

129 { 0, 0, 
CONF_T_STRING
,"general","interface" },

130 { 0, 0, 
CONF_T_STRING
,"general","ssc_codectypes" },

131 { 0, 0, 
CONF_T_STRING
,"general","ssc_prog" },

132 { 0, 0, 
CONF_T_STRING
,"general","password" },

133 { 0, 0, 
CONF_T_STRING
,"general","never_transcode" },

134 { 0, 0, 
CONF_T_MULTICOMMA
,"general","compdirs" },

135 { 0, 0, 
CONF_T_STRING
,"general","logfile" },

136 { 0, 0, 
CONF_T_INT
,"general","truncate" },

137 { 0, 0, 
CONF_T_EXISTPATH
,"plugins","plugin_dir" },

138 { 0, 0, 
CONF_T_MULTICOMMA
,"plugins","plugins" },

139 { 0, 0, 
CONF_T_INT
,"daap","empty_strings" },

140 { 0, 0, 
CONF_T_INT
,"daap","supports_browse" },

141 { 0, 0, 
CONF_T_INT
,"daap","supports_update" },

142 { 0, 0, 
CONF_T_INT
,"scanning","process_xml" },

143 { 0, 0, 
CONF_T_INT
,"scanning","ignore_appledouble" },

144 { 0, 0, 
CONF_T_INT
,"scanning","ignore_dotfiles" },

145 { 0, 0, 
CONF_T_INT
,"scanning","concat_compilations" },

146 { 0, 0, 
CONF_T_INT
,"scanning","case_sensitive" },

147 { 0, 0, 
CONF_T_INT
,"scanning","follow_symlinks" },

148 { 0, 0, 
CONF_T_INT
,"scanning","skip_first" },

149 { 0, 0, 
CONF_T_STRING
,"scanning","mp3_tag_codepage" },

150 { 0, 0, 
CONF_T_INT
,"scan","correct_order" },

153 { 0, 0, 
CONF_T_INT
,"scanning","process_playlists" },

154 { 0, 0, 
CONF_T_INT
,"scanning","process_itunes" },

155 { 0, 0, 
CONF_T_INT
,"scanning","process_m3u" },

156 { 0, 0, 
CONF_T_INT
,"daap","correct_order" },

157 { 0, 0, 
CONF_T_INT
, 
NULL
, NULL },

160 
CONF_MAP
 
	g_c⁄f_m≠
[] = {

165 { 
NULL
, NULL, NULL, NULL }

172 
	$_c⁄f_ªm≠_íåy
(*
ﬁd_£˘i⁄
, *
ﬁd_key
, **
√w_£˘i⁄
, **
√w_key
) {

173 
CONF_MAP
 *
pm≠
;

175 
pm≠
 = 
_c⁄f_m≠
;

176 
pm≠
->
ﬁd_£˘i⁄
) {

177 if((!
	`°rˇ£cmp
(
ﬁd_£˘i⁄
,
pm≠
->old_section)) &&

178 (!
	`°rˇ£cmp
(
ﬁd_key
,
pm≠
->old_key))) {

180 
	`DPRINTF
(
E_LOG
,
L_CONF
,"Config option %s/%s has "

182 
pm≠
->
ﬁd_£˘i⁄
,pm≠->
ﬁd_key
,

183 
pm≠
->
√w_£˘i⁄
,Öm≠->
√w_key
);

184 *
√w_£˘i⁄
 = 
pm≠
->new_section;

185 *
√w_key
 = 
pm≠
->new_key;

188 
pm≠
++;

191 *
√w_£˘i⁄
 = 
ﬁd_£˘i⁄
;

192 *
√w_key
 = 
ﬁd_key
;

193 
	}
}

203 
	$_c⁄f_makedú
(*
∑th
,*
u£r
) {

204 *
tokí
, *
√xt_tokí
;

205 *
∑thdup
;

206 
∑th_buf„r
[
PATH_MAX
];

207 
ªtvÆ
 = 
FALSE
;

209 
	`DPRINTF
(
E_DBG
,
L_CONF
,"Cª©ög %s\n",
∑th
);

211 
∑thdup
=
	`°rdup
(
∑th
);

212 if(!
∑thdup
) {

213 
	`DPRINTF
(
E_FATAL
,
L_CONF
,"MallocÉrror\n");

216 
√xt_tokí
=
∑thdup
;

217 *
√xt_tokí
 && (*√xt_tokí !
PATHSEP
))

218 
√xt_tokí
++;

219 if(*
√xt_tokí
)

220 
√xt_tokí
++;

222 
	`mem£t
(
∑th_buf„r
,0,(path_buffer));

224 (
tokí
=
	`°r£p
(&
√xt_tokí
,
PATHSEP_STR
))) {

225 if((
	`°æí
(
∑th_buf„r
Ë+ såÀn(
tokí
)Ë< 
PATH_MAX
) {

226 
	`°rˇt
(
∑th_buf„r
,
PATHSEP_STR
);

227 
	`°rˇt
(
∑th_buf„r
,
tokí
);

229 if(!
	`_c⁄f_exi°dú
(
∑th_buf„r
)) {

230 
	`DPRINTF
(
E_DBG
,
L_CONF
,"Makög %s\n",
∑th_buf„r
);

231 if((
	`mkdú
(
∑th_buf„r
,0700)Ë&& (
î∫o
 !
EEXIST
)) {

232 
	`‰ì
(
∑thdup
);

233 
	`DPRINTF
(
E_LOG
,
L_CONF
,"CouldÇot make dirctory %s: %s\n",

234 
∑th_buf„r
,
	`°ªº‹
(
î∫o
));

235  
FALSE
;

237 
	`os_chown
(
∑th_buf„r
,
u£r
);

239 
ªtvÆ
 = 
TRUE
;

243 
	`‰ì
(
∑thdup
);

244  
ªtvÆ
;

245 
	}
}

253 
	$_c⁄f_exi°dú
(*
∑th
) {

254 
°©
 
sb
;

256 
	`DPRINTF
(
E_DBG
,
L_CONF
,"CheckögÉxi°í˚ o‡%s\n",
∑th
);

258 if(
	`os_°©
(
∑th
,&
sb
)) {

259  
FALSE
;

262 if(
sb
.
°_mode
 & 
S_IFDIR
)

263  
TRUE
;

265  
FALSE
;

266 
	}
}

278 
CONF_ELEMENTS
 *
	$_c⁄f_gë_keyöfo
(*
£˘i⁄
, *
key
) {

279 
CONF_ELEMENTS
 *
pcuºít
;

280 
found
=0;

282 
pcuºít
 = &
c⁄f_ñemíts
[0];

283 
pcuºít
->
£˘i⁄
 &&Öcuºít->
ãrm
) {

284 if((
	`°rˇ£cmp
(
£˘i⁄
,
pcuºít
->section) != 0) ||

285 (
	`°rˇ£cmp
(
key
,
pcuºít
->
ãrm
) != 0)) {

286 
pcuºít
++;

288 
found
 = 1;

293  
found
 ? 
pcuºít
 : 
NULL
;

294 
	}
}

305 
LL_ITEM
 *
	$_c⁄f_„tch_ôem
(
LL_HANDLE
 
∂l
, *
£˘i⁄
, *
key
) {

306 
LL_ITEM
 *
p£˘i⁄
;

307 
LL_ITEM
 *
pôem
;

309 if(!
∂l
)

310  
NULL
;

312 if(!(
p£˘i⁄
 = 
	`Œ_„tch_ôem
(
∂l
,
£˘i⁄
)))

313  
NULL
;

315 if(
p£˘i⁄
->
ty≥
 !
LL_TYPE_LL
)

316  
NULL
;

318 if(!(
pôem
 = 
	`Œ_„tch_ôem
(
p£˘i⁄
->
vÆue
.
as_Œ
,
key
)))

319  
NULL
;

321  
pôem
;

322 
	}
}

332 
	$_c⁄f_exi°s
(
LL_HANDLE
 
∂l
, *
£˘i⁄
, *
key
) {

333 if(!
	`_c⁄f_„tch_ôem
(
∂l
,
£˘i⁄
,
key
))

334  
FALSE
;

336  
TRUE
;

337 
	}
}

350 
	$_c⁄f_vîify_ñemít
(*
£˘i⁄
, *
key
, *
vÆue
) {

351 
CONF_ELEMENTS
 *
p˚
;

352 
ödex
;

353 **
vÆuóºay
;

355 
p˚
 = 
	`_c⁄f_gë_keyöfo
(
£˘i⁄
, 
key
);

356 if(!
p˚
) {

357  
CONF_E_BADELEMENT
;

360 if(
	`°rcmp
(
vÆue
,"") == 0) {

361 if(!
p˚
->
ªquúed
) {

362  
CONF_E_SUCCESS
;

366 
p˚
->
ty≥
) {

367 
CONF_T_MULTICOMMA
:

368 
CONF_T_STRING
:

369  
CONF_E_SUCCESS
;

372 
CONF_T_INT
:

373 if((
	`©oi
(
vÆue
Ë|| (
	`°rcmp
(value,"0")==0)))

374  
CONF_E_SUCCESS
;

375  
CONF_E_INTEXPECTED
;

378 
CONF_T_MULTIPATH
:

379 if(
	`utû_•lô
(
vÆue
,",",&
vÆuóºay
) >= 0) {

380 
ödex
 = 0;

381 
vÆuóºay
[
ödex
]) {

382 if(!
	`_c⁄f_exi°dú
(
vÆuóºay
[
ödex
])) {

383 
	`utû_di•o£_•lô
(
vÆuóºay
);

384  
CONF_E_PATHEXPECTED
;

386 
ödex
++;

388 
	`utû_di•o£_•lô
(
vÆuóºay
);

392 
CONF_T_EXISTPATH
:

393 if(!
	`_c⁄f_exi°dú
(
vÆue
))

394  
CONF_E_PATHEXPECTED
;

395  
CONF_E_SUCCESS
;

399 
	`DPRINTF
(
E_LOG
,
L_CONF
,"Bad c⁄figÅy≥: %d\n",
p˚
->
ty≥
);

404  
CONF_E_SUCCESS
;

405 
	}
}

415 
	$_c⁄f_vîify
(
LL_HANDLE
 
∂l
) {

416 
LL_ITEM
 *
pi
 = 
NULL
;

417 
LL_ITEM
 *
±emp
 = 
NULL
;

418 
CONF_ELEMENTS
 *
p˚
;

419 
is_vÆid
=
TRUE
;

420 
ªsﬁved_∑th
[
PATH_MAX
];

421 *
u£r
;

425 
p˚
 = &
c⁄f_ñemíts
[0];

426 
p˚
->
£˘i⁄
) {

427 if(
p˚
->
ªquúed
) {

428 if(!
	`_c⁄f_exi°s
(
∂l
,
p˚
->
£˘i⁄
,Ö˚->
ãrm
)) {

429 
	`DPRINTF
(
E_LOG
,
L_CONF
,"Missing configurationÉntry "

431 
p˚
->
£˘i⁄
,Ö˚->
ãrm
);

432 
is_vÆid
=
FALSE
;

435 if(
p˚
->
dïªˇãd
) {

436 if(
	`_c⁄f_exi°s
(
∂l
,
p˚
->
£˘i⁄
,p˚->
ãrm
)) {

437 
	`DPRINTF
(
E_LOG
,
L_CONF
,"ConfigÉntry %s/%s is deprecated. Please "

439 
p˚
->
£˘i⁄
,Ö˚->
ãrm
);

442 if(
p˚
->
ty≥
 =
CONF_T_EXISTPATH
) {

444 
pi
 = 
	`_c⁄f_„tch_ôem
(
∂l
,
p˚
->
£˘i⁄
,Ö˚->
ãrm
);

445 if(
pi
) {

446 
	`mem£t
(
ªsﬁved_∑th
,0,(resolved_path));

447 if(
pi
->
vÆue
.
as_°rög
) {

448 
	`DPRINTF
(
E_SPAM
,
L_CONF
,"Found %s/%sás %s... checking\n",

449 
p˚
->
£˘i⁄
,Ö˚->
ãrm
, 
pi
->
vÆue
.
as_°rög
);

452 if(!
	`_c⁄f_exi°dú
(
pi
->
vÆue
.
as_°rög
)) {

453 
u£r
 = "nobody";

454 
±emp
 = 
	`_c⁄f_„tch_ôem
(
∂l
, "general", "runas");

455 if(
±emp
) {

456 
u£r
 = 
±emp
->
vÆue
.
as_°rög
;

459 if(!
	`_c⁄f_makedú
(
pi
->
vÆue
.
as_°rög
,
u£r
)) {

460 
is_vÆid
=0;

461 
	`DPRINTF
(
E_LOG
,
L_CONF
,"Can't makeÖath %s, invalid config.\n",

462 
ªsﬁved_∑th
);

466 if(
	`_c⁄f_exi°dú
(
pi
->
vÆue
.
as_°rög
)) {

467 
	`ªÆ∑th
(
pi
->
vÆue
.
as_°rög
,
ªsﬁved_∑th
);

468 
	`‰ì
(
pi
->
vÆue
.
as_°rög
);

469 
pi
->
vÆue
.
as_°rög
 = 
	`°rdup
(
ªsﬁved_∑th
);

471 
	`DPRINTF
(
E_SPAM
,
L_CONF
,"ResﬁvedÅÿ%s\n",
ªsﬁved_∑th
);

476 
p˚
++;

482  
is_vÆid
;

483 
	}
}

489 
	$_c⁄f_≠∂y_ñemít
(*
£˘i⁄
, *
key
, *
cﬁd
, *
˙ew
) {

490 if((
	`°rcmp
(
£˘i⁄
,"gíîÆ")==0Ë&& (°rcmp(
key
,"logfile")==0)) {

492 if((
˙ew
Ë&& 
	`°æí
(cnew)) {

493 
	`îr_£éogfûe
(
˙ew
);

494 
	`îr_£tde°
(
	`îr_gëde°
(Ë| 
LOGDEST_LOGFILE
);

496 
	`îr_£tde°
(
	`îr_gëde°
(Ë& ~
LOGDEST_LOGFILE
);

500 if((
	`°rcmp
(
£˘i⁄
,"gíîÆ")==0Ë&& (°rcmp(
key
,"debuglevel")==0)) {

502 
	`îr_£éevñ
(
	`©oi
(
˙ew
));

505 if((
	`°rcmp
(
£˘i⁄
,"gíîÆ")==0Ë&& (°rcmp(
key
,"truncate")==0)) {

506 
	`îr_£ârunˇã
(
	`©oi
(
˙ew
));

508 
	}
}

516 
	$_c⁄f_≠∂y
(
LL_HANDLE
 
∂l
) {

517 
LL_ITEM
 *
p£˘i⁄
;

518 
LL_ITEM
 *
pôem
, *
pﬁdôem
;

519 *
ﬁdvÆue
;

520 *
√wvÆue
;

523 
p£˘i⁄
 = 
NULL
;

524 (
p£˘i⁄
=
	`Œ_gë_√xt
(
∂l
,Ösection))) {

526 
pôem
 = 
NULL
;

527 (
pôem
=
	`Œ_gë_√xt
(
p£˘i⁄
->
vÆue
.
as_Œ
,pitem))) {

528 if(
pôem
->
ty≥
 =
LL_TYPE_STRING
) {

529 
√wvÆue
 = 
pôem
->
vÆue
.
as_°rög
;

530 
pﬁdôem
 = 
	`_c⁄f_„tch_ôem
(
c⁄f_maö
,

531 
p£˘i⁄
->
key
,

532 
pôem
->
key
);

533 
ﬁdvÆue
 = 
NULL
;

534 if(
pﬁdôem
)

535 
ﬁdvÆue
 = 
pﬁdôem
->
vÆue
.
as_°rög
;

537 
	`_c⁄f_≠∂y_ñemít
(
p£˘i⁄
->
key
, 
pôem
->key,

538 
ﬁdvÆue
, 
√wvÆue
);

544 
p£˘i⁄
 = 
NULL
;

545 (
p£˘i⁄
=
	`Œ_gë_√xt
(
c⁄f_maö
,Ösection))) {

547 
pôem
 = 
NULL
;

548 (
pôem
=
	`Œ_gë_√xt
(
p£˘i⁄
->
vÆue
.
as_Œ
,pitem))) {

549 if(
pôem
->
ty≥
 =
LL_TYPE_STRING
) {

550 
ﬁdvÆue
 = 
pôem
->
vÆue
.
as_°rög
;

551 if(!
	`_c⁄f_„tch_ôem
(
∂l
,
p£˘i⁄
->
key
, 
pôem
->key)) {

552 
	`_c⁄f_≠∂y_ñemít
(
p£˘i⁄
->
key
, 
pôem
->key,

553 
ﬁdvÆue
,
NULL
);

560 
	}
}

568 
	$c⁄f_ªlﬂd
() {

569  
	`c⁄f_ªad
(
c⁄f_maö_fûe
);

570 
	}
}

578 
	$c⁄f_ªad
(*
fûe
) {

579 
îr
;

580 
LL_HANDLE
 
∂ ew
, 
∂…emp
, 
∂lcuºít
, 
∂lcommít
;

581 
LL_ITEM
 *
∂i
;

582 
löebuf„r
[
CONF_LINEBUFFER
+1];

583 
keybuf„r
[256];

584 
c⁄f_fûe
[
PATH_MAX
+1];

585 *
commít
, *
ãrm
, *
vÆue
, *
dñim
;

586 *
£˘i⁄_«me
=
NULL
;

587 *
¥ev_commíts
=
NULL
;

588 
tŸÆ_commít_Àngth
=
CONF_LINEBUFFER
;

589 
cuºít_commít_Àngth
=0;

590 
com∑t_mode
=1;

591 
w¨√d_åunˇã
=0;

592 
löe
=0;

593 
ws
=0;

594 
CONF_ELEMENTS
 *
p˚
;

595 
key_ty≥
;

596 **
vÆuóºay
;

597 
ödex
;

598 *
ãmp
;

599 
IOHANDLE
 
hc⁄fig
;

600 
uöt32_t
 
Àn
;

602 *
ª∂a˚d_£˘i⁄
 = 
NULL
;

603 *
ª∂a˚d_key
 = 
NULL
;

605 if(
c⁄f_maö_fûe
) {

606 
	`c⁄f_˛o£
();

607 
	`‰ì
(
c⁄f_maö_fûe
);

610 
	`ªÆ∑th
(
fûe
,
c⁄f_fûe
);

611 
c⁄f_maö_fûe
 = 
	`°rdup
(
c⁄f_fûe
);

613 
hc⁄fig
 = 
	`io_√w
();

614 if(!
hc⁄fig
)

615 
	`DPRINTF
(
E_FATAL
,
L_CONF
,"MallocÉror in io_new()\n");

617 
	`DPRINTF
(
E_DBG
,
L_CONF
,"Lﬂdög c⁄fig fûê%s\n",
c⁄f_fûe
);

618 if(!
	`io_›í
(
hc⁄fig
,"fûe://%U?ascii=1",
c⁄f_fûe
)) {

619 
	`DPRINTF
(
E_LOG
,
L_MISC
,"Eº‹ o≥nög c⁄fig fûe: %s\n",
	`io_îr°r
(
hc⁄fig
));

620 
	`io_di•o£
(
hc⁄fig
);

621  
CONF_E_FOPEN
;

623 
	`DPRINTF
(
E_DBG
,
L_CONF
,"Config file open\n");

625 
¥ev_commíts
 = (*)
	`mÆloc
(
tŸÆ_commít_Àngth
);

626 if(!
¥ev_commíts
)

627 
	`DPRINTF
(
E_FATAL
,
L_CONF
,"MallocÉrror\n");

628 
¥ev_commíts
[0] = '\0';

630 if((
îr
=
	`Œ_¸óã
(&
∂ ew
)Ë!
LL_E_SUCCESS
) {

631 
	`DPRINTF
(
E_LOG
,
L_CONF
,"Eº‹ cª©ögÜökedÜi°: %d\n",
îr
);

632 
	`io_˛o£
(
hc⁄fig
);

633 
	`io_di•o£
(
hc⁄fig
);

635  
CONF_E_UNKNOWN
;

638 
	`Œ_¸óã
(&
∂lcommít
);

640 
commít
 = 
NULL
;

641 
∂lcuºít
 = 
NULL
;

648 
Àn
 = (
löebuf„r
);

649 
	`io_ªadlöe
(
hc⁄fig
,(*)
löebuf„r
,&
Àn
) &&Üen) {

650 
löe
++;

651 
löebuf„r
[
CONF_LINEBUFFER
] = '\0';

652 
ws
=0;

654 
commít
=
	`°rchr
(
löebuf„r
,'#');

655 if(
commít
) {

656 *
commít
 = '\0';

657 
commít
++;

660 
	`°æí
(
löebuf„r
) &&

661 (
	`°rchr
("\n\∏",
löebuf„r
[
	`°æí
(linebuffer)-1])))

662 
löebuf„r
[
	`°æí
(linebuffer)-1] = '\0';

664 if(
löebuf„r
[0] == '[') {

666 
com∑t_mode
=0;

667 
ãrm
=&
löebuf„r
[1];

668 
vÆue
 = 
	`°rchr
(
ãrm
,']');

671 
ãmp
 = 
ãrm
;

672 *
ãmp
) {

673 if(*
ãmp
 == ' ')

674 *
ãmp
 = '_';

675 
ãmp
++;

678 if(!
vÆue
) {

679 
	`Œ_de°roy
(
∂ ew
);

680 
	`io_˛o£
(
hc⁄fig
);

681 
	`io_di•o£
(
hc⁄fig
);

682  
CONF_E_BADHEADER
;

684 *
vÆue
 = '\0';

686 if((
îr
 = 
	`Œ_¸óã
(&
∂…emp
)Ë!
LL_E_SUCCESS
) {

687 
	`Œ_de°roy
(
∂ ew
);

688 
	`io_˛o£
(
hc⁄fig
);

689 
	`io_di•o£
(
hc⁄fig
);

690  
CONF_E_UNKNOWN
;

693 
	`Œ_add_Œ
(
∂ ew
,
ãrm
,
∂…emp
);

696 if(
£˘i⁄_«me
)

697 
	`‰ì
(
£˘i⁄_«me
);

698 
£˘i⁄_«me
 = 
	`°rdup
(
ãrm
);

701 if(
¥ev_commíts
[0] != '\0') {

703 
	`¢¥ötf
(
keybuf„r
,(keybuf„r),"¥e_%s",
£˘i⁄_«me
);

704 
	`Œ_add_°rög
(
∂lcommít
,
keybuf„r
,
¥ev_commíts
);

705 
¥ev_commíts
[0] = '\0';

706 
cuºít_commít_Àngth
=0;

708 if(
commít
) {

710 
	`¢¥ötf
(
keybuf„r
,(keybuf„r),"ö_%s",
£˘i⁄_«me
);

711 
	`Œ_add_°rög
(
∂lcommít
,
keybuf„r
,
commít
);

712 
¥ev_commíts
[0] = '\0';

713 
cuºít_commít_Àngth
=0;

714 
commít
 = 
NULL
;

718 
ãrm
=&
löebuf„r
[0];

720 (*
ãrm
=='\t') || (*term==' '))

721 
ãrm
++;

723 
vÆue
=
ãrm
;

725 if(
com∑t_mode
) {

726 
dñim
="\t ";

728 
dñim
="=";

731 
	`°r£p
(&
vÆue
,
dñim
);

732 if((
vÆue
Ë&& (
ãrm
Ë&& (
	`°æí
(term))) {

733 (
	`°æí
(
ãrm
Ë&& (
	`°rchr
("\t ",term[strlen(term)-1]))))

734 
ãrm
[
	`°æí
(term)-1] = '\0';

735 
	`°æí
(
vÆue
Ë&& (
	`°rchr
("\t ",*value)))

736 
vÆue
++;

737 (
	`°æí
(
vÆue
Ë&& (
	`°rchr
("\t ",value[strlen(value)-1]))))

738 
vÆue
[
	`°æí
(value)-1] = '\0';

741 
ãmp
 = 
ãrm
;

742 *
ãmp
) {

743 if(*
ãmp
 == ' ')

744 *
ãmp
 = '_';

745 
ãmp
++;

748 if(!
£˘i⁄_«me
) {

750 if((
îr
=
	`Œ_¸óã
(&
∂…emp
)Ë!
LL_E_SUCCESS
) {

751 
	`DPRINTF
(
E_LOG
,
L_CONF
,"Eº‹ cª©ögÜi°: %d\n",
îr
);

752 
	`Œ_de°roy
(
∂ ew
);

753 
	`io_˛o£
(
hc⁄fig
);

754 
	`io_di•o£
(
hc⁄fig
);

755  
CONF_E_UNKNOWN
;

757 
	`Œ_add_Œ
(
∂ ew
,"gíîÆ",
∂…emp
);

759 if(
£˘i⁄_«me
)

760 
	`‰ì
(
£˘i⁄_«me
);

761 
£˘i⁄_«me
 = 
	`°rdup
("general");

764 if(
¥ev_commíts
[0] != '\0') {

766 
	`Œ_add_°rög
(
∂lcommít
,"¥e_gíîÆ",
¥ev_commíts
);

767 
¥ev_commíts
[0] = '\0';

768 
cuºít_commít_Àngth
=0;

774 
	`_c⁄f_ªm≠_íåy
(
£˘i⁄_«me
, 
ãrm
, &
ª∂a˚d_£˘i⁄
, &
ª∂a˚d_key
);

775 
	`DPRINTF
(
E_DBG
,
L_CONF
,"GŸ %s/%s, c⁄vîàtÿ%s/%†(%s)\n",
£˘i⁄_«me
,

776 
ãrm
, 
ª∂a˚d_£˘i⁄
, 
ª∂a˚d_key
, 
vÆue
);

778 
∂i
 = 
	`Œ_„tch_ôem
(
∂ ew
,
ª∂a˚d_£˘i⁄
);

779 if(
∂i
) {

780 
	`DPRINTF
(
E_DBG
,
L_CONF
,"FoundÉxisting section\n");

781 
∂lcuºít
 = 
∂i
->
vÆue
.
as_Œ
;

783 
	`DPRINTF
(
E_DBG
,
L_CONF
,"creatingÇew section\n");

784 if((
îr
 = 
	`Œ_¸óã
(&
∂lcuºít
)Ë!
LL_E_SUCCESS
) {

785 
	`Œ_de°roy
(
∂ ew
);

786 
	`DPRINTF
(
E_LOG
,
L_CONF
,"Eº‹ cª©ögÜökedÜi°: %d\n",
îr
);

787 
	`io_˛o£
(
hc⁄fig
);

788 
	`io_di•o£
(
hc⁄fig
);

789  
CONF_E_UNKNOWN
;

791 
	`Œ_add_Œ
(
∂ ew
,
ª∂a˚d_£˘i⁄
,
∂lcuºít
);

793 
p˚
 = 
	`_c⁄f_gë_keyöfo
(
ª∂a˚d_£˘i⁄
, 
ª∂a˚d_key
);

795 
key_ty≥
 = 
CONF_T_STRING
;

796 if(
p˚
)

797 
key_ty≥
 = 
p˚
->
ty≥
;

799 
key_ty≥
) {

800 
CONF_T_MULTIPATH
:

801 
CONF_T_MULTICOMMA
:

803 
∂i
 = 
	`Œ_„tch_ôem
(
∂lcuºít
,
ª∂a˚d_key
);

804 if(!
∂i
) {

805 if((
	`Œ_¸óã
(&
∂…emp
Ë!
LL_E_SUCCESS
)) {

806 
	`DPRINTF
(
E_FATAL
,
L_CONF
,"CouldÇot create "

809 
	`Œ_add_Œ
(
∂lcuºít
,
ª∂a˚d_key
,
∂…emp
);

810 
	`Œ_£t_Êags
(
∂…emp
,0);

812 
∂…emp
 = 
∂i
->
vÆue
.
as_Œ
;

816 if(
	`utû_•lô
(
vÆue
,",",&
vÆuóºay
) >= 0) {

817 
ödex
 = 0;

818 
vÆuóºay
[
ödex
]) {

819 
	`Œ_add_°rög
(
∂…emp
,
ª∂a˚d_key
,
vÆuóºay
[
ödex
]);

820 
ödex
++;

822 
	`utû_di•o£_•lô
(
vÆuóºay
);

824 
	`Œ_add_°rög
(
∂…emp
,
ª∂a˚d_key
,
vÆue
);

827 
CONF_T_INT
:

828 
CONF_T_STRING
:

829 
CONF_T_EXISTPATH
:

831 
	`Œ_add_°rög
(
∂lcuºít
,
ª∂a˚d_key
,
vÆue
);

836 if(
commít
) {

838 
	`¢¥ötf
(
keybuf„r
,(keybuffer),"in_%s_%s",

839 
ª∂a˚d_£˘i⁄
,
ª∂a˚d_key
);

840 
	`Œ_add_°rög
(
∂lcommít
,
keybuf„r
,
commít
);

841 
commít
 = 
NULL
;

844 if(
¥ev_commíts
[0] != '\0') {

846 
	`¢¥ötf
(
keybuf„r
,(keybuffer),"pre_%s_%s",

847 
ª∂a˚d_£˘i⁄
, 
ª∂a˚d_key
);

848 
	`Œ_add_°rög
(
∂lcommít
,
keybuf„r
,
¥ev_commíts
);

849 
¥ev_commíts
[0] = '\0';

850 
cuºít_commít_Àngth
=0;

853 
ws
=1;

856 if(((
ãrm
Ë&& (
	`°æí
—îm))Ë&& (!
vÆue
)) {

857 
	`DPRINTF
(
E_LOG
,
L_CONF
,"Eº‹ i¿c⁄fig fûê⁄Üöê%d\n",
löe
);

858 
	`DPRINTF
(
E_LOG
,
L_CONF
,"key: %s, vÆue: %s\n",
ª∂a˚d_key
,
vÆue
);

859 
	`Œ_de°roy
(
∂ ew
);

860  
CONF_E_PARSE
;

864 if((
commít
)||(
ws
)) {

865 if(!
commít
)

866 
commít
 = "";

869 (
cuºít_commít_Àngth
 + ()
	`°æí
(
commít
) + 2 >=

870 
tŸÆ_commít_Àngth
) && (total_comment_length < 32768)) {

871 
tŸÆ_commít_Àngth
 *= 2;

872 
	`DPRINTF
(
E_DBG
,
L_CONF
,"ExpandingÖrecommentsÅo %d\n",

873 
tŸÆ_commít_Àngth
);

874 
¥ev_commíts
=
	`ªÆloc
’ªv_commíts,
tŸÆ_commít_Àngth
);

875 if(!
¥ev_commíts
)

876 
	`DPRINTF
(
E_FATAL
,
L_CONF
,"MallocÉrror\n");

879 if(
cuºít_commít_Àngth
 + ()
	`°æí
(
commít
)+2 >=

880 
tŸÆ_commít_Àngth
) {

881 if(!
w¨√d_åunˇã
)

882 
	`DPRINTF
(
E_LOG
,
L_CONF
,"Truncating comments in config\n");

883 
w¨√d_åunˇã
=1;

885 if(
	`°æí
(
commít
)) {

886 
	`°rˇt
(
¥ev_commíts
,"#");

887 
	`°rˇt
(
¥ev_commíts
,
commít
);

888 
cuºít_commít_Àngth
 +((Ë
	`°æí
(
commít
) + 1);

890 
	`°rˇt
(
¥ev_commíts
,"\n");

891 
cuºít_commít_Àngth
 += 2;

895 
Àn
 = (
löebuf„r
);

898 if(
£˘i⁄_«me
) {

899 
	`‰ì
(
£˘i⁄_«me
);

900 
£˘i⁄_«me
 = 
NULL
;

903 if(
¥ev_commíts
) {

904 if(
¥ev_commíts
[0] != '\0') {

905 
	`Œ_add_°rög
(
∂lcommít
,"íd",
¥ev_commíts
);

907 
	`‰ì
(
¥ev_commíts
);

908 
¥ev_commíts
 = 
NULL
;

911 
	`io_˛o£
(
hc⁄fig
);

912 
	`io_di•o£
(
hc⁄fig
);

915 if(
	`_c⁄f_vîify
(
∂ ew
)) {

916 
	`DPRINTF
(
E_INF
,
L_CONF
,"LoadingÇew config file.\n");

917 
	`utû_muãx_lock
(
l_c⁄f
);

918 
	`_c⁄f_≠∂y
(
∂ ew
);

919 if(
c⁄f_maö
) {

920 
	`Œ_de°roy
(
c⁄f_maö
);

923 if(
c⁄f_commíts
) {

924 
	`Œ_de°roy
(
c⁄f_commíts
);

927 
c⁄f_maö
 = 
∂ ew
;

928 
c⁄f_commíts
 = 
∂lcommít
;

929 
	`utû_muãx_u∆ock
(
l_c⁄f
);

931 
	`Œ_de°roy
(
∂ ew
);

932 
	`Œ_de°roy
(
∂lcommít
);

933 
	`DPRINTF
(
E_LOG
,
L_CONF
,"CouldÇot validate config file. Ignoring\n");

934  
CONF_E_BADCONFIG
;

937  
CONF_E_SUCCESS
;

938 
	}
}

943 
	$c⁄f_˛o£
() {

944 if(
c⁄f_maö
) {

945 
	`Œ_de°roy
(
c⁄f_maö
);

946 
c⁄f_maö
 = 
NULL
;

949 if(
c⁄f_commíts
) {

950 
	`Œ_de°roy
(
c⁄f_commíts
);

951 
c⁄f_commíts
 = 
NULL
;

954 if(
c⁄f_maö_fûe
) {

955 
	`‰ì
(
c⁄f_maö_fûe
);

956 
c⁄f_maö_fûe
 = 
NULL
;

959  
CONF_E_SUCCESS
;

960 
	}
}

971 
	$c⁄f_gë_öt
(*
£˘i⁄
, *
key
, 
dÊt
) {

972 
LL_ITEM
 *
pôem
;

973 
ªtvÆ
;

975 
	`utû_muãx_lock
(
l_c⁄f
);

976 
pôem
 = 
	`_c⁄f_„tch_ôem
(
c⁄f_maö
,
£˘i⁄
,
key
);

977 if((!
pôem
Ë|| (pôem->
ty≥
 !
LL_TYPE_STRING
)) {

978 
ªtvÆ
 = 
dÊt
;

980 
ªtvÆ
 = 
	`©oi
(
pôem
->
vÆue
.
as_°rög
);

982 
	`utû_muãx_u∆ock
(
l_c⁄f
);

984  
ªtvÆ
;

985 
	}
}

998 
	$c⁄f_gë_°rög
(*
£˘i⁄
, *
key
, *
dÊt
, *
out
, *
size
) {

999 
LL_ITEM
 *
pôem
;

1000 *
ªsu…
;

1001 
Àn
;

1003 
	`utû_muãx_lock
(
l_c⁄f
);

1004 
pôem
 = 
	`_c⁄f_„tch_ôem
(
c⁄f_maö
,
£˘i⁄
,
key
);

1005 if((!
pôem
Ë|| (pôem->
ty≥
 !
LL_TYPE_STRING
)) {

1006 
ªsu…
 = 
dÊt
;

1008 
ªsu…
 = 
pôem
->
vÆue
.
as_°rög
;

1011 if(!
ªsu…
) {

1012 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1013  
CONF_E_NOTFOUND
;

1016 
Àn
 = (Ë
	`°æí
(
ªsu…
) + 1;

1018 if(
Àn
 <*
size
) {

1019 *
size
 = 
Àn
;

1020 
	`°r˝y
(
out
,
ªsu…
);

1022 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1023 *
size
 = 
Àn
;

1024  
CONF_E_OVERFLOW
;

1027 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1028  
CONF_E_SUCCESS
;

1029 
	}
}

1040 *
	$c⁄f_Æloc_°rög
(*
£˘i⁄
, *
key
, *
dÊt
) {

1041 
LL_ITEM
 *
pôem
;

1042 *
ªsu…
;

1043 *
ªtvÆ
;

1045 
	`utû_muãx_lock
(
l_c⁄f
);

1046 
pôem
 = 
	`_c⁄f_„tch_ôem
(
c⁄f_maö
,
£˘i⁄
,
key
);

1047 if((!
pôem
Ë|| (pôem->
ty≥
 !
LL_TYPE_STRING
)) {

1048 
ªsu…
 = 
dÊt
;

1050 
ªsu…
 = 
pôem
->
vÆue
.
as_°rög
;

1053 if(
ªsu…
 =
NULL
) {

1054 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1055  
NULL
;

1058 
ªtvÆ
 = 
	`°rdup
(
ªsu…
);

1060 if(!
ªtvÆ
) {

1061 
	`DPRINTF
(
E_FATAL
,
L_CONF
,"MallocÉrror in conf_alloc_string\n");

1063 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1064  
ªtvÆ
;

1065 
	}
}

1078 
	$c⁄f_£t_öt
(*
£˘i⁄
, *
key
, 
vÆue
, 
vîify
) {

1079 
buf„r
[40];

1080 
	`¢¥ötf
(
buf„r
,(buf„r),"%d",
vÆue
);

1082  
	`c⁄f_£t_°rög
(
£˘i⁄
, 
key
, 
buf„r
, 
vîify
);

1083 
	}
}

1093 
	$c⁄f_£t_°rög
(*
£˘i⁄
, *
key
, *
vÆue
, 
vîify
) {

1094 
LL_ITEM
 *
pôem
;

1095 
LL_ITEM
 *
p£˘i⁄
;

1096 
LL
 *
£˘i⁄_Œ
;

1097 
LL
 *
ãmp_Œ
;

1098 
CONF_ELEMENTS
 *
p˚
;

1099 
key_ty≥
 = 
CONF_T_STRING
;

1100 **
vÆuóºay
;

1101 
ödex
;

1102 
îr
;

1103 *
ﬁdvÆue
=
NULL
;

1104 
LL_ITEM
 *
pﬁdôem
;

1106 
	`utû_muãx_lock
(
l_c⁄f
);

1109 
îr
=
	`_c⁄f_vîify_ñemít
(
£˘i⁄
,
key
,
vÆue
);

1110 if(
îr
 !
CONF_E_SUCCESS
) {

1111 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1112 
	`DPRINTF
(
E_DBG
,
L_CONF
,"Couldn'àvÆid©ê%†%s\n",
key
,
vÆue
);

1113  
îr
;

1116 if(
vîify
) {

1117 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1118  
CONF_E_SUCCESS
;

1121 
p˚
 = 
	`_c⁄f_gë_keyöfo
(
£˘i⁄
,
key
);

1122 if(
p˚
)

1123 
key_ty≥
 = 
p˚
->
ty≥
;

1126 if((
key_ty≥
 !
CONF_T_MULTICOMMA
Ë&& (key_ty≥ !
CONF_T_MULTIPATH
)) {

1128 
pﬁdôem
 = 
	`_c⁄f_„tch_ôem
(
c⁄f_maö
,
£˘i⁄
,
key
);

1129 if(
pﬁdôem
)

1130 
ﬁdvÆue
 = 
pﬁdôem
->
vÆue
.
as_°rög
;

1131 
	`_c⁄f_≠∂y_ñemít
(
£˘i⁄
,
key
,
ﬁdvÆue
,
vÆue
);

1134 if(
	`°rcmp
(
vÆue
,"") == 0) {

1136 
pôem
 = 
	`Œ_„tch_ôem
(
c⁄f_maö
,
£˘i⁄
);

1137 if(!
pôem
) {

1138 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1139  
CONF_E_SUCCESS
;

1142 
£˘i⁄_Œ
 = 
pôem
->
vÆue
.
as_Œ
;

1143 if(!
£˘i⁄_Œ
) {

1144 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1145  
CONF_E_SUCCESS
;

1149 
	`Œ_dñ_ôem
(
£˘i⁄_Œ
,
key
);

1150 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1151  
CONF_E_SUCCESS
;

1154 
pôem
 = 
	`_c⁄f_„tch_ôem
(
c⁄f_maö
,
£˘i⁄
,
key
);

1155 if(!
pôem
) {

1157 if(!(
p£˘i⁄
 = 
	`Œ_„tch_ôem
(
c⁄f_maö
,
£˘i⁄
))) {

1159 if((
îr
 = 
	`Œ_¸óã
(&
£˘i⁄_Œ
)Ë!
LL_E_SUCCESS
) {

1160 
	`DPRINTF
(
E_LOG
,
L_CONF
,"CouldÇŸ cª©êlökedÜi°: %d\n",
îr
);

1161 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1162  
CONF_E_UNKNOWN
;

1164 if((
îr
=
	`Œ_add_Œ
(
c⁄f_maö
,
£˘i⁄
,
£˘i⁄_Œ
)Ë!
LL_E_SUCCESS
) {

1165 
	`DPRINTF
(
E_LOG
,
L_CONF
,"Eº‹ in£πögÇew subkey: %d\n",
îr
);

1166 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1167  
CONF_E_UNKNOWN
;

1170 
£˘i⁄_Œ
 = 
p£˘i⁄
->
vÆue
.
as_Œ
;

1173 if((
key_ty≥
 =
CONF_T_MULTICOMMA
Ë|| (key_ty≥ =
CONF_T_MULTIPATH
)) {

1174 if((
îr
 = 
	`Œ_¸óã
(&
ãmp_Œ
)Ë!
LL_E_SUCCESS
) {

1175 
	`DPRINTF
(
E_FATAL
,
L_CONF
,"conf_set_string: couldÇot createÜl\n");

1177 
	`Œ_add_Œ
(
£˘i⁄_Œ
,
key
,
ãmp_Œ
);

1178 
	`Œ_£t_Êags
(
ãmp_Œ
,0);

1179 if(
	`utû_•lô
(
vÆue
,",",&
vÆuóºay
) >= 0) {

1180 
ödex
 = 0;

1181 
vÆuóºay
[
ödex
]) {

1182 
	`Œ_add_°rög
(
ãmp_Œ
,
key
,
vÆuóºay
[
ödex
]);

1183 
ödex
++;

1185 
	`utû_di•o£_•lô
(
vÆuóºay
);

1188 if((
îr
 = 
	`Œ_add_°rög
(
£˘i⁄_Œ
,
key
,
vÆue
)Ë!
LL_E_SUCCESS
) {

1189 
	`DPRINTF
(
E_LOG
,
L_CONF
,"Error in conf_set_string: "

1190 "(%s/%s)\n",
£˘i⁄
,
key
);

1191 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1192  
CONF_E_UNKNOWN
;

1197 if((
key_ty≥
 =
CONF_T_MULTICOMMA
Ë|| (key_ty≥ =
CONF_T_MULTIPATH
)) {

1199 
	`Œ_de°roy
(
pôem
->
vÆue
.
as_Œ
);

1200 if(
	`Œ_¸óã
(&
pôem
->
vÆue
.
as_Œ
Ë!
LL_E_SUCCESS
) {

1201 
	`DPRINTF
(
E_FATAL
,
L_CONF
,

1204 
	`Œ_£t_Êags
(
pôem
->
vÆue
.
as_Œ
,0);

1205 if(
	`utû_•lô
(
vÆue
,",",&
vÆuóºay
) >= 0) {

1206 
ödex
 = 0;

1207 
vÆuóºay
[
ödex
]) {

1208 
	`Œ_add_°rög
(
pôem
->
vÆue
.
as_Œ
,
key
,
vÆuóºay
[
ödex
]);

1209 
ödex
++;

1211 
	`utû_di•o£_•lô
(
vÆuóºay
);

1214 
	`Œ_upd©e_°rög
(
pôem
,
vÆue
);

1218 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1219  
	`c⁄f_wrôe
();

1220 
	}
}

1227 
	$c⁄f_iswrôabÀ
() {

1228 
ªtvÆ
 = 
FALSE
;

1231 
	`utû_muãx_lock
(
l_c⁄f
);

1233 if(!
c⁄f_maö_fûe
)

1234  
FALSE
;

1236 
ªtvÆ
 = !
	`ac˚ss
(
c⁄f_maö_fûe
,
W_OK
);

1238 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1239  
ªtvÆ
;

1240 
	}
}

1246 
	$c⁄f_wrôe
() {

1247 
ªtvÆ
 = 
CONF_E_NOTWRITABLE
;

1248 
IOHANDLE
 
outfûe
;

1250 if(!
c⁄f_maö_fûe
) {

1251 
	`DPRINTF
(
E_DBG
,
L_CONF
,"Config fileápparentlyÇotÜoaded\n");

1252  
CONF_E_NOCONF
;

1255 
	`utû_muãx_lock
(
l_c⁄f
);

1256 
outfûe
 = 
	`io_√w
();

1257 if(!
outfûe
)

1258 
	`DPRINTF
(
E_FATAL
,
L_CONF
,"io_new failed in conf_write\n");

1260 if(
	`io_›í
(
outfûe
,"fûe://%U?mode=w&ascii=1",
c⁄f_maö_fûe
)) {

1261 
ªtvÆ
 = 
	`_c⁄f_wrôe
(
outfûe
,
c⁄f_maö
,0,
NULL
);

1262 
	`io_˛o£
(
outfûe
);

1263 
	`io_di•o£
(
outfûe
);

1265 
	`DPRINTF
(
E_LOG
,
L_CONF
,"Error opening config file for write: %s\n",

1266 
	`io_îr°r
(
outfûe
));

1267 
	`io_di•o£
(
outfûe
);

1269 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1271  
ªtvÆ
;

1272 
	}
}

1282 
	$_c⁄f_wrôe
(
IOHANDLE
 
hfûe
, 
LL
 *
∂l
, 
subÀvñ
, *
∑ª¡
) {

1283 
LL_ITEM
 *
∂i
;

1284 
LL_ITEM
 *
µª
, *
pö
;

1285 
LL_ITEM
 *
∂ôemp
;

1286 
fú°
;

1287 
îr
;

1289 
keybuf„r
[256];

1291 if(!
∂l
)

1292  
CONF_E_SUCCESS
;

1295 
∂i
 = 
∂l
->
ôemli°
.
√xt
;

1296 
∂i
) {

1298 if(
subÀvñ
) {

1299 
	`¢¥ötf
(
keybuf„r
,(keybuf„r),"¥e_%s_%s",
∑ª¡
,
∂i
->
key
);

1300 
µª
=
	`Œ_„tch_ôem
(
c⁄f_commíts
,
keybuf„r
);

1301 
	`¢¥ötf
(
keybuf„r
,(keybuf„r),"ö_%s_%s",
∑ª¡
,
∂i
->
key
);

1302 
pö
 = 
	`Œ_„tch_ôem
(
c⁄f_commíts
,
keybuf„r
);

1304 
	`¢¥ötf
(
keybuf„r
,(keybuf„r),"¥e_%s",
∂i
->
key
);

1305 
µª
=
	`Œ_„tch_ôem
(
c⁄f_commíts
,
keybuf„r
);

1306 
	`¢¥ötf
(
keybuf„r
,(keybuf„r),"ö_%s",
∂i
->
key
);

1307 
pö
 = 
	`Œ_„tch_ôem
(
c⁄f_commíts
,
keybuf„r
);

1310 if(
µª
) {

1311 
	`io_¥ötf
(
hfûe
,"%s",
µª
->
vÆue
.
as_°rög
);

1314 
∂i
->
ty≥
) {

1315 
LL_TYPE_LL
:

1316 if(
subÀvñ
) {

1318 
∂ôemp
 = 
NULL
;

1319 
fú°
 = 1;

1320 
	`io_¥ötf
(
hfûe
,"%†",
∂i
->
key
);

1321 (
∂ôemp
 = 
	`Œ_gë_√xt
(
∂i
->
vÆue
.
as_Œ
,plitemp))) {

1322 if(!
fú°
)

1323 
	`io_¥ötf
(
hfûe
,",");

1324 
fú°
=0;

1325 
	`io_¥ötf
(
hfûe
,"%s",
∂ôemp
->
vÆue
.
as_°rög
);

1327 
	`io_¥ötf
(
hfûe
,"\n");

1329 
	`io_¥ötf
(
hfûe
,"[%s]",
∂i
->
key
);

1330 if(
pö
) {

1331 
	`io_¥ötf
(
hfûe
," #%s",
pö
->
vÆue
.
as_°rög
);

1333 
	`io_¥ötf
(
hfûe
,"\n");

1335 if((
îr
 =
	`_c⁄f_wrôe
(
hfûe
, 
∂i
->
vÆue
.
as_Œ
, 1,Öli->
key
)Ë!
CONF_E_SUCCESS
) {

1336 
	`DPRINTF
(
E_DBG
,
L_CONF
,"Eº‹ wrôög key %s:%s\n",
∂i
->
key
);

1337  
îr
;

1342 
LL_TYPE_INT
:

1343 
	`io_¥ötf
(
hfûe
,"%†%d",
∂i
->
key
,∂i->
vÆue
.
as_öt
);

1344 if(
pö
) {

1345 
	`io_¥ötf
(
hfûe
," #%s",
pö
->
vÆue
.
as_°rög
);

1347 
	`io_¥ötf
(
hfûe
,"\n");

1350 
LL_TYPE_STRING
:

1351 
	`io_¥ötf
(
hfûe
,"%†%s",
∂i
->
key
,∂i->
vÆue
.
as_°rög
);

1352 if(
pö
) {

1353 
	`io_¥ötf
(
hfûe
," #%s",
pö
->
vÆue
.
as_°rög
);

1355 
	`io_¥ötf
(
hfûe
,"\n");

1359 
∂i
 =Öli->
√xt
;

1362 if(!
subÀvñ
) {

1363 
pö
 = 
	`Œ_„tch_ôem
(
c⁄f_commíts
,"end");

1364 if(
pö
) {

1365 
	`io_¥ötf
(
hfûe
,"%s",
pö
->
vÆue
.
as_°rög
);

1369  
CONF_E_SUCCESS
;

1370 
	}
}

1380 
	$c⁄f_is£t
(*
£˘i⁄
, *
key
) {

1381 
ªtvÆ
 = 
FALSE
;

1383 
	`utû_muãx_lock
(
l_c⁄f
);

1384 if(
	`_c⁄f_„tch_ôem
(
c⁄f_maö
,
£˘i⁄
,
key
)) {

1385 
ªtvÆ
 = 
TRUE
;

1387 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1389  
ªtvÆ
;

1390 
	}
}

1400 *
	$c⁄f_im∂ode
(*
£˘i⁄
, *
key
, *
dñimôî
) {

1401 
LL_ITEM
 *
pôem
;

1402 
LL_ITEM
 *
≥num
;

1403 
cou¡
;

1404 
Àn
;

1405 *
ªtvÆ
;

1407 
	`utû_muãx_lock
(
l_c⁄f
);

1408 
pôem
 = 
	`_c⁄f_„tch_ôem
(
c⁄f_maö
,
£˘i⁄
,
key
);

1409 if((!
pôem
Ë|| (pôem->
ty≥
 !
LL_TYPE_LL
)) {

1410 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1411  
NULL
;

1415 
cou¡
 = 
Àn
 = 0;

1416 
≥num
 = 
NULL
;

1417 (
≥num
 = 
	`Œ_gë_√xt
(
pôem
->
vÆue
.
as_Œ
,penum))) {

1418 if(
≥num
->
ty≥
 !
LL_TYPE_STRING
) {

1419 
	`DPRINTF
(
E_FATAL
,
L_CONF
,"multivaluedÖropertyÇotá string?\n");

1421 
Àn
 +()
	`°æí
(
≥num
->
vÆue
.
as_°rög
);

1422 
cou¡
++;

1425 if(!
cou¡
) {

1426 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1427  
NULL
;

1430 
Àn
 +(()
	`°æí
(
dñimôî
Ë* (
cou¡
-1));

1431 
ªtvÆ
 = (*)
	`mÆloc
(
Àn
 + 1);

1432 if(!
ªtvÆ
) {

1433 
	`DPRINTF
(
E_FATAL
,
L_CONF
,"conf_implode: malloc\n");

1436 
	`mem£t
(
ªtvÆ
,0,
Àn
+1);

1437 
≥num
 = 
NULL
;

1438 (
≥num
 = 
	`Œ_gë_√xt
(
pôem
->
vÆue
.
as_Œ
,penum))) {

1439 
	`°rˇt
(
ªtvÆ
,
≥num
->
vÆue
.
as_°rög
);

1440 if(--
cou¡
) {

1441 
	`°rˇt
(
ªtvÆ
,
dñimôî
);

1445 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1446  
ªtvÆ
;

1447 
	}
}

1456 
	$c⁄f_gë_¨øy
(*
£˘i⁄
, *
key
, ***
¨gvp
) {

1457 
LL_ITEM
 *
pôem
, *
≥num
;

1458 
cou¡
;

1459 
Àn
;

1461 
	`utû_muãx_lock
(
l_c⁄f
);

1462 
pôem
 = 
	`_c⁄f_„tch_ôem
(
c⁄f_maö
,
£˘i⁄
,
key
);

1463 if((!
pôem
Ë|| (pôem->
ty≥
 !
LL_TYPE_LL
)) {

1464 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1465  
FALSE
;

1469 
cou¡
 = 0;

1470 
≥num
 = 
NULL
;

1471 (
≥num
 = 
	`Œ_gë_√xt
(
pôem
->
vÆue
.
as_Œ
,penum))) {

1472 if(
≥num
->
ty≥
 !
LL_TYPE_STRING
) {

1473 
	`DPRINTF
(
E_FATAL
,
L_CONF
,"multivaluedÖropertyÇotá string?\n");

1475 
cou¡
++;

1479 
Àn
 = (
cou¡
+1) * (*);

1480 *(
¨gvp
Ë(**)
	`mÆloc
(
Àn
);

1481 if(!*(
¨gvp
)) {

1482 
	`DPRINTF
(
E_FATAL
,
L_CONF
,"conf_get_array: malloc\n");

1485 
	`mem£t
(*(
¨gvp
),0,
Àn
);

1487 
cou¡
=0;

1488 
≥num
=
NULL
;

1489 (
≥num
 = 
	`Œ_gë_√xt
(
pôem
->
vÆue
.
as_Œ
,penum))) {

1490 (*
¨gvp
)[
cou¡
] = 
	`°rdup
(
≥num
->
vÆue
.
as_°rög
);

1491 if(!(*
¨gvp
)[
cou¡
]) {

1492 
	`DPRINTF
(
E_FATAL
,
L_CONF
,"conf_get_array: malloc\n");

1494 
cou¡
++;

1497 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1498  
TRUE
;

1499 
	}
}

1506 
	$c⁄f_di•o£_¨øy
(**
¨gv
) {

1507 
ödex
=0;

1509 if(!
¨gv
)

1512 
¨gv
[
ödex
]) {

1513 
	`‰ì
(
¨gv
[
ödex
]);

1514 
ödex
++;

1516 
	}
}

1526 
	$c⁄f_xml_dump
(
WS_CONNINFO
 *
pwsc
) {

1527 
XMLSTRUCT
 *
pxml
;

1528 
ªtvÆ
;

1530 if(!
c⁄f_maö_fûe
) {

1531  
FALSE
;

1534 
pxml
 = 
	`xml_öô
(
pwsc
,1);

1535 
	`xml_push
(
pxml
,"config");

1537 
	`utû_muãx_lock
(
l_c⁄f
);

1539 
ªtvÆ
 = 
	`_c⁄f_xml_dump
(
pxml
,
c⁄f_maö
,0,
NULL
);

1541 
	`utû_muãx_u∆ock
(
l_c⁄f
);

1543 
	`xml_p›
(
pxml
);

1544 
	`xml_deöô
(
pxml
);

1546  
ªtvÆ
;

1547 
	}
}

1557 
	$_c⁄f_xml_dump
(
XMLSTRUCT
 *
pxml
, 
LL
 *
∂l
, 
subÀvñ
, *
∑ª¡
) {

1558 
LL_ITEM
 *
∂i
;

1559 
LL_ITEM
 *
∂ôemp
;

1561 if(!
∂l
)

1562  
TRUE
;

1565 
∂i
 = 
∂l
->
ôemli°
.
√xt
;

1566 
∂i
) {

1567 
∂i
->
ty≥
) {

1568 
LL_TYPE_LL
:

1569 if(
subÀvñ
) {

1571 
∂ôemp
 = 
NULL
;

1572 
	`xml_push
(
pxml
,
∂i
->
key
);

1573 (
∂ôemp
 = 
	`Œ_gë_√xt
(
∂i
->
vÆue
.
as_Œ
,plitemp))) {

1574 
	`xml_ouçut
(
pxml
,"ôem","%s",
∂ôemp
->
vÆue
.
as_°rög
);

1576 
	`xml_p›
(
pxml
);

1578 
	`xml_push
(
pxml
,
∂i
->
key
);

1579 if(!
	`_c⁄f_xml_dump
(
pxml
, 
∂i
->
vÆue
.
as_Œ
, 1,Öli->
key
))

1580  
FALSE
;

1581 
	`xml_p›
(
pxml
);

1585 
LL_TYPE_INT
:

1586 
	`xml_ouçut
(
pxml
,
∂i
->
key
,"%d",∂i->
vÆue
.
as_öt
);

1589 
LL_TYPE_STRING
:

1590 
	`xml_ouçut
(
pxml
,
∂i
->
key
,"%s",∂i->
vÆue
.
as_°rög
);

1594 
∂i
 =Öli->
√xt
;

1597  
TRUE
;

1598 
	}
}

1605 *
	$c⁄f_gë_fûíame
() {

1606  
c⁄f_maö_fûe
;

1607 
	}
}

1614 *
	$c⁄f_gë_£rvî«me
() {

1615 *
ªtvÆ
;

1616 *
deÁu…_«me
 = "firefly %v on %h";

1617 
ho°«me
[
HOST_NAME_MAX
 + 1];

1618 *
ãm∂©e
, *
§c
, *
d°
;

1619 
Àn
;

1621 
	`gëho°«me
(
ho°«me
,
HOST_NAME_MAX
);

1622 
ªtvÆ
 = 
	`°rchr
(
ho°«me
,'.');

1623 if(
ªtvÆ
) *retval = '\0';

1625 
ªtvÆ
 = 
ho°«me
;

1626 *
ªtvÆ
) {

1627 *
ªtvÆ
 = 
	`tﬁowî
(*retval);

1628 
ªtvÆ
++;

1631 
ãm∂©e
 = 
	`c⁄f_Æloc_°rög
("gíîÆ","£rvî«me",
deÁu…_«me
);

1632 
§c
 = 
ãm∂©e
;

1633 
Àn
 = 0;

1634 *
§c
) {

1635 if(*
§c
 == '%') {

1636 
§c
++;

1637 *
§c
) {

1639 
Àn
 +
	`°æí
(
ho°«me
);

1640 
§c
++;

1643 
Àn
 +
	`°æí
(
VERSION
);

1644 
§c
++;

1647 
Àn
 += 2;

1648 
§c
++;

1652 
Àn
++;

1653 
§c
++;

1657 
ªtvÆ
 = (*)
	`mÆloc
(
Àn
+1);

1658 if(!
ªtvÆ
Ë
	`DPRINTF
(
E_FATAL
,
L_MISC
,"malloc");

1660 
	`mem£t
(
ªtvÆ
,0,
Àn
+1);

1662 
d°
 = 
ªtvÆ
;

1663 
§c
 = 
ãm∂©e
;

1665 *
§c
) {

1666 if(*
§c
 == '%') {

1667 
§c
++;

1668 *
§c
) {

1670 
	`°rˇt
(
d°
,
ho°«me
);

1671 
d°
 +
	`°æí
(
ho°«me
);

1672 
§c
 ++;

1675 
	`°rˇt
(
d°
,
VERSION
);

1676 
d°
 +
	`°æí
(
VERSION
);

1677 
§c
++;

1680 *
d°
++ = '%';

1681 *
d°
++ = *
§c
++;

1685 *
d°
++ = *
§c
++;

1690 if(
	`°æí
(
ªtvÆ
Ë> 
MAX_REND_LEN
) {

1691 
ªtvÆ
[
MAX_REND_LEN
] = '\0';

1692 
ªtvÆ
[
MAX_REND_LEN
-1] = '.';

1693 
ªtvÆ
[
MAX_REND_LEN
-2] = '.';

1694 
ªtvÆ
[
MAX_REND_LEN
-3] = '.';

1697 
	`‰ì
(
ãm∂©e
);

1698  
ªtvÆ
;

1699 
	}
}

	@conf.h

22 #i‚de‡
_CONF_H_


23 
	#_CONF_H_


	)

25 
	#CONF_E_SUCCESS
 0

	)

26 
	#CONF_E_FOPEN
 1

	)

27 
	#CONF_E_UNKNOWN
 2

	)

28 
	#CONF_E_BADHEADER
 3

	)

29 
	#CONF_E_PARSE
 4

	)

30 
	#CONF_E_OVERFLOW
 5

	)

31 
	#CONF_E_NOCONF
 6

	)

32 
	#CONF_E_NOTFOUND
 7

	)

33 
	#CONF_E_NOTWRITABLE
 8

	)

34 
	#CONF_E_BADELEMENT
 9

	)

35 
	#CONF_E_PATHEXPECTED
 10

	)

36 
	#CONF_E_INTEXPECTED
 11

	)

37 
	#CONF_E_BADCONFIG
 12

	)

39 
c⁄f_ªad
(*
fûe
);

40 
c⁄f_ªlﬂd
();

41 
c⁄f_˛o£
();

42 
c⁄f_gë_öt
(*
£˘i⁄
, *
key
, 
dÊt
);

43 
c⁄f_gë_°rög
(*
£˘i⁄
, *
key
, *
dÊt
,

44 *
out
, *
size
);

45 *
c⁄f_Æloc_°rög
(*
£˘i⁄
, *
key
, *
dÊt
);

46 
c⁄f_£t_öt
(*
£˘i⁄
, *
key
, 
vÆue
, 
vîify
);

47 
c⁄f_£t_°rög
(*
£˘i⁄
, *
key
, *
vÆue
, 
vîify
);

49 
c⁄f_is£t
(*
£˘i⁄
, *
key
);

50 
c⁄f_iswrôabÀ
();

51 
c⁄f_wrôe
();

53 *
c⁄f_im∂ode
(*
£˘i⁄
, *
key
, *
dñimôî
);

54 
c⁄f_gë_¨øy
(*
£˘i⁄
, *
key
, ***
¨gvp
);

55 
c⁄f_di•o£_¨øy
(**
¨gv
);

57 *
c⁄f_gë_fûíame
();

60 
	~"web£rvî.h
"

61 
c⁄f_xml_dump
(
WS_CONNINFO
 *
pwsc
);

64 *
c⁄f_gë_£rvî«me
();

	@configfile.c

29 #ifde‡
HAVE_CONFIG_H


30 
	~"c⁄fig.h
"

33 
	~<î∫o.h
>

34 
	~<f˙é.h
>

35 
	~<limôs.h
>

36 
	~<±hªad.h
>

37 
	~<sig«l.h
>

38 
	~<°d¨g.h
>

39 #ifde‡
HAVE_STDINT_H


40 
	~<°döt.h
>

42 
	~<°dio.h
>

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

45 
	~<time.h
>

46 
	~<zlib.h
>

48 
	~<sys/°©.h
>

49 #ifde‡
HAVE_SYS_WAIT_H


50 
	~<sys/waô.h
>

53 
	~"dØpd.h
"

54 
	~"c⁄f.h
"

55 
	~"c⁄figfûe.h
"

56 
	~"db-gíîic.h
"

57 
	~"îr.h
"

58 
	~"os.h
"

59 
	~"ª°¨t.h
"

60 
	~"xml-Ωc.h
"

61 
	~"u≤p.h
"

63 #i‚de‡
WITHOUT_MDNS


64 
	~"ªnd.h
"

71 
c⁄fig_emô_lôîÆ
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
);

72 
c⁄fig_emô_ö˛ude
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
);

73 
c⁄fig_emô_thªad°©us
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
);

74 
c⁄fig_emô_i•age
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
);

75 
c⁄fig_emô_£ssi⁄_cou¡
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
);

76 
c⁄fig_emô_£rvi˚_°©us
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
);

77 
c⁄fig_emô_u£r
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
);

78 
c⁄fig_emô_ªad⁄ly
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
);

79 
c⁄fig_emô_vîsi⁄
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
);

80 
c⁄fig_emô_sy°em
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
);

81 
c⁄fig_emô_Êags
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
);

82 
c⁄fig_emô_c⁄ffûe
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
);

83 
c⁄fig_emô_ho°
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
);

84 
c⁄fig_emô_c⁄fig
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
);

85 
c⁄fig_emô_£rvî«me
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
);

86 
c⁄fig_emô_u≤p
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
);

87 
c⁄fig_sub°_°ªam
(
WS_CONNINFO
 *
pwsc
, 
IOHANDLE
 
hfûe
);

88 
c⁄fig_c⁄ã¡_ty≥
(
WS_CONNINFO
 *
pwsc
, *
∑th
);

93 
	#CONFIG_TYPE_INT
 0

	)

94 
	#CONFIG_TYPE_STRING
 1

	)

95 
	#CONFIG_TYPE_SPECIAL
 4

	)

97 
	sèg_c⁄ã¡ty≥s
 {

98 *
	mexãnsi⁄
;

99 *
	mc⁄ã¡ty≥
;

100 
	mdeˇche
;

101 } 
	tCONTENTTYPES
;

103 
CONTENTTYPES
 
	gc⁄fig_deÁu…_ty≥s
[] = {

107 { 
NULL
, NULL }

111 
	sèg_c⁄figñemít
 {

112 
	mc⁄fig_ñemít
;

113 
	mªquúed
;

114 
	mch™ged
;

115 
	mty≥
;

116 *
	m«me
;

117 *
	mv¨
;

118 (*
	memô
)(
	mWS_CONNINFO
 *, *, *);

119 } 
	tCONFIGELEMENT
;

122 
CONFIGELEMENT
 
	gc⁄fig_ñemíts
[] = {

150 { 0,0,0,
CONFIG_TYPE_SPECIAL
,"£rvî«me",(*)
NULL
,
c⁄fig_emô_£rvî«me
 },

151 { 0,0,0,
CONFIG_TYPE_SPECIAL
,"c⁄fig",(*)
NULL
,
c⁄fig_emô_c⁄fig
 },

152 { 0,0,0,
CONFIG_TYPE_SPECIAL
,"c⁄ffûe",(*)
NULL
,
c⁄fig_emô_c⁄ffûe
 },

153 { 0,0,0,
CONFIG_TYPE_SPECIAL
,"ho°",(*)
NULL
,
c⁄fig_emô_ho°
 },

154 { 0,0,0,
CONFIG_TYPE_SPECIAL
,"ªÀa£",(*)
VERSION
,
c⁄fig_emô_lôîÆ
 },

155 { 0,0,0,
CONFIG_TYPE_SPECIAL
,"∑ckage",(*)
PACKAGE
,
c⁄fig_emô_lôîÆ
 },

156 { 0,0,0,
CONFIG_TYPE_SPECIAL
,"ö˛ude",(*)
NULL
,
c⁄fig_emô_ö˛ude
 },

157 { 0,0,0,
CONFIG_TYPE_SPECIAL
,"thªad°©",(*)
NULL
,
c⁄fig_emô_thªad°©us
 },

158 { 0,0,0,
CONFIG_TYPE_SPECIAL
,"i•age",(*)
NULL
,
c⁄fig_emô_i•age
 },

159 { 0,0,0,
CONFIG_TYPE_SPECIAL
,"£ssi⁄-cou¡",(*)
NULL
,
c⁄fig_emô_£ssi⁄_cou¡
 },

160 { 0,0,0,
CONFIG_TYPE_SPECIAL
,"£rvi˚-°©us",(*)
NULL
,
c⁄fig_emô_£rvi˚_°©us
 },

161 { 0,0,0,
CONFIG_TYPE_SPECIAL
,"u£r",(*)
NULL
,
c⁄fig_emô_u£r
 },

162 { 0,0,0,
CONFIG_TYPE_SPECIAL
,"ªad⁄ly",(*)
NULL
,
c⁄fig_emô_ªad⁄ly
 },

163 { 0,0,0,
CONFIG_TYPE_SPECIAL
,"vîsi⁄",(*)
NULL
,
c⁄fig_emô_vîsi⁄
 },

164 { 0,0,0,
CONFIG_TYPE_SPECIAL
,"sy°em",(*)
NULL
,
c⁄fig_emô_sy°em
 },

165 { 0,0,0,
CONFIG_TYPE_SPECIAL
,"Êags",(*)
NULL
,
c⁄fig_emô_Êags
 },

166 { 0,0,0,
CONFIG_TYPE_SPECIAL
,"u≤p",(*)
NULL
,
c⁄fig_emô_u≤p
 },

167 { -1,1,0,
CONFIG_TYPE_STRING
,
NULL
,NULL,NULL }

170 
	gc⁄fig_£ssi⁄
=0;

172 
	#MAX_LINE
 1024

	)

175 
	$c⁄fig_∑ssw‹d_ªquúed
(
WS_CONNINFO
 *
pwsc
, *
rﬁe
) {

176 *
pw
;

178 
	`DPRINTF
(
E_DBG
,
L_MISC
,"Checking ifÖwÑequired for %sás %s\n",

179 
	`ws_uri
(
pwsc
), 
rﬁe
);

182 if(
	`°∫ˇ£cmp
(
	`ws_uri
(
pwsc
),"/upnp",5) == 0) {

183 
	`DPRINTF
(
E_DBG
,
L_MISC
,"Nope\n");

184  
FALSE
;

187 if(
	`°rˇ£cmp
(
rﬁe
,"admin") == 0) {

188 
pw
 = 
	`c⁄f_Æloc_°rög
("gíîÆ","admö_pw",
NULL
);

189 if((!
pw
Ë|| (’wË&& (!
	`°æí
(pw)))) {

193 #ifde‡
WIN32


195  
FALSE
;

198 if((
	`ws_ho°«me
(
pwsc
)Ë&& (
	`os_i¶oˇœddr
(ws_hostname(pwsc)))) {

199 if(
pw
Ë
	`‰ì
(pw);

200  
FALSE
;

203 if(
pw
Ë
	`‰ì
(pw);

204 
	`DPRINTF
(
E_DBG
,
L_MISC
,"Yep\n");

206  
TRUE
;

209 if(!
	`°rˇ£cmp
(
rﬁe
,"user")) {

210 
pw
 = 
	`c⁄f_Æloc_°rög
("gíîÆ","∑ssw‹d",
NULL
);

211 if(
pw
 && 
	`°æí
(pw)) {

212 
	`DPRINTF
(
E_DBG
,
L_MISC
,"Yï: %s\n",
pw
);

213 
	`‰ì
(
pw
);

214  
TRUE
;

216 if(
pw
Ë
	`‰ì
(pw);

217 
	`DPRINTF
(
E_DBG
,
L_MISC
,"Nope\n");

218  
FALSE
;

221 
	`DPRINTF
(
E_LOG
,
L_MISC
,"BadÑﬁêty≥ f‹áuth: %s\n",
rﬁe
);

222  
TRUE
;

223 
	}
}

232 
	$c⁄fig_m©ches_rﬁe
(
WS_CONNINFO
 *
pwsc
, *
u£∫ame
,

233 *
∑ssw‹d
, *
rﬁe
) {

234 *
ªquúed_pw
;

235 
ªsu…
;

238 if((
	`°rˇ£cmp
(
rﬁe
,"admin") != 0) &&

239 (
	`°rˇ£cmp
(
rﬁe
,"user") !=0)) {

240 
	`DPRINTF
(
E_LOG
,
L_MISC
,"Unknow¿rﬁe: %s\n",
rﬁe
);

241  
FALSE
;

244 if(
∑ssw‹d
 =
NULL
)

245  
	`c⁄fig_∑ssw‹d_ªquúed
(
pwsc
,
rﬁe
Ë? 
FALSE
 : 
TRUE
;

248 
ªquúed_pw
 = 
	`c⁄f_Æloc_°rög
("gíîÆ","admö_pw",
NULL
);

249 if((
ªquúed_pw
Ë&& (
	`°rcmp
‘equúed_pw, 
∑ssw‹d
)==0)) {

250 
	`‰ì
(
ªquúed_pw
);

251  
TRUE
;

254 if(
ªquúed_pw
)

255 
	`‰ì
(
ªquúed_pw
);

257 if(
	`°rˇ£cmp
(
rﬁe
,"admin") == 0) {

258 
	`DPRINTF
(
E_LOG
,
L_MISC
,"Auth: failedáttemptÅo gainádminÖrivs by "

259 "%†‰om %s\n",
u£∫ame
, 
	`ws_ho°«me
(
pwsc
));

260  
FALSE
;

264 
ªquúed_pw
 = 
	`c⁄f_Æloc_°rög
("gíîÆ","∑ssw‹d",
NULL
);

266 if(!
ªquúed_pw
)

267  
TRUE
;

269 
ªsu…
 = 
FALSE
;

270 if(
	`°rcmp
(
ªquúed_pw
,
∑ssw‹d
) == 0)

271 
ªsu…
 = 
TRUE
;

273 
	`‰ì
(
ªquúed_pw
);

274 if(!
ªsu…
) {

275 
	`DPRINTF
(
E_LOG
,
L_MISC
,"Auth: failedáttemptÅo gain userÖrivs by "

276 "%†‰om %s\n",
	`ws_ho°«me
(
pwsc
), 
u£∫ame
);

278  
ªsu…
;

279 
	}
}

284 
	$c⁄fig_c⁄ã¡_ty≥
(
WS_CONNINFO
 *
pwsc
, *
∑th
) {

285 *
exãnsi⁄
;

286 
CONTENTTYPES
 *
p˘
=
c⁄fig_deÁu…_ty≥s
;

288 
exãnsi⁄
=
	`°ºchr
(
∑th
,'.');

289 if(
exãnsi⁄
) {

290 (
p˘
->
exãnsi⁄
Ë&& (
	`°rˇ£cmp
(pct->extension,extension)))

291 
p˘
++;

293 if(
p˘
->
exãnsi⁄
) {

294 
	`ws_addª•⁄£hódî
(
pwsc
,"C⁄ã¡-Ty≥",
p˘
->
c⁄ã¡ty≥
);

297 if(
p˘
->
deˇche
) {

298 
	`ws_addª•⁄£hódî
(
pwsc
,"Cache-Control","no-cache");

299 
	`ws_addª•⁄£hódî
(
pwsc
,"Expires","-1");

302 
	}
}

313 
	$c⁄fig_sub°_°ªam
(
WS_CONNINFO
 *
pwsc
, 
IOHANDLE
 
hfûe
) {

314 
ö_¨g
;

315 *
¨g±r
;

316 
¨gbuf„r
[256];

317 
√xt
;

318 
CONFIGELEMENT
 *
p˚
;

319 *
fú°
, *
œ°
;

321 
outbuf„r
[1024];

322 
out_ödex
;

323 
uöt32_t
 
byãs_ªad
;

326 
ö_¨g
=0;

327 
¨g±r
=
¨gbuf„r
;

328 
out_ödex
=0;

332 
byãs_ªad
 = 1;

333 if((!
	`io_ªad
(
hfûe
,(*)&
√xt
,&
byãs_ªad
)) || !bytes_read)

336 if(
ö_¨g
) {

337 if((
√xt
 ='@'Ë&& (
	`°æí
(
¨gbuf„r
) > 0)) {

338 
ö_¨g
=0;

340 
	`DPRINTF
(
E_DBG
,
L_CONF
,"GŸ dúe˘ivê%s\n",
¨gbuf„r
);

343 
fú°
=
œ°
=
¨gbuf„r
;

344 
	`°r£p
(&
œ°
," ");

346 
p˚
=
c⁄fig_ñemíts
;

347 
p˚
->
c⁄fig_ñemít
 != -1) {

348 if(
	`°rˇ£cmp
(
fú°
,
p˚
->
«me
) == 0) {

349 
p˚
->
	`emô
(
pwsc
,Ö˚->
v¨
,
œ°
);

352 
p˚
++;

355 if(
p˚
->
c⁄fig_ñemít
 == -1) {

356 
	`ws_wrôefd
(
pwsc
,"@%s@",
¨gbuf„r
);

358 } if(
√xt
 == '@') {

359 
	`ws_wrôefd
(
pwsc
,"@");

360 
ö_¨g
=0;

362 if((
¨g±r
 - 
¨gbuf„r
) < ((argbuffer)-1))

363 *
¨g±r
++ = 
√xt
;

366 if(
√xt
 == '@') {

367 
¨g±r
=
¨gbuf„r
;

368 
	`mem£t
(
¨gbuf„r
,0,(argbuffer));

369 
ö_¨g
=1;

372 if(
out_ödex
) {

373 
	`ws_wrôebö¨y
(
pwsc
,
outbuf„r
,
out_ödex
);

374 
out_ödex
=0;

377 
outbuf„r
[
out_ödex
] = 
√xt
;

378 
out_ödex
++;

380 if(
out_ödex
 =(
outbuf„r
)) {

381 
	`ws_wrôebö¨y
(
pwsc
,
outbuf„r
,
out_ödex
);

382 
out_ödex
=0;

387 if(
out_ödex
) {

388 
	`ws_wrôebö¨y
(
pwsc
,
outbuf„r
,
out_ödex
);

389 
out_ödex
=0;

391 
	}
}

399 
	$c⁄fig_h™dÀr
(
WS_CONNINFO
 *
pwsc
) {

400 
∑th
[
PATH_MAX
];

401 
ªsﬁved_∑th
[
PATH_MAX
];

402 
web_roŸ
[
PATH_MAX
];

403 
IOHANDLE
 
hfûe
;

404 
°©
 
sb
;

405 *
pw
;

406 
size
;

408 if(!
	`ws_ho°«me
(
pwsc
)) {

409 
	`ws_ªtu∫îr‹
(
pwsc
,500,"Couldn't determineÑemote hostname");

410 
	`ws_should_˛o£
(
pwsc
,1);

415 if(!
	`os_i¶oˇœddr
(
	`ws_ho°«me
(
pwsc
))) {

416 
pw
=
	`c⁄f_Æloc_°rög
("gíîÆ","admö_pw",
NULL
);

417 if((!
pw
Ë|| (
	`°æí
(pw) == 0)) {

418 if(
pw
Ë
	`‰ì
(pw);

420 if(
	`°rcmp
(
	`ws_uri
(
pwsc
),"/no_access.html") != 0) {

421 
	`ws_addª•⁄£hódî
(
pwsc
,"location","/no_access.html");

422 
	`ws_ªtu∫îr‹
(
pwsc
,302,"Moved Temporarily");

423 
	`ws_should_˛o£
(
pwsc
,1);

429 
size
 = (
web_roŸ
);

430 if(
	`c⁄f_gë_°rög
("gíîÆ","web_roŸ",
NULL
,
web_roŸ
,

431 &
size
Ë=
CONF_E_NOTFOUND
) {

432 
	`DPRINTF
(
E_FATAL
,
L_WS
,"No webÑoot!\n");

435 
	`DPRINTF
(
E_DBG
,
L_CONF
|
L_WS
,"Entering config_handler\n");

437 
	`c⁄fig_£t_°©us
(
pwsc
,0,"ServingádminÖages");

439 
	`ws_should_˛o£
(
pwsc
,1);

440 
	`ws_addª•⁄£hódî
(
pwsc
,"Connection","close");

442 if(
	`°rˇ£cmp
(
	`ws_uri
(
pwsc
),"/xml-rpc")==0) {

444 
	`c⁄fig_£t_°©us
(
pwsc
,0,"Serving xml-rpc method");

445 
	`xml_h™dÀ
(
pwsc
);

446 
	`DPRINTF
(
E_DBG
,
L_CONF
|
L_XML
,"Thªad %d: xml-Ω¯£rved\n",
	`ws_thªadno
(
pwsc
));

447 
	`c⁄fig_£t_°©us
(
pwsc
,0,
NULL
);

451 if(('/' =
web_roŸ
[
	`°æí
(web_root) - 1]) ||

452 ('\\' =
web_roŸ
[
	`°æí
(web_root) - 1])) {

453 
web_roŸ
[
	`°æí
(web_root) - 1] = '\0';

456 
	`¢¥ötf
(
∑th
,
PATH_MAX
,"%s/%s",
web_roŸ
,
	`ws_uri
(
pwsc
));

457 
	`DPRINTF
(
E_DBG
,
L_CONF
|
L_WS
,"RóÕ©hög %s\n",
∑th
);

458 if(!
	`ªÆ∑th
(
∑th
,
ªsﬁved_∑th
)) {

459 
pwsc
->
îr‹
=
î∫o
;

460 
	`DPRINTF
(
E_WARN
,
L_CONF
|
L_WS
,"C™nŸÑesﬁvê%s\n",
∑th
);

461 
	`ws_ªtu∫îr‹
(
pwsc
,404,"Not found");

462 
	`c⁄fig_£t_°©us
(
pwsc
,0,
NULL
);

467 
	`os_°©
(
ªsﬁved_∑th
,&
sb
);

468 if(
	`S_ISDIR
(
sb
.
°_mode
)) {

469 
	`ws_addª•⁄£hódî
(
pwsc
,"Location","index.html");

470 
	`ws_ªtu∫îr‹
(
pwsc
,302,"Moved");

471 
	`c⁄fig_£t_°©us
(
pwsc
,0,
NULL
);

472 
	`ws_should_˛o£
(
pwsc
,1);

476 
	`DPRINTF
(
E_DBG
,
L_CONF
|
L_WS
,"Thread %d: PreparingÅo serve %s\n",

477 
	`ws_thªadno
(
pwsc
), 
ªsﬁved_∑th
);

479 if(
	`°∫cmp
(
ªsﬁved_∑th
,
web_roŸ
,
	`°æí
(web_root))) {

480 
pwsc
->
îr‹
=
EINVAL
;

481 
	`DPRINTF
(
E_WARN
,
L_CONF
|
L_WS
,"Thread %d: Requested file %s out ofÑoot\n",

482 
	`ws_thªadno
(
pwsc
),
ªsﬁved_∑th
);

483 
	`ws_ªtu∫îr‹
(
pwsc
,403,"Forbidden");

484 
	`c⁄fig_£t_°©us
(
pwsc
,0,
NULL
);

488 
hfûe
 = 
	`io_√w
();

489 if(!
hfûe
) {

490 
	`DPRINTF
(
E_FATAL
,
L_CONF
 | 
L_WS
,"Cannot create file handle\n");

491 
	`exô
(-1);

494 
	`DPRINTF
(
E_DBG
,
L_CONF
|
L_WS
,"O≥nög %s\n",
ªsﬁved_∑th
);

495 if(!
	`io_›í
(
hfûe
,"fûe://%U",
ªsﬁved_∑th
)) {

496 
	`ws_£t_îr
(
pwsc
,
E_WS_NATIVE
);

497 
	`DPRINTF
(
E_WARN
,
L_CONF
|
L_WS
,"Thread %d: Error opening %s: %s\n",

498 
	`ws_thªadno
(
pwsc
),
ªsﬁved_∑th
,
	`io_îr°r
(
hfûe
));

499 
	`ws_ªtu∫îr‹
(
pwsc
,404,"Not found");

500 
	`c⁄fig_£t_°©us
(
pwsc
,0,
NULL
);

501 
	`io_di•o£
(
hfûe
);

506 if(
	`°rˇ£cmp
(
	`ws_uri
(
pwsc
),"/config-update.html")==0) {

510 
pw
=
	`ws_gëv¨
(
pwsc
,"action");

511 if(
pw
) {

513 i‡(
	`°rˇ£cmp
(
pw
,"stopdaap")==0) {

514 
c⁄fig
.
°›
=1;

515 } i‡(
	`°rˇ£cmp
(
pw
,"rescan")==0) {

516 
c⁄fig
.
ªlﬂd
=1;

521 
	`c⁄fig_c⁄ã¡_ty≥
(
pwsc
, 
ªsﬁved_∑th
);

523 
	`ws_wrôefd
(
pwsc
,"HTTP/1.1 200 OK\r\n");

524 
	`ws_emôhódîs
(
pwsc
);

526 if((
	`°rˇ£cmp
(&
ªsﬁved_∑th
[
	`°æí
(resolved_path) - 5],".html") == 0) ||

527 (
	`°rˇ£cmp
(&
ªsﬁved_∑th
[
	`°æí
(resolved_path) - 4],".xml") == 0)) {

528 
	`c⁄fig_sub°_°ªam
(
pwsc
, 
hfûe
);

530 
	`ws_c›yfûe
(
pwsc
,
hfûe
,
NULL
);

533 
	`io_˛o£
(
hfûe
);

534 
	`io_di•o£
(
hfûe
);

536 
	`DPRINTF
(
E_DBG
,
L_CONF
|
L_WS
,"Thªad %d: Sîved suc˚ssfuŒy\n",
	`ws_thªadno
(
pwsc
));

537 
	`c⁄fig_£t_°©us
(
pwsc
,0,
NULL
);

539 
	}
}

547 
	$c⁄fig_auth
(
WS_CONNINFO
 *
pwsc
, *
u£r
, *
∑ssw‹d
) {

548  
	`c⁄fig_m©ches_rﬁe
(
pwsc
,
u£r
,
∑ssw‹d
,"admin");

549 
	}
}

551 
	$c⁄fig_emô_u≤p
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
) {

552 #ifde‡
UPNP


553 
	`ws_wrôefd
(
pwsc
,"%s",
	`u≤p_uuid
());

555 
	}
}

561 
	$c⁄fig_emô_£rvî«me
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
) {

562 *
£rvî«me
 = 
	`c⁄f_gë_£rvî«me
();

564 
	`ws_wrôefd
(
pwsc
,"%s",
£rvî«me
);

565 
	`‰ì
(
£rvî«me
);

566 
	}
}

571 
	$c⁄fig_emô_c⁄fig
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
) {

572 *
√w_¨g
 = 
	`°rdup
(
¨g
);

573 *
£˘i⁄
 = 
√w_¨g
;

574 *
key
;

575 *
ªsu…_vÆue
;

577 if(!
√w_¨g
)

580 
key
 = 
	`°rchr
(
√w_¨g
,'/');

581 if(!
key
)

584 *
key
 = '\0';

585 
key
++;

587 
ªsu…_vÆue
 = 
	`c⁄f_Æloc_°rög
(
£˘i⁄
, 
key
, 
NULL
);

588 if(!
ªsu…_vÆue
)

589 
	`ws_wrôefd
(
pwsc
,"NULL");

591 
	`ws_wrôefd
(
pwsc
,"%s",
ªsu…_vÆue
);

592 
	`‰ì
(
ªsu…_vÆue
);

594 
	}
}

604 
	$c⁄fig_emô_ho°
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
) {

605 *
ho°
;

606 *
p‹t
;

607 
ho°«me
[256];

609 if(
	`ws_gëªque°hódî
(
pwsc
,"host")) {

610 
ho°
 = 
	`°rdup
(
	`ws_gëªque°hódî
(
pwsc
,"host"));

611 if((
p‹t
 = 
	`°ºchr
(
ho°
,':'))) {

612 *
p‹t
 = '\0';

614 
	`ws_wrôefd
(
pwsc
,"%s",
ho°
);

615 
	`‰ì
(
ho°
);

617 
	`DPRINTF
(
E_LOG
,
L_CONF
,"Didn't getá host header!\n");

618 
	`gëho°«me
(
ho°«me
,(hostname));

619 
	`ws_wrôefd
(
pwsc
,
ho°«me
);

623 
	}
}

633 
	$c⁄fig_emô_c⁄ffûe
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
) {

634 
fuŒ∑th
[
PATH_MAX
];

636 
	`ªÆ∑th
(
	`c⁄f_gë_fûíame
(),
fuŒ∑th
);

637 
	`ws_wrôefd
(
pwsc
,"%s",
fuŒ∑th
);

639 
	}
}

649 
	$c⁄fig_emô_lôîÆ
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
) {

650 
	`ws_wrôefd
(
pwsc
,"%s",(*)
vÆue
);

651 
	}
}

663 
	$c⁄fig_emô_£rvi˚_°©us
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
) {

664 #i‚de‡
WITHOUT_MDNS


665 
mdns_ru¬ög
;

666 *
html
;

668 
buf
[256];

669 
r_days
, 
r_hours
, 
r_mös
, 
r_£cs
;

670 
sˇ¬ög
;

671 
s⁄g_cou¡
;

673 
	`ws_wrôefd
(
pwsc
,"<table><tr><thálign=\"left\">Service</th>");

674 
	`ws_wrôefd
(
pwsc
,"<thálign=\"left\">Status</th><thálign=\"left\">Control</th></tr>\n");

676 
	`ws_wrôefd
(
pwsc
,"<tr><td>Rendezvous</td>");

677 #i‚de‡
WITHOUT_MDNS


678 if(
c⁄fig
.
u£_mdns
) {

679 
mdns_ru¬ög
=!
	`ªnd_ru¬ög
();

681 if(
mdns_ru¬ög
) {

682 
html
="<a href=\"config-update.html?action=stopmdns\">Stop MDNS Server</a>";

684 
html
="<a href=\"config-update.html?action=startmdns\">Start MDNS Server</a>";

687 
	`ws_wrôefd
(
pwsc
,"<td>%s</td><td>%s</td></å>\n",
mdns_ru¬ög
 ? "Running":"Stopped",

688 
html
);

690 
	`ws_wrôefd
(
pwsc
,"<td>Not configured</td><td>&nbsp;</td></tr>\n");

693 
	`ws_wrôefd
(
pwsc
,"<td>No Support</td><td>&nbsp;</td></tr>\n");

696 
	`ws_wrôefd
(
pwsc
,"<å><td>DAAP Sîvî</td><td>%s</td>",
c⁄fig
.
°›
 ? "Stopping":"Running");

697 if(
c⁄fig
.
°›
) {

698 
	`ws_wrôefd
(
pwsc
,"<td>Wait...</td></tr>\n");

700 
	`ws_wrôefd
(
pwsc
,"<td><a href=\"config-update.html?action=stopdaap\">Stop DAAP Server</a></td></tr>");

703 
sˇ¬ög
 = 
c⁄fig
.
ªlﬂd
;

704 
	`ws_wrôefd
(
pwsc
,"<å><td>Background sˇ¬î</td><td>%s</td>",
sˇ¬ög
 ? "Running":"Idle");

705 if(
sˇ¬ög
) {

706 
	`ws_wrôefd
(
pwsc
,"<td>Wait...</td></tr>");

708 
	`ws_wrôefd
(
pwsc
,"<td><a href=\"config-update.html?action=rescan\">Start Scan</a></td></tr>");

711 
	`ws_wrôefd
(
pwsc
,"</table>\n");

713 
	`ws_wrôefd
(
pwsc
,"<br />\n");

715 
	`ws_wrôefd
(
pwsc
,"<table>\n");

716 
	`ws_wrôefd
(
pwsc
,"<tr>\n");

717 
	`ws_wrôefd
(
pwsc
," <th>Uptime</th>\n");

719 
r_£cs
=()(
	`time
(
NULL
)-
c⁄fig
.
°©s
.
°¨t_time
);

721 
r_days
=
r_£cs
/(3600 * 24);

722 
r_£cs
 -((3600 * 24Ë* 
r_days
);

724 
r_hours
=
r_£cs
/3600;

725 
r_£cs
 -(3600 * 
r_hours
);

727 
r_mös
=
r_£cs
/60;

728 
r_£cs
 -60 * 
r_mös
;

730 
	`mem£t
(
buf
,0x0,(buf));

731 if(
r_days
)

732 
	`•rötf
((*)&
buf
[
	`°æí
(buf)],"%d day%s, ", 
r_days
,

733 
r_days
 == 1 ? "" : "s");

735 if(
r_days
 || 
r_hours
)

736 
	`•rötf
((*)&
buf
[
	`°æí
(buf)],"%d hour%s, ", 
r_hours
,

737 
r_hours
 == 1 ? "" : "s");

739 if(
r_days
 || 
r_hours
 || 
r_mös
)

740 
	`•rötf
((*)&
buf
[
	`°æí
(buf)],"%d möuã%s, ", 
r_mös
,

741 
r_mös
 == 1 ? "" : "s");

743 
	`•rötf
((*)&
buf
[
	`°æí
(buf)],"%d sec⁄d%†", 
r_£cs
,

744 
r_£cs
 == 1 ? "" : "s");

746 
	`ws_wrôefd
(
pwsc
," <td>%s</td>\n",
buf
);

747 
	`ws_wrôefd
(
pwsc
,"</tr>\n");

749 
	`ws_wrôefd
(
pwsc
,"<tr>\n");

750 
	`ws_wrôefd
(
pwsc
," <th>Songs</th>\n");

751 
	`db_gë_s⁄g_cou¡
(
NULL
,&
s⁄g_cou¡
);

752 
	`ws_wrôefd
(
pwsc
," <td>%d</td>\n",
s⁄g_cou¡
);

753 
	`ws_wrôefd
(
pwsc
,"</tr>\n");

755 
	`ws_wrôefd
(
pwsc
,"<tr>\n");

756 
	`ws_wrôefd
(
pwsc
," <th>Songs Served</th>\n");

757 
	`ws_wrôefd
(
pwsc
," <td>%d</td>\n",
c⁄fig
.
°©s
.
s⁄gs_£rved
);

758 
	`ws_wrôefd
(
pwsc
,"</tr>\n");

760 if(!
sˇ¬ög
) {

761 
	`ws_wrôefd
(
pwsc
,"<tr>\n");

762 
	`ws_wrôefd
(
pwsc
," <th>DB Version</th>\n");

763 
	`ws_wrôefd
(
pwsc
," <td>%d</td>\n",
	`db_ªvisi⁄
());

764 
	`ws_wrôefd
(
pwsc
,"</tr>\n");

774 
	`ws_wrôefd
(
pwsc
,"</table>\n");

775 
	}
}

786 
	$c⁄fig_gë_£ssi⁄_cou¡
() {

787 
WSTHREADENUM
 
w°e
;

788 
WS_CONNINFO
 *
pwsc
;

789 
cou¡
=0;

791 
pwsc
 = 
	`ws_thªad_íum_fú°
(
c⁄fig
.
£rvî
,&
w°e
);

792 
pwsc
) {

793 
cou¡
++;

794 
pwsc
 = 
	`ws_thªad_íum_√xt
(
c⁄fig
.
£rvî
,&
w°e
);

797  
cou¡
;

798 
	}
}

809 
	$c⁄fig_emô_£ssi⁄_cou¡
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
) {

810 
	`ws_wrôefd
(
pwsc
,"%d",
	`c⁄fig_gë_£ssi⁄_cou¡
());

811 
	}
}

821 
	$c⁄fig_emô_thªad°©us
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
) {

822 
WS_CONNINFO
 *
pci
;

823 
SCAN_STATUS
 *
pss
;

824 
WSTHREADENUM
 
w°e
;

826 
	`ws_wrôefd
(
pwsc
,"<table><tr><thálign=\"left\">Thread</th>");

827 
	`ws_wrôefd
(
pwsc
,"<thálign=\"left\">Session</th><thálign=\"left\">Host</th>");

828 
	`ws_wrôefd
(
pwsc
,"<thálign=\"left\">Action</th></tr>\n");

831 
pci
 = 
	`ws_thªad_íum_fú°
(
c⁄fig
.
£rvî
,&
w°e
);

832 
pci
) {

833 
pss
 = 
	`ws_gë_loˇl_°‹age
(
pci
);

834 if(
pss
) {

835 
	`ws_wrôefd
(
pwsc
,"<tr><td>%d</td><td>%d</td><td>%s</td><td>%s</td></tr>\n",

836 
pss
->
thªad
,pss->
£ssi⁄
,pss->
ho°
,pss->
wh©
 ?Öss->what : "Idle");

838 
pci
=
	`ws_thªad_íum_√xt
(
c⁄fig
.
£rvî
,&
w°e
);

841 
	`ws_wrôefd
(
pwsc
,"</table>\n");

842 
	}
}

855 
	$c⁄fig_emô_i•age
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
) {

856 *
fú°
;

857 *
œ°
;

859 *
∑ge
, *
åue
, *
Ál£
;

861 
	`DPRINTF
(
E_DBG
,
L_CONF
|
L_WS
,"S∂ôtögárg %s\n",
¨g
);

863 
fú°
=
œ°
=
¨g
;

864 
	`°r£p
(&
œ°
,":");

866 if(
œ°
) {

867 
∑ge
=
	`°rdup
(
fú°
);

868 if(!
∑ge
)

870 
fú°
=
œ°
;

871 
	`°r£p
(&
œ°
,":");

872 if(
œ°
) {

873 
åue
=
	`°rdup
(
fú°
);

874 
Ál£
=
	`°rdup
(
œ°
);

875 if((!
åue
)||(!
Ál£
))

878 
åue
=
	`°rdup
(
fú°
);

879 if(!
åue
)

881 
Ál£
=
NULL
;

888 
	`DPRINTF
(
E_DBG
,
L_CONF
|
L_WS
,"∑ge: %s, uri: %s\n",
∑ge
,
	`ws_uri
(
pwsc
));

890 if((
	`°æí
(
∑ge
Ë> såÀn(
	`ws_uri
(
pwsc
))) ||

891 (
	`°rˇ£cmp
(
∑ge
,(*)&
	`ws_uri
(
pwsc
)[
	`°æí
(ws_uri(pwsc)) - strlen(page)]) != 0)) {

892 if(
Ál£
) {

893 
	`ws_wrôefd
(
pwsc
,"%s",
Ál£
);

896 if(
åue
) {

897 
	`ws_wrôefd
(
pwsc
,"%s",
åue
);

902 if(
∑ge
)

903 
	`‰ì
(
∑ge
);

905 if(
åue
)

906 
	`‰ì
(
åue
);

908 if(
Ál£
)

909 
	`‰ì
(
Ál£
);

910 
	}
}

919 
	$c⁄fig_emô_u£r
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
) {

920 if(
	`ws_gëv¨
(
pwsc
, "HTTP_USER")) {

921 
	`ws_wrôefd
(
pwsc
,"%s",
	`ws_gëv¨
(pwsc, "HTTP_USER"));

924 
	}
}

934 
	$c⁄fig_emô_ªad⁄ly
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
) {

935 if(!
	`c⁄f_iswrôabÀ
()) {

936 
	`ws_wrôefd
(
pwsc
,"readonly=\"readonly\"");

938 
	}
}

948 
	$c⁄fig_emô_ö˛ude
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
) {

949 
ªsﬁved_∑th
[
PATH_MAX
];

950 
∑th
[
PATH_MAX
];

951 
web_roŸ
[
PATH_MAX
];

952 
IOHANDLE
 
hfûe
;

953 
°©
 
sb
;

954 
size
;

956 
size
 = (
web_roŸ
);

957 if(
	`c⁄f_gë_°rög
("gíîÆ","web_roŸ",
NULL
,
web_roŸ
,

958 &
size
Ë=
CONF_E_NOTFOUND
) {

959 
	`DPRINTF
(
E_FATAL
,
L_WS
,"No webÑoot!\n");

962 
	`DPRINTF
(
E_DBG
,
L_CONF
|
L_WS
,"Pª∑rögÅÿö˛udê%s\n",
¨g
);

964 if(('/' =
web_roŸ
[
	`°æí
(web_root) - 1]) ||

965 ('\\' =
web_roŸ
[
	`°æí
(web_root) - 1])) {

966 
web_roŸ
[
	`°æí
(web_root) - 1] = '\0';

969 
	`¢¥ötf
(
∑th
,
PATH_MAX
,"%s/%s",
web_roŸ
,
¨g
);

970 if(!
	`ªÆ∑th
(
∑th
,
ªsﬁved_∑th
)) {

971 
pwsc
->
îr‹
=
î∫o
;

972 
	`DPRINTF
(
E_WARN
,
L_CONF
|
L_WS
,"C™nŸÑesﬁvê%s\n",
∑th
);

973 
	`ws_wrôefd
(
pwsc
,"<hr><i>îr‹: c™nŸ föd %s</i><hr>",
¨g
);

978 
	`os_°©
(
ªsﬁved_∑th
,&
sb
);

979 if(
sb
.
°_mode
 & 
S_IFDIR
) {

980 
	`ws_wrôefd
(
pwsc
,"<hr><i>îr‹: c™nŸ in˛udêdú %s</i><hr>",
¨g
);

985 
	`DPRINTF
(
E_DBG
,
L_CONF
|
L_WS
,"Thread %d: PreparingÅo serve %s\n",

986 
	`ws_thªadno
(
pwsc
), 
ªsﬁved_∑th
);

988 if(
	`°∫cmp
(
ªsﬁved_∑th
,
web_roŸ
,
	`°æí
(web_root))) {

989 
pwsc
->
îr‹
=
EINVAL
;

990 
	`DPRINTF
(
E_LOG
,
L_CONF
|
L_WS
,"Thread %d: Requested file %s out ofÑoot\n",

991 
	`ws_thªadno
(
pwsc
),
ªsﬁved_∑th
);

992 
	`ws_wrôefd
(
pwsc
,"<hr><i>îr‹: %†ouào‡webÑoŸ</i><hr>",
¨g
);

996 
hfûe
 = 
	`io_√w
();

997 if(!
hfûe
) {

998 
	`DPRINTF
(
E_LOG
,
L_CONF
 | 
L_WS
,"Thread %d: Cannot create file handle\n",

999 
	`ws_thªadno
(
pwsc
));

1002 if(!
	`io_›í
(
hfûe
,"fûe://%U",
ªsﬁved_∑th
)) {

1003 
	`ws_£t_îr
(
pwsc
,
E_WS_NATIVE
);

1004 
	`DPRINTF
(
E_LOG
,
L_CONF
|
L_WS
,"Thread %d: Error opening %s: %s\n",

1005 
	`ws_thªadno
(
pwsc
),
ªsﬁved_∑th
,
	`io_îr°r
(pwsc));

1006 
	`ws_wrôefd
(
pwsc
,"<hr><i>îr‹: c™nŸ o≥¿%s: %s</i><hr>",
¨g
,

1007 
	`io_îr°r
(
pwsc
));

1008 
	`io_di•o£
(
hfûe
);

1012 
	`c⁄fig_sub°_°ªam
(
pwsc
, 
hfûe
);

1014 
	`io_˛o£
(
hfûe
);

1015 
	`io_di•o£
(
hfûe
);

1016 
	`DPRINTF
(
E_DBG
,
L_CONF
|
L_WS
,"Thªad %d: in˛uded suc˚ssfuŒy\n",
	`ws_thªadno
(
pwsc
));

1018 
	}
}

1025 
	$c⁄fig_‰ìsˇn
(*
vp
) {

1026 
SCAN_STATUS
 *
pss
 = (SCAN_STATUS*)
vp
;

1028 if(
pss
) {

1029 if(
pss
->
wh©
)

1030 
	`‰ì
(
pss
->
wh©
);

1031 if(
pss
->
ho°
)

1032 
	`‰ì
(
pss
->
ho°
);

1033 
	`‰ì
(
pss
);

1035 
	}
}

1047 
	$c⁄fig_£t_°©us
(
WS_CONNINFO
 *
pwsc
, 
£ssi⁄
, *
fmt
, ...) {

1048 
buf„r
[1024];

1049 
va_li°
 
≠
;

1050 
SCAN_STATUS
 *
pfú°
;

1051 *
√wmsg
 = 
NULL
;

1053 
	`DPRINTF
(
E_DBG
,
L_CONF
,"Entering config_set_status\n");

1055 if(
fmt
) {

1056 
	`va_°¨t
(
≠
, 
fmt
);

1057 
	`v¢¥ötf
(
buf„r
, 1024, 
fmt
, 
≠
);

1058 
	`va_íd
(
≠
);

1060 
√wmsg
 = 
	`°rdup
(
buf„r
);

1063 
	`ws_lock_loˇl_°‹age
(
pwsc
);

1064 if(!(
pfú°
 = 
	`ws_gë_loˇl_°‹age
(
pwsc
))) {

1066 
pfú°
=(
SCAN_STATUS
*)
	`mÆloc
((SCAN_STATUS));

1067 if(
pfú°
) {

1068 
pfú°
->
wh©
 = 
NULL
;

1069 
pfú°
->
thªad
 = 
	`ws_thªadno
(
pwsc
);

1070 
pfú°
->
ho°
 = 
	`°rdup
(
	`ws_ho°«me
(
pwsc
));

1071 
	`ws_£t_loˇl_°‹age
(
pwsc
,
pfú°
,
c⁄fig_‰ìsˇn
);

1073 
	`DPRINTF
(
E_FATAL
,
L_CONF
,"Malloc Error\n");

1077 if(
pfú°
) {

1079 if(
pfú°
->
wh©
) {

1080 
	`‰ì
(
pfú°
->
wh©
);

1082 
pfú°
->
wh©
=
√wmsg
;

1083 
pfú°
->
£ssi⁄
=session;

1085 if(
√wmsg
)

1086 
	`‰ì
(
√wmsg
);

1089 
	`ws_u∆ock_loˇl_°‹age
(
pwsc
);

1090 
	`DPRINTF
(
E_DBG
,
L_CONF
,"Exiting config_set_status\n");

1091 
	}
}

1100 
	$c⁄fig_emô_vîsi⁄
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
) {

1101 
	`ws_wrôefd
(
pwsc
,"%s",
VERSION
);

1102 
	}
}

1111 
	$c⁄fig_emô_sy°em
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
) {

1112 
	`ws_wrôefd
(
pwsc
,"%s",
HOST
);

1113 
	}
}

1122 
	$c⁄fig_emô_Êags
(
WS_CONNINFO
 *
pwsc
, *
vÆue
, *
¨g
) {

1123 #ifde‡
OGGVORBIS


1124 
	`ws_wrôefd
(
pwsc
,"%s ","--enable-oggvorbis");

1127 #ifde‡
FLAC


1128 
	`ws_wrôefd
(
pwsc
,"%s ","--enable-flac");

1131 #ifde‡
MUSEPACK


1132 
	`ws_wrôefd
(
pwsc
,"%s ","--enable-musepack");

1135 #ifde‡
WITH_GDBM


1136 
	`ws_wrôefd
(
pwsc
,"%s ","--with-gdbm");

1139 #ifde‡
WITH_HOWL


1140 
	`ws_wrôefd
(
pwsc
,"%s ","--enable-howl");

1143 #ifde‡
NSLU2


1144 
	`ws_wrôefd
(
pwsc
,"%s ","--enable-nslu2");

1146 
	}
}

	@configfile.h

22 #i‚de‡
_CONFIGFILE_H_


23 
	#_CONFIGFILE_H_


	)

25 
	~"dØpd.h
"

26 
	~"web£rvî.h
"

28 
c⁄fig_auth
(
WS_CONNINFO
 *
pwsc
, *
u£r
, *
∑ssw‹d
);

29 
c⁄fig_h™dÀr
(
WS_CONNINFO
 *
pwsc
);

30 
c⁄fig_£t_°©us
(
WS_CONNINFO
 *
pwsc
, 
£ssi⁄
, *
fmt
, ...);

31 
c⁄fig_gë_£ssi⁄_cou¡
();

32 
c⁄fig_m©ches_rﬁe
(
WS_CONNINFO
 *
pwsc
, *
u£∫ame
, *
∑ssw‹d
, *
rﬁe
);

35 
	sèg_sˇn_°©us
 {

36 
	m£ssi⁄
;

37 
	mthªad
;

38 *
	mwh©
;

39 *
	mho°
;

40 } 
	tSCAN_STATUS
;

	@daapd.h

31 #i‚de‡
_DAAPD_H_


32 
	#_DAAPD_H_


	)

34 #ifde‡
HAVE_CONFIG_H


35 
	~"c⁄fig.h
"

38 #ifde‡
HAVE_STDINT_H


39 
	~<°döt.h
>

42 #ifde‡
DEBUG


43 #i‚de‡
ASSERT


44 
	#ASSERT
(
f
) \

45 if(
f
) \

48 
	`îr_log
(0,"As£πÉº‹ i¿%s,Üöê%d\n",
__FILE__
,
__LINE__
)

	)

51 #i‚de‡
ASSERT


52 
	#ASSERT
(
f
)

	)

56 
	~<time.h
>

57 
	~"memdebug.h
"

58 
	~"com∑t.h
"

59 
	~"web£rvî.h
"

64 
	sèg_°©s
 {

65 
time_t
 
	m°¨t_time
;

66 
	ms⁄gs_£rved
;

68 
	mgb_£rved
;

69 
	mbyãs_£rved
;

70 } 
	tSTATS
;

73 
	sèg_c⁄fig
 {

74 
	mu£_mdns
;

75 
	m°›
;

76 
	mªlﬂd
;

77 
	mf‹eground
;

78 
	mfuŒ_ªlﬂd
;

80 
STATS
 
	m°©s
;

81 
WSHANDLE
 
	m£rvî
;

82 } 
	tCONFIG
;

84 
CONFIG
 
c⁄fig
;

	@db-gdbm.c

24 #ifde‡
HAVE_CONFIG_H


25 
	~"c⁄fig.h
"

28 
	~<î∫o.h
>

29 
	~<gdbm.h
>

30 
	~<limôs.h
>

31 
	~<±hªad.h
>

32 
	~<°d¨g.h
>

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<°rög.h
>

37 
	~"dØpd.h
"

38 
	~"îr.h
"

39 
	~"mp3-sˇ¬î.h
"

40 
	~"ªdbœck.h
"

41 
	~"db-gíîic.h
"

42 
	~"db-gdbm.h
"

44 #i‚de‡
GDBM_SYNC


45 
	#GDBM_SYNC
 0

	)

48 #i‚de‡
GDBM_NOLOCK


49 
	#GDBM_NOLOCK
 0

	)

55 
±hªad_muãx_t
 
	g_gdbm_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

56 
GDBM_FILE
 
	g_gdbm_s⁄gs
;

59 
_gdbm_lock
();

60 
_gdbm_u∆ock
();

65 
	$_gdbm_lock
() {

66 
îr
;

68 if((
îr
=
	`±hªad_muãx_lock
(&
_gdbm_muãx
))) {

69 
	`DPRINTF
(
E_FATAL
,
L_DB
,"ˇ¬ŸÜock gdbmÜock: %s\n",
	`°ªº‹
(
îr
));

71 
	}
}

76 
	$_gdbm_u∆ock
() {

77 
îr
;

79 if((
îr
=
	`±hªad_muãx_u∆ock
(&
_gdbm_muãx
))) {

80 
	`DPRINTF
(
E_FATAL
,
L_DB
,"ˇ¬Ÿ u∆ock gdbmÜock: %s\n",
	`°ªº‹
(
îr
));

82 
	}
}

93 
	$db_gdbm_›í
(**
≥
, *
∑ømëîs
) {

94 
db_∑th
[
PATH_MAX
 + 1];

95 
ªsu…
 = 
DB_E_SUCCESS
;

97 
	`¢¥ötf
(
db_∑th
,(db_∑th),"%s/%s",
∑ømëîs
,"songs.gdb");

100 
	`_gdbm_lock
();

101 
_gdbm_s⁄gs
 = 
	`gdbm_›í
(
db_∑th
, 0, 
GDBM_WRCREAT
 | 
GDBM_SYNC
 | 
GDBM_NOLOCK
,

102 0600,
NULL
);

104 if(!
_gdbm_s⁄gs
) {

106 
_gdbm_s⁄gs
 = 
	`gdbm_›í
(
db_∑th
,0,
GDBM_NEWDB
 | 
GDBM_SYNC
 | 
GDBM_NOLOCK
,

107 0600,
NULL
);

110 if(!
_gdbm_s⁄gs
) {

111 
	`DPRINTF
(
E_FATAL
,
L_DB
,"CouldÇot open songs database (%s): %s\n",

112 
db_∑th
,
	`°ªº‹
(
î∫o
));

113 
	`db_gë_îr‹
(
≥
,
DB_E_DB_ERROR
,
	`gdbm_°ªº‹
(
gdbm_î∫o
));

114 
ªsu…
 = 
DB_E_DB_ERROR
;

116 
	`_gdbm_u∆ock
();

117  
ªsu…
;

118 
	}
}

123 
	$db_gdbm_öô
(
ªlﬂd
) {

124  
TRUE
;

125 
	}
}

130 
	$db_gdbm_deöô
() {

131 
	`_gdbm_lock
();

132 
	`gdbm_˛o£
(
_gdbm_s⁄gs
);

133 
	`_gdbm_u∆ock
();

134  
TRUE
;

135 
	}
}

144 
PACKED_MP3FILE
 *
	$db_gdbm_„tch_ôem
(**
≥
, 
id
) {

145 
d©um
 
key
, 
c⁄ã¡
;

146 
c⁄ã¡_size
;

147 
PACKED_MP3FILE
 *
µmp3
;

148 **
ch¨_¨øy
;

149 *
ñemít_±r
;

150 
d⁄e
=0;

153 
key
.
d±r
 = (*)&
id
;

154 
key
.
dsize
 = ();

156 
	`_gdbm_lock
();

157 
c⁄ã¡
 = 
	`gdbm_„tch
(
_gdbm_s⁄gs
,
key
);

158 
	`_gdbm_u∆ock
();

160 if(
c⁄ã¡
.
d±r
) {

162 
µmp3
=(
PACKED_MP3FILE
*)
	`mÆloc
((PACKED_MP3FILE));

163 if(!
µmp3
) {

164 
	`DPRINTF
(
E_FATAL
,
L_DB
,"db_gdbm_fetch_item: malloc\n");

165  
NULL
;

167 
	`mem£t
(
µmp3
,0x0,(
PACKED_MP3FILE
));

168 
c⁄ã¡_size
 = 
c⁄ã¡
.
dsize
;

169 
ñemít_±r
 = 
c⁄ã¡
.
d±r
;

170 
ch¨_¨øy
 = (**)(
µmp3
);

173 !
d⁄e
) {

180  
NULL
;

181 
	}
}

188 
	$db_gdbm_íum_°¨t
(**
≥
) {

189  
DB_E_DB_ERROR
;

190 
	}
}

192 
PACKED_MP3FILE
 *
	$db_gdbm_íum_„tch
(**
≥
) {

193  
NULL
;

194 
	}
}

196 
	$db_gdbm_íum_íd
(**
≥
) {

197  
DB_E_DB_ERROR
;

198 
	}
}

201 
	$db_gdbm_add
(**
≥
, 
MP3FILE
 *
pmp3
) {

202  
DB_E_DB_ERROR
;

203 
	}
}

205 
	$db_gdbm_dñëe
(**
≥
, 
id
) {

206  
DB_E_DB_ERROR
;

207 
	}
}

	@db-gdbm.h

12 #i‚de‡
_DB_GDBM_H_


13 
	#_DB_GDBM_H_


	)

15 
	~"mp3-sˇ¬î.h
"

18 
db_gdbm_›í
(**
≥
, *
∑ømëîs
);

19 
db_gdbm_öô
(
ªlﬂd
);

20 
db_gdbm_deöô
();

23 
PACKED_MP3FILE
 *
db_gdbm_„tch_ôem
(**
≥
, 
id
);

24 
db_gdbm_íum_°¨t
(**
≥
);

25 
PACKED_MP3FILE
 *
db_gdbm_íum_„tch
(**
≥
);

26 
db_gdbm_íum_íd
(**
≥
);

29 
db_gdbm_add
(**
≥
, 
MP3FILE
 *
pmp3
);

30 
db_gdbm_dñëe
(**
≥
, 
id
);

	@db-generic.c

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 
	#_XOPEN_SOURCE
 500

	)

28 
	~<±hªad.h
>

29 
	~<°dio.h
>

30 
	~<°d¨g.h
>

31 
	~<°dlib.h
>

32 #ifde‡
HAVE_STRING_H


33 
	~<°rög.h
>

35 #ifde‡
HAVE_STRINGS_H


36 
	~<°rögs.h
>

38 #ifde‡
HAVE_STDINT_H


39 
	~<°döt.h
>

42 
	~"dØpd.h
"

43 
	~"db-gíîic.h
"

44 
	~"îr.h
"

45 
	~"mp3-sˇ¬î.h
"

47 
	~"db-sql.h
"

49 
	#DB_VERSION
 1

	)

50 
	#MAYBEFREE
(
a
Ë{ if(◊)Ë
	`‰ì
(◊)); };

	)

53 
	sèg_db_fun˘i⁄s
 {

54 *
	m«me
;

55 (*
	mdbs_›í
)(**, *);

56 (*
	mdbs_öô
)();

57 (*
	mdbs_deöô
)();

58 (*
	mdbs_add
)(**, 
	mMP3FILE
*, *);

59 (*
	mdbs_add_∂ayli°
)(**, *, , *,*, , *);

60 (*
	mdbs_add_∂ayli°_ôem
)(**, , );

61 (*
	mdbs_dñëe_∂ayli°
)(**, );

62 (*
	mdbs_dñëe_∂ayli°_ôem
)(**, , );

63 (*
	mdbs_edô_∂ayli°
)(**, , *, *);

64 (*
	mdbs_∂aycou¡_ö¸emít
)(**, );

65 (*
	mdbs_íum_°¨t
)(**, 
	mDBQUERYINFO
 *);

66 (*
	mdbs_íum_„tch_row
)(**, 
	mPACKED_MP3FILE
 *, 
	mDBQUERYINFO
 *);

67 (*
	mdbs_íum_ª£t
)(**, 
	mDBQUERYINFO
 *);

68 (*
	mdbs_íum_íd
)(**);

69 (*
	mdbs_f‹˚_ªsˇn
)(**);

70 (*
	mdbs_°¨t_sˇn
)();

71 (*
	mdbs_íd_s⁄g_sˇn
)();

72 (*
	mdbs_íd_sˇn
)();

73 (*
	mdbs_gë_cou¡
)(**, *, 
	mCou¡Ty≥_t
);

74 
	mMP3FILE
*(*
	mdbs_„tch_ôem
)(**, );

75 
	mMP3FILE
*(*
	mdbs_„tch_∑th
)(**, *,);

76 
	mM3UFILE
*(*
	mdbs_„tch_∂ayli°
)(**, *, );

77 (*
	mdbs_di•o£_ôem
)(
	mMP3FILE
*);

78 (*
	mdbs_di•o£_∂ayli°
)(
	mM3UFILE
*);

79 }
	tDB_FUNCTIONS
;

82 
DB_FUNCTIONS
 
	gdb_fun˘i⁄s
[] = {

83 #ifde‡
HAVE_LIBSQLITE


86 
db_sql_›í_sqlôe2
,

87 
db_sql_öô
,

88 
db_sql_deöô
,

89 
db_sql_add
,

90 
db_sql_add_∂ayli°
,

91 
db_sql_add_∂ayli°_ôem
,

92 
db_sql_dñëe_∂ayli°
,

93 
db_sql_dñëe_∂ayli°_ôem
,

94 
db_sql_edô_∂ayli°
,

95 
db_sql_∂aycou¡_ö¸emít
,

96 
db_sql_íum_°¨t
,

97 
db_sql_íum_„tch_row
,

98 
db_sql_íum_ª£t
,

99 
db_sql_íum_íd
,

100 
db_sql_f‹˚_ªsˇn
,

101 
db_sql_°¨t_sˇn
,

102 
db_sql_íd_s⁄g_sˇn
,

103 
db_sql_íd_sˇn
,

104 
db_sql_gë_cou¡
,

105 
db_sql_„tch_ôem
,

106 
db_sql_„tch_∑th
,

107 
db_sql_„tch_∂ayli°
,

108 
db_sql_di•o£_ôem
,

109 
db_sql_di•o£_∂ayli°


112 #ifde‡
HAVE_LIBSQLITE3


115 
db_sql_›í_sqlôe3
,

116 
db_sql_öô
,

117 
db_sql_deöô
,

118 
db_sql_add
,

119 
db_sql_add_∂ayli°
,

120 
db_sql_add_∂ayli°_ôem
,

121 
db_sql_dñëe_∂ayli°
,

122 
db_sql_dñëe_∂ayli°_ôem
,

123 
db_sql_edô_∂ayli°
,

124 
db_sql_∂aycou¡_ö¸emít
,

125 
db_sql_íum_°¨t
,

126 
db_sql_íum_„tch_row
,

127 
db_sql_íum_ª£t
,

128 
db_sql_íum_íd
,

129 
db_sql_f‹˚_ªsˇn
,

130 
db_sql_°¨t_sˇn
,

131 
db_sql_íd_s⁄g_sˇn
,

132 
db_sql_íd_sˇn
,

133 
db_sql_gë_cou¡
,

134 
db_sql_„tch_ôem
,

135 
db_sql_„tch_∑th
,

136 
db_sql_„tch_∂ayli°
,

137 
db_sql_di•o£_ôem
,

138 
db_sql_di•o£_∂ayli°


141 { 
NULL
,NULL }

143 *
	gdb_îr‹_li°
[] = {

163 
DB_FUNCTIONS
 *
	gdb_cuºít
=&
db_fun˘i⁄s
[0];

164 
	gdb_ªvisi⁄_no
=2;

165 
±hªad_⁄˚_t
 
	gdb_öôlock
=
PTHREAD_ONCE_INIT
;

166 
	gdb_is_sˇ¬ög
=0;

167 
±hªad_rwlock_t
 
	gdb_rwlock
;

170 
db_wrôñock
();

171 
db_ªadlock
();

172 
db_u∆ock
();

173 
db_öô_⁄˚
();

174 
db_utf8_vÆid©e
(
MP3FILE
 *
pmp3
);

175 
db_utf8_vÆid©e_°rög
(*
°rög
);

176 
db_åim_°rögs
(
MP3FILE
 *
pmp3
);

177 
db_åim_°rög
(*
°rög
);

185 
	$db_ªadlock
() {

186 
îr
;

188 
	`DPRINTF
(
E_SPAM
,
L_LOCK
,"entering db_readlock\n");

189 if((
îr
=
	`±hªad_rwlock_rdlock
(&
db_rwlock
))) {

190 
	`DPRINTF
(
E_FATAL
,
L_DB
,"ˇ¬ŸÜockÑdlock: %s\n",
	`°ªº‹
(
îr
));

192 
	`DPRINTF
(
E_SPAM
,
L_LOCK
,"db_readlockácquired\n");

193 
	}
}

200 
	$db_wrôñock
() {

201 
îr
;

203 
	`DPRINTF
(
E_SPAM
,
L_LOCK
,"entering db_writelock\n");

204 if((
îr
=
	`±hªad_rwlock_wæock
(&
db_rwlock
))) {

205 
	`DPRINTF
(
E_FATAL
,
L_DB
,"ˇ¬ŸÜockÑwlock: %s\n",
	`°ªº‹
(
îr
));

207 
	`DPRINTF
(
E_SPAM
,
L_LOCK
,"db_writelockácquired\n");

208 
	}
}

215 
	$db_u∆ock
() {

216 
	`DPRINTF
(
E_SPAM
,
L_LOCK
,"releasing dbÜock\n");

217  
	`±hªad_rwlock_u∆ock
(&
db_rwlock
);

218 
	}
}

223 
	$db_gë_îr‹
(**
≥
, 
îr‹
, ...) {

224 
va_li°
 
≠
;

225 
îrbuf
[1024];

227 if(!
≥
)

230 
	`va_°¨t
(
≠
, 
îr‹
);

231 
	`v¢¥ötf
(
îrbuf
, ”ºbuf), 
db_îr‹_li°
[
îr‹
], 
≠
);

232 
	`va_íd
(
≠
);

234 
	`DPRINTF
(
E_SPAM
,
L_MISC
,"RaisögÉº‹: %s\n",
îrbuf
);

236 *
≥
 = 
	`°rdup
(
îrbuf
);

237 
	}
}

243 
	$db_öô_⁄˚
() {

244 
	`±hªad_rwlock_öô
(&
db_rwlock
,
NULL
);

245 
	}
}

254 
	$db_›í
(**
≥
, *
ty≥
, *
∑ømëîs
) {

255 
ªsu…
;

257 
	`DPRINTF
(
E_DBG
,
L_DB
,"Opening database\n");

259 if(
	`±hªad_⁄˚
(&
db_öôlock
,
db_öô_⁄˚
))

262 
db_cuºít
 = &
db_fun˘i⁄s
[0];

263 if(
ty≥
) {

264 (
db_cuºít
->
«me
Ë&& (
	`°rˇ£cmp
(db_cuºít->«me,
ty≥
))) {

265 
db_cuºít
++;

268 if(!
db_cuºít
->
«me
) {

270 
	`db_gë_îr‹
(
≥
,
DB_E_BADPROVIDER
,
ty≥
);

271  
DB_E_BADPROVIDER
;

275 
ªsu…
=
db_cuºít
->
	`dbs_›í
(
≥
, 
∑ømëîs
);

278 
	`DPRINTF
(
E_DBG
,
L_DB
,"Resu…s: %d\n",
ªsu…
);

279  
ªsu…
;

280 
	}
}

287 
	$db_öô
(
ªlﬂd
) {

288  
db_cuºít
->
	`dbs_öô
(
ªlﬂd
);

289 
	}
}

294 
	$db_deöô
() {

295  
db_cuºít
->
	`dbs_deöô
();

296 
	}
}

302 
	$db_ªvisi⁄
() {

303 
ªvisi⁄
;

305 
	`db_ªadlock
();

306 
ªvisi⁄
=
db_ªvisi⁄_no
;

307 
	`db_u∆ock
();

309  
ªvisi⁄
;

310 
	}
}

315 
	$db_sˇ¬ög
() {

316  
db_is_sˇ¬ög
;

317 
	}
}

322 
	$db_add
(**
≥
, 
MP3FILE
 *
pmp3
, *
id
) {

323 
ªtvÆ
;

325 
	`db_wrôñock
();

326 
	`db_utf8_vÆid©e
(
pmp3
);

327 
	`db_åim_°rögs
(
pmp3
);

328 
ªtvÆ
=
db_cuºít
->
	`dbs_add
(
≥
,
pmp3
,
id
);

329 
db_ªvisi⁄_no
++;

330 
	`db_u∆ock
();

332  
ªtvÆ
;

333 
	}
}

344 
	$db_add_∂ayli°
(**
≥
, *
«me
, 
ty≥
, *
˛au£
, *
∑th
, 
ödex
, *
∂ayli°id
) {

345 
ªtvÆ
;

347 
	`db_wrôñock
();

348 
ªtvÆ
=
db_cuºít
->
	`dbs_add_∂ayli°
(
≥
,
«me
,
ty≥
,
˛au£
,
∑th
,
ödex
,
∂ayli°id
);

349 if(
ªtvÆ
 =
DB_E_SUCCESS
)

350 
db_ªvisi⁄_no
++;

351 
	`db_u∆ock
();

353  
ªtvÆ
;

354 
	}
}

363 
	$db_add_∂ayli°_ôem
(**
≥
, 
∂ayli°id
, 
s⁄gid
) {

364 
ªtvÆ
;

366 
	`db_wrôñock
();

367 
ªtvÆ
=
db_cuºít
->
	`dbs_add_∂ayli°_ôem
(
≥
,
∂ayli°id
,
s⁄gid
);

368 if(
ªtvÆ
 =
DB_E_SUCCESS
)

369 
db_ªvisi⁄_no
++;

370 
	`db_u∆ock
();

372  
ªtvÆ
;

373 
	}
}

381 
	$db_dñëe_∂ayli°
(**
≥
, 
∂ayli°id
) {

382 
ªtvÆ
;

384 
	`db_wrôñock
();

385 
ªtvÆ
=
db_cuºít
->
	`dbs_dñëe_∂ayli°
(
≥
,
∂ayli°id
);

386 if(
ªtvÆ
 =
DB_E_SUCCESS
)

387 
db_ªvisi⁄_no
++;

388 
	`db_u∆ock
();

390  
ªtvÆ
;

391 
	}
}

400 
	$db_dñëe_∂ayli°_ôem
(**
≥
, 
∂ayli°id
, 
s⁄gid
) {

401 
ªtvÆ
;

403 
	`db_wrôñock
();

404 
ªtvÆ
=
db_cuºít
->
	`dbs_dñëe_∂ayli°_ôem
(
≥
,
∂ayli°id
,
s⁄gid
);

405 if(
ªtvÆ
 =
DB_E_SUCCESS
)

406 
db_ªvisi⁄_no
++;

407 
	`db_u∆ock
();

409  
ªtvÆ
;

410 
	}
}

419 
	$db_edô_∂ayli°
(**
≥
, 
id
, *
«me
, *
˛au£
) {

420 
ªtvÆ
;

422 
	`db_wrôñock
();

424 
ªtvÆ
 = 
db_cuºít
->
	`dbs_edô_∂ayli°
(
≥
, 
id
, 
«me
, 
˛au£
);

425 
	`db_u∆ock
();

426  
ªtvÆ
;

427 
	}
}

438 
	$db_∂aycou¡_ö¸emít
(**
≥
, 
id
) {

439 
ªtvÆ
;

441 
	`db_wrôñock
();

442 
ªtvÆ
 = 
db_cuºít
->
	`dbs_∂aycou¡_ö¸emít
(
≥
, 
id
);

443 
	`db_u∆ock
();

445  
ªtvÆ
;

446 
	}
}

454 
	$db_íum_°¨t
(**
≥
, 
DBQUERYINFO
 *
pöfo
) {

455 
ªtvÆ
;

457 
	`db_wrôñock
();

458 
ªtvÆ
=
db_cuºít
->
	`dbs_íum_°¨t
(
≥
, 
pöfo
);

460 if(
ªtvÆ
) {

461 
	`db_u∆ock
();

462  
ªtvÆ
;

466 
	}
}

472 
	$db_íum_„tch_row
(**
≥
, 
PACKED_MP3FILE
 *
row
, 
DBQUERYINFO
 *
pöfo
) {

473  
db_cuºít
->
	`dbs_íum_„tch_row
(
≥
, 
row
, 
pöfo
);

474 
	}
}

480 
	$db_íum_ª£t
(**
≥
, 
DBQUERYINFO
 *
pöfo
) {

481  
db_cuºít
->
	`dbs_íum_ª£t
(
≥
,
pöfo
);

482 
	}
}

487 
	$db_íum_íd
(**
≥
) {

488 
ªtvÆ
;

490 
ªtvÆ
=
db_cuºít
->
	`dbs_íum_íd
(
≥
);

491 
	`db_u∆ock
();

492  
ªtvÆ
;

493 
	}
}

502 
MP3FILE
 *
	$db_„tch_ôem
(**
≥
, 
id
) {

503 
MP3FILE
 *
ªtvÆ
;

505 
	`db_ªadlock
();

506 
ªtvÆ
=
db_cuºít
->
	`dbs_„tch_ôem
(
≥
, 
id
);

507 
	`db_u∆ock
();

509  
ªtvÆ
;

510 
	}
}

512 
MP3FILE
 *
	$db_„tch_∑th
(**
≥
, *
∑th
,
ödex
) {

513 
MP3FILE
 *
ªtvÆ
;

515 
	`db_ªadlock
();

516 
ªtvÆ
=
db_cuºít
->
	`dbs_„tch_∑th
(
≥
,
∑th
, 
ödex
);

517 
	`db_u∆ock
();

519  
ªtvÆ
;

520 
	}
}

522 
M3UFILE
 *
	$db_„tch_∂ayli°
(**
≥
, *
∑th
, 
ödex
) {

523 
M3UFILE
 *
ªtvÆ
;

525 
	`db_ªadlock
();

526 
ªtvÆ
=
db_cuºít
->
	`dbs_„tch_∂ayli°
(
≥
,
∑th
,
ödex
);

527 
	`db_u∆ock
();

529  
ªtvÆ
;

530 
	}
}

532 
	$db_f‹˚_ªsˇn
(**
≥
) {

533 
ªtvÆ
;

534 
	`db_wrôñock
();

535 
ªtvÆ
 = 
db_cuºít
->
	`dbs_f‹˚_ªsˇn
(
≥
);

536 
	`db_u∆ock
();

538  
ªtvÆ
;

539 
	}
}

541 
	$db_°¨t_sˇn
() {

542 
ªtvÆ
;

544 
	`db_wrôñock
();

545 
ªtvÆ
=
db_cuºít
->
	`dbs_°¨t_sˇn
();

546 
db_is_sˇ¬ög
=1;

547 
	`db_u∆ock
();

549  
ªtvÆ
;

550 
	}
}

552 
	$db_íd_s⁄g_sˇn
() {

553 
ªtvÆ
;

555 
	`db_wrôñock
();

556 
ªtvÆ
=
db_cuºít
->
	`dbs_íd_s⁄g_sˇn
();

557 
	`db_u∆ock
();

559  
ªtvÆ
;

560 
	}
}

562 
	$db_íd_sˇn
() {

563 
ªtvÆ
;

565 
	`db_wrôñock
();

566 
ªtvÆ
=
db_cuºít
->
	`dbs_íd_sˇn
();

567 
db_is_sˇ¬ög
=0;

568 
	`db_u∆ock
();

570  
ªtvÆ
;

571 
	}
}

573 
	$db_di•o£_ôem
(
MP3FILE
 *
pmp3
) {

574 
db_cuºít
->
	`dbs_di•o£_ôem
(
pmp3
);

575 
	}
}

577 
	$db_di•o£_∂ayli°
(
M3UFILE
 *
pm3u
) {

578 
db_cuºít
->
	`dbs_di•o£_∂ayli°
(
pm3u
);

579 
	}
}

581 
	$db_gë_cou¡
(**
≥
, *
cou¡
, 
Cou¡Ty≥_t
 
ty≥
) {

582 
ªtvÆ
;

584 
	`db_ªadlock
();

585 
ªtvÆ
=
db_cuºít
->
	`dbs_gë_cou¡
(
≥
,
cou¡
,
ty≥
);

586 
	`db_u∆ock
();

588  
ªtvÆ
;

589 
	}
}

595 
	$db_gë_s⁄g_cou¡
(**
≥
, *
cou¡
) {

596  
	`db_gë_cou¡
(
≥
, 
cou¡
, 
cou¡S⁄gs
);

597 
	}
}

599 
	$db_gë_∂ayli°_cou¡
(**
≥
, *
cou¡
) {

600  
	`db_gë_cou¡
(
≥
, 
cou¡
, 
cou¡Pœyli°s
);

601 
	}
}

610 
	$db_utf8_vÆid©e
(
MP3FILE
 *
pmp3
) {

611 
is_övÆid
=0;

619 
is_övÆid
 = 
	`db_utf8_vÆid©e_°rög
(
pmp3
->
tôÀ
);

620 
is_övÆid
 |
	`db_utf8_vÆid©e_°rög
(
pmp3
->
¨ti°
);

621 
is_övÆid
 |
	`db_utf8_vÆid©e_°rög
(
pmp3
->
Æbum
);

622 
is_övÆid
 |
	`db_utf8_vÆid©e_°rög
(
pmp3
->
gíª
);

623 
is_övÆid
 |
	`db_utf8_vÆid©e_°rög
(
pmp3
->
commít
);

624 
is_övÆid
 |
	`db_utf8_vÆid©e_°rög
(
pmp3
->
compo£r
);

625 
is_övÆid
 |
	`db_utf8_vÆid©e_°rög
(
pmp3
->
‹che°ø
);

626 
is_övÆid
 |
	`db_utf8_vÆid©e_°rög
(
pmp3
->
c⁄du˘‹
);

627 
is_övÆid
 |
	`db_utf8_vÆid©e_°rög
(
pmp3
->
groupög
);

628 
is_övÆid
 |
	`db_utf8_vÆid©e_°rög
(
pmp3
->
uæ
);

630 if(
is_övÆid
) {

631 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"InvÆid UTF-8 i¿%s\n",
pmp3
->
∑th
);

633 
	}
}

642 
	$db_utf8_vÆid©e_°rög
(*
°rög
) {

643 *
cuºít
 = 
°rög
;

644 
run
,
r_cuºít
;

645 
ªtvÆ
=0;

647 if(!
°rög
)

650 *
cuºít
) {

651 if(!((*
cuºít
) & 0x80)) {

652 
cuºít
++;

654 
run
=0;

657 if((*
cuºít
 & 0xE0Ë=0xC0Ë
run
=1;

658 if((*
cuºít
 & 0xF0Ë=0xE0Ë
run
=2;

659 if((*
cuºít
 & 0xF8Ë=0xF0Ë
run
=3;

661 if(!
run
) {

663 *
cuºít
++='?';

664 
ªtvÆ
=1;

666 
r_cuºít
=0;

667 (
r_cuºít
 !
run
Ë&& (*(
cuºít
 +Ñ_current + 1)) &&

668 ((*(
cuºít
 + 
r_cuºít
 + 1) & 0xC0) == 0x80)) {

669 
r_cuºít
++;

672 if(
r_cuºít
 !
run
) {

673 *
cuºít
++ = '?';

674 
ªtvÆ
=1;

676 
cuºít
 +(1 + 
run
);

682  
ªtvÆ
;

683 
	}
}

695 
	$db_åim_°rögs
(
MP3FILE
 *
pmp3
) {

696 
	`db_åim_°rög
(
pmp3
->
tôÀ
);

697 
	`db_åim_°rög
(
pmp3
->
¨ti°
);

698 
	`db_åim_°rög
(
pmp3
->
Æbum
);

699 
	`db_åim_°rög
(
pmp3
->
gíª
);

700 
	`db_åim_°rög
(
pmp3
->
commít
);

701 
	`db_åim_°rög
(
pmp3
->
compo£r
);

702 
	`db_åim_°rög
(
pmp3
->
‹che°ø
);

703 
	`db_åim_°rög
(
pmp3
->
c⁄du˘‹
);

704 
	`db_åim_°rög
(
pmp3
->
groupög
);

705 
	`db_åim_°rög
(
pmp3
->
uæ
);

706 
	}
}

713 
	$db_åim_°rög
(*
°rög
) {

714 if(!
°rög
)

717 
	`°æí
(
°rög
) && (string[strlen(string) - 1] == ' '))

718 
°rög
[
	`°æí
(string) - 1] = '\0';

719 
	}
}

	@db-generic.h

22 #i‚de‡
_DB_GENERIC_H_


23 
	#_DB_GENERIC_H_


	)

25 
	~"ff-db°ru˘.h
"

26 
	~"sm¨t-∑r£r.h
"

27 
	~"web£rvî.h
"

30 
	mquîyTy≥Iãms
,

31 
	mquîyTy≥Pœyli°s
,

32 
	mquîyTy≥Pœyli°Iãms
,

33 
	mquîyTy≥Brow£Aπi°s
,

34 
	mquîyTy≥Brow£Albums
,

35 
	mquîyTy≥Brow£Gíªs
,

36 
	mquîyTy≥Brow£Compo£rs


37 } 
	tQuîyTy≥_t
;

40 
	mödexTy≥N⁄e
,

41 
	mödexTy≥Fú°
,

42 
	mödexTy≥La°
,

43 
	mödexTy≥Sub


44 } 
	tIndexTy≥_t
;

47 
	mcou¡S⁄gs
,

48 
	mcou¡Pœyli°s


49 } 
	tCou¡Ty≥_t
;

51 
	sèg_dbquîyöfo
 {

52 
QuîyTy≥_t
 
	mquîy_ty≥
;

53 
IndexTy≥_t
 
	mödex_ty≥
;

54 
	mzîo_Àngth
;

55 
	mödex_low
;

56 
	mödex_high
;

57 
	m∂ayli°_id
;

58 
	mdb_id
;

59 
	m£ssi⁄_id
;

60 
	mw™t_cou¡
;

61 
	m•ecifõdtŸÆcou¡
;

62 
	muri_cou¡
;

63 
	mc‹ª˘_‹dî
;

64 *
	muri_£˘i⁄s
[10];

65 
PARSETREE
 
	m±
;

66 *
	mouçut_öfo
;

67 
WS_CONNINFO
 *
	mpwsc
;

68 } 
	tDBQUERYINFO
;

70 
db_›í
(**
≥
, *
ty≥
, *
∑ømëîs
);

71 
db_öô
(
ªlﬂd
);

72 
db_deöô
();

74 
db_ªvisi⁄
();

76 
db_add
(**
≥
, 
MP3FILE
 *
pmp3
, *
id
);

78 
db_íum_°¨t
(**
≥
, 
DBQUERYINFO
 *
pöfo
);

79 
db_íum_„tch_row
(**
≥
, 
PACKED_MP3FILE
 *
row
, 
DBQUERYINFO
 *
pöfo
);

80 
db_íum_ª£t
(**
≥
, 
DBQUERYINFO
 *
pöfo
);

81 
db_íum_íd
(**
≥
);

82 
db_°¨t_sˇn
();

83 
db_íd_s⁄g_sˇn
();

84 
db_íd_sˇn
();

85 
db_exi°s
(*
∑th
);

86 
db_sˇ¬ög
();

88 
db_add_∂ayli°
(**
≥
, *
«me
, 
ty≥
, *
˛au£
, *
∑th
, 
ödex
, *
∂ayli°id
);

89 
db_add_∂ayli°_ôem
(**
≥
, 
∂ayli°id
, 
s⁄gid
);

90 
db_edô_∂ayli°
(**
≥
, 
id
, *
«me
, *
˛au£
);

91 
db_dñëe_∂ayli°
(**
≥
, 
∂ayli°id
);

92 
db_dñëe_∂ayli°_ôem
(**
≥
, 
∂ayli°id
, 
s⁄gid
);

94 
db_gë_îr‹
(**
≥
, 
îr
, ...);

96 
MP3FILE
 *
db_„tch_ôem
(**
≥
, 
id
);

97 
MP3FILE
 *
db_„tch_∑th
(**
≥
, *
∑th
, 
ödex
);

98 
M3UFILE
 *
db_„tch_∂ayli°
(**
≥
, *
∑th
, 
ödex
);

105 
db_∂aycou¡_ö¸emít
(**
≥
, 
id
);

106 
db_gë_s⁄g_cou¡
(**
≥
, *
cou¡
);

107 
db_gë_∂ayli°_cou¡
(**
≥
, *
cou¡
);

108 
db_di•o£_ôem
(
MP3FILE
 *
pmp3
);

109 
db_di•o£_∂ayli°
(
M3UFILE
 *
pm3u
);

110 
db_f‹˚_ªsˇn
(**
≥
);

112 
	#DB_E_SUCCESS
 0x00

	)

113 
	#DB_E_SQL_ERROR
 0x01

	)

114 
	#DB_E_DUPLICATE_PLAYLIST
 0x02

	)

115 
	#DB_E_NOCLAUSE
 0x03

	)

116 
	#DB_E_INVALIDTYPE
 0x04

	)

117 
	#DB_E_NOROWS
 0x05

	)

118 
	#DB_E_INVALID_PLAYLIST
 0x06

	)

119 
	#DB_E_INVALID_SONGID
 0x07

	)

120 
	#DB_E_PARSE
 0x08

	)

121 
	#DB_E_BADPROVIDER
 0x09

	)

122 
	#DB_E_PROC
 0x0A

	)

123 
	#DB_E_SIZE
 0x0B

	)

124 
	#DB_E_WRONGVERSION
 0x0C

	)

125 
	#DB_E_DB_ERROR
 0x0D

	)

126 
	#DB_E_MALLOC
 0x0E

	)

127 
	#DB_E_NOTFOUND
 0x0F

	)

130 
	sèg_dböfo
 {

131 *
	mh™dÀr_«me
;

132 *
	mdes¸ùti⁄
;

133 
	m°‹es_∂ayli°s
;

134 } 
	tDB_INFO
;

	@db-sql-sqlite2.c

31 #ifde‡
HAVE_CONFIG_H


32 
	~"c⁄fig.h
"

35 
	#_XOPEN_SOURCE
 500

	)

37 
	~<î∫o.h
>

38 
	~<limôs.h
>

39 
	~<±hªad.h
>

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

42 
	~<°rög.h
>

43 
	~<sqlôe.h
>

44 #ifde‡
HAVE_UNISTD_H


45 
	~<uni°d.h
>

47 #ifde‡
HAVE_STDINT_H


48 
	~<°döt.h
>

51 
	~"dØpd.h
"

52 
	~"c⁄f.h
"

53 
	~"îr.h
"

54 
	~"db-gíîic.h
"

55 
	~"db-sql.h
"

56 
	~"db-sql-sqlôe2.h
"

58 #i‚de‡
TRUE


59 
	#TRUE
 1

	)

60 
	#FALSE
 0

	)

65 
±hªad_muãx_t
 
	gdb_sqlôe2_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

66 
sqlôe_vm
 *
	gdb_sqlôe2_pvm
;

67 
	gdb_sqlôe2_ªlﬂd
=0;

68 *
	gdb_sqlôe2_íum_quîy
;

69 
±hªad_key_t
 
	gdb_sqlôe2_key
;

71 
	gdb_sqlôe2_∑th
[
PATH_MAX
 + 1];

73 
	#DB_SQLITE2_VERSION
 13

	)

77 
db_sqlôe2_lock
();

78 
db_sqlôe2_u∆ock
();

79 *
db_sqlôe2_öôül1
;

80 *
db_sqlôe2_öôül2
;

81 
db_sqlôe2_íum_begö_hñ≥r
(**
≥
);

86 
sqlôe
 *
	$db_sqlôe2_h™dÀ
() {

87 
sqlôe
 *
pdb
 = 
NULL
;

88 *
≥º
;

89 *
≥
 = 
NULL
;

91 
pdb
 = (
sqlôe
 *)
	`±hªad_gë•ecific
(
db_sqlôe2_key
);

92 if(
pdb
 =
NULL
) {

93 if((
pdb
 = 
	`sqlôe_›í
(
db_sqlôe2_∑th
,0666,&
≥º
)Ë=
NULL
) {

94 
	`db_gë_îr‹
(&
≥
,
DB_E_SQL_ERROR
,
≥º
);

95 
	`DPRINTF
(
E_FATAL
,
L_DB
,"db_sqlôe2_›í: %†(%s)\n",
≥º
,

96 
db_sqlôe2_∑th
);

97 
	`sqlôe_‰ìmem
(
≥º
);

98 
	`db_sqlôe2_u∆ock
();

99  
NULL
;

101 
	`sqlôe_busy_timeout
(
pdb
,30000);

102 
	`±hªad_£t•ecific
(
db_sqlôe2_key
,(*)
pdb
);

105  
pdb
;

106 
	}
}

111 
	$db_sqlôe2_‰ìdb
(
sqlôe
 *
pdb
) {

112 
	`sqlôe_˛o£
(
pdb
);

113 
	}
}

118 
	$db_sqlôe2_lock
() {

119 
îr
;

122 if((
îr
=
	`±hªad_muãx_lock
(&
db_sqlôe2_muãx
))) {

123 
	`DPRINTF
(
E_FATAL
,
L_DB
,"ˇ¬ŸÜock sqlôêlock: %s\n",
	`°ªº‹
(
îr
));

126 
	}
}

131 
	$db_sqlôe2_u∆ock
() {

132 
îr
;

135 if((
îr
=
	`±hªad_muãx_u∆ock
(&
db_sqlôe2_muãx
))) {

136 
	`DPRINTF
(
E_FATAL
,
L_DB
,"ˇ¬Ÿ u∆ock sqlôe2Üock: %s\n",
	`°ªº‹
(
îr
));

139 
	}
}

144 *
	$db_sqlôe2_vmquîy
(*
fmt
,
va_li°
 
≠
) {

145  
	`sqlôe_vm¥ötf
(
fmt
,
≠
);

146 
	}
}

151 
	$db_sqlôe2_vm‰ì
(*
quîy
) {

152 
	`sqlôe_‰ìmem
(
quîy
);

153 
	}
}

164 
	$db_sqlôe2_›í
(**
≥
, *
d¢
) {

165 
sqlôe
 *
pdb
;

166 *
≥º
;

167 
vî
;

168 
îr
;

170 
	`±hªad_key_¸óã
(&
db_sqlôe2_key
, (*)
db_sqlôe2_‰ìdb
);

171 
	`¢¥ötf
(
db_sqlôe2_∑th
,(db_sqlôe2_∑th),"%s/s⁄gs.db",
d¢
);

173 
	`db_sqlôe2_lock
();

174 
pdb
=
	`sqlôe_›í
(
db_sqlôe2_∑th
,0666,&
≥º
);

175 if(!
pdb
) {

176 
	`db_gë_îr‹
(
≥
,
DB_E_SQL_ERROR
,
≥º
);

177 
	`DPRINTF
(
E_LOG
,
L_DB
,"db_sqlôe2_›í: %†(%s)\n",
≥º
,

178 
db_sqlôe2_∑th
);

179 
	`sqlôe_‰ìmem
(
≥º
);

180 
	`db_sqlôe2_u∆ock
();

181  
DB_E_SQL_ERROR
;

183 
	`sqlôe_˛o£
(
pdb
);

184 
	`db_sqlôe2_u∆ock
();

186 
îr
 = 
	`db_sql_„tch_öt
(
≥
,&
vî
,"select value from config where "

188 if(
îr
 !
DB_E_SUCCESS
) {

189 if(
≥
Ë{ 
	`‰ì
(*pe); }

191 
	`DPRINTF
(
E_LOG
,
L_DB
,"Can't get db version. New database?\n");

192 } if(
vî
 < 
DB_SQLITE2_VERSION
) {

194 
	`DPRINTF
(
E_LOG
,
L_DB
,"Old database version: %d,Éxpecting %d\n",

195 
vî
, 
DB_SQLITE2_VERSION
);

196 
	`db_gë_îr‹
(
≥
,
DB_E_WRONGVERSION
);

197  
DB_E_WRONGVERSION
;

198 } if(
vî
 > 
DB_SQLITE2_VERSION
) {

199 
	`DPRINTF
(
E_LOG
,
L_DB
,"Bad db version: %d,Éxpecting %d\n",

200 
vî
, 
DB_SQLITE2_VERSION
);

201 
	`db_sqlôe2_exec
(
≥
,
E_FATAL
,"insert into config (term, value) "

205  
DB_E_SUCCESS
;

206 
	}
}

211 
	$db_sqlôe2_˛o£
() {

212  
DB_E_SUCCESS
;

213 
	}
}

225 
	$db_sqlôe2_exec
(**
≥
, 
logÀvñ
, *
fmt
, ...) {

226 
va_li°
 
≠
;

227 *
quîy
;

228 
îr
;

229 *
≥º
;

231 
	`va_°¨t
(
≠
,
fmt
);

232 
quîy
=
	`sqlôe_vm¥ötf
(
fmt
,
≠
);

233 
	`va_íd
(
≠
);

235 
	`DPRINTF
(
E_DBG
,
L_DB
,"Executög: %s\n",
quîy
);

237 
	`db_sqlôe2_lock
();

238 
îr
=
	`sqlôe_exec
(
	`db_sqlôe2_h™dÀ
(),
quîy
,
NULL
,NULL,&
≥º
);

239 if(
îr
 !
SQLITE_OK
) {

240 
	`db_gë_îr‹
(
≥
,
DB_E_SQL_ERROR
,
≥º
);

242 
	`DPRINTF
(
logÀvñ
 =
E_FATAL
 ? 
E_LOG
 :ÜogÀvñ,
L_DB
,"Query: %s\n",

243 
quîy
);

244 
	`DPRINTF
(
logÀvñ
,
L_DB
,"Eº‹: %s\n",
≥º
);

245 
	`sqlôe_‰ìmem
(
≥º
);

247 
	`DPRINTF
(
E_DBG
,
L_DB
,"Rows: %d\n",
	`sqlôe_ch™ges
(
	`db_sqlôe2_h™dÀ
()));

249 
	`sqlôe_‰ìmem
(
quîy
);

251 
	`db_sqlôe2_u∆ock
();

253 if(
îr
 !
SQLITE_OK
)

254  
DB_E_SQL_ERROR
;

255  
DB_E_SUCCESS
;

256 
	}
}

261 
	$db_sqlôe2_íum_begö
(**
≥
, *
fmt
, ...) {

262 
va_li°
 
≠
;

264 
	`va_°¨t
(
≠
, 
fmt
);

265 
	`db_sqlôe2_lock
();

266 
db_sqlôe2_íum_quîy
 = 
	`sqlôe_vm¥ötf
(
fmt
,
≠
);

267 
	`va_íd
(
≠
);

269  
	`db_sqlôe2_íum_begö_hñ≥r
(
≥
);

270 
	}
}

272 
	$db_sqlôe2_íum_begö_hñ≥r
(**
≥
) {

273 
îr
;

274 *
≥º
;

275 c⁄° *
±aû
;

277 
	`DPRINTF
(
E_DBG
,
L_DB
,"Executög: %s\n",
db_sqlôe2_íum_quîy
);

279 
îr
=
	`sqlôe_compûe
(
	`db_sqlôe2_h™dÀ
(),
db_sqlôe2_íum_quîy
,

280 &
±aû
,&
db_sqlôe2_pvm
,&
≥º
);

282 if(
îr
 !
SQLITE_OK
) {

283 
	`db_gë_îr‹
(
≥
,
DB_E_SQL_ERROR
,
≥º
);

284 
	`sqlôe_‰ìmem
(
≥º
);

285 
	`db_sqlôe2_u∆ock
();

286 
	`sqlôe_‰ìmem
(
db_sqlôe2_íum_quîy
);

287  
DB_E_SQL_ERROR
;

291  
DB_E_SUCCESS
;

292 
	}
}

305 
	$db_sqlôe2_íum_„tch
(**
≥
, 
SQL_ROW
 *
¥
) {

306 
îr
;

307 *
≥º
=
NULL
;

308 c⁄° **
cﬁ¨øy
;

309 
cﬁs
;

310 
cou¡î
=10;

312 
cou¡î
--) {

313 
îr
=
	`sqlôe_°ï
(
db_sqlôe2_pvm
,&
cﬁs
,(c⁄° ***)
¥
,&
cﬁ¨øy
);

314 if(
îr
 !
SQLITE_BUSY
)

316 
	`u¶ìp
(100);

319 if(
îr
 =
SQLITE_DONE
) {

320 *
¥
 = 
NULL
;

321  
DB_E_SUCCESS
;

324 if(
îr
 =
SQLITE_ROW
) {

325  
DB_E_SUCCESS
;

328 
	`db_gë_îr‹
(
≥
,
DB_E_SQL_ERROR
,
≥º
);

329  
DB_E_SQL_ERROR
;

330 
	}
}

335 
	$db_sqlôe2_íum_íd
(**
≥
) {

336 
îr
;

337 *
≥º
;

339 
	`sqlôe_‰ìmem
(
db_sqlôe2_íum_quîy
);

341 
îr
 = 
	`sqlôe_föÆize
(
db_sqlôe2_pvm
,&
≥º
);

342 if(
îr
 !
SQLITE_OK
) {

343 
	`db_gë_îr‹
(
≥
,
DB_E_SQL_ERROR
,
≥º
);

344 
	`sqlôe_‰ìmem
(
≥º
);

345 
	`db_sqlôe2_u∆ock
();

346  
DB_E_SQL_ERROR
;

349 
	`db_sqlôe2_u∆ock
();

350  
DB_E_SUCCESS
;

351 
	}
}

356 
	$db_sqlôe2_íum_ª°¨t
(**
≥
) {

357  
	`db_sqlôe2_íum_begö_hñ≥r
(
≥
);

358 
	}
}

361 
	$db_sqlôe2_evít
(
evít_ty≥
) {

362 
evít_ty≥
) {

364 
DB_SQL_EVENT_STARTUP
:

365 if(!
	`c⁄f_gë_öt
("database","quick_startup",0))

366 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"vacuum");

369 
	`db_sqlôe2_exec
(
NULL
,
E_DBG
,"create index idx_path on "

371 
	`db_sqlôe2_exec
(
NULL
,
E_DBG
,"create index idx_songid on "

373 
	`db_sqlôe2_exec
(
NULL
,
E_DBG
,"create index idx_playlistid on "

376 
db_sqlôe2_ªlﬂd
=0;

379 
DB_SQL_EVENT_FULLRELOAD
:

380 
	`db_sqlôe2_exec
(
NULL
,
E_DBG
,"drop index idx_path");

381 
	`db_sqlôe2_exec
(
NULL
,
E_DBG
,"drop index idx_songid");

382 
	`db_sqlôe2_exec
(
NULL
,
E_DBG
,"drop index idx_playlistid");

384 
	`db_sqlôe2_exec
(
NULL
,
E_DBG
,"dropÅable songs");

386 
	`db_sqlôe2_exec
(
NULL
,
E_DBG
,"delete fromÖlaylists whereÇotÅype=1ándÇotÅype=0");

387 
	`db_sqlôe2_exec
(
NULL
,
E_DBG
,"dropÅableÖlaylistitems");

388 
	`db_sqlôe2_exec
(
NULL
,
E_DBG
,"dropÅable config");

390 
	`db_sqlôe2_exec
(
NULL
,
E_DBG
,"vacuum");

392 
	`db_sqlôe2_exec
(
NULL
,
E_DBG
,
db_sqlôe2_öôül1
);

393 
	`db_sqlôe2_exec
(
NULL
,
E_DBG
,
db_sqlôe2_öôül2
);

395 
db_sqlôe2_ªlﬂd
=1;

398 
DB_SQL_EVENT_SONGSCANSTART
:

399 if(
db_sqlôe2_ªlﬂd
) {

400 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"pragma synchronous = off");

401 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"beginÅransaction");

403 
	`db_sqlôe2_exec
(
NULL
,
E_DBG
,"dropÅable updated");

404 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"createÅempÅable updated (id int)");

405 
	`db_sqlôe2_exec
(
NULL
,
E_DBG
,"dropÅableÖlupdated");

406 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"createÅempÅableÖlupdated(id int)");

410 
DB_SQL_EVENT_SONGSCANEND
:

411 if(
db_sqlôe2_ªlﬂd
) {

412 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"commitÅransaction");

413 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"pragma synchronous=normal");

414 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"create index idx_path on songs(path,idx)");

415 
	`db_sqlôe2_exec
(
NULL
,
E_DBG
,"delete from config whereÅerm='rescan'");

419 
DB_SQL_EVENT_PLSCANSTART
:

420 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"pragma synchronous = off");

421 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"beginÅransaction");

424 
DB_SQL_EVENT_PLSCANEND
:

425 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"endÅransaction");

426 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"pragma synchronous=normal");

428 if(
db_sqlôe2_ªlﬂd
) {

429 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"create index idx_songid onÖlaylistitems(songid)");

430 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"create index idx_playlistid onÖlaylistitems(playlistid,songid)");

433 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"delete from songs where idÇot in (select id from updated)");

434 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"update songs set force_update=0");

435 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"dropÅable updated");

437 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"delete fromÖlaylists where "

440 
PL_STATICFILE
,
PL_STATICXML
);

441 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"delete fromÖlaylistitems where "

444 
	`db_sqlôe2_exec
(
NULL
,
E_FATAL
,"dropÅableÖlupdated");

446 
db_sqlôe2_ªlﬂd
=0;

453  
DB_E_SUCCESS
;

454 
	}
}

462 
	$db_sqlôe2_ö£π_id
() {

463  
	`sqlôe_œ°_ö£π_rowid
(
	`db_sqlôe2_h™dÀ
());

464 
	}
}

467 *
	gdb_sqlôe2_öôül1
 =

525 *
	gdb_sqlôe2_öôül2
 =

	@db-sql-sqlite2.h

22 #i‚de‡
_DB_SQL_SQLITE2_


23 
	#_DB_SQL_SQLITE2_


	)

25 
db_sqlôe2_›í
(**
≥
, *
d¢
);

26 
db_sqlôe2_˛o£
();

29 
db_sqlôe2_exec
(**
≥
, 
logÀvñ
, *
fmt
, ...);

30 *
db_sqlôe2_vmquîy
(*
fmt
,
va_li°
 
≠
);

31 
db_sqlôe2_vm‰ì
(*
quîy
);

34 
db_sqlôe2_íum_begö
(**
≥
, *
fmt
, ...);

35 
db_sqlôe2_íum_„tch
(**
≥
, 
SQL_ROW
 *
¥
);

36 
db_sqlôe2_íum_íd
(**
≥
);

37 
db_sqlôe2_íum_ª°¨t
(**
≥
);

39 
db_sqlôe2_evít
(
evít_ty≥
);

41 
db_sqlôe2_ö£π_id
();

	@db-sql-sqlite3.c

31 #ifde‡
HAVE_CONFIG_H


32 
	~"c⁄fig.h
"

35 
	#_XOPEN_SOURCE
 500

	)

37 
	~<î∫o.h
>

38 
	~<limôs.h
>

39 
	~<±hªad.h
>

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

42 
	~<°rög.h
>

43 
	~<sqlôe3.h
>

44 #ifde‡
HAVE_STDINT_H


45 
	~<°döt.h
>

47 #ifde‡
HAVE_UNISTD_H


48 
	~<uni°d.h
>

51 
	~"dØpd.h
"

52 
	~"c⁄f.h
"

53 
	~"îr.h
"

54 
	~"db-gíîic.h
"

55 
	~"db-sql.h
"

56 
	~"db-sql-sqlôe3.h
"

58 #i‚de‡
TRUE


59 
	#TRUE
 1

	)

60 
	#FALSE
 0

	)

65 
±hªad_muãx_t
 
	gdb_sqlôe3_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

66 
sqlôe3_°mt
 *
	gdb_sqlôe3_°mt
;

67 c⁄° *
	gdb_sqlôe3_±aû
;

68 
	gdb_sqlôe3_föÆized
;

69 
	gdb_sqlôe3_ªlﬂd
=0;

70 *
	gdb_sqlôe3_íum_quîy
=
NULL
;

71 **
	gdb_sqlôe3_row
 = 
NULL
;

72 
±hªad_key_t
 
	gdb_sqlôe3_key
;

73 
	gdb_sqlôe3_∑th
[
PATH_MAX
 + 1];

75 
	#DB_SQLITE3_VERSION
 13

	)

79 
db_sqlôe3_lock
();

80 
db_sqlôe3_u∆ock
();

81 *
db_sqlôe3_öôül1
;

82 *
db_sqlôe3_öôül2
;

83 
db_sqlôe3_íum_begö_hñ≥r
(**
≥
);

90 
sqlôe3
 *
	$db_sqlôe3_h™dÀ
() {

91 
sqlôe3
 *
pdb
 = 
NULL
;

92 *
≥
 = 
NULL
;

94 
pdb
 = (
sqlôe3
*)
	`±hªad_gë•ecific
(
db_sqlôe3_key
);

95 if(
pdb
 =
NULL
) {

96 
	`DPRINTF
(
E_DBG
,
L_DB
,"CreatingÇew db handle\n");

97 if(
	`sqlôe3_›í
(
db_sqlôe3_∑th
,&
pdb
Ë!
SQLITE_OK
) {

98 
	`db_gë_îr‹
(&
≥
,
DB_E_SQL_ERROR
,
	`sqlôe3_îrmsg
(
pdb
));

99 
	`DPRINTF
(
E_FATAL
,
L_DB
,"db_sqlôe3_›í: %†(%s)\n",
≥
,
db_sqlôe3_∑th
);

100 
	`db_sqlôe3_u∆ock
();

101  
NULL
;

103 
	`sqlôe3_busy_timeout
(
pdb
,30000);

104 
	`±hªad_£t•ecific
(
db_sqlôe3_key
,(*)
pdb
);

107  
pdb
;

108 
	}
}

113 
	$db_sqlôe3_‰ìdb
(
sqlôe3
 *
pdb
) {

114 
	`sqlôe3_˛o£
(
pdb
);

115 
	}
}

120 
	$db_sqlôe3_lock
() {

121 
îr
;

123 if((
îr
=
	`±hªad_muãx_lock
(&
db_sqlôe3_muãx
))) {

124 
	`DPRINTF
(
E_FATAL
,
L_DB
,"ˇ¬ŸÜock sqlôêlock: %s\n",
	`°ªº‹
(
îr
));

126 
	}
}

131 
	$db_sqlôe3_u∆ock
() {

132 
îr
;

134 if((
îr
=
	`±hªad_muãx_u∆ock
(&
db_sqlôe3_muãx
))) {

135 
	`DPRINTF
(
E_FATAL
,
L_DB
,"ˇ¬Ÿ u∆ock sqlôe3Üock: %s\n",
	`°ªº‹
(
îr
));

137 
	}
}

142 *
	$db_sqlôe3_vmquîy
(*
fmt
,
va_li°
 
≠
) {

143  
	`sqlôe3_vm¥ötf
(
fmt
,
≠
);

144 
	}
}

149 
	$db_sqlôe3_vm‰ì
(*
quîy
) {

150 
	`sqlôe3_‰ì
(
quîy
);

151 
	}
}

162 
	$db_sqlôe3_›í
(**
≥
, *
d¢
) {

163 
vî
;

164 
îr
;

165 
sqlôe3
 *
pdb
;

167 
	`±hªad_key_¸óã
(&
db_sqlôe3_key
, (*)
db_sqlôe3_‰ìdb
);

168 
	`¢¥ötf
(
db_sqlôe3_∑th
,(db_sqlôe3_∑th),"%s/s⁄gs3.db",
d¢
);

170 
	`db_sqlôe3_lock
();

171 if(
	`sqlôe3_›í
(
db_sqlôe3_∑th
,&
pdb
Ë!
SQLITE_OK
) {

172 
	`db_gë_îr‹
(
≥
,
DB_E_SQL_ERROR
,
	`sqlôe3_îrmsg
(
pdb
));

173 
	`DPRINTF
(
E_LOG
,
L_DB
,"db_sqlôe3_›í: %†(%s)\n",
≥
 ? *pe : "Unknown",

174 
db_sqlôe3_∑th
);

175 
	`db_sqlôe3_u∆ock
();

176  
DB_E_SQL_ERROR
;

178 
	`sqlôe3_˛o£
(
pdb
);

179 
	`db_sqlôe3_u∆ock
();

181 
îr
 = 
	`db_sql_„tch_öt
(
≥
,&
vî
,"select value from config where "

183 if(
îr
 !
DB_E_SUCCESS
) {

184 if(
≥
Ë{ 
	`‰ì
(*pe); }

186 
	`DPRINTF
(
E_LOG
,
L_DB
,"Can't get db version. New database?\n");

187 } if(
vî
 < 
DB_SQLITE3_VERSION
) {

188 
	`DPRINTF
(
E_LOG
,
L_DB
,"Old database version: %d,Éxpecting %d\n",

189 
vî
,
DB_SQLITE3_VERSION
);

190 
	`db_gë_îr‹
(
≥
,
DB_E_WRONGVERSION
);

191  
DB_E_WRONGVERSION
;

192 } if(
vî
 > 
DB_SQLITE3_VERSION
) {

193 
	`db_sqlôe3_exec
(
≥
,
E_FATAL
,"insert into config (term, value) "

197  
DB_E_SUCCESS
;

198 
	}
}

203 
	$db_sqlôe3_˛o£
() {

205  
DB_E_SUCCESS
;

206 
	}
}

218 
	$db_sqlôe3_exec
(**
≥
, 
logÀvñ
, *
fmt
, ...) {

219 
va_li°
 
≠
;

220 *
quîy
;

221 
îr
;

222 *
≥º
;

224 
	`db_sqlôe3_lock
();

226 
	`va_°¨t
(
≠
,
fmt
);

227 
quîy
=
	`sqlôe3_vm¥ötf
(
fmt
,
≠
);

228 
	`va_íd
(
≠
);

230 
	`DPRINTF
(
E_DBG
,
L_DB
,"Executög: %s\n",
quîy
);

232 
îr
=
	`sqlôe3_exec
(
	`db_sqlôe3_h™dÀ
(),
quîy
,
NULL
,NULL,&
≥º
);

233 if(
îr
 !
SQLITE_OK
) {

234 
	`db_gë_îr‹
(
≥
,
DB_E_SQL_ERROR
,
≥º
);

236 
	`DPRINTF
(
logÀvñ
 =
E_FATAL
 ? 
E_LOG
 :ÜogÀvñ,
L_DB
,"Query: %s\n",

237 
quîy
);

238 
	`DPRINTF
(
logÀvñ
,
L_DB
,"Eº‹: %s\n",
≥º
);

239 
	`sqlôe3_‰ì
(
≥º
);

241 
	`DPRINTF
(
E_DBG
,
L_DB
,"Rows: %d\n",
	`sqlôe3_ch™ges
(
	`db_sqlôe3_h™dÀ
()));

243 
	`sqlôe3_‰ì
(
quîy
);

245 
	`db_sqlôe3_u∆ock
();

247 if(
îr
 !
SQLITE_OK
)

248  
DB_E_SQL_ERROR
;

249  
DB_E_SUCCESS
;

250 
	}
}

255 
	$db_sqlôe3_íum_begö
(**
≥
, *
fmt
, ...) {

256 
va_li°
 
≠
;

258 
	`db_sqlôe3_lock
();

259 
	`va_°¨t
(
≠
, 
fmt
);

260 
db_sqlôe3_íum_quîy
 = 
	`sqlôe3_vm¥ötf
(
fmt
,
≠
);

261 
	`va_íd
(
≠
);

263 
db_sqlôe3_föÆized
=0;

264  
	`db_sqlôe3_íum_begö_hñ≥r
(
≥
);

265 
	}
}

267 
	$db_sqlôe3_íum_begö_hñ≥r
(**
≥
) {

268 
îr
;

270 if(!
db_sqlôe3_íum_quîy
)

271 *((*)
NULL
) = 1;

273 
	`DPRINTF
(
E_DBG
,
L_DB
,"Executög: %s\n",
db_sqlôe3_íum_quîy
);

274 
îr
=
	`sqlôe3_¥ï¨e
(
	`db_sqlôe3_h™dÀ
(),
db_sqlôe3_íum_quîy
,-1,

275 &
db_sqlôe3_°mt
,&
db_sqlôe3_±aû
);

277 if(
îr
 !
SQLITE_OK
) {

278 
	`db_gë_îr‹
(
≥
,
DB_E_SQL_ERROR
,
	`sqlôe3_îrmsg
(
	`db_sqlôe3_h™dÀ
()));

279 
	`sqlôe3_‰ì
(
db_sqlôe3_íum_quîy
);

280 
db_sqlôe3_íum_quîy
=
NULL
;

281 
	`db_sqlôe3_u∆ock
();

282  
DB_E_SQL_ERROR
;

285 
	`DPRINTF
(
E_SPAM
,
L_DB
,"Pª∑ªd sèãmít: %08X\n",
db_sqlôe3_°mt
);

288 if(
db_sqlôe3_row
)

289 
	`‰ì
(
db_sqlôe3_row
);

290 
db_sqlôe3_row
=
NULL
;

292  
DB_E_SUCCESS
;

294 
	}
}

308 
	$db_sqlôe3_íum_„tch
(**
≥
, 
SQL_ROW
 *
¥
) {

309 
îr
;

310 
cﬁs
;

311 
idx
;

312 
cou¡î
=10;

314 if(!
db_sqlôe3_íum_quîy
)

315 *((*)
NULL
) = 1;

317 
cou¡î
--) {

318 
	`DPRINTF
(
E_SPAM
,
L_DB
,"Fëchög sèãmít: %08X\n",
db_sqlôe3_°mt
);

319 
îr
=
	`sqlôe3_°ï
(
db_sqlôe3_°mt
);

320 if(
îr
 !
SQLITE_BUSY
)

322 
	`u¶ìp
(1000);

325 if(
îr
 =
SQLITE_DONE
) {

326 *
¥
 = 
NULL
;

327 if(
db_sqlôe3_row
)

328 
	`‰ì
(
db_sqlôe3_row
);

329 
db_sqlôe3_row
 = 
NULL
;

330  
DB_E_SUCCESS
;

333 if(
îr
 =
SQLITE_ROW
) {

334 
	`DPRINTF
(
E_SPAM
,
L_DB
,"GotÑow\n");

335 
cﬁs
 = 
	`sqlôe3_cﬁumn_cou¡
(
db_sqlôe3_°mt
);

337 if(!
db_sqlôe3_row
) {

339 
db_sqlôe3_row
 = (**)
	`mÆloc
(((*)Ë* 
cﬁs
);

340 if(!
db_sqlôe3_row
)

341 
	`DPRINTF
(
E_FATAL
,
L_DB
,"MallocÉrror\n");

344 
idx
=0; idx < 
cﬁs
; idx++) {

345 
db_sqlôe3_row
[
idx
] = (*Ë
	`sqlôe3_cﬁumn_blob
(
db_sqlôe3_°mt
,idx);

348 *
¥
 = 
db_sqlôe3_row
;

349  
DB_E_SUCCESS
;

352 if(
db_sqlôe3_row
)

353 
	`‰ì
(
db_sqlôe3_row
);

354 
db_sqlôe3_row
 = 
NULL
;

356 
	`db_gë_îr‹
(
≥
,
DB_E_SQL_ERROR
,
	`sqlôe3_îrmsg
(
	`db_sqlôe3_h™dÀ
()));

357 
	`DPRINTF
(
E_SPAM
,
L_DB
,"FöÆizög sèãmít: %08X\n",
db_sqlôe3_°mt
);

358 
	`sqlôe3_föÆize
(
db_sqlôe3_°mt
);

359 
db_sqlôe3_föÆized
=1;

361  
DB_E_SQL_ERROR
;

362 
	}
}

367 
	$db_sqlôe3_íum_íd
(**
≥
) {

368 
îr
;

370 if(!
db_sqlôe3_íum_quîy
)

371 *((*)
NULL
) = 1;

373 if(
db_sqlôe3_row
)

374 
	`‰ì
(
db_sqlôe3_row
);

375 
db_sqlôe3_row
 = 
NULL
;

376 
	`sqlôe3_‰ì
(
db_sqlôe3_íum_quîy
);

377 
db_sqlôe3_íum_quîy
 = 
NULL
;

379 if(!
db_sqlôe3_föÆized
) {

380 
	`DPRINTF
(
E_SPAM
,
L_DB
,"FöÆizög sèãmít: %08X\n",
db_sqlôe3_°mt
);

381 
îr
 = 
	`sqlôe3_föÆize
(
db_sqlôe3_°mt
);

382 if(
îr
 !
SQLITE_OK
) {

383 
	`db_gë_îr‹
(
≥
,
DB_E_SQL_ERROR
,
	`sqlôe3_îrmsg
(
	`db_sqlôe3_h™dÀ
()));

384 
	`db_sqlôe3_u∆ock
();

385  
DB_E_SQL_ERROR
;

389 
	`db_sqlôe3_u∆ock
();

390  
DB_E_SUCCESS
;

391 
	}
}

396 
	$db_sqlôe3_íum_ª°¨t
(**
≥
) {

397  
	`db_sqlôe3_íum_begö_hñ≥r
(
≥
);

398 
	}
}

401 
	$db_sqlôe3_evít
(
evít_ty≥
) {

402 
evít_ty≥
) {

404 
DB_SQL_EVENT_STARTUP
:

409 
	`db_sqlôe3_exec
(
NULL
,
E_DBG
,"create index idx_path on "

412 
	`db_sqlôe3_exec
(
NULL
,
E_DBG
,"create index idx_songid on "

415 
	`db_sqlôe3_exec
(
NULL
,
E_DBG
,"create index idx_playlistid on "

418 
db_sqlôe3_ªlﬂd
=0;

421 
DB_SQL_EVENT_FULLRELOAD
:

422 
	`db_sqlôe3_exec
(
NULL
,
E_DBG
,"drop index idx_path");

423 
	`db_sqlôe3_exec
(
NULL
,
E_DBG
,"drop index idx_songid");

424 
	`db_sqlôe3_exec
(
NULL
,
E_DBG
,"drop index idx_playlistid");

426 
	`db_sqlôe3_exec
(
NULL
,
E_DBG
,"dropÅable songs");

428 
	`db_sqlôe3_exec
(
NULL
,
E_DBG
,"delete fromÖlaylists whereÇotÅype=1ándÇotÅype=0");

429 
	`db_sqlôe3_exec
(
NULL
,
E_DBG
,"dropÅableÖlaylistitems");

430 
	`db_sqlôe3_exec
(
NULL
,
E_DBG
,"dropÅable config");

434 
	`db_sqlôe3_exec
(
NULL
,
E_DBG
,
db_sqlôe3_öôül1
);

435 
	`db_sqlôe3_exec
(
NULL
,
E_DBG
,
db_sqlôe3_öôül2
);

436 
db_sqlôe3_ªlﬂd
=1;

439 
DB_SQL_EVENT_SONGSCANSTART
:

440 if(
db_sqlôe3_ªlﬂd
) {

441 
	`db_sqlôe3_exec
(
NULL
,
E_FATAL
,"pragma synchronous = off");

442 
	`db_sqlôe3_exec
(
NULL
,
E_FATAL
,"beginÅransaction");

444 
	`db_sqlôe3_exec
(
NULL
,
E_DBG
,"dropÅable updated");

445 
	`db_sqlôe3_exec
(
NULL
,
E_FATAL
,"createÅempÅable updated (id int)");

446 
	`db_sqlôe3_exec
(
NULL
,
E_DBG
,"dropÅableÖlupdated");

447 
	`db_sqlôe3_exec
(
NULL
,
E_FATAL
,"createÅempÅableÖlupdated(id int)");

451 
DB_SQL_EVENT_SONGSCANEND
:

452 if(
db_sqlôe3_ªlﬂd
) {

453 
	`db_sqlôe3_exec
(
NULL
,
E_FATAL
,"commitÅransaction");

454 
	`db_sqlôe3_exec
(
NULL
,
E_FATAL
,"pragma synchronous =Çormal");

455 
	`db_sqlôe3_exec
(
NULL
,
E_FATAL
,"create index idx_path on songs(path,idx)");

456 
	`db_sqlôe3_exec
(
NULL
,
E_DBG
,"delete from config whereÅerm='rescan'");

460 
DB_SQL_EVENT_PLSCANSTART
:

461 
	`db_sqlôe3_exec
(
NULL
,
E_FATAL
,"pragma synchronous = off");

462 
	`db_sqlôe3_exec
(
NULL
,
E_FATAL
,"beginÅransaction");

465 
DB_SQL_EVENT_PLSCANEND
:

466 
	`db_sqlôe3_exec
(
NULL
,
E_FATAL
,"endÅransaction");

467 
	`db_sqlôe3_exec
(
NULL
,
E_FATAL
,"pragma synchronous=normal");

469 if(
db_sqlôe3_ªlﬂd
) {

470 
	`db_sqlôe3_exec
(
NULL
,
E_FATAL
,"create index idx_songid onÖlaylistitems(songid)");

471 
	`db_sqlôe3_exec
(
NULL
,
E_FATAL
,"create index idx_playlistid onÖlaylistitems(playlistid,songid)");

474 
	`db_sqlôe3_exec
(
NULL
,
E_FATAL
,"delete from songs where idÇot in (select id from updated)");

475 
	`db_sqlôe3_exec
(
NULL
,
E_FATAL
,"update songs set force_update=0");

476 
	`db_sqlôe3_exec
(
NULL
,
E_FATAL
,"dropÅable updated");

478 
	`db_sqlôe3_exec
(
NULL
,
E_FATAL
,"delete fromÖlaylists where "

481 
PL_STATICFILE
,
PL_STATICXML
);

482 
	`db_sqlôe3_exec
(
NULL
,
E_FATAL
,"delete fromÖlaylistitems where "

485 
	`db_sqlôe3_exec
(
NULL
,
E_FATAL
,"dropÅableÖlupdated");

487 
db_sqlôe3_ªlﬂd
=0;

494  
DB_E_SUCCESS
;

495 
	}
}

503 
	$db_sqlôe3_ö£π_id
() {

504 
ªsu…
;

506 
	`db_sqlôe3_lock
();

507 
ªsu…
 = ()
	`sqlôe3_œ°_ö£π_rowid
(
	`db_sqlôe3_h™dÀ
());

508 
	`db_sqlôe3_u∆ock
();

510  
ªsu…
;

511 
	}
}

515 *
	gdb_sqlôe3_öôül1
 =

573 *
	gdb_sqlôe3_öôül2
 =

	@db-sql-sqlite3.h

22 #i‚de‡
_DB_SQL_SQLITE3_


23 
	#_DB_SQL_SQLITE3_


	)

25 
db_sqlôe3_›í
(**
≥
, *
d¢
);

26 
db_sqlôe3_˛o£
();

29 
db_sqlôe3_exec
(**
≥
, 
logÀvñ
, *
fmt
, ...);

30 *
db_sqlôe3_vmquîy
(*
fmt
,
va_li°
 
≠
);

31 
db_sqlôe3_vm‰ì
(*
quîy
);

34 
db_sqlôe3_íum_begö
(**
≥
, *
fmt
, ...);

35 
db_sqlôe3_íum_„tch
(**
≥
, 
SQL_ROW
 *
¥
);

36 
db_sqlôe3_íum_íd
(**
≥
);

37 
db_sqlôe3_íum_ª°¨t
(**
≥
);

39 
db_sqlôe3_evít
(
evít_ty≥
);

40 
db_sqlôe3_ö£π_id
();

	@db-sql-updates.c

7 
	~<°dio.h
>

8 
	~"dØpd.h
"

10 *
	gdb_sqlôe_upd©es
[] = {

418 
NULL


	@db-sql.c

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 
	#_XOPEN_SOURCE
 500

	)

28 
	~<˘y≥.h
>

29 
	~<î∫o.h
>

30 
	~<f˙é.h
>

31 
	~<limôs.h
>

32 
	~<±hªad.h
>

33 
	~<°d¨g.h
>

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 #ifde‡
HAVE_STDINT_H


38 
	~<°döt.h
>

41 
	~"dØpd.h
"

42 
	~"îr.h
"

43 
	~"mp3-sˇ¬î.h
"

44 
	~"db-gíîic.h
"

45 
	~"db-sql.h
"

46 
	~"ª°¨t.h
"

47 
	~"sm¨t-∑r£r.h
"

48 
	~"∂ugö.h
"

49 
	~"c⁄f.h
"

51 #ifde‡
HAVE_LIBSQLITE


52 
	~"db-sql-sqlôe2.h
"

54 #ifde‡
HAVE_LIBSQLITE3


55 
	~"db-sql-sqlôe3.h
"

59 
	gdb_sql_ªlﬂd
=0;

60 
	gdb_sql_ö_∂ayli°_sˇn
=0;

61 
	gdb_sql_ö_sˇn
=0;

62 
	gdb_sql_√ed_di•o£
=0;

64 *
db_sqlôe_upd©es
[];

69 
db_sql_buûd_mp3fûe
(**
vÆ¨øy
, 
MP3FILE
 *
pmp3
);

70 
db_sql_upd©e
(**
≥
, 
MP3FILE
 *
pmp3
, *
id
);

71 
db_sql_upd©e_∂ayli°s
(**
≥
);

72 
db_sql_∑r£_sm¨t
(**
≥
, **
˛au£
, *
phø£
);

73 *
_db_¥›î_∑th
(*
∑th
);

75 
	#STR
(
a
Ë◊Ë? (aË: ""

	)

76 
	#ISSTR
(
a
Ë(◊Ë&& 
	`°æí
(◊)))

	)

77 
	#MAYBEFREE
(
a
Ë{ if(◊)Ë
	`‰ì
(◊)); };

	)

86 (*
db_sql_›í_‚
)(**
≥
, *
d¢
Ë
NULL
;

87 (*
db_sql_˛o£_‚
)(Ë
NULL
;

88 (*
db_sql_exec_‚
)(**
≥
, 
logÀvñ
, *
fmt
, ...Ë
NULL
;

89 * (*
db_sql_vmquîy_‚
)(*
fmt
,
va_li°
 
≠
Ë
NULL
;

90 (*
db_sql_vm‰ì_‚
)(*
quîy
Ë
NULL
;

91 (*
db_sql_íum_begö_‚
)(**
≥
, *
fmt
, ...Ë
NULL
;

92 (*
db_sql_íum_„tch_‚
)(**
≥
, 
SQL_ROW
 *
¥
Ë
NULL
;

93 (*
db_sql_íum_íd_‚
)(**
≥
Ë
NULL
;

94 (*
db_sql_íum_ª°¨t_‚
)(**
≥
);

95 (*
db_sql_evít_‚
)(
evít_ty≥
);

96 (*
db_sql_ö£π_id_‚
)();

98 #ifde‡
HAVE_LIBSQLITE


99 
	$db_sql_›í_sqlôe2
(**
≥
, *
∑ømëîs
) {

101 
db_sql_›í_‚
 = 
db_sqlôe2_›í
;

102 
db_sql_˛o£_‚
 = 
db_sqlôe2_˛o£
;

103 
db_sql_exec_‚
 = 
db_sqlôe2_exec
;

104 
db_sql_vmquîy_‚
 = 
db_sqlôe2_vmquîy
;

105 
db_sql_vm‰ì_‚
 = 
db_sqlôe2_vm‰ì
;

106 
db_sql_íum_begö_‚
 = 
db_sqlôe2_íum_begö
;

107 
db_sql_íum_„tch_‚
 = 
db_sqlôe2_íum_„tch
;

108 
db_sql_íum_íd_‚
 = 
db_sqlôe2_íum_íd
;

109 
db_sql_íum_ª°¨t_‚
 = 
db_sqlôe2_íum_ª°¨t
;

110 
db_sql_evít_‚
 = 
db_sqlôe2_evít
;

111 
db_sql_ö£π_id_‚
 = 
db_sqlôe2_ö£π_id
;

113  
	`db_sql_›í
(
≥
,
∑ømëîs
);

114 
	}
}

117 #ifde‡
HAVE_LIBSQLITE3


118 
	$db_sql_›í_sqlôe3
(**
≥
, *
∑ømëîs
) {

120 
db_sql_›í_‚
 = 
db_sqlôe3_›í
;

121 
db_sql_˛o£_‚
 = 
db_sqlôe3_˛o£
;

122 
db_sql_exec_‚
 = 
db_sqlôe3_exec
;

123 
db_sql_vmquîy_‚
 = 
db_sqlôe3_vmquîy
;

124 
db_sql_vm‰ì_‚
 = 
db_sqlôe3_vm‰ì
;

125 
db_sql_íum_begö_‚
 = 
db_sqlôe3_íum_begö
;

126 
db_sql_íum_„tch_‚
 = 
db_sqlôe3_íum_„tch
;

127 
db_sql_íum_íd_‚
 = 
db_sqlôe3_íum_íd
;

128 
db_sql_íum_ª°¨t_‚
 = 
db_sqlôe3_íum_ª°¨t
;

129 
db_sql_evít_‚
 = 
db_sqlôe3_evít
;

130 
db_sql_ö£π_id_‚
 = 
db_sqlôe3_ö£π_id
;

132  
	`db_sql_›í
(
≥
,
∑ømëîs
);

133 
	}
}

136 *
	$_db_¥›î_∑th
(*
∑th
) {

137 *
√w_∑th
;

138 *
∑th_±r
;

140 
√w_∑th
 = 
	`°rdup
(
∑th
);

141 if(!
√w_∑th
) {

142 
	`DPRINTF
(
E_FATAL
,
L_DB
,"malloc: _db_proper_path\n");

145 if(
	`c⁄f_gë_öt
("scanning","case_sensitive",1) == 0) {

146 
∑th_±r
 = 
√w_∑th
;

147 *
∑th_±r
) {

148 *
∑th_±r
 = 
	`touµî
(*path_ptr);

149 
∑th_±r
++;

153  
√w_∑th
;

154 
	}
}

157 
	$db_sql_©oi
(c⁄° *
wh©
) {

158  
wh©
 ? 
	`©oi
(what) : 0;

159 
	}
}

160 *
	$db_sql_°rdup
(c⁄° *
wh©
) {

161  
wh©
 ? (
	`°æí
(wh©Ë? 
	`°rdup
(wh©Ë: 
NULL
) : NULL;

162 
	}
}

164 
uöt64_t
 
	$db_sql_©ﬁ
(c⁄° *
wh©
) {

165  
wh©
 ? 
	`©ﬁl
(what) : 0;

166 
	}
}

178 
	$db_sql_esˇ≥
(*
buf„r
, *
size
, *
fmt
, ...) {

179 
va_li°
 
≠
;

180 *
esˇ≥d
;

182 
	`va_°¨t
(
≠
,
fmt
);

183 
esˇ≥d
 = 
	`db_sql_vmquîy_‚
(
fmt
,
≠
);

184 
	`va_íd
(
≠
);

186 if(*
size
 < ()
	`°æí
(
esˇ≥d
)) {

187 *
size
 = ()
	`°æí
(
esˇ≥d
) + 1;

188 
	`db_sql_vm‰ì_‚
(
esˇ≥d
);

189  
DB_E_SIZE
;

192 
	`°r˝y
(
buf„r
,
esˇ≥d
);

193 *
size
 = ()
	`°æí
(
esˇ≥d
);

194 
	`db_sql_vm‰ì_‚
(
esˇ≥d
);

196  
DB_E_SUCCESS
;

197 
	}
}

204 
	$db_sql_„tch_row
(**
≥
, 
SQL_ROW
 *
row
, *
fmt
, ...) {

205 
îr
;

206 *
quîy
;

207 
va_li°
 
≠
;

210 *
row
=
NULL
;

212 
	`va_°¨t
(
≠
,
fmt
);

213 
quîy
=
	`db_sql_vmquîy_‚
(
fmt
,
≠
);

214 
	`va_íd
(
≠
);

216 
îr
=
	`db_sql_íum_begö_‚
(
≥
,"%s",
quîy
);

217 
	`db_sql_vm‰ì_‚
(
quîy
);

219 if(
îr
 !
DB_E_SUCCESS
) {

220 
	`DPRINTF
(
E_LOG
,
L_DB
,"Error:Énum_begin failed (error %d): %s\n",

221 
îr
,(
≥
) ? *pe : "?");

222  
îr
;

225 
îr
=
	`db_sql_íum_„tch_‚
(
≥
, 
row
);

226 if(
îr
 !
DB_E_SUCCESS
) {

227 
	`DPRINTF
(
E_LOG
,
L_DB
,"Error:Énum_fetch failed (error %d): %s\n",

228 
îr
,(
≥
) ? *pe : "?");

229 
	`db_sql_íum_íd_‚
(
NULL
);

230  
îr
;

233 if(!(*
row
)) {

234 
db_sql_√ed_di•o£
=0;

235 
	`db_sql_íum_íd_‚
(
NULL
);

236 
	`db_gë_îr‹
(
≥
,
DB_E_NOROWS
);

237  
DB_E_NOROWS
;

240 
db_sql_√ed_di•o£
 = 1;

241  
DB_E_SUCCESS
;

242 
	}
}

244 
	$db_sql_„tch_öt
(**
≥
, *
ªsu…
, *
fmt
, ...) {

245 
îr
;

246 *
quîy
;

247 
va_li°
 
≠
;

248 
SQL_ROW
 
row
;

250 
	`va_°¨t
(
≠
,
fmt
);

251 
quîy
=
	`db_sql_vmquîy_‚
(
fmt
,
≠
);

252 
	`va_íd
(
≠
);

254 
îr
 = 
	`db_sql_„tch_row
(
≥
, &
row
, "%s", 
quîy
);

255 
	`db_sql_vm‰ì_‚
(
quîy
);

257 if(
îr
 !
DB_E_SUCCESS
) {

258 
	`DPRINTF
(
E_SPAM
,
L_DB
,"„tch_row faûed i¿„tch_öt: %s\n",
≥
 ? *≥ : 
NULL
);

259  
îr
;

262 *
ªsu…
 = 
	`©oi
(
row
[0]);

263 
	`db_sql_di•o£_row
();

264  
DB_E_SUCCESS
;

265 
	}
}

267 
	$db_sql_„tch_ch¨
(**
≥
, **
ªsu…
, *
fmt
, ...) {

268 
îr
;

269 *
quîy
;

270 
va_li°
 
≠
;

271 
SQL_ROW
 
row
;

273 
	`va_°¨t
(
≠
,
fmt
);

274 
quîy
=
	`db_sql_vmquîy_‚
(
fmt
,
≠
);

275 
	`va_íd
(
≠
);

277 
îr
 = 
	`db_sql_„tch_row
(
≥
, &
row
, "%s", 
quîy
);

278 if(
îr
 !
DB_E_SUCCESS
)

279  
îr
;

281 *
ªsu…
 = 
	`°rdup
(
row
[0]);

282 
	`db_sql_di•o£_row
();

283  
DB_E_SUCCESS
;

284 
	}
}

286 
	$db_sql_di•o£_row
() {

287 
îr
 = 
DB_E_SUCCESS
;

290 if(
db_sql_√ed_di•o£
) {

291 
db_sql_√ed_di•o£
=0;

292 
îr
=
	`db_sql_íum_íd_‚
(
NULL
);

295  
îr
;

296 
	}
}

305 
	$db_sql_∑r£_sm¨t
(**
≥
, **
˛au£
, *
phø£
) {

306 
PARSETREE
 
±
;

308 if(
	`°rcmp
(
phø£
,"1") == 0) {

309 *
˛au£
 = 
	`°rdup
("1");

310  
TRUE
;

313 
±
=
	`•_öô
();

314 if(!
±
) {

315 if(
≥
Ë*≥ = 
	`°rdup
("CouldÇot initializeÖarseÅree");

316  
FALSE
;

319 if(!
	`•_∑r£
(
±
,
phø£
,
SP_TYPE_PLAYLIST
)) {

320 if(
≥
Ë*≥ = 
	`°rdup
(
	`•_gë_îr‹
(
±
));

322 
	`DPRINTF
(
E_LOG
,
L_DB
,"Eº‹Ö¨sögÖœyli°: %s\n",
	`•_gë_îr‹
(
±
));

324 
	`•_di•o£
(
±
);

325  
FALSE
;

327 *
˛au£
 = 
	`•_sql_˛au£
(
±
);

330 
	`•_di•o£
(
±
);

331  
TRUE
;

332 
	}
}

339 
	$db_sql_›í
(**
≥
, *
∑ømëîs
) {

340 
ªsu…
;

341 
cuºít_vîsi⁄
;

342 
max_vîsi⁄
;

343 **
db_upd©es
;

345 
ªsu…
 = 
	`db_sql_›í_‚
(
≥
,
∑ømëîs
);

347 if(
ªsu…
 =
DB_E_WRONGVERSION
) {

349 if(
≥
Ë
	`‰ì
(*pe);

351 
db_upd©es
 = 
db_sqlôe_upd©es
;

353 
ªsu…
 = 
	`db_sql_„tch_öt
(
≥
,&
cuºít_vîsi⁄
,"select value from "

356 if(
ªsu…
 !
DB_E_SUCCESS
)

357  
ªsu…
;

359 
max_vîsi⁄
 = 0;

360 
db_upd©es
[
max_vîsi⁄
])

361 
max_vîsi⁄
++;

363 
	`DPRINTF
(
E_DBG
,
L_DB
,"Cuºíàdb vîsi⁄: %d\n",
cuºít_vîsi⁄
);

364 
	`DPRINTF
(
E_DBG
,
L_DB
,"T¨gë db vîsi⁄: %d\n",
max_vîsi⁄
);

366 
cuºít_vîsi⁄
 < 
max_vîsi⁄
) {

367 
	`DPRINTF
(
E_LOG
,
L_DB
,"Upgødög db: %d --> %d\n",
cuºít_vîsi⁄
,

368 
cuºít_vîsi⁄
 + 1);

369 
ªsu…
 = 
	`db_sql_exec_‚
(
≥
,
E_LOG
,"%s",
db_upd©es
[
cuºít_vîsi⁄
]);

370 if(
ªsu…
 !
DB_E_SUCCESS
) {

371 
	`DPRINTF
(
E_LOG
,
L_DB
,"Eº‹ upgødög db: %s\n", 
≥
 ? *pe :

373  
ªsu…
;

375 
cuºít_vîsi⁄
++;

379  
ªsu…
;

380 
	}
}

389 
	$db_sql_öô
(
ªlﬂd
) {

390 
ôems
;

391 
ªsˇn
 = 0;

392 
îr
;

393 
do_ªlﬂd
 = 
ªlﬂd
;

395 
îr
=
	`db_sql_gë_cou¡
(
NULL
,&
ôems
, 
cou¡S⁄gs
);

396 if(
îr
 !
DB_E_SUCCESS
)

397 
ôems
 = 0;

400 if(
	`db_sql_„tch_öt
(
NULL
,&
ªsˇn
,"select value from config where "

401 "ãrm='ªsˇn'"Ë=
DB_E_SUCCESS
) {

402 if(
ªsˇn
)

403 
do_ªlﬂd
=1;

410 if(
do_ªlﬂd
 || (!
ôems
)) {

411 
	`DPRINTF
(
E_LOG
,
L_DB
,"FullÑeload...\n");

412 
	`db_sql_evít_‚
(
DB_SQL_EVENT_FULLRELOAD
);

413 
db_sql_ªlﬂd
=1;

415 
	`db_sql_evít_‚
(
DB_SQL_EVENT_STARTUP
);

416 
db_sql_ªlﬂd
=0;

419  
DB_E_SUCCESS
;

420 
	}
}

426 
	$db_sql_deöô
() {

427  
	`db_sql_˛o£_‚
();

428 
	}
}

434 
	$db_sql_f‹˚_ªsˇn
(**
≥
) {

435 
ªsu…
;

436 
ªsu…
 = 
	`db_sql_exec_‚
(
≥
,
E_LOG
,"updateÖlaylists set db_timestamp=0");

437 if(
ªsu…
 !
DB_E_SUCCESS
)

438  
ªsu…
;

440  
	`db_sql_exec_‚
(
≥
,
E_LOG
,"update songs set force_update=1");

442 
	}
}

449 
	$db_sql_°¨t_sˇn
() {

450 
	`DPRINTF
(
E_DBG
,
L_DB
,"Starting db scan\n");

451 
	`db_sql_evít_‚
(
DB_SQL_EVENT_SONGSCANSTART
);

453 
db_sql_ö_sˇn
=1;

454 
db_sql_ö_∂ayli°_sˇn
=0;

455  
DB_E_SUCCESS
;

456 
	}
}

463 
	$db_sql_íd_s⁄g_sˇn
() {

464 
	`DPRINTF
(
E_DBG
,
L_DB
,"Ending song scan\n");

466 
	`db_sql_evít_‚
(
DB_SQL_EVENT_SONGSCANEND
);

467 
	`db_sql_evít_‚
(
DB_SQL_EVENT_PLSCANSTART
);

469 
db_sql_ö_sˇn
=0;

470 
db_sql_ö_∂ayli°_sˇn
=1;

472  
DB_E_SUCCESS
;

473 
	}
}

480 
	$db_sql_íd_sˇn
() {

481 
	`db_sql_evít_‚
(
DB_SQL_EVENT_PLSCANEND
);

483 
	`db_sql_upd©e_∂ayli°s
(
NULL
);

484 
db_sql_ªlﬂd
=0;

485 
db_sql_ö_∂ayli°_sˇn
=0;

487  
DB_E_SUCCESS
;

488 
	}
}

496 
	$db_sql_dñëe_∂ayli°
(**
≥
, 
∂ayli°id
) {

497 
ty≥
;

498 
ªsu…
;

500 
ªsu…
=
	`db_sql_„tch_öt
(
≥
,&
ty≥
,"selectÅype fromÖlaylists where id=%d",

501 
∂ayli°id
);

503 if(
ªsu…
 !
DB_E_SUCCESS
) {

504 if(
ªsu…
 =
DB_E_NOROWS
) {

505 if(
≥
Ë{ 
	`‰ì
(*pe); };

506 
	`db_gë_îr‹
(
≥
,
DB_E_INVALID_PLAYLIST
);

507  
DB_E_INVALID_PLAYLIST
;

510  
ªsu…
;

514 
	`db_sql_exec_‚
(
≥
,
E_FATAL
,"dñëê‰omÖœyli°†whîêid=%d",
∂ayli°id
);

515 
	`db_sql_exec_‚
(
≥
,
E_FATAL
,"dñëê‰omÖœyli°ôem†whîê∂ayli°id=%d",
∂ayli°id
);

517  
DB_E_SUCCESS
;

518 
	}
}

527 
	$db_sql_dñëe_∂ayli°_ôem
(**
≥
, 
∂ayli°id
, 
s⁄gid
) {

528 
ªsu…
;

529 
∂ayli°_ty≥
;

530 
cou¡
;

533 
ªsu…
=
	`db_sql_„tch_öt
(
≥
,&
∂ayli°_ty≥
,

535 
∂ayli°id
);

537 if(
ªsu…
 !
DB_E_SUCCESS
) {

538 if(
ªsu…
 =
DB_E_NOROWS
) {

539 if(
≥
Ë{ 
	`‰ì
(*pe); };

540 
	`db_gë_îr‹
(
≥
,
DB_E_INVALID_PLAYLIST
);

541  
DB_E_INVALID_PLAYLIST
;

543  
ªsu…
;

546 if(
∂ayli°_ty≥
 =
PL_SMART
) {

547 
	`db_gë_îr‹
(
≥
,
DB_E_INVALIDTYPE
);

548  
DB_E_INVALIDTYPE
;

552 
ªsu…
=
	`db_sql_„tch_öt
(
≥
,&
cou¡
,"select count(*) fromÖlaylistitems "

554 
∂ayli°id
,
s⁄gid
);

556 if(
ªsu…
 !
DB_E_SUCCESS
) {

557 if(
ªsu…
 =
DB_E_NOROWS
) {

558 if(
≥
Ë{ 
	`‰ì
(*pe); };

559 
	`db_gë_îr‹
(
≥
,
DB_E_INVALID_SONGID
);

560  
DB_E_INVALID_SONGID
;

562  
ªsu…
;

566 
ªsu…
=
	`db_sql_exec_‚
(
≥
,
E_DBG
,"delete fromÖlaylistitems where "

567 "∂ayli°id=%dánd s⁄gid=%d",
∂ayli°id
,
s⁄gid
);

569  
ªsu…
;

570 
	}
}

581 
	$db_sql_edô_∂ayli°
(**
≥
, 
id
, *
«me
, *
˛au£
) {

582 
ªsu…
;

583 
∂ayli°_ty≥
;

584 
dup_id
=
id
;

585 *
¸ôîü
;

586 *
e°rög
;

588 if((
«me
 =
NULL
Ë&& (
˛au£
 == NULL))

589  
DB_E_SUCCESS
;

591 if(
id
 == 1) {

592 
	`db_gë_îr‹
(
≥
,
DB_E_INVALID_PLAYLIST
);

593  
DB_E_INVALID_PLAYLIST
;

597 
ªsu…
=
	`db_sql_„tch_öt
(
≥
,&
∂ayli°_ty≥
,

598 "£À˘Åy≥ fromÖœyli°†whîêid=%d",
id
);

600 if(
ªsu…
 !
DB_E_SUCCESS
) {

601 if(
ªsu…
 =
DB_E_NOROWS
) {

602 if(
≥
Ë{ 
	`‰ì
(*pe); };

603 
	`db_gë_îr‹
(
≥
,
DB_E_INVALID_PLAYLIST
);

604  
DB_E_INVALID_PLAYLIST
;

606  
ªsu…
;

610 if((
∂ayli°_ty≥
 =
PL_SMART
Ë&& (
˛au£
)) {

611 if(!
	`db_sql_∑r£_sm¨t
(&
e°rög
,&
¸ôîü
,
˛au£
)) {

612 
	`db_gë_îr‹
(
≥
,
DB_E_PARSE
,
e°rög
);

613 
	`‰ì
(
e°rög
);

614  
DB_E_PARSE
;

616 
	`‰ì
(
¸ôîü
);

620 if(
«me
) {

621 
ªsu…
 = 
	`db_sql_„tch_öt
(
≥
,&
dup_id
,"select id fromÖlaylists "

622 "whîêuµî—ôÀ)=uµî('%q')",
«me
);

624 if((
ªsu…
 !
DB_E_SUCCESS
Ë&& (ªsu… !
DB_E_NOROWS
))

625  
ªsu…
;

627 if(
ªsu…
 =
DB_E_NOROWS
)

628 if(
≥
Ë
	`‰ì
(*pe);

630 if(
dup_id
 !
id
) {

631 
	`db_gë_îr‹
(
≥
,
DB_E_DUPLICATE_PLAYLIST
,
«me
);

632  
DB_E_DUPLICATE_PLAYLIST
;

635 if((
∂ayli°_ty≥
 =
PL_SMART
)&&(
˛au£
)) {

636 
ªsu…
=
	`db_sql_exec_‚
(
≥
,
E_LOG
,"updateÖlaylists setÅitle='%q', "

637 "quîy='%q' whîêid=%d",
«me
,
˛au£
,
id
);

640 
ªsu…
=
	`db_sql_exec_‚
(
≥
,
E_LOG
,"updateÖlaylists setÅitle='%q' "

641 "whîêid=%d",
«me
,
id
);

643 
	`db_sql_upd©e_∂ayli°s
(
NULL
);

644  
ªsu…
;

647 if((
∂ayli°_ty≥
 =
PL_SMART
Ë&& (
˛au£
)) {

648 
ªsu…

	`db_sql_exec_‚
(
≥
,
E_LOG
,"updateÖlaylists set query='%q' "

649 "whîêid=%d",
˛au£
,
id
);

650 
	`db_sql_upd©e_∂ayli°s
(
NULL
);

651  
ªsu…
;

654  
DB_E_SUCCESS
;

655 
	}
}

665 
	$db_sql_add_∂ayli°
(**
≥
, *
«me
, 
ty≥
, *
˛au£
, *
∑th
, 
ödex
, *
∂ayli°id
) {

666 
˙t
=0;

667 
ªsu…
=
DB_E_SUCCESS
;

668 *
¸ôîü
;

669 *
e°rög
;

670 *
c‹ª˘_∑th
;

671 
SQL_ROW
 
row
;

673 
ªsu…
=
	`db_sql_„tch_öt
(
≥
,&
˙t
,"select count(*) fromÖlaylists where "

674 "uµî—ôÀ)=uµî('%q')",
«me
);

676 if(
ªsu…
 !
DB_E_SUCCESS
) {

677  
ªsu…
;

680 if(
˙t
 != 0) {

681 
	`db_sql_„tch_row
(
NULL
,&
row
, "select * fromÖlaylists where "

682 "uµî—ôÀ)=uµî('%q')",
«me
);

683 
	`DPRINTF
(
E_LOG
,
L_MISC
,"AttemptÅoádd duplicateÖlaylist: '%s' "

684 "ty≥: %d,Ö©h: %s, idx: %d\n",
«me
,
	`©oi
(
row
[
PL_TYPE
]),

685 
row
[
PL_PATH
],
	`©oi
‘ow[
PL_IDX
]));

686 
	`db_sql_di•o£_row
();

687 
	`db_gë_îr‹
(
≥
,
DB_E_DUPLICATE_PLAYLIST
,
«me
);

688  
DB_E_DUPLICATE_PLAYLIST
;

691 if((
ty≥
 =
PL_SMART
Ë&& (!
˛au£
)) {

692 
	`db_gë_îr‹
(
≥
,
DB_E_NOCLAUSE
);

693  
DB_E_NOCLAUSE
;

697 
ty≥
) {

698 
PL_STATICFILE
:

699 
PL_STATICXML
:

700 
c‹ª˘_∑th
 = 
	`_db_¥›î_∑th
(
∑th
);

701 
ªsu…
 = 
	`db_sql_exec_‚
(
≥
,
E_LOG
,"insert intoÖlaylists "

704 
«me
,
ty≥
,()
	`time
(
NULL
),
c‹ª˘_∑th
,
ödex
);

705 
	`‰ì
(
c‹ª˘_∑th
);

707 
PL_STATICWEB
:

708 
ªsu…
 = 
	`db_sql_exec_‚
(
≥
,
E_LOG
,"insert intoÖlaylists "

711 
«me
,
ty≥
,
	`time
(
NULL
),
ödex
);

713 
PL_SMART
:

714 if(!
	`db_sql_∑r£_sm¨t
(&
e°rög
,&
¸ôîü
,
˛au£
)) {

715 
	`db_gë_îr‹
(
≥
,
DB_E_PARSE
,
e°rög
);

716 
	`‰ì
(
e°rög
);

717  
DB_E_PARSE
;

719 
	`‰ì
(
¸ôîü
);

721 
ªsu…
 = 
	`db_sql_exec_‚
(
≥
,
E_LOG
,"insert intoÖlaylists "

724 
«me
,
PL_SMART
,
˙t
,
˛au£
,
	`time
(
NULL
));

728 if(
ªsu…
)

729  
ªsu…
;

731 
ªsu…
 = 
	`db_sql_„tch_öt
(
≥
,
∂ayli°id
,

733 
«me
);

735 if(((
ty≥
==
PL_STATICFILE
)||—y≥==
PL_STATICXML
))

736 && (
db_sql_ö_∂ayli°_sˇn
Ë&& (!
db_sql_ªlﬂd
)) {

737 
	`db_sql_exec_‚
(
NULL
,
E_FATAL
,"ö£π i¡ÿ∂upd©ed vÆue†(%d)",*
∂ayli°id
);

740 
	`db_sql_upd©e_∂ayli°s
(
NULL
);

741  
ªsu…
;

742 
	}
}

751 
	$db_sql_add_∂ayli°_ôem
(**
≥
, 
∂ayli°id
, 
s⁄gid
) {

752 
ªsu…
;

753 
∂ayli°_ty≥
;

754 
cou¡
;

757 
ªsu…
=
	`db_sql_„tch_öt
(
≥
,&
∂ayli°_ty≥
,

759 
∂ayli°id
);

761 if(
ªsu…
 !
DB_E_SUCCESS
) {

762 if(
ªsu…
 =
DB_E_NOROWS
) {

763 if(
≥
Ë{ 
	`‰ì
(*pe); };

764 
	`db_gë_îr‹
(
≥
,
DB_E_INVALID_PLAYLIST
);

765  
DB_E_INVALID_PLAYLIST
;

767  
ªsu…
;

770 if(
∂ayli°_ty≥
 =
PL_SMART
) {

771 
	`db_gë_îr‹
(
≥
,
DB_E_INVALIDTYPE
);

772  
DB_E_INVALIDTYPE
;

776 
ªsu…
=
	`db_sql_„tch_öt
(
≥
,&
cou¡
,"select count(*) from songs where "

777 "id=%d",
s⁄gid
);

779 if(
ªsu…
 !
DB_E_SUCCESS
) {

780 if(
ªsu…
 =
DB_E_NOROWS
) {

781 if(
≥
Ë{ 
	`‰ì
(*pe); };

782 
	`db_gë_îr‹
(
≥
,
DB_E_INVALID_SONGID
);

783  
DB_E_INVALID_SONGID
;

785  
ªsu…
;

789 
ªsu…
=
	`db_sql_exec_‚
(
≥
,
E_DBG
,"insert intoÖlaylistitems "

791 
∂ayli°id
,
s⁄gid
);

792  
ªsu…
;

793 
	}
}

801 
	$db_sql_add
(**
≥
, 
MP3FILE
 *
pmp3
, *
id
) {

802 
îr
;

803 
cou¡
;

804 
ö£πid
;

805 *
quîy
;

806 *
∑th
;

807 
ßm∂e_cou¡
[40];

808 
fûe_size
[40];

810 
	`DPRINTF
(
E_SPAM
,
L_DB
,"Entering db_sql_add\n");

812 if(!
pmp3
->
time_added
)

813 
pmp3
->
time_added
 = ()
	`time
(
NULL
);

815 if(!
pmp3
->
time_modifõd
)

816 
pmp3
->
time_modifõd
 = ()
	`time
(
NULL
);

818 
pmp3
->
db_time°amp
 = ()
	`time
(
NULL
);

820 
∑th
 = 
	`_db_¥›î_∑th
(
pmp3
->path);

823 if((!
db_sql_ªlﬂd
)||(!
db_sql_ö_sˇn
)) {

824 
quîy
 = "select count(*) from songs whereÖath='%q'ánd idx=%d";

825 
îr
=
	`db_sql_„tch_öt
(
NULL
,&
cou¡
,
quîy
,
∑th
,
pmp3
->
ödex
);

827 if((
îr
 =
DB_E_SUCCESS
Ë&& (
cou¡
 == 1)) {

828 
	`‰ì
(
∑th
);

829  
	`db_sql_upd©e
(
≥
,
pmp3
,
id
);

830 } if((
îr
 !
DB_E_SUCCESS
Ë&& (î∏!
DB_E_NOROWS
)) {

831 
	`‰ì
(
∑th
);

832 
	`DPRINTF
(
E_LOG
,
L_DB
,"Eº‹: %s\n",
≥
);

833  
îr
;

838 
pmp3
->
∂ay_cou¡
=0;

839 
pmp3
->
time_∂ayed
=0;

842 
	`•rötf
(
ßm∂e_cou¡
,"%Œd",
pmp3
->sample_count);

843 
	`•rötf
(
fûe_size
,"%Œd",
pmp3
->file_size);

845 
îr
=
	`db_sql_exec_‚
(
≥
,
E_DBG
,"INSERT INTO songs VALUES "

889 
∑th
,

890 
	`STR
(
pmp3
->
‚ame
),

891 
	`STR
(
pmp3
->
tôÀ
),

892 
	`STR
(
pmp3
->
¨ti°
),

893 
	`STR
(
pmp3
->
Æbum
),

894 
	`STR
(
pmp3
->
gíª
),

895 
	`STR
(
pmp3
->
commít
),

896 
	`STR
(
pmp3
->
ty≥
),

897 
	`STR
(
pmp3
->
compo£r
),

898 
	`STR
(
pmp3
->
‹che°ø
),

899 
	`STR
(
pmp3
->
c⁄du˘‹
),

900 
	`STR
(
pmp3
->
groupög
),

901 
	`STR
(
pmp3
->
uæ
),

902 
pmp3
->
bôøã
,

903 
pmp3
->
ßm∂î©e
,

904 
pmp3
->
s⁄g_Àngth
,

905 
fûe_size
,

906 
pmp3
->
yór
,

907 
pmp3
->
åack
,

908 
pmp3
->
tŸÆ_åacks
,

909 
pmp3
->
disc
,

910 
pmp3
->
tŸÆ_discs
,

911 
pmp3
->
bpm
,

912 
pmp3
->
compû©i⁄
,

913 
pmp3
->
øtög
,

914 
pmp3
->
d©a_köd
,

915 
pmp3
->
ôem_köd
,

916 
	`STR
(
pmp3
->
des¸ùti⁄
),

917 
pmp3
->
time_added
,

918 
pmp3
->
time_modifõd
,

919 
pmp3
->
time_∂ayed
,

920 
pmp3
->
db_time°amp
,

921 
pmp3
->
dißbÀd
,

922 
ßm∂e_cou¡
,

923 
	`STR
(
pmp3
->
code˘y≥
),

924 
pmp3
->
ödex
,

925 
pmp3
->
has_video
,

926 
pmp3
->
c⁄ã¡øtög
,

927 
pmp3
->
bôs_≥r_ßm∂e
,

928 
	`STR
(
pmp3
->
Æbum_¨ti°
));

930 
	`‰ì
(
∑th
);

931 if(
îr
 !
DB_E_SUCCESS
)

932 
	`DPRINTF
(
E_FATAL
,
L_DB
,"Eº‹ in£πög fûê%†ö d©aba£\n",
pmp3
->
‚ame
);

934 
ö£πid
 = 
	`db_sql_ö£π_id_‚
();

935 if((
db_sql_ö_sˇn
 || 
db_sql_ö_∂ayli°_sˇn
)&&(!
db_sql_ªlﬂd
)) {

937 
	`db_sql_exec_‚
(
NULL
,
E_DBG
,"insert into updated values (%d)",

938 
ö£πid
);

941 if((!
db_sql_ö_sˇn
Ë&& (!
db_sql_ö_∂ayli°_sˇn
))

942 
	`db_sql_upd©e_∂ayli°s
(
NULL
);

944 if(
id
)

945 *
id
 = 
ö£πid
;

947 
	`DPRINTF
(
E_SPAM
,
L_DB
,"Exiting db_sql_add\n");

948  
DB_E_SUCCESS
;

949 
	}
}

956 
	$db_sql_upd©e
(**
≥
, 
MP3FILE
 *
pmp3
, *
id
) {

957 
îr
;

958 
quîy
[1024];

959 *
∑th
;

960 
ßm∂e_cou¡
[40];

961 
fûe_size
[40];

963 if(!
pmp3
->
time_modifõd
)

964 
pmp3
->
time_modifõd
 = ()
	`time
(
NULL
);

966 
pmp3
->
db_time°amp
 = ()
	`time
(
NULL
);

968 
	`•rötf
(
ßm∂e_cou¡
,"%Œd",
pmp3
->sample_count);

969 
	`•rötf
(
fûe_size
,"%Œd",
pmp3
->file_size);

971 
	`°r˝y
(
quîy
,"UPDATE songs SET "

1003 
∑th
 = 
	`_db_¥›î_∑th
(
pmp3
->path);

1005 
îr
 = 
	`db_sql_exec_‚
(
≥
,
E_LOG
,
quîy
,

1006 
	`STR
(
pmp3
->
tôÀ
),

1007 
	`STR
(
pmp3
->
¨ti°
),

1008 
	`STR
(
pmp3
->
Æbum
),

1009 
	`STR
(
pmp3
->
gíª
),

1010 
	`STR
(
pmp3
->
commít
),

1011 
	`STR
(
pmp3
->
ty≥
),

1012 
	`STR
(
pmp3
->
compo£r
),

1013 
	`STR
(
pmp3
->
‹che°ø
),

1014 
	`STR
(
pmp3
->
c⁄du˘‹
),

1015 
	`STR
(
pmp3
->
groupög
),

1016 
	`STR
(
pmp3
->
uæ
),

1017 
pmp3
->
bôøã
,

1018 
pmp3
->
ßm∂î©e
,

1019 
pmp3
->
s⁄g_Àngth
,

1020 
fûe_size
,

1021 
pmp3
->
yór
,

1022 
pmp3
->
åack
,

1023 
pmp3
->
tŸÆ_åacks
,

1024 
pmp3
->
disc
,

1025 
pmp3
->
tŸÆ_discs
,

1026 
pmp3
->
time_modifõd
,

1027 
pmp3
->
db_time°amp
,

1028 
pmp3
->
bpm
,

1029 
pmp3
->
dißbÀd
,

1030 
pmp3
->
compû©i⁄
,

1031 
pmp3
->
øtög
,

1032 
ßm∂e_cou¡
,

1033 
	`STR
(
pmp3
->
code˘y≥
),

1034 
	`STR
(
pmp3
->
Æbum_¨ti°
),

1035 
∑th
,

1036 
pmp3
->
ödex
);

1038 if(
îr
 !
DB_E_SUCCESS
)

1039 
	`DPRINTF
(
E_FATAL
,
L_DB
,"Eº‹ upd©ög fûe: %s\n",
pmp3
->
‚ame
);

1041 if(
id
) {

1042 
	`°r˝y
(
quîy
,"select id from songs whereÖath='%q'ánd idx=%d");

1044 
îr
=
	`db_sql_„tch_öt
(
≥
,
id
,
quîy
,
∑th
,
pmp3
->
ödex
);

1045 if(
îr
 !
DB_E_SUCCESS
) {

1046 
	`‰ì
(
∑th
);

1047  
îr
;

1051 if((
db_sql_ö_sˇn
 || 
db_sql_ö_∂ayli°_sˇn
Ë&& (!
db_sql_ªlﬂd
)) {

1052 if(
id
) {

1053 
	`db_sql_exec_‚
(
NULL
,
E_FATAL
,"ö£π i¡ÿupd©ed (idËvÆue†(%d)",*
id
);

1055 
	`°r˝y
(
quîy
,"insert into updated (id) select id from "

1057 
	`db_sql_exec_‚
(
NULL
,
E_FATAL
,
quîy
,
∑th
,
pmp3
->
ödex
);

1061 if((!
db_sql_ö_sˇn
Ë&& (!
db_sql_ö_∂ayli°_sˇn
))

1062 
	`db_sql_upd©e_∂ayli°s
(
NULL
);

1064 
	`‰ì
(
∑th
);

1066 
	}
}

1072 
	$db_sql_upd©e_∂ayli°s
(**
≥
) {

1073 
	sèg_∂öfo
 {

1074 *
∂id
;

1075 *
ty≥
;

1076 *
˛au£
;

1077 } 
	tPLINFO
;

1079 
PLINFO
 *
pöfo
;

1080 
∂ayli°s
;

1081 
îr
;

1082 
ödex
;

1083 
SQL_ROW
 
row
;

1084 *
whîe_˛au£
;

1086 
	`DPRINTF
(
E_LOG
,
L_DB
,"UpdatingÖlaylists\n");

1090 
îr
 = 
	`db_sql_„tch_öt
(
≥
,&
∂ayli°s
,"select count(*) fromÖlaylists");

1092 if(
îr
 !
DB_E_SUCCESS
) {

1093  
îr
;

1096 
pöfo
 = (
PLINFO
*)
	`mÆloc
((PLINFOË* 
∂ayli°s
);

1097 if(!
pöfo
) {

1098 
	`DPRINTF
(
E_FATAL
,
L_DB
,"MallocÉrror\n");

1102 
îr
 = 
	`db_sql_íum_begö_‚
(
≥
,"select * fromÖlaylists");

1103 if(
îr
 !
DB_E_SUCCESS
)

1104  
îr
;

1107 
ödex
=0;

1108 (
	`db_sql_íum_„tch_‚
(
≥
, &
row
Ë=
DB_E_SUCCESS
) && (row) &&

1109 (
ödex
 < 
∂ayli°s
))

1112 
pöfo
[
ödex
].
∂id
=
	`°rdup
(
	`STR
(
row
[
PL_ID
]));

1113 
pöfo
[
ödex
].
ty≥
=
	`°rdup
(
	`STR
(
row
[
PL_TYPE
]));

1114 
pöfo
[
ödex
].
˛au£
=
	`°rdup
(
	`STR
(
row
[
PL_QUERY
]));

1115 
	`DPRINTF
(
E_SPAM
,
L_DB
,"FoundÖœyli° %s:Åy≥ %s, cœu£ %s\n",
pöfo
[
ödex
].
∂id
,

1116 
pöfo
[
ödex
].
ty≥
,pöfo[ödex].
˛au£
);

1117 
ödex
++;

1119 
	`db_sql_íum_íd_‚
(
≥
);

1120 if(
ödex
 !
∂ayli°s
) {

1121 
	`DPRINTF
(
E_FATAL
,
L_DB
,"Playlist count mismatch --ÅransactionÖroblem?\n");

1125 
ödex
=0;ödex < 
∂ayli°s
; index++) {

1126 if(
	`©oi
(
pöfo
[
ödex
].
ty≥
Ë=
PL_SMART
) {

1128 if(!
	`db_sql_∑r£_sm¨t
(
NULL
,&
whîe_˛au£
,
pöfo
[
ödex
].
˛au£
)) {

1129 
	`DPRINTF
(
E_LOG
,
L_DB
,"Pœyli° %d bad sy¡ax",
pöfo
[
ödex
].
∂id
);

1130 
whîe_˛au£
 = 
	`°rdup
("0");

1132 
	`db_sql_exec_‚
(
NULL
,
E_FATAL
,"updateÖlaylists set items=("

1134 "whîêid=%s",
whîe_˛au£
,
pöfo
[
ödex
].
∂id
);

1135 
	`‰ì
(
whîe_˛au£
);

1137 
	`db_sql_exec_‚
(
NULL
,
E_FATAL
,"updateÖlaylists set items=("

1140 
pöfo
[
ödex
].
∂id
,Öinfo[index].plid);

1143 if(
pöfo
[
ödex
].
∂id
Ë
	`‰ì
(pinfo[index].plid);

1144 if(
pöfo
[
ödex
].
ty≥
Ë
	`‰ì
(pinfo[index].type);

1145 if(
pöfo
[
ödex
].
˛au£
Ë
	`‰ì
(pinfo[index].clause);

1148 
	`‰ì
(
pöfo
);

1149  
DB_E_SUCCESS
;

1150 
	}
}

1158 
	$db_sql_íum_°¨t
(**
≥
, 
DBQUERYINFO
 *
pöfo
) {

1159 
s¸©ch
[4096];

1160 
quîy
[4096];

1161 
quîy_£À˘
[255];

1162 
quîy_cou¡
[255];

1163 
quîy_ª°
[4096];

1164 *
whîe_˛au£
;

1165 *
fûãr
;

1167 
is_sm¨t
;

1168 
have_˛au£
=0;

1169 
îr
;

1170 
brow£
=0;

1171 
ªsu…s
=0;

1172 
SQL_ROW
 
ãm¥ow
;

1174 
quîy
[0] = '\0';

1175 
quîy_£À˘
[0] = '\0';

1176 
quîy_cou¡
[0] = '\0';

1177 
quîy_ª°
[0] = '\0';

1181 if((
pöfo
->
∂ayli°_id
) && (pinfo->playlist_id != 1)) {

1182 
îr
 = 
	`db_sql_íum_begö_‚
(
≥
, "selectÅype,query fromÖlaylists "

1183 "whîêid=%d",
pöfo
->
∂ayli°_id
);

1185 if(
îr
 !
DB_E_SUCCESS
)

1186  
îr
;

1188 
îr
 = 
	`db_sql_íum_„tch_‚
(
≥
,&
ãm¥ow
);

1190 if(
îr
 !
DB_E_SUCCESS
) {

1191 
	`db_sql_íum_íd_‚
(
NULL
);

1192  
îr
;

1195 if(!
ãm¥ow
) {

1196 
	`db_gë_îr‹
(
≥
,
DB_E_INVALID_PLAYLIST
);

1197 
	`db_sql_íum_íd_‚
(
NULL
);

1198  
DB_E_INVALID_PLAYLIST
;

1201 
is_sm¨t
=(
	`©oi
(
ãm¥ow
[0]) == 1);

1202 if(
is_sm¨t
) {

1203 if(!
	`db_sql_∑r£_sm¨t
(
NULL
,&
whîe_˛au£
,
ãm¥ow
[1]))

1204 
whîe_˛au£
 = 
	`°rdup
("0");

1206 if(!
whîe_˛au£
) {

1207 
	`db_sql_íum_íd_‚
(
NULL
);

1208 
	`db_gë_îr‹
(
≥
,
DB_E_PARSE
);

1209  
DB_E_PARSE
;

1212 
	`¢¥ötf
(
quîy_ª°
,(quîy_ª°)," whîê(%s)",
whîe_˛au£
);

1213 
	`‰ì
(
whîe_˛au£
);

1221 if(
pöfo
->
c‹ª˘_‹dî
) {

1222 
	`•rötf
(
quîy_ª°
,",playlistitems where "

1225 "∂ayli°ôems.id",
pöfo
->
∂ayli°_id
);

1227 
	`•rötf
(
quîy_ª°
," where (songs.id in (select songid from "

1229 
pöfo
->
∂ayli°_id
);

1232 
have_˛au£
=1;

1233 
	`db_sql_íum_íd_‚
(
NULL
);

1236 
pöfo
->
quîy_ty≥
) {

1237 
quîyTy≥Iãms
:

1238 
	`°r˝y
(
quîy_£À˘
,"select * from songs ");

1239 
	`°r˝y
(
quîy_cou¡
,"select count (*) from songs ");

1242 
quîyTy≥Pœyli°s
:

1243 
	`°r˝y
(
quîy_£À˘
,"select * fromÖlaylists ");

1244 
	`°r˝y
(
quîy_cou¡
,"select count (*) fromÖlaylists ");

1248 
quîyTy≥Pœyli°Iãms
:

1249 
	`•rötf
(
quîy_£À˘
,"select * from songs ");

1250 
	`•rötf
(
quîy_cou¡
,"select count(songs.id) from songs ");

1254 
quîyTy≥Brow£Albums
:

1255 
	`°r˝y
(
quîy_£À˘
,"select distinctálbum from songs ");

1256 
	`°r˝y
(
quîy_cou¡
,"select count(album) from (select "

1258 
brow£
=1;

1261 
quîyTy≥Brow£Aπi°s
:

1262 
	`°r˝y
(
quîy_£À˘
,"select distinctártist from songs ");

1263 
	`°r˝y
(
quîy_cou¡
,"select count(artist) from (select "

1265 
brow£
=1;

1268 
quîyTy≥Brow£Gíªs
:

1269 
	`°r˝y
(
quîy_£À˘
,"select distinct genre from songs ");

1270 
	`°r˝y
(
quîy_cou¡
,"select count(genre) from (select "

1272 
brow£
=1;

1275 
quîyTy≥Brow£Compo£rs
:

1276 
	`°r˝y
(
quîy_£À˘
,"select distinct composer from songs ");

1277 
	`°r˝y
(
quîy_cou¡
,"select count(composer) from (select "

1279 
brow£
=1;

1282 
	`DPRINTF
(
E_LOG
,
L_DB
|
L_DAAP
,"Unknown queryÅype\n");

1287 if(
brow£
) {

1288 if(
have_˛au£
) {

1289 
	`°rˇt
(
quîy_ª°
,"ánd ");

1291 
	`°r˝y
(
quîy_ª°
," where ");

1292 
have_˛au£
 = 1;

1295 
	`°rˇt
(
quîy_ª°
,"(data_kind = 0) ");

1299 if(
pöfo
->
±
) {

1300 
	`DPRINTF
(
E_DBG
,
L_DB
,"Got query/filter\n");

1301 
fûãr
 = 
	`•_sql_˛au£
(
pöfo
->
±
);

1302 if(
fûãr
) {

1303 if(
have_˛au£
) {

1304 
	`°rˇt
(
quîy_ª°
,"ánd ");

1306 
	`°r˝y
(
quîy_ª°
," where ");

1307 
have_˛au£
=1;

1309 
	`°rˇt
(
quîy_ª°
,"(");

1310 
	`°rˇt
(
quîy_ª°
,
fûãr
);

1311 
	`°rˇt
(
quîy_ª°
,")");

1312 
	`‰ì
(
fûãr
);

1314 
	`DPRINTF
(
E_LOG
,
L_DB
,"Error getting sql forÖarseÅree\n");

1317 
	`DPRINTF
(
E_DBG
,
L_DB
,"No query/filter\n");

1321 if(
brow£
) {

1322 if((
have_˛au£
Ë|| (
pöfo
->
±
)) {

1323 
	`°rˇt
(
quîy_ª°
,"ánd (");

1325 
	`°r˝y
(
quîy_ª°
," where (");

1326 
have_˛au£
 = 1;

1329 
pöfo
->
quîy_ty≥
) {

1330 
quîyTy≥Brow£Albums
:

1331 
	`°rˇt
(
quîy_ª°
,"album");

1333 
quîyTy≥Brow£Aπi°s
:

1334 
	`°rˇt
(
quîy_ª°
,"artist");

1336 
quîyTy≥Brow£Gíªs
:

1337 
	`°rˇt
(
quîy_ª°
,"genre");

1339 
quîyTy≥Brow£Compo£rs
:

1340 
	`°rˇt
(
quîy_ª°
,"composer");

1343 
	`°rˇt
(
quîy_ª°
,"album");

1347 
	`°rˇt
(
quîy_ª°
, " !='')");

1350 if((
pöfo
->
ödex_ty≥
 !
ödexTy≥N⁄e
Ë|| (pöfo->
w™t_cou¡
)) {

1353 
	`°r˝y
(
s¸©ch
,
quîy_cou¡
);

1354 
	`°rˇt
(
s¸©ch
,
quîy_ª°
);

1355 if(
brow£
)

1356 
	`°rˇt
(
s¸©ch
,")");

1358 
îr
 = 
	`db_sql_„tch_öt
(
≥
,&
ªsu…s
,"%s",
s¸©ch
);

1359 if(
îr
 !
DB_E_SUCCESS
)

1360  
îr
;

1361 
	`DPRINTF
(
E_DBG
,
L_DB
,"Numbî o‡ªsu…s: %d\n",
ªsu…s
);

1362 
pöfo
->
•ecifõdtŸÆcou¡
 = 
ªsu…s
;

1365 
	`°r˝y
(
quîy
,
quîy_£À˘
);

1366 
	`°rˇt
(
quîy
,
quîy_ª°
);

1370 
pöfo
->
ödex_ty≥
) {

1371 
ödexTy≥Fú°
:

1372 
	`•rötf
(
s¸©ch
,"Üimô %d",
pöfo
->
ödex_low
);

1374 
ödexTy≥La°
:

1375 if(
pöfo
->
ödex_low
 >
ªsu…s
) {

1376 
	`•rötf
(
s¸©ch
,"Üimô %d",
pöfo
->
ödex_low
);

1378 
	`•rötf
(
s¸©ch
,"Üimô %d off£à%d",
pöfo
->
ödex_low
, 
ªsu…s
-pinfo->index_low);

1381 
ödexTy≥Sub
:

1382 
	`•rötf
(
s¸©ch
,"Üimit %d offset %d",

1383 
pöfo
->
ödex_high
 -Ööfo->
ödex_low
 + 1,

1384 
pöfo
->
ödex_low
);

1386 
ödexTy≥N⁄e
:

1389 
	`DPRINTF
(
E_LOG
,
L_DB
,"Bad indexTy≥: %d\n",()
pöfo
->
ödex_ty≥
);

1390 
s¸©ch
[0]='\0';

1394 if(
pöfo
->
ödex_ty≥
 !
ödexTy≥N⁄e
)

1395 
	`°rˇt
(
quîy
,
s¸©ch
);

1398 
îr
=
	`db_sql_íum_begö_‚
(
≥
,"%s",
quîy
);

1399  
îr
;

1400 
	}
}

1406 
	$db_sql_íum_„tch_row
(**
≥
, 
PACKED_MP3FILE
 *
row
, 
DBQUERYINFO
 *
pöfo
) {

1407 
îr
;

1409 
îr
=
	`db_sql_íum_„tch_‚
(
≥
, (***)
row
);

1410 if(
îr
 !
DB_E_SUCCESS
) {

1411 
	`db_sql_íum_íd_‚
(
NULL
);

1412  
îr
;

1415  
DB_E_SUCCESS
;

1416 
	}
}

1421 
	$db_sql_íum_ª£t
(**
≥
, 
DBQUERYINFO
 *
pöfo
) {

1422  
	`db_sql_íum_ª°¨t_‚
(
≥
);

1423 
	}
}

1429 
	$db_sql_íum_íd
(**
≥
) {

1430  
	`db_sql_íum_íd_‚
(
≥
);

1431 
	}
}

1433 
	$db_sql_buûd_m3ufûe
(
SQL_ROW
 
vÆ¨øy
, 
M3UFILE
 *
pm3u
) {

1434 
	`mem£t
(
pm3u
,0x00,(
M3UFILE
));

1436 
pm3u
->
id
=
	`db_sql_©oi
(
vÆ¨øy
[0]);

1437 
pm3u
->
tôÀ
=
	`db_sql_°rdup
(
vÆ¨øy
[1]);

1438 
pm3u
->
ty≥
=
	`db_sql_©oi
(
vÆ¨øy
[2]);

1439 
pm3u
->
ôems
=
	`db_sql_©oi
(
vÆ¨øy
[3]);

1440 
pm3u
->
quîy
=
	`db_sql_°rdup
(
vÆ¨øy
[4]);

1441 
pm3u
->
db_time°amp
=
	`db_sql_©oi
(
vÆ¨øy
[5]);

1442 
pm3u
->
∑th
=
	`db_sql_°rdup
(
vÆ¨øy
[6]);

1443 
pm3u
->
ödex
=
	`db_sql_©oi
(
vÆ¨øy
[7]);

1445 
	}
}

1447 
	$db_sql_buûd_mp3fûe
(
SQL_ROW
 
vÆ¨øy
, 
MP3FILE
 *
pmp3
) {

1448 
	`mem£t
(
pmp3
,0x00,(
MP3FILE
));

1449 
pmp3
->
id
=
	`db_sql_©oi
(
vÆ¨øy
[0]);

1450 
pmp3
->
∑th
=
	`db_sql_°rdup
(
vÆ¨øy
[1]);

1451 
pmp3
->
‚ame
=
	`db_sql_°rdup
(
vÆ¨øy
[2]);

1452 
pmp3
->
tôÀ
=
	`db_sql_°rdup
(
vÆ¨øy
[3]);

1453 
pmp3
->
¨ti°
=
	`db_sql_°rdup
(
vÆ¨øy
[4]);

1454 
pmp3
->
Æbum
=
	`db_sql_°rdup
(
vÆ¨øy
[5]);

1455 
pmp3
->
gíª
=
	`db_sql_°rdup
(
vÆ¨øy
[6]);

1456 
pmp3
->
commít
=
	`db_sql_°rdup
(
vÆ¨øy
[7]);

1457 
pmp3
->
ty≥
=
	`db_sql_°rdup
(
vÆ¨øy
[8]);

1458 
pmp3
->
compo£r
=
	`db_sql_°rdup
(
vÆ¨øy
[9]);

1459 
pmp3
->
‹che°ø
=
	`db_sql_°rdup
(
vÆ¨øy
[10]);

1460 
pmp3
->
c⁄du˘‹
=
	`db_sql_°rdup
(
vÆ¨øy
[11]);

1461 
pmp3
->
groupög
=
	`db_sql_°rdup
(
vÆ¨øy
[12]);

1462 
pmp3
->
uæ
=
	`db_sql_°rdup
(
vÆ¨øy
[13]);

1463 
pmp3
->
bôøã
=
	`db_sql_©oi
(
vÆ¨øy
[14]);

1464 
pmp3
->
ßm∂î©e
=
	`db_sql_©oi
(
vÆ¨øy
[15]);

1465 
pmp3
->
s⁄g_Àngth
=
	`db_sql_©oi
(
vÆ¨øy
[16]);

1466 
pmp3
->
fûe_size
=
	`db_sql_©ﬁ
(
vÆ¨øy
[17]);

1467 
pmp3
->
yór
=
	`db_sql_©oi
(
vÆ¨øy
[18]);

1468 
pmp3
->
åack
=
	`db_sql_©oi
(
vÆ¨øy
[19]);

1469 
pmp3
->
tŸÆ_åacks
=
	`db_sql_©oi
(
vÆ¨øy
[20]);

1470 
pmp3
->
disc
=
	`db_sql_©oi
(
vÆ¨øy
[21]);

1471 
pmp3
->
tŸÆ_discs
=
	`db_sql_©oi
(
vÆ¨øy
[22]);

1472 
pmp3
->
bpm
=
	`db_sql_©oi
(
vÆ¨øy
[23]);

1473 
pmp3
->
compû©i⁄
=
	`db_sql_©oi
(
vÆ¨øy
[24]);

1474 
pmp3
->
øtög
=
	`db_sql_©oi
(
vÆ¨øy
[25]);

1475 
pmp3
->
∂ay_cou¡
=
	`db_sql_©oi
(
vÆ¨øy
[26]);

1476 
pmp3
->
d©a_köd
=
	`db_sql_©oi
(
vÆ¨øy
[27]);

1477 
pmp3
->
ôem_köd
=
	`db_sql_©oi
(
vÆ¨øy
[28]);

1478 
pmp3
->
des¸ùti⁄
=
	`db_sql_°rdup
(
vÆ¨øy
[29]);

1479 
pmp3
->
time_added
=
	`db_sql_©oi
(
vÆ¨øy
[30]);

1480 
pmp3
->
time_modifõd
=
	`db_sql_©oi
(
vÆ¨øy
[31]);

1481 
pmp3
->
time_∂ayed
=
	`db_sql_©oi
(
vÆ¨øy
[32]);

1482 
pmp3
->
db_time°amp
=
	`db_sql_©oi
(
vÆ¨øy
[33]);

1483 
pmp3
->
dißbÀd
=
	`db_sql_©oi
(
vÆ¨øy
[34]);

1484 
pmp3
->
ßm∂e_cou¡
=
	`db_sql_©ﬁ
(
vÆ¨øy
[35]);

1485 
pmp3
->
f‹˚_upd©e
=
	`db_sql_©oi
(
vÆ¨øy
[36]);

1486 
pmp3
->
code˘y≥
=
	`db_sql_°rdup
(
vÆ¨øy
[37]);

1487 
pmp3
->
ödex
=
	`db_sql_©oi
(
vÆ¨øy
[38]);

1488 
pmp3
->
has_video
=
	`db_sql_©oi
(
vÆ¨øy
[39]);

1489 
pmp3
->
c⁄ã¡øtög
=
	`db_sql_©oi
(
vÆ¨øy
[40]);

1490 
pmp3
->
bôs_≥r_ßm∂e
=
	`db_sql_©oi
(
vÆ¨øy
[41]);

1491 
pmp3
->
Æbum_¨ti°
=
	`db_sql_°rdup
(
vÆ¨øy
[42]);

1492 
	}
}

1499 
M3UFILE
 *
	$db_sql_„tch_∂ayli°
(**
≥
, *
∑th
, 
ödex
) {

1500 
ªsu…
;

1501 
M3UFILE
 *
pm3u
=
NULL
;

1502 
SQL_ROW
 
row
;

1503 *
¥›î_∑th
;

1505 
¥›î_∑th
 = 
	`_db_¥›î_∑th
(
∑th
);

1506 
ªsu…
 = 
	`db_sql_„tch_row
(
≥
, &
row
, "select * fromÖlaylists where "

1507 "∑th='%q'ánd idx=%d",
¥›î_∑th
,
ödex
);

1509 
	`‰ì
(
¥›î_∑th
);

1511 if(
ªsu…
 !
DB_E_SUCCESS
) {

1512 if(
ªsu…
 =
DB_E_NOROWS
) {

1513 if(
≥
Ë{ 
	`‰ì
(*pe); };

1514 
	`db_gë_îr‹
(
≥
,
DB_E_INVALID_PLAYLIST
);

1515  
NULL
;

1518  
NULL
;

1521 
pm3u
=(
M3UFILE
*)
	`mÆloc
((M3UFILE));

1522 if(!
pm3u
)

1523 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"mallocÉrror: db_sql_fetch_playlist\n");

1525 
	`db_sql_buûd_m3ufûe
(
row
,
pm3u
);

1526 
	`db_sql_di•o£_row
();

1528 if((
db_sql_ö_∂ayli°_sˇn
Ë&& (!
db_sql_ªlﬂd
)) {

1529 
	`db_sql_exec_‚
(
NULL
,
E_FATAL
,"insert intoÖlupdated values (%d)",

1530 
pm3u
->
id
);

1533  
pm3u
;

1534 
	}
}

1544 
MP3FILE
 *
	$db_sql_„tch_ôem
(**
≥
, 
id
) {

1545 
SQL_ROW
 
row
;

1546 
MP3FILE
 *
pmp3
=
NULL
;

1547 
îr
;

1549 
îr
=
	`db_sql_„tch_row
(
≥
,&
row
,"£À˘ * from s⁄g†whîêid=%d",
id
);

1550 if(
îr
 !
DB_E_SUCCESS
) {

1551 if(
îr
 =
DB_E_NOROWS
) {

1552 if(
≥
Ë{ 
	`‰ì
(*pe); };

1553 
	`db_gë_îr‹
(
≥
,
DB_E_INVALID_SONGID
);

1554  
NULL
;

1556  
NULL
;

1559 
pmp3
=(
MP3FILE
*)
	`mÆloc
((MP3FILE));

1560 if(!
pmp3
)

1561 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"MallocÉrror in db_sql_fetch_item\n");

1563 
	`db_sql_buûd_mp3fûe
(
row
,
pmp3
);

1565 
	`db_sql_di•o£_row
();

1567 i‡((
db_sql_ö_sˇn
 || 
db_sql_ö_∂ayli°_sˇn
Ë&& (!
db_sql_ªlﬂd
)) {

1568 
	`db_sql_exec_‚
(
≥
,
E_DBG
,"INSERT INTO upd©ed VALUES (%d)",
id
);

1571  
pmp3
;

1572 
	}
}

1579 
MP3FILE
 *
	$db_sql_„tch_∑th
(**
≥
, *
∑th
, 
ödex
) {

1580 
SQL_ROW
 
row
;

1581 
MP3FILE
 *
pmp3
=
NULL
;

1582 
îr
;

1583 *
quîy
;

1584 *
¥›î_∑th
;

1590 if((
db_sql_ö_sˇn
Ë&& (
db_sql_ªlﬂd
))

1591  
NULL
;

1594 
¥›î_∑th
 = 
	`_db_¥›î_∑th
(
∑th
);

1595 
quîy
="select * from songs whereÖath='%q'ánd idx=%d";

1597 
îr
=
	`db_sql_„tch_row
(
≥
,&
row
,
quîy
,
¥›î_∑th
,
ödex
);

1598 
	`‰ì
(
¥›î_∑th
);

1600 if(
îr
 !
DB_E_SUCCESS
) {

1601 if(
îr
 =
DB_E_NOROWS
) {

1602 if(
≥
Ë{ 
	`‰ì
(*pe); };

1603 
	`db_gë_îr‹
(
≥
,
DB_E_NOTFOUND
);

1604  
NULL
;

1606  
NULL
;

1609 
pmp3
=(
MP3FILE
*)
	`mÆloc
((MP3FILE));

1610 if(!
pmp3
)

1611 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"MallocÉrror in db_sql_fetch_path\n");

1613 
	`db_sql_buûd_mp3fûe
(
row
,
pmp3
);

1615 
	`db_sql_di•o£_row
();

1617 i‡((
db_sql_ö_sˇn
 || 
db_sql_ö_∂ayli°_sˇn
Ë&& (!
db_sql_ªlﬂd
)) {

1618 
	`db_sql_exec_‚
(
≥
,
E_DBG
,"INSERT INTO upd©ed VALUES (%d)",
pmp3
->
id
);

1621  
pmp3
;

1622 
	}
}

1630 
	$db_sql_di•o£_ôem
(
MP3FILE
 *
pmp3
) {

1631 if(!
pmp3
)

1634 
	`MAYBEFREE
(
pmp3
->
∑th
);

1635 
	`MAYBEFREE
(
pmp3
->
‚ame
);

1636 
	`MAYBEFREE
(
pmp3
->
tôÀ
);

1637 
	`MAYBEFREE
(
pmp3
->
¨ti°
);

1638 
	`MAYBEFREE
(
pmp3
->
Æbum
);

1639 
	`MAYBEFREE
(
pmp3
->
gíª
);

1640 
	`MAYBEFREE
(
pmp3
->
commít
);

1641 
	`MAYBEFREE
(
pmp3
->
ty≥
);

1642 
	`MAYBEFREE
(
pmp3
->
compo£r
);

1643 
	`MAYBEFREE
(
pmp3
->
‹che°ø
);

1644 
	`MAYBEFREE
(
pmp3
->
c⁄du˘‹
);

1645 
	`MAYBEFREE
(
pmp3
->
groupög
);

1646 
	`MAYBEFREE
(
pmp3
->
des¸ùti⁄
);

1647 
	`MAYBEFREE
(
pmp3
->
uæ
);

1648 
	`MAYBEFREE
(
pmp3
->
code˘y≥
);

1649 
	`MAYBEFREE
(
pmp3
->
Æbum_¨ti°
);

1650 
	`‰ì
(
pmp3
);

1651 
	}
}

1653 
	$db_sql_di•o£_∂ayli°
(
M3UFILE
 *
pm3u
) {

1654 if(!
pm3u
)

1657 
	`MAYBEFREE
(
pm3u
->
tôÀ
);

1658 
	`MAYBEFREE
(
pm3u
->
quîy
);

1659 
	`MAYBEFREE
(
pm3u
->
∑th
);

1660 
	`‰ì
(
pm3u
);

1661 
	}
}

1669 
	$db_sql_gë_cou¡
(**
≥
, *
cou¡
, 
Cou¡Ty≥_t
 
ty≥
) {

1670 *
èbÀ
;

1671 
îr
;

1673 
ty≥
) {

1674 
cou¡Pœyli°s
:

1675 
èbÀ
="playlists";

1678 
cou¡S⁄gs
:

1680 
èbÀ
="songs";

1684 
îr
=
	`db_sql_„tch_öt
(
≥
,
cou¡
,"£À˘ cou¡(*ËFROM %q", 
èbÀ
);

1685  
îr
;

1686 
	}
}

1695 
	$db_sql_∂aycou¡_ö¸emít
(**
≥
, 
id
) {

1696 
time_t
 
now
 = 
	`time
(
NULL
);

1698  
	`db_sql_exec_‚
(
≥
,
E_INF
,"update songs setÖlay_count=play_count + 1"

1699 ",Åime_∂ayed=%d whîêid=%d",
now
,
id
);

1700 
	}
}

	@db-sql.h

22 #i‚de‡
_DB_SQL_H_


23 
	#_DB_SQL_H_


	)

25 ** 
	tSQL_ROW
;

27 #ifde‡
HAVE_LIBSQLITE


28 
db_sql_›í_sqlôe2
(**
≥
, *
∑ømëîs
);

30 #ifde‡
HAVE_LIBSQLITE3


31 
db_sql_›í_sqlôe3
(**
≥
, *
∑ømëîs
);

34 
db_sql_›í
(**
≥
, *
∑ømëîs
);

35 
db_sql_öô
(
ªlﬂd
);

36 
db_sql_deöô
();

37 
db_sql_esˇ≥
(*
buf„r
, *
size
, *
fmt
, ...);

38 
db_sql_add
(**
≥
, 
MP3FILE
 *
pmp3
, *
id
);

39 
db_sql_íum_°¨t
(**
≥
, 
DBQUERYINFO
 *
pöfo
);

42 
db_sql_íum_„tch_row
(**
≥
, 
PACKED_MP3FILE
 *
row
, 
DBQUERYINFO
 *
pöfo
);

43 
db_sql_íum_ª£t
(**
≥
, 
DBQUERYINFO
 *
pöfo
);

44 
db_sql_íum_íd
(**
≥
);

45 
db_sql_f‹˚_ªsˇn
(**
≥
);

46 
db_sql_°¨t_sˇn
();

47 
db_sql_íd_s⁄g_sˇn
();

48 
db_sql_íd_sˇn
();

49 
db_sql_gë_cou¡
(**
≥
, *
cou¡
, 
Cou¡Ty≥_t
 
ty≥
);

50 
MP3FILE
 *
db_sql_„tch_ôem
(**
≥
, 
id
);

51 
MP3FILE
 *
db_sql_„tch_∑th
(**
≥
, *
∑th
,
ödex
);

52 
M3UFILE
 *
db_sql_„tch_∂ayli°
(**
≥
, *
∑th
, 
ödex
);

53 
db_sql_di•o£_ôem
(
MP3FILE
 *
pmp3
);

54 
db_sql_di•o£_∂ayli°
(
M3UFILE
 *
pm3u
);

55 
db_sql_add_∂ayli°
(**
≥
, *
«me
, 
ty≥
, *
˛au£
, *
∑th
, 
ödex
, *
∂ayli°id
);

56 
db_sql_add_∂ayli°_ôem
(**
≥
, 
∂ayli°id
, 
s⁄gid
);

57 
db_sql_edô_∂ayli°
(**
≥
, 
id
, *
«me
, *
˛au£
);

58 
db_sql_dñëe_∂ayli°
(**
≥
, 
∂ayli°id
);

59 
db_sql_dñëe_∂ayli°_ôem
(**
≥
, 
∂ayli°id
, 
s⁄gid
);

60 
db_sql_∂aycou¡_ö¸emít
(**
≥
, 
id
);

62 
db_sql_„tch_row
(**
≥
, 
SQL_ROW
 *
row
, *
fmt
, ...);

63 
db_sql_„tch_öt
(**
≥
, *
ªsu…
, *
fmt
, ...);

64 
db_sql_„tch_ch¨
(**
≥
, **
ªsu…
, *
fmt
, ...);

65 
db_sql_di•o£_row
();

121 
	#DB_SQL_EVENT_STARTUP
 0

	)

122 
	#DB_SQL_EVENT_SONGSCANSTART
 1

	)

123 
	#DB_SQL_EVENT_SONGSCANEND
 2

	)

124 
	#DB_SQL_EVENT_PLSCANSTART
 3

	)

125 
	#DB_SQL_EVENT_PLSCANEND
 4

	)

126 
	#DB_SQL_EVENT_FULLRELOAD
 5

	)

	@debug.h

22 #i‚de‡
LIBID3TAG_DEBUG_H


23 
	#LIBID3TAG_DEBUG_H


	)

25 
	~<°dlib.h
>

27 *
id3_debug_mÆloc
(
size_t
, const *, );

28 *
id3_debug_ˇŒoc
(
size_t
, size_t, const *, );

29 *
id3_debug_ªÆloc
(*, 
size_t
, const *, );

30 
id3_debug_‰ì
(*, const *, );

32 *
id3_debug_ªÀa£
(*, const *, );

	@err.c

31 #ifde‡
HAVE_CONFIG_H


32 
	~"c⁄fig.h
"

35 
	~<°dio.h
>

36 
	~<°d¨g.h
>

37 
	~<time.h
>

38 
	~<î∫o.h
>

39 
	~<limôs.h
>

40 
	~<±hªad.h
>

41 #ifde‡
HAVE_STDINT_H


42 
	~<°döt.h
>

44 
	~<°dlib.h
>

45 
	~<°rög.h
>

47 
	~<sys/°©.h
>

48 
	~<sys/ty≥s.h
>

50 
	~"dØpd.h
"

51 
	~"îr.h
"

52 
	~"io.h
"

54 #i‚de‡
ERR_LEAN


55 
	~"os.h
"

56 
	~"∂ugö.h
"

59 
	~"utû.h
"

61 #i‚de‡
PACKAGE


62 
	#PACKAGE
 "unknow¿d´m⁄"

	)

65 
	sîr_thªadli°_t
 {

66 
uöt32_t
 
	mid
;

67 
îr_thªadli°_t
 *
	m√xt
;

68 } 
	tERR_THREADLIST
;

70 
	gîr_debugÀvñ
=0;

71 
	gîr_logde°
=0;

72 
	gîr_fûíame
[
PATH_MAX
 + 1];

73 
IOHANDLE
 
	gîr_fûe
 = 
NULL
;

74 
	gîr_debugmask
=0xFFFFFFFF;

75 
	gîr_åunˇã
 = 0;

76 
	gîr_sy¶og_›í
 = 0;

79 *
	gîr_ˇãg‹yli°
[] = {

81 "∂ayli°","¨t","dØp","maö","ªnd","xml","∑r£","∂ugö","lock",
NULL


84 
ERR_THREADLIST
 
	gîr_thªadli°
 = { 0, 
NULL
 };

90 
uöt32_t
 
__îr_gë_thªadid
();

91 
__îr_thªad_add
();

92 
__îr_thªad_dñ
();

93 
__îr_thªad_check
();

99 
	$__îr_thªad_add
() {

100 
ERR_THREADLIST
 *
≤ew
;

102 
≤ew
 = (
ERR_THREADLIST
 *)
	`mÆloc
((ERR_THREADLIST));

103 if(!
≤ew
) {

104 
	`Ârötf
(
°dîr
,"mallocÉrror in __err_thread_add\n");

105 
	`exô
(-1);

108 
≤ew
->
id
 = 
	`__îr_gë_thªadid
();

109 
≤ew
->
√xt
 = 
îr_thªadli°
.next;

110 
îr_thªadli°
.
√xt
 = 
≤ew
;

111 
	}
}

116 
	$__îr_thªad_dñ
() {

117 
uöt32_t
 
thªad_id
 = 
	`__îr_gë_thªadid
();

118 
ERR_THREADLIST
 *
œ°
, *
cuºít
;

119 
œ°
 = &
îr_thªadli°
;

120 
cuºít
 = 
îr_thªadli°
.
√xt
;

122 (
cuºít
Ë&& (cuºít->
id
 !
thªad_id
)) {

123 
œ°
 = 
cuºít
;

124 
cuºít
 = cuºít->
√xt
;

127 if(
cuºít
) {

128 
œ°
->
√xt
 = 
cuºít
->next;

129 
	`‰ì
(
cuºít
);

131 
	}
}

136 
	$__îr_thªad_check
() {

137 
uöt32_t
 
thªad_id
 = 
	`__îr_gë_thªadid
();

138 
ERR_THREADLIST
 *
cuºít
 = 
îr_thªadli°
.
√xt
;

140 
cuºít
 && (cuºít->
id
 !
thªad_id
))

141 
cuºít
 = cuºít->
√xt
;

143 if(
cuºít
)

144  
TRUE
;

146  
FALSE
;

147 
	}
}

152 
uöt32_t
 
	$__îr_gë_thªadid
() {

153 
±hªad_t
 
tid
;

154 
thªad_id
=0;

156 
	`mem£t
((*)&
tid
,0,(
±hªad_t
));

157 
tid
 = 
	`±hªad_£lf
();

159 if((
±hªad_t
) == ()) {

160 
	`mem˝y
((*)&
thªad_id
,(*)&
tid
,(thread_id));

162 
thªad_id
 = 
	`utû_djb_hash_block
((*)&
tid
,(
±hªad_t
));

165  
thªad_id
;

166 
	}
}

172 
	$îr_ª›í
() {

173 if(!(
îr_logde°
 & 
LOGDEST_LOGFILE
))

176 
	`io_˛o£
(
îr_fûe
);

177 if(!
	`io_›í
("fûe://%U?mode˜&ascii=1",
îr_fûíame
)) {

181 
	`îr_£tde°
(
îr_logde°
 & (~
LOGDEST_LOGFILE
));

182 
	`îr_£tde°
(
îr_logde°
 | 
LOGDEST_SYSLOG
);

184 
	`DPRINTF
(
E_LOG
,
L_MISC
,"CouldÇotÑotateÜog file: %s\n",

185 
	`io_îr°r
(
îr_fûe
));

189 
	`DPRINTF
(
E_LOG
,
L_MISC
,"RotatedÜogs\n");

190 
	}
}

202 
	$îr_log
(
Àvñ
, 
ˇt
, *
fmt
, ...)

204 
va_li°
 
≠
;

205 
timebuf
[256];

206 
îrbuf
[4096];

207 
tm
 
tm_now
;

208 
time_t
 
â_now
;

209 
sy¶og_⁄ly
 = 
FALSE
;

211 if(
Àvñ
 > 1) {

212 if(
Àvñ
 > 
îr_debugÀvñ
)

215 if(!(
ˇt
 & 
îr_debugmask
))

220 
	`utû_muãx_lock
(
l_îr_li°
);

221 if(
îr_thªadli°
.
√xt
 && 
	`__îr_thªad_check
()) {

222 if(!
Àvñ
) {

223 
sy¶og_⁄ly
 = 
TRUE
;

225 
	`utû_muãx_u∆ock
(
l_îr_li°
);

229 
	`__îr_thªad_add
();

230 
	`utû_muãx_u∆ock
(
l_îr_li°
);

232 
	`va_°¨t
(
≠
, 
fmt
);

233 
	`v¢¥ötf
(
îrbuf
, ”ºbuf), 
fmt
, 
≠
);

234 
	`va_íd
(
≠
);

237 if(
Àvñ
 <= 1) {

238 if(!
îr_sy¶og_›í
)

239 
	`os_›ísy¶og
();

240 
îr_sy¶og_›í
=1;

243 if(
sy¶og_⁄ly
 && !
Àvñ
) {

244 
	`Ârötf
(
°dîr
,"Aborting\n");

245 
	`exô
(-1);

249 
	`utû_muãx_lock
(
l_îr
);

251 if((
îr_logde°
 & 
LOGDEST_LOGFILE
Ë&& (
îr_fûe
Ë&& (!
sy¶og_⁄ly
)) {

252 
â_now
=
	`time
(
NULL
);

253 
	`loˇ…ime_r
(&
â_now
,&
tm_now
);

254 
	`¢¥ötf
(
timebuf
,(timebuf),"%04d-%02d-%02d %02d:%02d:%02d",

255 
tm_now
.
tm_yór
 + 1900,Åm_now.
tm_m⁄
 + 1,Åm_now.
tm_mday
,

256 
tm_now
.
tm_hour
,Åm_now.
tm_mö
,Åm_now.
tm_£c
);

257 
	`io_¥ötf
(
îr_fûe
,"%†(%08x): %s",
timebuf
,
	`__îr_gë_thªadid
(),
îrbuf
);

258 if(!
Àvñ
Ë
	`io_¥ötf
(
îr_fûe
,"%s: Ab‹tög\n",
timebuf
);

262 if((
îr_logde°
 & 
LOGDEST_STDERR
Ë|| (!
Àvñ
)) {

263 
	`Ârötf
(
°dîr
, "%s",
îrbuf
);

264 if(!
Àvñ
Ë
	`Ârötf
(
°dîr
,"Aborting\n");

267 
	`utû_muãx_u∆ock
(
l_îr
);

269 #i‚de‡
ERR_LEAN


270 if(
Àvñ
 < 2) {

271 
	`∂ugö_evít_di•©ch
(
PLUGIN_EVENT_LOG
, 
Àvñ
, 
îrbuf
, ()
	`°æí
(errbuf)+1);

275 
	`utû_muãx_lock
(
l_îr_li°
);

276 
	`__îr_thªad_dñ
();

277 
	`utû_muãx_u∆ock
(
l_îr_li°
);

279 if(!
Àvñ
) {

280 
	`exô
(
EXIT_FAILURE
);

282 
	}
}

287 
	$îr_£éevñ
(
Àvñ
) {

288 
	`utû_muãx_lock
(
l_îr
);

289 
îr_debugÀvñ
 = 
Àvñ
;

290 
	`utû_muãx_u∆ock
(
l_îr
);

291 
	}
}

296 
	$îr_gëÀvñ
() {

297 
Àvñ
;

299 
	`utû_muãx_lock
(
l_îr
);

300 
Àvñ
 = 
îr_debugÀvñ
;

301 
	`utû_muãx_u∆ock
(
l_îr
);

303  
Àvñ
;

304 
	}
}

310 
	$îr_gëde°
() {

311 
de°
;

313 
	`utû_muãx_lock
(
l_îr
);

314 
de°
=
îr_logde°
;

315 
	`utû_muãx_u∆ock
(
l_îr
);

317  
de°
;

318 
	}
}

321 
	$îr_£ârunˇã
(
åunˇã
) {

322 *
fûe
;

324 if(
îr_åunˇã
 =
åunˇã
)

325  
TRUE
;

327 
îr_åunˇã
 = 
åunˇã
;

328 if((
îr_åunˇã
Ë&& (
îr_fûe
)) {

329 
fûe
=
	`°rdup
(
îr_fûíame
);

330 
	`îr_£éogfûe
(
îr_fûíame
);

331 if(
fûe
Ë
	`‰ì
(file);

334  
TRUE
;

335 
	}
}

337 
	$îr_£éogfûe
(*
fûe
) {

338 *
mode
;

339 
ªsu…
=
TRUE
;

346 if(
îr_fûe
) {

347 
	`io_˛o£
(
îr_fûe
);

349 
îr_fûe
 = 
	`io_√w
();

350 if(!
îr_fûe
) {

351 
îr_logde°
 &~
LOGDEST_LOGFILE
;

352 if(!
îr_sy¶og_›í
)

353 
	`os_›ísy¶og
();

354 
	`os_sy¶og
(1,"Error initializingÜogfile");

358 
mode
 = "a";

359 if(
îr_åunˇã
Ë
mode
 = "w";

361 
	`°∫˝y
(
îr_fûíame
,
fûe
,(err_filename)-1);

363 if(!
	`io_›í
(
îr_fûe
,"fûe://%U?mode=%s&ascii=1",
îr_fûíame
,
mode
)) {

364 
	`Ârötf
(
°dîr
,"Eº‹ o≥nögÜogfûe: %s",
	`io_îr°r
(
îr_fûe
));

365 
îr_logde°
 &~
LOGDEST_LOGFILE
;

367 if(!
îr_sy¶og_›í
)

368 
	`os_›ísy¶og
();

369 
	`os_sy¶og
(1,"Error openingÜogfile");

371 
ªsu…
=
FALSE
;

374  
ªsu…
;

375 
	}
}

383 
	$îr_£tde°
(
de°ö©i⁄
) {

384 if(
îr_logde°
 =
de°ö©i⁄
)

387 
	`utû_muãx_lock
(
l_îr
);

388 if((
îr_logde°
 & 
LOGDEST_LOGFILE
) &&

389 (!(
de°ö©i⁄
 & 
LOGDEST_LOGFILE
))) {

391 
	`io_˛o£
(
îr_fûe
);

394 
îr_logde°
=
de°ö©i⁄
;

395 
	`utû_muãx_u∆ock
(
l_îr
);

396 
	}
}

404 
	$îr_£tdebugmask
(*
li°
) {

405 
øck
;

406 *
tokí
, *
°r
, *
œ°
;

407 *
tmp°r
;

408 
ödex
;

410 
îr_debugmask
=0x80000000;

411 
°r
=
tmp°r
=
	`°rdup
(
li°
);

412 if(!
°r
)

415 
	`utû_muãx_lock
(
l_îr
);

417 
tokí
=
	`°πok_r
(
°r
,",",&
œ°
);

418 
°r
=
NULL
;

420 if(
tokí
) {

421 
øck
=1;

422 
ödex
=0;

423 (
îr_ˇãg‹yli°
[
ödex
]) &&

424 (
	`°rˇ£cmp
(
îr_ˇãg‹yli°
[
ödex
],
tokí
))) {

425 
øck
 <<= 1;

426 
ödex
++;

429 if(!
îr_ˇãg‹yli°
[
ödex
]) {

430 
	`utû_muãx_u∆ock
(
l_îr
);

431 
	`DPRINTF
(
E_LOG
,
L_MISC
,"Unknow¿moduÀ: %s\n",
tokí
);

432 
	`‰ì
(
tmp°r
);

435 
îr_debugmask
 |
øck
;

440 
	`utû_muãx_u∆ock
(
l_îr
);

441 
	`DPRINTF
(
E_INF
,
L_MISC
,"Debug mask i†0x%08x\n",
îr_debugmask
);

442 
	`‰ì
(
tmp°r
);

445 
	}
}

	@err.h

28 #i‚de‡
__ERR_H__


29 
	#__ERR_H__


	)

32 
	#LOGDEST_STDERR
 1

	)

33 
	#LOGDEST_SYSLOG
 2

	)

34 
	#LOGDEST_LOGFILE
 4

	)

37 
	#E_SPAM
 10

	)

38 
	#E_DBG
 9

	)

39 
	#E_INF
 5

	)

40 
	#E_WARN
 2

	)

41 
	#E_LOG
 1

	)

42 
	#E_FATAL
 0

	)

45 
	#L_CONF
 0x00000001

	)

46 
	#L_WS
 0x00000002

	)

47 
	#L_DB
 0x00000004

	)

48 
	#L_SCAN
 0x00000008

	)

49 
	#L_QRY
 0x00000010

	)

50 
	#L_IND
 0x00000020

	)

51 
	#L_BROW
 0x00000040

	)

52 
	#L_PL
 0x00000080

	)

53 
	#L_ART
 0x00000100

	)

54 
	#L_DAAP
 0x00000200

	)

55 
	#L_MAIN
 0x00000400

	)

56 
	#L_REND
 0x00000800

	)

57 
	#L_XML
 0x00001000

	)

58 
	#L_PARSE
 0x00002000

	)

59 
	#L_PLUG
 0x00004000

	)

60 
	#L_LOCK
 0x00008000

	)

61 
	#L_MISC
 0x80000000

	)

63 #i‚de‡
TRUE


64 
	#TRUE
 1

	)

65 
	#FALSE
 0

	)

68 
îr_log
(
Àvñ
, 
ˇt
, *
fmt
, ...);

69 
îr_ª›í
();

70 
îr_£tde°
(
de°ö©i⁄
);

71 
îr_gëde°
();

72 
îr_£éevñ
(
Àvñ
);

73 
îr_gëÀvñ
();

74 
îr_£tdebugmask
(*
li°
);

75 
îr_£éogfûe
(*
fûe
);

76 
îr_£ârunˇã
(
åunˇã
);

82 
	#DPRINTF
 
îr_log


	)

84 #ifde‡
ERR_LEAN


85 
	#os_sy¶og
(
a
,
b
)

	)

86 
	#os_›ísy¶og
(
a
)

	)

87 
	#os_˛o£sy¶og
(
a
)

	)

	@ff-dbstruct.h

7 #i‚de‡
_FF_DBSTRUCT_H_


8 
	#_FF_DBSTRUCT_H_


	)

10 
	#PL_ID
 0

	)

11 
	#PL_TITLE
 1

	)

12 
	#PL_TYPE
 2

	)

13 
	#PL_ITEMS
 3

	)

14 
	#PL_QUERY
 4

	)

15 
	#PL_DB_TIMESTAMP
 5

	)

16 
	#PL_PATH
 6

	)

17 
	#PL_IDX
 7

	)

19 
	#SG_ID
 0

	)

20 
	#SG_PATH
 1

	)

21 
	#SG_FNAME
 2

	)

22 
	#SG_TITLE
 3

	)

23 
	#SG_ARTIST
 4

	)

24 
	#SG_ALBUM
 5

	)

25 
	#SG_GENRE
 6

	)

26 
	#SG_COMMENT
 7

	)

27 
	#SG_TYPE
 8

	)

28 
	#SG_COMPOSER
 9

	)

29 
	#SG_ORCHESTRA
 10

	)

30 
	#SG_CONDUCTOR
 11

	)

31 
	#SG_GROUPING
 12

	)

32 
	#SG_URL
 13

	)

33 
	#SG_BITRATE
 14

	)

34 
	#SG_SAMPLERATE
 15

	)

35 
	#SG_SONG_LENGTH
 16

	)

36 
	#SG_FILE_SIZE
 17

	)

37 
	#SG_YEAR
 18

	)

38 
	#SG_TRACK
 19

	)

39 
	#SG_TOTAL_TRACKS
 20

	)

40 
	#SG_DISC
 21

	)

41 
	#SG_TOTAL_DISCS
 22

	)

42 
	#SG_BPM
 23

	)

43 
	#SG_COMPILATION
 24

	)

44 
	#SG_RATING
 25

	)

45 
	#SG_PLAY_COUNT
 26

	)

46 
	#SG_DATA_KIND
 27

	)

47 
	#SG_ITEM_KIND
 28

	)

48 
	#SG_DESCRIPTION
 29

	)

49 
	#SG_TIME_ADDED
 30

	)

50 
	#SG_TIME_MODIFIED
 31

	)

51 
	#SG_TIME_PLAYED
 32

	)

52 
	#SG_DB_TIMESTAMP
 33

	)

53 
	#SG_DISABLED
 34

	)

54 
	#SG_SAMPLE_COUNT
 35

	)

55 
	#SG_FORCE_UPDATE
 36

	)

56 
	#SG_CODECTYPE
 37

	)

57 
	#SG_IDX
 38

	)

58 
	#SG_HAS_VIDEO
 39

	)

59 
	#SG_CONTENTRATING
 40

	)

60 
	#SG_BITS_PER_SAMPLE
 41

	)

61 
	#SG_ALBUM_ARTIST
 42

	)

64 
	sèg_mp3fûe
 {

65 *
	m∑th
;

66 
uöt32_t
 
	mödex
;

67 *
	m‚ame
;

68 *
	mtôÀ
;

69 *
	m¨ti°
;

70 *
	mÆbum
;

71 *
	mgíª
;

72 *
	mcommít
;

73 *
	mty≥
;

74 *
	mcompo£r
;

75 *
	m‹che°ø
;

76 *
	mc⁄du˘‹
;

77 *
	mgroupög
;

78 *
	muæ
;

80 
uöt32_t
 
	mbôøã
;

81 
uöt32_t
 
	mßm∂î©e
;

82 
uöt32_t
 
	ms⁄g_Àngth
;

83 
uöt64_t
 
	mfûe_size
;

84 
uöt32_t
 
	myór
;

86 
uöt32_t
 
	måack
;

87 
uöt32_t
 
	mtŸÆ_åacks
;

89 
uöt32_t
 
	mdisc
;

90 
uöt32_t
 
	mtŸÆ_discs
;

92 
uöt32_t
 
	mtime_added
;

93 
uöt32_t
 
	mtime_modifõd
;

94 
uöt32_t
 
	mtime_∂ayed
;

96 
uöt32_t
 
	m∂ay_cou¡
;

97 
uöt32_t
 
	møtög
;

98 
uöt32_t
 
	mdb_time°amp
;

100 
uöt32_t
 
	mdißbÀd
;

101 
uöt32_t
 
	mbpm
;

103 
uöt32_t
 
	mgŸ_id3
;

104 
uöt32_t
 
	mid
;

106 *
	mdes¸ùti⁄
;

107 *
	mcode˘y≥
;

109 
uöt32_t
 
	môem_köd
;

110 
uöt32_t
 
	md©a_köd
;

111 
uöt32_t
 
	mf‹˚_upd©e
;

112 
uöt64_t
 
	mßm∂e_cou¡
;

113 
	mcompû©i⁄
;

116 
uöt32_t
 
	mc⁄ã¡øtög
;

119 
uöt32_t
 
	mhas_video
;

120 
uöt32_t
 
	mbôs_≥r_ßm∂e
;

122 *
	mÆbum_¨ti°
;

123 } 
	tMP3FILE
;

125 
	sèg_m3ufûe
 {

126 
uöt32_t
 
	mid
;

127 *
	mtôÀ
;

128 
uöt32_t
 
	mty≥
;

129 
uöt32_t
 
	môems
;

130 *
	mquîy
;

131 
uöt32_t
 
	mdb_time°amp
;

132 *
	m∑th
;

133 
uöt32_t
 
	mödex
;

134 } 
	tM3UFILE
;

136 
	sèg_∑cked_m3ufûe
 {

137 *
	mid
;

138 *
	mtôÀ
;

139 *
	mty≥
;

140 *
	môems
;

141 *
	mquîy
;

142 *
	mdb_time°amp
;

143 *
	m∑th
;

144 *
	mödex
;

145 } 
	tPACKED_M3UFILE
;

147 
	sèg_∑cked_mp3fûe
 {

148 *
	mid
;

149 *
	m∑th
;

150 *
	m‚ame
;

151 *
	mtôÀ
;

152 *
	m¨ti°
;

153 *
	mÆbum
;

154 *
	mgíª
;

155 *
	mcommít
;

156 *
	mty≥
;

157 *
	mcompo£r
;

158 *
	m‹che°ø
;

159 *
	mc⁄du˘‹
;

160 *
	mgroupög
;

161 *
	muæ
;

162 *
	mbôøã
;

163 *
	mßm∂î©e
;

164 *
	ms⁄g_Àngth
;

165 *
	mfûe_size
;

166 *
	myór
;

167 *
	måack
;

168 *
	mtŸÆ_åacks
;

169 *
	mdisc
;

170 *
	mtŸÆ_discs
;

171 *
	mbpm
;

172 *
	mcompû©i⁄
;

173 *
	møtög
;

174 *
	m∂ay_cou¡
;

175 *
	md©a_köd
;

176 *
	môem_köd
;

177 *
	mdes¸ùti⁄
;

178 *
	mtime_added
;

179 *
	mtime_modifõd
;

180 *
	mtime_∂ayed
;

181 *
	mdb_time°amp
;

182 *
	mdißbÀd
;

183 *
	mßm∂e_cou¡
;

184 *
	mf‹˚_upd©e
;

185 *
	mcode˘y≥
;

186 *
	midx
;

187 *
	mhas_video
;

188 *
	mc⁄ã¡øtög
;

189 *
	mbôs_≥r_ßm∂e
;

190 *
	mÆbum_¨ti°
;

191 } 
	tPACKED_MP3FILE
;

193 
	#PL_STATICWEB
 0

	)

194 
	#PL_SMART
 1

	)

195 
	#PL_STATICFILE
 2

	)

196 
	#PL_STATICXML
 3

	)

	@ff-plugin-events.h

3 #i‚de‡
_FF_PLUGIN_EVENTS_H_


4 
	#_FF_PLUGIN_EVENTS_H_


	)

7 
	#PLUGIN_OUTPUT
 1

	)

8 
	#PLUGIN_SCANNER
 2

	)

9 
	#PLUGIN_DATABASE
 4

	)

10 
	#PLUGIN_EVENT
 8

	)

11 
	#PLUGIN_TRANSCODE
 16

	)

14 
	#PLUGIN_EVENT_LOG
 0

	)

15 
	#PLUGIN_EVENT_FULLSCAN_START
 1

	)

16 
	#PLUGIN_EVENT_FULLSCAN_END
 2

	)

17 
	#PLUGIN_EVENT_STARTING
 3

	)

18 
	#PLUGIN_EVENT_SHUTDOWN
 4

	)

19 
	#PLUGIN_EVENT_STARTSTREAM
 5

	)

20 
	#PLUGIN_EVENT_ABORTSTREAM
 6

	)

21 
	#PLUGIN_EVENT_ENDSTREAM
 7

	)

23 
	#PLUGIN_VERSION
 2

	)

	@ff-plugins.c

1 #ifde‡
HAVE_CONFIG_H


2 
	~"c⁄fig.h
"

5 
	~<°d¨g.h
>

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

10 
	~"bsd-¢¥ötf.h
"

11 
	~"c⁄f.h
"

12 
	~"c⁄figfûe.h
"

13 
	~"dØpd.h
"

14 
	~"db-gíîic.h
"

15 
	~"îr.h
"

16 
	~"ff-db°ru˘.h
"

17 
	~"ff-∂ugös.h
"

18 
	~"io.h
"

19 
	~"mp3-sˇ¬î.h
"

20 
	~"∂ugö.h
"

21 
	~"utû.h
"

22 
	~"web£rvî.h
"

24 
EXPORT
 *
	$pi_ws_uri
(
WS_CONNINFO
 *
pwsc
) {

25 
	`ASSERT
(
pwsc
);

27 if(!
pwsc
)

28  
NULL
;

30  
	`ws_uri
(
pwsc
);

31 
	}
}

33 
EXPORT
 
	$pi_ws_wûl_˛o£
(
WS_CONNINFO
 *
pwsc
) {

34 
	`ASSERT
(
pwsc
);

36 if(!
pwsc
)

39 
	`ws_should_˛o£
(
pwsc
,1);

40 
	}
}

42 
EXPORT
 
	$pi_ws_ªtu∫îr‹
(
WS_CONNINFO
 *
pwsc
, 
ecode
, *
msg
) {

43 
	`ASSERT
(
pwsc
);

45 if(!
pwsc
)

46  
FALSE
;

48  
	`ws_ªtu∫îr‹
(
pwsc
,
ecode
,
msg
);

49 
	}
}

51 
EXPORT
 *
	$pi_ws_gëv¨
(
WS_CONNINFO
 *
pwsc
, *
v¨
) {

52 
	`ASSERT
(
pwsc
);

53 
	`ASSERT
(
v¨
);

55 if((!
pwsc
Ë|| (!
v¨
))

56  
NULL
;

58  
	`ws_gëv¨
(
pwsc
,
v¨
);

59 
	}
}

61 
EXPORT
 
	$pi_ws_wrôefd
(
WS_CONNINFO
 *
pwsc
, *
fmt
, ...) {

62 *
out
;

63 
va_li°
 
≠
;

64 
ªsu…
;

66 
	`ASSERT
((
pwsc
Ë&& (
fmt
));

68 if((!
pwsc
Ë|| (!
fmt
))

69  
FALSE
;

71 
	`va_°¨t
(
≠
,
fmt
);

72 
out
 = 
	`utû_va•rötf
(
fmt
,
≠
);

73 
	`va_íd
(
≠
);

75 
ªsu…
 = 
	`ws_wrôefd
(
pwsc
, "%s", 
out
);

76 
	`‰ì
(
out
);

77  
ªsu…
;

78 
	}
}

80 
EXPORT
 
	$pi_ws_addª•⁄£hódî
(
WS_CONNINFO
 *
pwsc
, *
hódî
, *
fmt
, ...) {

81 *
out
;

82 
va_li°
 
≠
;

83 
ªsu…
;

85 
	`ASSERT
(
pwsc
 && 
hódî
 && 
fmt
);

87 if((!
pwsc
Ë|| (!
hódî
Ë|| (!
fmt
))

88  
FALSE
;

90 
	`va_°¨t
(
≠
,
fmt
);

91 
out
 = 
	`utû_va•rötf
(
fmt
,
≠
);

92 
	`va_íd
(
≠
);

94 
ªsu…
 = 
	`ws_addª•⁄£hódî
(
pwsc
, 
hódî
, "%s", 
out
);

95 
	`‰ì
(
out
);

96  
ªsu…
;

98 
	}
}

100 
EXPORT
 
	$pi_ws_emôhódîs
(
WS_CONNINFO
 *
pwsc
) {

101 
	`ASSERT
(
pwsc
);

103 if(!
pwsc
)

106 
	`ws_emôhódîs
(
pwsc
);

107 
	}
}

109 
EXPORT
 *
	$pi_ws_gëªque°hódî
(
WS_CONNINFO
 *
pwsc
, *
hódî
) {

110 
	`ASSERT
((
pwsc
Ë&& (
hódî
));

112 if((!
pwsc
Ë|| (!
hódî
))

113  
NULL
;

115  
	`ws_gëªque°hódî
(
pwsc
, 
hódî
);

116 
	}
}

118 
EXPORT
 
	$pi_ws_wrôebö¨y
(
WS_CONNINFO
 *
pwsc
, *
d©a
, 
Àn
) {

119 
	`ASSERT
((
pwsc
Ë&& (
d©a
Ë&& (
Àn
));

121 if((!
pwsc
Ë|| (!
d©a
Ë|| (!
Àn
))

124  
	`ws_wrôebö¨y
(
pwsc
, 
d©a
, 
Àn
);

125 
	}
}

127 
EXPORT
 *
	$pi_ws_gëho°«me
(
WS_CONNINFO
 *
pwsc
) {

128 
	`ASSERT
(
pwsc
);

130 if(!
pwsc
)

131  
NULL
;

133  
	`ws_ho°«me
(
pwsc
);

134 
	}
}

136 
EXPORT
 
	$pi_ws_m©che§ﬁe
(
WS_CONNINFO
 *
pwsc
, *
u£∫ame
,

137 *
∑ssw‹d
, *
rﬁe
) {

138 
	`ASSERT
((
pwsc
Ë&& (
rﬁe
));

140 if((!
pwsc
Ë|| (!
rﬁe
))

141  
FALSE
;

143  
	`c⁄fig_m©ches_rﬁe
(
pwsc
, 
u£∫ame
, 
∑ssw‹d
, 
rﬁe
);

144 
	}
}

147 
EXPORT
 *
	$pi_£rvî_vî
() {

148  
VERSION
;

149 
	}
}

151 
EXPORT
 
	$pi_£rvî_«me
(*
«me
, *
Àn
) {

152 *
£rvî«me
;

154 
	`ASSERT
((
«me
Ë&& (
Àn
));

156 if((!
«me
Ë|| (!
Àn
))

157  
FALSE
;

159 
£rvî«me
 = 
	`c⁄f_gë_£rvî«me
();

162 if((
£rvî«me
Ë&& (
	`°æí
(£rvî«meË< (
size_t
)
Àn
)) {

163 
	`°r˝y
(
«me
,
£rvî«me
);

165 if((
size_t
)
Àn
 > 
	`°æí
("Firefly Media Server"))

166 
	`°r˝y
(
«me
,"Firefly Media Server");

169 
	`‰ì
(
£rvî«me
);

170  
CONF_E_SUCCESS
;

171 
	}
}

173 
EXPORT
 
	$pi_log
(
Àvñ
, *
fmt
, ...) {

174 *
out
;

175 
va_li°
 
≠
;

177 
	`va_°¨t
(
≠
,
fmt
);

178 
out
=
	`utû_va•rötf
(
fmt
,
≠
);

179 
	`va_íd
(
≠
);

181 
	`DPRINTF
(
Àvñ
,
L_PLUG
,"%s",
out
);

182 
	`‰ì
(
out
);

183 
	}
}

191 
EXPORT
 
	$pi_should_å™scode
(
WS_CONNINFO
 *
pwsc
, *
codec
) {

192  
	`∂ugö_ssc_should_å™scode
(
pwsc
,
codec
);

193 
	}
}

196 
EXPORT
 
	$pi_db_íum_°¨t
(**
≥
, 
DB_QUERY
 *
pöfo
) {

197 
DBQUERYINFO
 *
pqi
;

198 
ªsu…
;

200 
pqi
 = (
DBQUERYINFO
*)
	`mÆloc
((DBQUERYINFO));

201 if(!
pqi
) {

202 if(
≥
Ë*≥ = 
	`°rdup
("MallocÉrror");

203  
DB_E_MALLOC
;

205 
	`mem£t
(
pqi
,0,(
DBQUERYINFO
));

206 
pöfo
->
¥iv
 = (*)
pqi
;

208 if(
pöfo
->
fûãr
) {

209 
pqi
->
±
 = 
	`•_öô
();

210 if(!
	`•_∑r£
(
pqi
->
±
,
pöfo
->
fûãr
,pöfo->
fûãr_ty≥
)) {

211 
	`DPRINTF
(
E_LOG
,
L_PLUG
,"Ignoring bad query (%s): %s\n",

212 
pöfo
->
fûãr
,
	`•_gë_îr‹
(
pqi
->
±
));

213 
	`•_di•o£
(
pqi
->
±
);

214 
pqi
->
±
 = 
NULL
;

218 if((
pöfo
->
limô
Ë|| (pöfo->
off£t
)) {

219 
pqi
->
ödex_low
 = 
pöfo
->
off£t
;

220 
pqi
->
ödex_high
 = 
pöfo
->
off£t
 +Ööfo->
limô
 - 1;

221 if(
pqi
->
ödex_high
 <Öqi->
ödex_low
)

222 
pqi
->
ödex_high
 = 9999999;

224 
pqi
->
ödex_ty≥
 = 
ödexTy≥Sub
;

226 
pqi
->
ödex_ty≥
 = 
ödexTy≥N⁄e
;

229 
pqi
->
w™t_cou¡
 = 1;

231 
pöfo
->
quîy_ty≥
) {

232 
QUERY_TYPE_PLAYLISTS
:

233 
pqi
->
quîy_ty≥
 = 
quîyTy≥Pœyli°s
;

235 
QUERY_TYPE_DISTINCT
:

236 if((
	`°rcmp
(
pöfo
->
di°ö˘_fõld
,"artist") == 0)) {

237 
pqi
->
quîy_ty≥
 = 
quîyTy≥Brow£Aπi°s
;

238 } if((
	`°rcmp
(
pöfo
->
di°ö˘_fõld
,"genre") == 0)) {

239 
pqi
->
quîy_ty≥
 = 
quîyTy≥Brow£Gíªs
;

240 } if((
	`°rcmp
(
pöfo
->
di°ö˘_fõld
,"album") == 0)) {

241 
pqi
->
quîy_ty≥
 = 
quîyTy≥Brow£Albums
;

242 } if((
	`°rcmp
(
pöfo
->
di°ö˘_fõld
,"composer") == 0)) {

243 
pqi
->
quîy_ty≥
 = 
quîyTy≥Brow£Compo£rs
;

245 if(
≥
Ë*≥ = 
	`°rdup
("Unsupported browseÅype");

246 if(
pqi
->
±
)

247 
	`•_di•o£
(
pqi
->
±
);

248 
pqi
->
±
 = 
NULL
;

252 
QUERY_TYPE_ITEMS
:

254 
pqi
->
quîy_ty≥
 = 
quîyTy≥Pœyli°Iãms
;

255 
pqi
->
c‹ª˘_‹dî
 = 
	`c⁄f_gë_öt
("scan","correct_order",1);

259 
pqi
->
∂ayli°_id
 = 
pöfo
->playlist_id;

260 
ªsu…
 = 
	`db_íum_°¨t
(
≥
, 
pqi
);

261 
pöfo
->
tŸÆcou¡
 = 
pqi
->
•ecifõdtŸÆcou¡
;

263  
DB_E_SUCCESS
;

264 
	}
}

266 
EXPORT
 
	$pi_db_íum_„tch_row
(**
≥
, ***
row
, 
DB_QUERY
 *
pöfo
) {

267  
	`db_íum_„tch_row
(
≥
, (
PACKED_MP3FILE
*)
row
,

268 (
DBQUERYINFO
*)
pöfo
->
¥iv
);

269 
	}
}

271 
EXPORT
 
	$pi_db_íum_íd
(**
≥
) {

272  
	`db_íum_íd
(
≥
);

273 
	}
}

275 
EXPORT
 
	$pi_db_íum_ª°¨t
(**
≥
, 
DB_QUERY
 *
pöfo
) {

276 
DBQUERYINFO
 *
pqi
;

278 
pqi
 = (
DBQUERYINFO
*)
pöfo
->
¥iv
;

279  
	`db_íum_ª£t
(
≥
,
pqi
);

280 
	}
}

282 
EXPORT
 
	$pi_db_íum_di•o£
(**
≥
, 
DB_QUERY
 *
pöfo
) {

283 
DBQUERYINFO
 *
pqi
;

285 if(!
pöfo
)

288 if(
pöfo
->
¥iv
) {

289 
pqi
 = (
DBQUERYINFO
 *)
pöfo
->
¥iv
;

290 if(
pqi
->
±
) {

291 
	`•_di•o£
(
pqi
->
±
);

292 
pqi
->
±
 = 
NULL
;

294 
	`‰ì
(
pqi
);

295 
pöfo
->
¥iv
 = 
NULL
;

297 
	}
}

299 
EXPORT
 
	$pi_°ªam
(
WS_CONNINFO
 *
pwsc
, *
id
) {

300 
£ssi⁄
 = 0;

301 
MP3FILE
 *
pmp3
;

302 
IOHANDLE
 
hfûe
;

303 
uöt64_t
 
byãs_c›õd
=0;

304 
uöt64_t
 
ªÆ_Àn
;

305 
uöt64_t
 
fûe_Àn
;

306 
uöt64_t
 
off£t
=0;

307 
ôem
;

310 
	`ws_should_˛o£
(
pwsc
,1);

312 
ôem
 = 
	`©oi
(
id
);

314 if(
	`ws_gëªque°hódî
(
pwsc
,"range")) {

315 
off£t
=(
off_t
)
	`©ﬁ
(
	`ws_gëªque°hódî
(
pwsc
,"range") + 6);

319 
pmp3
=
	`db_„tch_ôem
(
NULL
,
ôem
);

320 if(!
pmp3
) {

321 
	`DPRINTF
(
E_LOG
,
L_DAAP
|
L_WS
|
L_DB
,"CouldÇŸ födÑeque°ed iãm %lu\n",
ôem
);

322 
	`c⁄fig_£t_°©us
(
pwsc
,
£ssi⁄
,
NULL
);

323 
	`ws_ªtu∫îr‹
(
pwsc
,404,"File Not Found");

324 } i‡(
	`pi_should_å™scode
(
pwsc
,
pmp3
->
code˘y≥
)) {

328 
	`c⁄fig_£t_°©us
(
pwsc
,
£ssi⁄
,

330 
pmp3
->
tôÀ
,pmp3->
id
);

332 
	`DPRINTF
(
E_WARN
,
L_WS
,

334 
£ssi⁄
,
pmp3
->
‚ame
, 
	`ws_ho°«me
(
pwsc
),()
off£t
);

337 
byãs_c›õd
 = 
	`∂ugö_ssc_å™scode
(
pwsc
,
pmp3
,
off£t
,1);

338 if(
byãs_c›õd
 != -1)

339 
ªÆ_Àn
 = 
byãs_c›õd
;

341 
	`c⁄fig_£t_°©us
(
pwsc
,
£ssi⁄
,
NULL
);

342 
	`db_di•o£_ôem
(
pmp3
);

347 if(
pmp3
->
d©a_köd
 != 0) {

348 
	`ws_ªtu∫îr‹
(
pwsc
,500,"Can't streamÑadio station");

352 
hfûe
 = 
	`io_√w
();

353 if(!
hfûe
)

354 
	`DPRINTF
(
E_FATAL
,
L_WS
,"Cannotállocate file handle\n");

356 if(!
	`io_›í
(
hfûe
,"fûe://%U",
pmp3
->
∑th
)) {

358 
	`ws_£t_îr
(
pwsc
,
E_WS_NATIVE
);

359 
	`DPRINTF
(
E_WARN
,
L_WS
,"Thread %d: Error opening %s: %s\n",

360 
	`ws_thªadno
(
pwsc
),
pmp3
->
∑th
,
	`io_îr°r
(
hfûe
));

361 
	`ws_ªtu∫îr‹
(
pwsc
,404,"Not found");

362 
	`c⁄fig_£t_°©us
(
pwsc
,
£ssi⁄
,
NULL
);

363 
	`db_di•o£_ôem
(
pmp3
);

364 
	`io_di•o£
(
hfûe
);

366 
	`io_size
(
hfûe
,&
ªÆ_Àn
);

367 
fûe_Àn
 = 
ªÆ_Àn
 - 
off£t
;

369 
	`DPRINTF
(
E_DBG
,
L_WS
,"Thread %d: Length of file (remaining): %lld\n",

370 
	`ws_thªadno
(
pwsc
),
fûe_Àn
);

375 if(
pmp3
->
ty≥
)

376 
	`ws_addª•⁄£hódî
(
pwsc
,"C⁄ã¡-Ty≥","audio/%s",
pmp3
->
ty≥
);

378 
	`ws_addª•⁄£hódî
(
pwsc
,"C⁄ã¡-Lígth","%ld",()
fûe_Àn
);

380 if((
	`ws_gëªque°hódî
(
pwsc
,"user-agent")) &&

381 (!
	`°∫cmp
(
	`ws_gëªque°hódî
(
pwsc
,"user-agent"),

383 
	`ws_addª•⁄£hódî
(
pwsc
,"Connection","Keep-Alive");

384 
	`ws_should_˛o£
(
pwsc
,0);

386 
	`ws_addª•⁄£hódî
(
pwsc
,"Connection","Close");

389 if(!
off£t
)

390 
	`ws_wrôefd
(
pwsc
,"HTTP/1.1 200 OK\r\n");

392 
	`ws_addª•⁄£hódî
(
pwsc
,"Content-Range","bytes %ld-%ld/%ld",

393 ()
off£t
,()
ªÆ_Àn
,

394 ()
ªÆ_Àn
+1);

395 
	`ws_wrôefd
(
pwsc
,"HTTP/1.1 206 Partial Content\r\n");

398 
	`ws_emôhódîs
(
pwsc
);

400 
	`c⁄fig_£t_°©us
(
pwsc
,
£ssi⁄
,"Streaming '%s' (id %d)",

401 
pmp3
->
tôÀ
,Ömp3->
id
);

402 
	`DPRINTF
(
E_WARN
,
L_WS
,"Session %d: Streaming file '%s'Åo %s (offset %d)\n",

403 
£ssi⁄
,
pmp3
->
‚ame
, 
	`ws_ho°«me
(
pwsc
),()
off£t
);

405 if(
off£t
) {

406 
	`DPRINTF
(
E_INF
,
L_WS
,"SìkögÅÿoff£à%ld\n",()
off£t
);

407 
	`io_£ços
(
hfûe
,
off£t
,
SEEK_SET
);

410 if(!
	`ws_c›yfûe
(
pwsc
,
hfûe
,&
byãs_c›õd
)) {

412 
	`DPRINTF
(
E_INF
,
L_WS
,"Error copying fileÅoÑemote...\n");

413 
	`ws_should_˛o£
(
pwsc
,1);

415 
	`DPRINTF
(
E_INF
,
L_WS
,"Finished streaming fileÅoÑemote: %lld bytes\n",

416 
byãs_c›õd
);

419 
	`c⁄fig_£t_°©us
(
pwsc
,
£ssi⁄
,
NULL
);

420 
	`io_˛o£
(
hfûe
);

421 
	`io_di•o£
(
hfûe
);

422 
	`db_di•o£_ôem
(
pmp3
);

426 if(
byãs_c›õd
 >(
ªÆ_Àn
 * 80 / 100)) {

427 
	`db_∂aycou¡_ö¸emít
(
NULL
,
pmp3
->
id
);

428 if(!
off£t
)

429 
c⁄fig
.
°©s
.
s⁄gs_£rved
++;

432 
	}
}

434 
EXPORT
 
	$pi_db_add_∂ayli°
(**
≥
, *
«me
, 
ty≥
, *
˛au£
,

435 *
∑th
, 
ödex
, *
∂ayli°id
) {

436  
	`db_add_∂ayli°
(
≥
, 
«me
, 
ty≥
, 
˛au£
, 
∑th
, 
ödex
, 
∂ayli°id
);

437 
	}
}

439 
EXPORT
 
	$pi_db_add_∂ayli°_ôem
(**
≥
, 
∂ayli°id
, 
s⁄gid
) {

440  
	`db_add_∂ayli°_ôem
(
≥
, 
∂ayli°id
, 
s⁄gid
);

441 
	}
}

443 
EXPORT
 
	$pi_db_edô_∂ayli°
(**
≥
, 
id
, *
«me
, *
˛au£
) {

444  
	`db_edô_∂ayli°
(
≥
, 
id
, 
«me
, 
˛au£
);

445 
	}
}

447 
EXPORT
 
	$pi_db_dñëe_∂ayli°
(**
≥
, 
∂ayli°id
) {

448  
	`db_dñëe_∂ayli°
(
≥
, 
∂ayli°id
);

449 
	}
}

451 
EXPORT
 
	$pi_db_dñëe_∂ayli°_ôem
(**
≥
, 
∂ayli°id
, 
s⁄gid
) {

452  
	`db_dñëe_∂ayli°_ôem
(
≥
, 
∂ayli°id
, 
s⁄gid
);

453 
	}
}

455 
EXPORT
 
	$pi_db_ªvisi⁄
() {

456  
	`db_ªvisi⁄
();

457 
	}
}

459 
EXPORT
 
	$pi_db_cou¡_ôems
(
wh©
) {

460 
cou¡
=0;

461 *
≥
 = 
NULL
;

463 
wh©
) {

464 
COUNT_SONGS
:

465 
	`db_gë_s⁄g_cou¡
(&
≥
,&
cou¡
);

467 
COUNT_PLAYLISTS
:

468 
	`db_gë_∂ayli°_cou¡
(&
≥
,&
cou¡
);

472 if(
≥
) {

473 
	`DPRINTF
(
E_LOG
,
L_DB
,"Eº‹ gëtög iãm cou¡: %s\n",
≥
);

474 
	`‰ì
(
≥
);

476  
cou¡
;

477 
	}
}

479 
EXPORT
 
	$pi_db_waô_upd©e
(
WS_CONNINFO
 *
pwsc
) {

480 
˛õ¡vî
=1;

481 
œ°vî
=0;

482 
IO_WAITHANDLE
 
hwaô
;

483 
uöt32_t
 
ms
;

485 if(
	`ws_gëv¨
(
pwsc
,"revision-number")) {

486 
˛õ¡vî
=
	`©oi
(
	`ws_gëv¨
(
pwsc
,"revision-number"));

490 
hwaô
 = 
	`io_waô_√w
();

491 if(!
hwaô
)

492 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"Can't get wait handle in db_wait_update\n");

497 
	`io_waô_add
(
hwaô
,
pwsc
->
h˛õ¡
,
IO_WAIT_ERROR
);

499 (
˛õ¡vî
 =
	`db_ªvisi⁄
()) ||

500 (
œ°vî
 && (
	`db_ªvisi⁄
() !=Üastver))) {

501 
œ°vî
 = 
	`db_ªvisi⁄
();

503 if(!
	`io_waô
(
hwaô
,&
ms
) && (ms != 0)) {

505 
	`DPRINTF
(
E_DBG
,
L_DAAP
,"Update session stopped\n");

506 
	`io_waô_di•o£
(
hwaô
);

507  
FALSE
;

511 
	`io_waô_di•o£
(
hwaô
);

513  
TRUE
;

514 
	}
}

516 
EXPORT
 *
	$pi_c⁄f_Æloc_°rög
(*
£˘i⁄
, *
key
, *
dÊt
) {

517  
	`c⁄f_Æloc_°rög
(
£˘i⁄
, 
key
, 
dÊt
);

518 
	}
}

520 
EXPORT
 
	$pi_c⁄f_di•o£_°rög
(*
°r
) {

521 
	`‰ì
(
°r
);

522 
	}
}

524 
EXPORT
 
	$pi_c⁄f_gë_öt
(*
£˘i⁄
, *
key
, 
dÊt
) {

525  
	`c⁄f_gë_öt
(
£˘i⁄
, 
key
, 
dÊt
);

526 
	}
}

528 
EXPORT
 
	$pi_c⁄fig_£t_°©us
(
WS_CONNINFO
 *
pwsc
, 
£ssi⁄
, *
fmt
, ...) {

529 *
out
;

530 
va_li°
 
≠
;

532 
	`ASSERT
(
fmt
);

533 if(!
fmt
)

536 
	`va_°¨t
(
≠
,
fmt
);

537 
out
 = 
	`utû_va•rötf
(
fmt
,
≠
);

538 
	`va_íd
(
≠
);

540 
	`c⁄fig_£t_°©us
(
pwsc
, 
£ssi⁄
, "%s", 
out
);

541 
	`‰ì
(
out
);

542 
	}
}

549 
EXPORT
 
IOHANDLE
 
	$pi_io_√w
() {

550  
	`io_√w
();

551 
	}
}

560 
EXPORT
 
	$pi_io_›í
(
IOHANDLE
 
io
, *
fmt
, ...) {

561 
uri_c›y
[4096];

562 
va_li°
 
≠
;

564 
	`va_°¨t
(
≠
, 
fmt
);

565 
	`io_utû_v¢¥ötf
(
uri_c›y
, (uri_c›y), 
fmt
, 
≠
);

566 
	`va_íd
(
≠
);

568  
	`io_›í
(
io
, "%s", 
uri_c›y
);

569 
	}
}

577 
EXPORT
 
	$pi_io_˛o£
(
IOHANDLE
 
io
) {

578  
	`io_˛o£
(
io
);

579 
	}
}

589 
EXPORT
 
	$pi_io_ªad
(
IOHANDLE
 
io
, *
buf
, 
uöt32_t
 *
Àn
){

590  
	`io_ªad
(
io
, 
buf
, 
Àn
);

591 
	}
}

606 
EXPORT
 
	$pi_io_ªad_timeout
(
IOHANDLE
 
io
, *
buf
, 
uöt32_t
 *
Àn
, uöt32_à*
ms
) {

607  
	`io_ªad_timeout
(
io
, 
buf
, 
Àn
, 
ms
);

608 
	}
}

618 
EXPORT
 
	$pi_io_wrôe
(
IOHANDLE
 
io
, *
buf
, 
uöt32_t
 *
Àn
) {

619  
	`io_wrôe
(
io
, 
buf
, 
Àn
);

620 
	}
}

629 
EXPORT
 
	$pi_io_¥ötf
(
IOHANDLE
 
io
, *
fmt
, ...) {

630 *
out
;

631 
va_li°
 
≠
;

632 
ªsu…
;

634 
	`ASSERT
(
fmt
);

635 if(!
fmt
)

636  
FALSE
;

638 
	`va_°¨t
(
≠
,
fmt
);

639 
out
 = 
	`utû_va•rötf
(
fmt
,
≠
);

640 
	`va_íd
(
≠
);

642 
ªsu…
 = 
	`io_¥ötf
(
io
,"%s",
out
);

643 
	`‰ì
(
out
);

645  
ªsu…
;

646 
	}
}

657 
EXPORT
 
	$pi_io_size
(
IOHANDLE
 
io
, 
uöt64_t
 *
size
) {

658  
	`io_size
(
io
, 
size
);

659 
	}
}

673 
EXPORT
 
	$pi_io_£ços
(
IOHANDLE
 
io
, 
uöt64_t
 
off£t
, 
whí˚
) {

674  
	`io_£ços
(
io
, 
off£t
, 
whí˚
);

675 
	}
}

686 
EXPORT
 
	$pi_io_gëpos
(
IOHANDLE
 
io
, 
uöt64_t
 *
pos
) {

687  
	`io_gëpos
(
io
, 
pos
);

688 
	}
}

702 
EXPORT
 
	$pi_io_buf„r
(
IOHANDLE
 
io
) {

703  
	`io_buf„r
(
io
);

704 
	}
}

716 
EXPORT
 
	$pi_io_ªadlöe
(
IOHANDLE
 
io
, *
buf
, 
uöt32_t
 *
Àn
) {

717  
	`io_ªadlöe
(
io
, 
buf
, 
Àn
);

718 
	}
}

732 
EXPORT
 
	$pi_io_ªadlöe_timeout
(
IOHANDLE
 
io
, *
buf
, 
uöt32_t
 *
Àn
, uöt32_à*
ms
) {

733  
	`io_ªadlöe_timeout
(
io
, 
buf
, 
Àn
, 
ms
);

734 
	}
}

742 
EXPORT
 * 
	$pi_io_îr°r
(
IOHANDLE
 
io
) {

743  
	`io_îr°r
(
io
);

744 
	}
}

752 
EXPORT
 
	$pi_io_îrcode
(
IOHANDLE
 
io
) {

753  
	`io_îrcode
(
io
);

754 
	}
}

764 
EXPORT
 
	$pi_io_di•o£
(
IOHANDLE
 
io
) {

765  
	`io_di•o£
(
io
);

766 
	}
}

	@ff-plugins.h

22 #i‚de‡
_FF_PLUGINS_H_


23 
	#_FF_PLUGINS_H_


	)

25 
	~"ff-db°ru˘.h
"

26 
	~"ff-∂ugö-evíts.h
"

28 #ifde‡
WIN32


29 #ifde‡
_WINDLL


30 
	#EXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

32 
	#EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

35 
	#EXPORT


	)

39 #i‚de‡
TRUE


40 
	#TRUE
 1

	)

41 
	#FALSE
 0

	)

44 #i‚de‡
E_FATAL


45 
	#E_FATAL
 0

	)

46 
	#E_LOG
 1

	)

47 
	#E_WARN
 2

	)

48 
	#E_INF
 5

	)

49 
	#E_DBG
 9

	)

50 
	#E_SPAM
 10

	)

53 
	#COUNT_SONGS
 0

	)

54 
	#COUNT_PLAYLISTS
 1

	)

56 
	gèg_ws_c⁄nöfo
;

57 * 
	tHANDLE
;

60 
	sèg_∂ugö_ouçut_‚
 {

61 (*
	mˇn_h™dÀ
)(
èg_ws_c⁄nöfo
 *
	mpwsc
);

62 (*
	mh™dÀr
)(
èg_ws_c⁄nöfo
 *
	mpwsc
);

63 (*
	mauth
)(
èg_ws_c⁄nöfo
 *
	mpwsc
, *
	mu£∫ame
, *
	mpw
);

64 } 
	tPLUGIN_OUTPUT_FN
;

66 
	sèg_∂ugö_evít_‚
 {

67 (*
	mh™dÀr
)(
	mevít_id
, 
	mötvÆ
, *
	mvp
, 
	mÀn
);

68 } 
	tPLUGIN_EVENT_FN
;

70 
	sèg_∂ugö_å™scode_‚
 {

71 *(*
	mssc_öô
)();

72 (*
	mssc_deöô
)(*);

73 (*
	mssc_›í
)(*, 
	mMP3FILE
 *);

74 (*
	mssc_˛o£
)(*);

75 (*
	mssc_ªad
)(*, *, );

76 *(*
	mssc_îr‹
)(*);

77 } 
	tPLUGIN_TRANSCODE_FN
;

80 
	sèg_∂ugö_ªnd_öfo
 {

81 *
	mty≥
;

82 *
	mtxt
;

83 } 
	tPLUGIN_REND_INFO
;

86 
	sèg_∂ugö_öfo
 {

87 
	mvîsi⁄
;

88 
	mty≥
;

89 *
	m£rvî
;

90 
PLUGIN_OUTPUT_FN
 *
	mouçut_‚s
;

91 
PLUGIN_EVENT_FN
 *
	mevít_‚s
;

92 
PLUGIN_TRANSCODE_FN
 *
	må™scode_‚s
;

93 
PLUGIN_REND_INFO
 *
	mªnd_öfo
;

94 *
	mcode˛i°
;

95 } 
	tPLUGIN_INFO
;

98 
	#QUERY_TYPE_ITEMS
 0

	)

99 
	#QUERY_TYPE_PLAYLISTS
 1

	)

100 
	#QUERY_TYPE_DISTINCT
 2

	)

102 
	#FILTER_TYPE_FIREFLY
 0

	)

103 
	#FILTER_TYPE_APPLE
 1

	)

105 
	sèg_db_quîy
 {

106 
	mquîy_ty≥
;

107 *
	mdi°ö˘_fõld
;

108 
	mfûãr_ty≥
;

109 *
	mfûãr
;

111 
	moff£t
;

112 
	mlimô
;

114 
	m∂ayli°_id
;

115 
	mtŸÆcou¡
;

116 *
	m¥iv
;

117 } 
	tDB_QUERY
;

119 #ifde‡
__˝lu•lus


124 
EXPORT
 *
pi_ws_uri
(
èg_ws_c⁄nöfo
 *);

125 
EXPORT
 
pi_ws_wûl_˛o£
(
èg_ws_c⁄nöfo
 *);

126 
EXPORT
 
pi_ws_ªtu∫îr‹
(
èg_ws_c⁄nöfo
 *, , *);

127 
EXPORT
 *
pi_ws_gëv¨
(
èg_ws_c⁄nöfo
 *, *);

128 
EXPORT
 
pi_ws_wrôefd
(
èg_ws_c⁄nöfo
 *, *, ...);

129 
EXPORT
 
pi_ws_addª•⁄£hódî
(
èg_ws_c⁄nöfo
 *, *, *, ...);

130 
EXPORT
 
pi_ws_emôhódîs
(
èg_ws_c⁄nöfo
 *);

131 
EXPORT
 *
pi_ws_gëªque°hódî
(
èg_ws_c⁄nöfo
 *, *);

132 
EXPORT
 
pi_ws_wrôebö¨y
(
èg_ws_c⁄nöfo
 *, *, );

133 
EXPORT
 *
pi_ws_gëho°«me
(
èg_ws_c⁄nöfo
 *);

134 
EXPORT
 
pi_ws_m©che§ﬁe
(
èg_ws_c⁄nöfo
 *, *, *, *);

137 
EXPORT
 *
pi_£rvî_vî
();

138 
EXPORT
 
pi_£rvî_«me
(*, *);

139 
EXPORT
 
pi_log
(, *, ...);

140 
EXPORT
 
pi_should_å™scode
(
èg_ws_c⁄nöfo
 *, *);

143 
EXPORT
 
pi_db_íum_°¨t
(**, 
DB_QUERY
 *);

144 
EXPORT
 
pi_db_íum_„tch_row
(**, ***, 
DB_QUERY
 *);

145 
EXPORT
 
pi_db_íum_íd
(**);

146 
EXPORT
 
pi_db_íum_ª°¨t
(**, 
DB_QUERY
 *);

147 
EXPORT
 
pi_db_íum_di•o£
(**, 
DB_QUERY
*);

148 
EXPORT
 
pi_°ªam
(
èg_ws_c⁄nöfo
 *, *);

150 
EXPORT
 
pi_db_add_∂ayli°
(**
≥
, *
«me
, 
ty≥
, *
˛au£
, *
∑th
, 
ödex
, *
∂ayli°id
);

151 
EXPORT
 
pi_db_add_∂ayli°_ôem
(**
≥
, 
∂ayli°id
, 
s⁄gid
);

152 
EXPORT
 
pi_db_edô_∂ayli°
(**
≥
, 
id
, *
«me
, *
˛au£
);

153 
EXPORT
 
pi_db_dñëe_∂ayli°
(**
≥
, 
∂ayli°id
);

154 
EXPORT
 
pi_db_dñëe_∂ayli°_ôem
(**
≥
, 
∂ayli°id
, 
s⁄gid
);

155 
EXPORT
 
pi_db_ªvisi⁄
();

156 
EXPORT
 
pi_db_cou¡_ôems
(
wh©
);

157 
EXPORT
 
pi_db_waô_upd©e
(
èg_ws_c⁄nöfo
 *);

160 
EXPORT
 *
pi_c⁄f_Æloc_°rög
(*
£˘i⁄
, *
key
, *
dÊt
);

161 
EXPORT
 
pi_c⁄f_di•o£_°rög
(*
°r
);

162 
EXPORT
 
pi_c⁄f_gë_öt
(*
£˘i⁄
, *
key
, 
dÊt
);

163 
EXPORT
 
pi_c⁄fig_£t_°©us
(
èg_ws_c⁄nöfo
 *
pwsc
, 
£ssi⁄
, *
fmt
, ...);

166 
EXPORT
 
HANDLE
 
pi_io_√w
();

167 
EXPORT
 
pi_io_›í
(
HANDLE
 
io
, *
fmt
, ...);

168 
EXPORT
 
pi_io_˛o£
(
HANDLE
 
io
);

169 
EXPORT
 
pi_io_ªad
(
HANDLE
 
io
, *
buf
, 
uöt32_t
 *
Àn
);

170 
EXPORT
 
pi_io_ªad_timeout
(
HANDLE
 
io
, *
buf
, 
uöt32_t
 *
Àn
, uöt32_à*
ms
);

171 
EXPORT
 
pi_io_wrôe
(
HANDLE
 
io
, *
buf
, 
uöt32_t
 *
Àn
);

172 
EXPORT
 
pi_io_¥ötf
(
HANDLE
 
io
, *
fmt
, ...);

173 
EXPORT
 
pi_io_size
(
HANDLE
 
io
, 
uöt64_t
 *
size
);

174 
EXPORT
 
pi_io_£ços
(
HANDLE
 
io
, 
uöt64_t
 
off£t
, 
whí˚
);

175 
EXPORT
 
pi_io_gëpos
(
HANDLE
 
io
, 
uöt64_t
 *
pos
);

176 
EXPORT
 
pi_io_buf„r
(
HANDLE
 
io
);

177 
EXPORT
 
pi_io_ªadlöe
(
HANDLE
 
io
, *
buf
, 
uöt32_t
 *
Àn
);

178 
EXPORT
 
pi_io_ªadlöe_timeout
(
HANDLE
 
io
, *
buf
, 
uöt32_t
 *
Àn
, uöt32_à*
ms
);

179 
EXPORT
 * 
pi_io_îr°r
(
HANDLE
 
io
);

180 
EXPORT
 
pi_io_îrcode
(
HANDLE
 
io
);

181 
EXPORT
 
pi_io_di•o£
(
HANDLE
 
io
);

183 #ifde‡
__˝lu•lus


	@global.h

22 #i‚de‡
LIBID3TAG_GLOBAL_H


23 
	#LIBID3TAG_GLOBAL_H


	)

27 #i‡
deföed
(
DEBUG
Ë&& deföed(
NDEBUG
)

31 #i‡
deföed
(
DEBUG
)

32 
	~<°dio.h
>

33 
	~"debug.h
"

34 
	#mÆloc
(
sz
Ë
	`id3_debug_mÆloc
(sz, 
__FILE__
, 
__LINE__
)

	)

35 
	#ˇŒoc
(
n
, 
sz
Ë
	`id3_debug_ˇŒoc
“, sz, 
__FILE__
, 
__LINE__
)

	)

36 
	#ªÆloc
(
±r
, 
sz
Ë
	`id3_debug_ªÆloc
’å, sz, 
__FILE__
, 
__LINE__
)

	)

37 
	#‰ì
(
±r
Ë
	`id3_debug_‰ì
’å, 
__FILE__
, 
__LINE__
)

	)

38 
	#ªÀa£
(
±r
Ë
	`id3_debug_ªÀa£
’å, 
__FILE__
, 
__LINE__
)

	)

40 
	#ªÀa£
(
±r
Ë’å)

	)

45 #i‡!
deföed
(
HAVE_ASSERT_H
)

46 #i‡
deföed
(
NDEBUG
)

47 
	#as£π
(
x
Ë

	)

49 
	#as£π
(
x
Ëdÿ{ i‡(!(x)Ë
	`ab‹t
(); } 0)

	)

	@iconv_string.c

5 
	~"ic⁄v_°rög.h
"

6 
	~<ic⁄v.h
>

7 
	~<î∫o.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

11 
	#tmpbufsize
 4096

	)

13 
	$ic⁄v_°rög
 (c⁄° * 
tocode
, c⁄° * 
‰omcode
,

14 c⁄° * 
°¨t
, c⁄° * 
íd
,

15 ** 
ªsu…p
, 
size_t
* 
Àngthp
)

18 
ic⁄v_t
 
cd
 = 0;

19 
size_t
 
Àngth
 = 0;

20 * 
ªsu…
 = 
NULL
;

22 
cd
 = 
	`ic⁄v_›í
(
tocode
,
‰omcode
);

23 
	`DBG_ICONV
(
	`¥ötf
("ic⁄v_°rög.c: ic⁄v_›í=%d\n",
cd
);)

24 i‡(
cd
 =(
ic⁄v_t
)(-1)) {

25 i‡(
î∫o
 !
EINVAL
)

29 
ªt
;

31 
ªt
 = 
	`ic⁄v_°rög
(
tocode
,"GB18030",
°¨t
,
íd
,
ªsu…p
,
Àngthp
);

33 i‡(!(
ªt
 < 0 && 
î∫o
 =
EILSEQ
)){

34  
ªt
;

35 
ªt
 = 
	`ic⁄v_°rög
(
tocode
,"BIG5",
°¨t
,
íd
,
ªsu…p
,
Àngthp
);

36  
ªt
;

39 
î∫o
 = 
EINVAL
;

44 
size_t
 
cou¡
 = 0;

45 
tmpbuf
[
tmpbufsize
];

46 c⁄° * 
ö±r
 = 
°¨t
;

47 
size_t
 
ösize
 = 
íd
-
°¨t
;

48 
ösize
 > 0) {

49 * 
ouçå
 = 
tmpbuf
;

50 
size_t
 
outsize
 = 
tmpbufsize
;

51 
size_t
 
ªs
 = 
	`ic⁄v
(
cd
,&
ö±r
,&
ösize
,&
ouçå
,&
outsize
);

52 i‡(
ªs
 =(
size_t
)(-1Ë&& 
î∫o
 !
E2BIG
) {

53 i‡(
î∫o
 =
EINVAL
)

56 
ßved_î∫o
 = 
î∫o
;

57 
	`ic⁄v_˛o£
(
cd
);

58 
î∫o
 = 
ßved_î∫o
;

62 
cou¡
 +
ouçå
-
tmpbuf
;

65 * 
ouçå
 = 
tmpbuf
;

66 
size_t
 
outsize
 = 
tmpbufsize
;

67 
size_t
 
ªs
 = 
	`ic⁄v
(
cd
,
NULL
,NULL,&
ouçå
,&
outsize
);

68 i‡(
ªs
 =(
size_t
)(-1)) {

69 
ßved_î∫o
 = 
î∫o
;

70 
	`ic⁄v_˛o£
(
cd
);

71 
î∫o
 = 
ßved_î∫o
;

74 
cou¡
 +
ouçå
-
tmpbuf
;

76 
Àngth
 = 
cou¡
;

78 i‡(
Àngthp
 !
NULL
)

79 *
Àngthp
 = 
Àngth
;

80 i‡(
ªsu…p
 =
NULL
) {

81 
	`ic⁄v_˛o£
(
cd
);

84 
ªsu…
 = (*
ªsu…p
 =
NULL
 ? 
	`mÆloc
(
Àngth
Ë: 
	`ªÆloc
(*resultp,length));

85 *
ªsu…p
 = 
ªsu…
;

86 i‡(
Àngth
 == 0) {

87 
	`ic⁄v_˛o£
(
cd
);

90 i‡(
ªsu…
 =
NULL
) {

91 
	`ic⁄v_˛o£
(
cd
);

92 
î∫o
 = 
ENOMEM
;

95 
	`ic⁄v
(
cd
,
NULL
,NULL,NULL,NULL);

98 c⁄° * 
ö±r
 = 
°¨t
;

99 
size_t
 
ösize
 = 
íd
-
°¨t
;

100 * 
ouçå
 = 
ªsu…
;

101 
size_t
 
outsize
 = 
Àngth
;

102 
ösize
 > 0) {

103 
size_t
 
ªs
 = 
	`ic⁄v
(
cd
,&
ö±r
,&
ösize
,&
ouçå
,&
outsize
);

104 i‡(
ªs
 =(
size_t
)(-1)) {

105 i‡(
î∫o
 =
EINVAL
)

108 
ßved_î∫o
 = 
î∫o
;

109 
	`ic⁄v_˛o£
(
cd
);

110 
î∫o
 = 
ßved_î∫o
;

116 
size_t
 
ªs
 = 
	`ic⁄v
(
cd
,
NULL
,NULL,&
ouçå
,&
outsize
);

117 i‡(
ªs
 =(
size_t
)(-1)) {

118 
ßved_î∫o
 = 
î∫o
;

119 
	`ic⁄v_˛o£
(
cd
);

120 
î∫o
 = 
ßved_î∫o
;

124 i‡(
outsize
 !0Ë
	`ab‹t
();

126 
	`ic⁄v_˛o£
(
cd
);

128 
	}
}

	@iconv_string.h

37 
	~<°ddef.h
>

40 
	#CHAR_SET_LIST_LEN
 30

	)

41 
	#CHAR_SET_LEN
 30

	)

43 
	sch¨a˘î_£t
 {

44 
	m«me
[
CHAR_SET_LEN
];

45 
	mcou¡î
;

46 }
	tCHAR_SET
;

48 
	sch¨a˘î_£t_li°
 {

49 
CHAR_SET
 
	mch¨_£t_li°
[
CHAR_SET_LIST_LEN
];

50 }
	tCHAR_SET_LIST
;

53 #ifde‡
DBG_ICONV


54 
	#DBG_ICONV
(
x
Ë
	)
x

56 
	#DBG_ICONV
(
x
)

	)

59 #ifde‡
__˝lu•lus


63 
ic⁄v_°rög
 (c⁄° * 
tocode
, c⁄° * 
‰omcode
, c⁄° * 
°¨t
, c⁄° * 
íd
, ** 
ªsu…p
, 
size_t
* 
Àngthp
);

65 #ifde‡
__˝lu•lus


	@io-errors.h

22 #i‚de‡
_IO_ERRORS_H_


23 
	#_IO_ERRORS_H_


	)

26 
	#IO_E_OTHER
 0x00000000

	)

27 
	#IO_E_BADPROTO
 0x01000001

	)

28 
	#IO_E_NOTINIT
 0x01000002

	)

29 
	#IO_E_BADFN
 0x01000003

	)

30 
	#IO_E_INTERNAL
 0x01000004

	)

32 
	#IO_E_FILE_OTHER
 0x00000000

	)

33 
	#IO_E_FILE_NOTOPEN
 0x02000001

	)

34 
	#IO_E_FILE_UNKNOWN
 0x02000002

	)

36 
	#IO_E_SOCKET_OTHER
 0x00000000

	)

37 
	#IO_E_SOCKET_NOTOPEN
 0x03000001

	)

38 
	#IO_E_SOCKET_UNKNOWN
 0x03000002

	)

39 
	#IO_E_SOCKET_BADHOST
 0x03000003

	)

40 
	#IO_E_SOCKET_NOTINIT
 0x03000004

	)

41 
	#IO_E_SOCKET_BADFN
 0x03000005

	)

42 
	#IO_E_SOCKET_NOMCAST
 0x03000006

	)

43 
	#IO_E_SOCKET_INVALID
 0x03000007

	)

44 
	#IO_E_SOCKET_INUSE
 0x03000008

	)

	@io-plugin.h

7 #i‚de‡
_IO_PLUGIN_H_


8 
	#_IO_PLUGIN_H_


	)

10 
èg_io_¥ivh™dÀ
 
	tIO_PRIVHANDLE
;

11 
èg_io_‚±r
 
	tIO_FNPTR
;

12 
èg_io_›ti⁄li°
 
	tIO_OPTIONLIST
;

14 
	#IO_LOG_FATAL
 0

	)

15 
	#IO_LOG_LOG
 1

	)

16 
	#IO_LOG_WARN
 3

	)

17 
	#IO_LOG_INFO
 5

	)

18 
	#IO_LOG_DEBUG
 9

	)

19 
	#IO_LOG_SPAM
 10

	)

21 #ifde‡
WIN32


22 
	#WAITABLE_T
 
HANDLE


	)

23 
	#SOCKET_T
 
SOCKET


	)

24 
	#FILE_T
 
HANDLE


	)

25 
	#ERR_T
 
DWORD


	)

26 
	t__öt8
 
	tuöt8_t
;

27 
	t__öt16
 
	tuöt16_t
;

28 
	t__öt32
 
	tuöt32_t
;

29 
	t__öt64
 
	tuöt64_t
;

31 
	#WAITABLE_T
 

	)

32 
	#SOCKET_T
 

	)

33 
	#FILE_T
 

	)

34 
	#ERR_T
 

	)

37 
	sèg_io_‚±r
 {

38 (*
	m‚_›í
)(
	mIO_PRIVHANDLE
 *, *);

39 (*
	m‚_˛o£
)(
	mIO_PRIVHANDLE
 *);

40 (*
	m‚_ªad
)(
	mIO_PRIVHANDLE
 *, *, 
	muöt32_t
 *);

41 (*
	m‚_wrôe
)(
	mIO_PRIVHANDLE
 *, *, 
	muöt32_t
 *);

42 (*
	m‚_size
)(
	mIO_PRIVHANDLE
 *, 
	muöt64_t
 *);

43 (*
	m‚_£ços
)(
	mIO_PRIVHANDLE
 *, 
	muöt64_t
, );

44 (*
	m‚_gëpos
)(
	mIO_PRIVHANDLE
 *, 
	muöt64_t
 *);

45 *(*
	m‚_gëîrmsg
)(
	mIO_PRIVHANDLE
 *, 
	mERR_T
 *, *);

46 (*
	m‚_gëwaôabÀ
)(
	mIO_PRIVHANDLE
 *, , 
	mWAITABLE_T
 *);

47 (*
	m‚_gëfd
)(
	mIO_PRIVHANDLE
 *, 
	mFILE_T
 *);

48 (*
	m‚_gësockë
)(
	mIO_PRIVHANDLE
 *, 
	mSOCKET_T
 *);

51 
	sèg_io_¥ivh™dÀ
 {

52 
	m›í
;

53 
ERR_T
 
	mîr
;

54 
	mis_loˇl
;

55 *
	mîr_°r
;

56 
IO_FNPTR
 *
	m‚±r
;

57 
IO_OPTIONLIST
 *
	mpﬁ
;

58 *
	m¥Ÿo
;

59 
	mbuf„rög
;

60 
uöt32_t
 
	mbuf„r_off£t
;

61 
uöt32_t
 
	mbuf„r_Àn
;

62 *
	mbuf„r
;

68 *
	m¥iv©e
;

71 
io_ªgi°î_h™dÀr
(*
¥Ÿo
, 
IO_FNPTR
 *
‚±r
);

72 * 
io_›ti⁄_gë
(
IO_PRIVHANDLE
 *
ph™dÀ
,*
›ti⁄
,*
dÊt
);

74 #i‚de‡
TRUE


75 
	#TRUE
 1

	)

76 
	#FALSE
 0

	)

	@io.c

8 
	#_CRT_SECURE_NO_WARNINGS
 1601

	)

9 
	#_CRT_SECURE_NO_DEPRECATE
 1

	)

10 
	#_CRT_NONSTDC_NO_DEPRECATE
 1

	)

11 #¥agm®
w¨nög
(
dißbÀ
: 4996)

13 #ifde‡
LARGE_FILE


14 
	#_LARGEFILE_SOURCE


	)

15 
	#_LARGEFILE64_SOURCE


	)

18 #ifde‡
HAVE_CONFIG_H


19 
	~"c⁄fig.h
"

22 
	~<î∫o.h
>

23 #i‚de‡
WIN32


24 
	~<√tdb.h
>

26 
	#WIN32_LEAN_AND_MEAN


	)

27 
	~<wödows.h
>

28 
	~<ws2t˝ù.h
>

31 
	~<˘y≥.h
>

32 
	~<f˙é.h
>

33 
	~<°d¨g.h
>

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 #ifde‡
HAVE_UNISTD_H


38 
	~<uni°d.h
>

41 #i‚de‡
WIN32


42 
	~<√töë/ö.h
>

43 
	~<sys/£À˘.h
>

44 
	~<sys/sockë.h
>

45 
	~<¨∑/öë.h
>

46 #ifde‡
HAVE_SYS_TIME_H


47 
	~<sys/time.h
>

50 
	~<sys/ty≥s.h
>

52 
	~"io-îr‹s.h
"

53 
	~"io-∂ugö.h
"

54 
	~"bsd-¢¥ötf.h
"

56 #ifde‡
WIN32


57 
	#°rˇ£cmp
 
°ricmp


	)

58 
	#SHUT_RDWR
 
SD_BOTH


	)

59 
	#ssize_t
 

	)

61 
	#IO_HANDLES_START
 1

	)

62 
	#IO_HANDLES_GROW
 1

	)

64 
	#˛o£sockë
 
˛o£


	)

67 #ifde‡
WIN32


68 
	sèg_io_waôh™dÀ
 {

69 
DWORD
 
	mdwLa°Resu…
;

70 
DWORD
 
	mdwIãmCou¡
;

71 
DWORD
 
	mdwMaxIãms
;

72 
DWORD
 
	mdwWhichEvít
;

73 
WAITABLE_T
 *
	mhWaôIãms
;

74 
WSANETWORKEVENTS
 
	mwßNëw‹kEvíts
;

75 
IO_PRIVHANDLE
 **
	mµH™dÀ
;

76 } 
	tIO_WAITHANDLE
;

78 
	sèg_io_waôh™dÀ
 {

79 
	mmax_fd
;

80 
fd_£t
 
	mªad_fds
;

81 
fd_£t
 
	mwrôe_fds
;

82 
fd_£t
 
	mîr_fds
;

83 
fd_£t
 
	mªsu…_ªad
;

84 
fd_£t
 
	mªsu…_wrôe
;

85 
fd_£t
 
	mªsu…_îr
;

86 } 
	tIO_WAITHANDLE
;

90 
	~<sys/io˘l.h
>

91 
	~<√t/if.h
>

92 
devi˚_öf
[10];

96 
io_öô
();

97 
io_deöô
();

98 
io_i•rŸo
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
¥Ÿo
);

100 
	#IO_WAIT_READ
 1

	)

101 
	#IO_WAIT_WRITE
 2

	)

102 
	#IO_WAIT_ERROR
 4

	)

104 
	#IO_BUFFER_SIZE
 1024

	)

106 
IO_WAITHANDLE
 *
io_waô_√w
();

107 
io_waô_add
(
IO_WAITHANDLE
 *
pwaô
, 
IO_PRIVHANDLE
 *
ph™dÀ
, 
ty≥
);

108 
io_waô
(
IO_WAITHANDLE
 *
pwaô
, 
uöt32_t
 *
ms
);

109 
io_waô_°©us
(
IO_WAITHANDLE
 *
pwaô
, 
IO_PRIVHANDLE
 *
ph™dÀ
);

110 
io_waô_di•o£
(
IO_WAITHANDLE
 *
pwaô
);

112 
IO_PRIVHANDLE
 *
io_√w
();

113 
io_›í
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
fmt
, ...);

114 
io_˛o£
(
IO_PRIVHANDLE
 *
ph™dÀ
);

115 
io_ªad
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
, 
uöt32_t
 *
Àn
);

116 
io_wrôe
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
, 
uöt32_t
 *
Àn
);

117 
io_¥ötf
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
fmt
, ...);

118 
io_size
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
uöt64_t
 *
size
);

119 
io_£ços
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
uöt64_t
 
off£t
, 
whí˚
);

120 
io_gëpos
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
uöt64_t
 *
pos
);

121 
io_buf„r
(
IO_PRIVHANDLE
 *
ph™dÀ
);

122 
io_ªadlöe
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
, 
uöt32_t
 *
Àn
);

123 
io_ªadlöe_timeout
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
,

124 
uöt32_t
 *
Àn
, uöt32_à*
ms
);

125 *
io_îr°r
(
IO_PRIVHANDLE
 *
ph™dÀ
);

126 
io_di•o£
(
IO_PRIVHANDLE
 *
ph™dÀ
);

128 
io_£t_îrh™dÀr
((*
îr_h™dÀr
)(, *));

129 
	`io_£t_lockh™dÀr
((*
lock_h™dÀr
)());

130 
	`io_ªgi°î_h™dÀr
(*
¥Ÿo
, 
IO_FNPTR
 *
‚±r
);

133 
	`io_fûe_›í
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
uri
);

134 
	`io_fûe_˛o£
(
IO_PRIVHANDLE
 *
ph™dÀ
);

135 
	`io_fûe_ªad
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
,

136 
uöt32_t
 *
Àn
);

137 
	`io_fûe_wrôe
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
,

138 
uöt32_t
 *
Àn
);

139 
	`io_fûe_size
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
uöt64_t
 *
size
);

140 
	`io_fûe_£ços
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
uöt64_t
 
off£t
, 
whí˚
);

141 
	`io_fûe_gëpos
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
uöt64_t
 *
pos
);

142 * 
	`io_fûe_gëîrmsg
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
ERR_T
 *
code
, *
is_loˇl
);

143 
	`io_fûe_gëwaôabÀ
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
mode
, 
WAITABLE_T
 *
ªtvÆ
);

144 
	`io_fûe_gëfd
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
FILE_T
 *
pfd
);

147 
	`io_sockë_›í
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
uri
);

148 
	`io_sockë_˛o£
(
IO_PRIVHANDLE
 *
ph™dÀ
);

149 
	`io_sockë_ªad
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
,

150 
uöt32_t
 *
Àn
);

151 
	`io_sockë_wrôe
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
,

152 
uöt32_t
 *
Àn
);

153 * 
	`io_sockë_gëîrmsg
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
ERR_T
 *
code
, *
is_loˇl
);

154 
	`io_sockë_gëwaôabÀ
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
mode
, 
WAITABLE_T
 *
ªtvÆ
);

155 
	`io_sockë_gësockë
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
SOCKET_T
 *
psock
);

157 
	`io_li°í_›í
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
uri
);

158 
	`io_li°í_ac˚±
(
IO_PRIVHANDLE
 *
ph™dÀ
, IO_PRIVHANDLE *
pchûd
,

159 
ö_addr
 *
ho°
);

160 
	`io_udp_ªcv‰om
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
, 
uöt32_t
 *
Àn
,

161 
sockaddr_ö
 *
si_ªmŸe
, 
sockÀn_t
 *
si_Àn
);

162 
	`io_udp_£ndto
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
, 
uöt32_t
 *
Àn
,

163 
sockaddr_ö
 *
si_ªmŸe
, 
sockÀn_t
 
si_Àn
);

166 
	`io_îr
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
uöt32_t
 
îr‹code
);

167 
	`io_îr_¥ötf
(
Àvñ
, *
fmt
, ...);

168 
	`io_deÁu…_îrh™dÀr
(
Àvñ
, *
msg
);

169 
	`io_deÁu…_lockh™dÀr
();

170 
	`io_lock
();

171 
	`io_u∆ock
();

172 
	`io_uædecode
(*);

173 
	`io_›ti⁄_add
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
key
, *
vÆue
);

174 
	`io_›ti⁄_di•o£
(
IO_PRIVHANDLE
 *
ph™dÀ
);

176 
	`io_fûe_£ãº
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
ERR_T
 
îrcode
);

177 
	`io_sockë_£ãº
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
ERR_T
 
îrcode
);

180 
	sèg_io_›ti⁄li°
 {

181 *
key
;

182 *
vÆue
;

183 
èg_io_›ti⁄li°
 *
√xt
;

186 
	sèg_io_h™dÀr_li°
 {

187 *
¥Ÿo
;

188 
IO_FNPTR
 *
‚±r
;

189 
èg_io_h™dÀr_li°
 *
√xt
;

190 } 
	tIO_HANDLER_LIST
;

192 
	sèg_io_fûe_¥iv
 {

193 
FILE_T
 
fd
;

194 
ERR_T
 
îr
;

195 
loˇl_îr
;

196 
›íed
;

197 
›í_Êags
;

198 } 
	tIO_FILE_PRIV
;

200 
	#IO_FILE_READ
 0x01

	)

201 
	#IO_FILE_WRITE
 0x02

	)

202 
	#IO_FILE_APPEND
 0x04

	)

203 
	#IO_FILE_TRUNCATE
 0x08

	)

204 
	#IO_FILE_CREATENEW
 0x10

	)

205 
	#IO_FILE_CREATE
 0x20

	)

207 
	sèg_io_sockë_¥iv
 {

208 
SOCKET_T
 
fd
;

209 
ERR_T
 
îr
;

210 
p‹t
;

211 
loˇl_îr
;

212 
›íed
;

213 
is_udp
;

214 
sockaddr_ö
 
si_ªmŸe
;

215 #ifde‡
WIN32


216 
WAITABLE_T
 
hEvít
;

217 
waô_mode
;

219 } 
	tIO_SOCKET_PRIV
;

221 #ifde‡
DEBUG


222 #i‚de‡
ASSERT


223 
	#ASSERT
(
f
) \

224 if(
f
) \

225 {
	}
} \

227 
	`io_îr_¥ötf
(0,"As£πÉº‹ i¿%s,Üöê%d\n",
__FILE__
,
__LINE__
)

	)

230 #i‚de‡
ASSERT


231 
	#ASSERT
(
f
)

	)

237 
IO_HANDLER_LIST
 
	gio_h™dÀr_li°
;

238 (*
io_îr_h™dÀr
)(, *Ë
io_deÁu…_îrh™dÀr
;

239 (*
io_lock_h™dÀr
)(Ë
io_deÁu…_lockh™dÀr
;

240 
io_öôülized
 = 0;

242 *
io_îr_°rögs
[] = {

248 
	}
};

250 *
	gio_fûe_îr_°rögs
[] = {

256 *
	gio_sockë_îr_°rögs
[] = {

268 
IO_FNPTR
 
	gio_p‚_fûe
 = {

269 
io_fûe_›í
,

270 
io_fûe_˛o£
,

271 
io_fûe_ªad
,

272 
io_fûe_wrôe
,

273 
io_fûe_size
,

274 
io_fûe_£ços
,

275 
io_fûe_gëpos
,

276 
io_fûe_gëîrmsg
,

277 
io_fûe_gëwaôabÀ
,

278 
io_fûe_gëfd
,

279 
NULL


282 
IO_FNPTR
 
	gio_p‚_sockë
 = {

283 
io_sockë_›í
,

284 
io_sockë_˛o£
,

285 
io_sockë_ªad
,

286 
io_sockë_wrôe
,

287 
NULL
,

288 
NULL
,

289 
NULL
,

290 
io_sockë_gëîrmsg
,

291 
io_sockë_gëwaôabÀ
,

292 
NULL
,

293 
io_sockë_gësockë


296 
IO_FNPTR
 
	gio_p‚_li°í
 = {

297 
io_li°í_›í
,

298 
io_sockë_˛o£
,

299 
NULL
,

300 
NULL
,

301 
NULL
,

302 
NULL
,

303 
NULL
,

304 
io_sockë_gëîrmsg
,

305 
io_sockë_gëwaôabÀ
,

306 
NULL
,

307 
io_sockë_gësockë


310 
IO_FNPTR
 
	gio_p‚_udp
 = {

311 
io_sockë_›í
,

312 
io_sockë_˛o£
,

313 
io_sockë_ªad
,

314 
io_sockë_wrôe
,

315 
NULL
,

316 
NULL
,

317 
NULL
,

318 
io_sockë_gëîrmsg
,

319 
io_sockë_gëwaôabÀ
,

320 
NULL
,

321 
io_sockë_gësockë


324 
IO_FNPTR
 
	gio_p‚_ud∂i°í
 = {

325 
io_li°í_›í
,

326 
io_sockë_˛o£
,

327 
io_sockë_ªad
,

328 
io_sockë_wrôe
,

329 
NULL
,

330 
NULL
,

331 
NULL
,

332 
io_sockë_gëîrmsg
,

333 
io_sockë_gëwaôabÀ
,

334 
NULL
,

335 
io_sockë_gësockë


342 #ifde‡
WIN32


344 
WSADATA
 
	gio_WSAD©a
;

346 #unde‡
gëtimeofday


348 
	$gëtimeofday
 (
timevÆ
 *
tv
, * 
tz
) {

350 
uöt64_t
 
ns100
;

351 
FILETIME
 
·
;

352 } 
now
;

354 
	`GëSy°emTimeAsFûeTime
 (&
now
.
·
);

355 
tv
->
tv_u£c
 = (Ë((
now
.
ns100
 / 10LL) % 1000000LL);

356 
tv
->
tv_£c
 = (Ë((
now
.
ns100
 - 116444736000000000LL) / 10000000LL);

358 
	}
}

366 
	$io_öô
() {

367 #ifde‡
WIN32


368 
WORD
 
wVîsi⁄Reque°ed
;

369 
îr
;

372 
	`ASSERT
(!
io_öôülized
);

374 
	`io_lock
();

375 
io_h™dÀr_li°
.
√xt
 = 
NULL
;

377 #ifde‡
WIN32


378 
wVîsi⁄Reque°ed
 = 
	`MAKEWORD
(2,2);

379 
îr
 = 
	`WSASèπup
(
wVîsi⁄Reque°ed
, &
io_WSAD©a
);

380 if(
îr
) {

381 
	`io_îr_¥ötf
(
IO_LOG_FATAL
,"CouldÇot initialize winsock\n");

382 
	`io_u∆ock
();

383  
FALSE
;

386 if(
	`HIBYTE
(
io_WSAD©a
.
wVîsi⁄
 < 2)) {

387 
	`io_îr_¥ötf
(
IO_LOG_FATAL
,"ThisÖrogramÑequires Winsock 2.0 or better\n");

388 
	`WSACÀ™up
();

389 
	`io_u∆ock
();

390  
FALSE
;

394 
io_öôülized
 = 
TRUE
;

395 
	`io_u∆ock
();

397 
	`io_ªgi°î_h™dÀr
("fûe",&
io_p‚_fûe
);

398 
	`io_ªgi°î_h™dÀr
("sockë",&
io_p‚_sockë
);

399 
	`io_ªgi°î_h™dÀr
("li°í",&
io_p‚_li°í
);

400 
	`io_ªgi°î_h™dÀr
("udp",&
io_p‚_udp
);

401 
	`io_ªgi°î_h™dÀr
("ud∂i°í",&
io_p‚_ud∂i°í
);

402  
TRUE
;

403 
	}
}

410 
	$io_uædecode
(*
°r
) {

411 *
cuºít
,*
d°
;

412 
digô1
, 
digô2
;

413 *
hexdigôs
 = "0123456789abcdef";

415 
cuºít
 = 
d°
 = 
°r
;

416 *
cuºít
) {

417 *
cuºít
) {

419 *
d°
++ = ' ';

420 *
cuºít
++;

424 if(
	`°æí
(
cuºít
) < 3) {

425 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"urldecode: unexpected EOL\n");

426  
FALSE
;

428 
cuºít
++;

430 if(!
	`°rchr
(
hexdigôs
,
	`tﬁowî
(*
cuºít
))) {

431 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"urldecode: bad hex digit\n");

432  
FALSE
;

434 
digô1
 = ()(
	`°rchr
(
hexdigôs
,
	`tﬁowî
(*
cuºít
)) - hexdigits);

436 
cuºít
++;

437 if(!
	`°rchr
(
hexdigôs
,
	`tﬁowî
(*
cuºít
))) {

438 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"urldecode: bad hex digit\n");

439  
FALSE
;

441 
digô2
 = ()(
	`°rchr
(
hexdigôs
,
	`tﬁowî
(*
cuºít
)) - hexdigits);

442 
cuºít
++;

444 *
d°
++ = ()(((
digô1
 & 0x0FË<< 4Ë| (
digô2
 & 0x0F));

447 *
d°
++ = *
cuºít
++;

452 *
d°
 = '\0';

453  
TRUE
;

454 
	}
}

459 
	$io_deÁu…_lockh™dÀr
(
lock
) {

460 
	}
}

466 
	$io_lock
() {

467 
	`io_lock_h™dÀr
(
TRUE
);

468 
	}
}

474 
	$io_u∆ock
() {

475 
	`io_lock_h™dÀr
(
FALSE
);

476 
	}
}

484 
	$io_deöô
() {

485 
IO_HANDLER_LIST
 *
pcuºít
;

487 
	`ASSERT
(
io_öôülized
);

489 
	`io_lock
();

490 
pcuºít
 = 
io_h™dÀr_li°
.
√xt
;

491 
pcuºít
) {

492 
io_h™dÀr_li°
.
√xt
 = 
pcuºít
->next;

493 
	`‰ì
(
pcuºít
->
¥Ÿo
);

494 
	`‰ì
(
pcuºít
);

495 
pcuºít
 = 
io_h™dÀr_li°
.
√xt
;

498 #ifde‡
WIN32


499 
	`WSACÀ™up
();

502 
	`io_u∆ock
();

504  
TRUE
;

505 
	}
}

513 
io_£t_îrh™dÀr
((*
îr_h™dÀr
)(, *)) {

514 
io_îr_h™dÀr
 = 
îr_h™dÀr
;

515 
	}
}

517 
io_£t_lockh™dÀr
((*
lock_h™dÀr
)()) {

518 
io_lock_h™dÀr
 = 
lock_h™dÀr
;

519 
	}
}

528 
	$io_îr_¥ötf
(
Àvñ
, *
fmt
, ...) {

529 
îrbuf
[4096];

530 
va_li°
 
≠
;

532 
	`va_°¨t
(
≠
,
fmt
);

533 
	`v¢¥ötf
(
îrbuf
,”ºbuf),
fmt
,
≠
);

534 
	`va_íd
(
≠
);

536 
	`io_îr_h™dÀr
(
Àvñ
,
îrbuf
);

537 
	}
}

545 
	$io_deÁu…_îrh™dÀr
(
Àvñ
, *
msg
) {

546 
	`Ârötf
(
°dîr
,"%d: %s", 
Àvñ
, 
msg
);

547 if(!
Àvñ
) {

548 
	`exô
(0);

550 
	}
}

559 
	$io_ªgi°î_h™dÀr
(*
¥Ÿo
, 
IO_FNPTR
 *
‚±r
) {

560 
IO_HANDLER_LIST
 *
≤ew
;

561 
IO_HANDLER_LIST
 *
œ°
;

563 
≤ew
 = (
IO_HANDLER_LIST
*)
	`mÆloc
((IO_HANDLER_LIST));

564 if(!
≤ew
)

565 
	`io_îr_¥ötf
(
IO_LOG_FATAL
,"Error in malloc\n");

567 
≤ew
->
¥Ÿo
 = 
	`°rdup
(proto);

568 
≤ew
->
‚±r
 = fnptr;

569 
≤ew
->
√xt
 = 
NULL
;

571 
	`io_lock
();

573 
œ°
 = &
io_h™dÀr_li°
;

574 
œ°
->
√xt
) {

575 
œ°
 =Üa°->
√xt
;

578 
œ°
->
√xt
 = 
≤ew
;

579 
	`io_u∆ock
();

581  
TRUE
;

582 
	}
}

587 
IO_PRIVHANDLE
 *
	$io_√w
() {

588 
IO_PRIVHANDLE
 *
≤ew
;

590 
	`ASSERT
(
io_öôülized
);

592 
≤ew
 = (
IO_PRIVHANDLE
*)
	`mÆloc
((IO_PRIVHANDLE));

593 if(!
≤ew
) {

594 
	`io_îr_¥ötf
(
IO_LOG_FATAL
,"MallocÉrror in io_new\n");

595  
NULL
;

598 
	`mem£t
(
≤ew
,0x00,(
IO_PRIVHANDLE
));

599  
≤ew
;

600 
	}
}

609 
	$io_assign_h™dÀ
(
IO_PRIVHANDLE
 *
ph™dÀ
,*
¥Ÿo
) {

610 
IO_HANDLER_LIST
 *
∂i°
;

612 
	`ASSERT
(
io_öôülized
);

614 if(
ph™dÀ
->
›í
) {

615 if(!
	`io_˛o£
(
ph™dÀ
))

616  
FALSE
;

620 if((
ph™dÀ
->
¥Ÿo
Ë&& (
	`°rˇ£cmp
(phandle->proto,proto)==0))

621  
TRUE
;

624 
	`io_lock
();

625 
∂i°
 = 
io_h™dÀr_li°
.
√xt
;

626 
∂i°
 && (
	`°rˇ£cmp
(
¥Ÿo
,plist->proto) != 0))

627 
∂i°
 =Öli°->
√xt
;

628 
	`io_u∆ock
();

630 if(!
∂i°
) {

631 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"Couldn'àföd h™dÀ∏f‹ '%s'\n",
¥Ÿo
);

632 
	`io_îr
(
ph™dÀ
,
IO_E_BADPROTO
);

633  
FALSE
;

636 
ph™dÀ
->
›í
 = 
TRUE
;

637 
ph™dÀ
->
¥Ÿo
 = 
∂i°
->proto;

638 
ph™dÀ
->
‚±r
 = 
∂i°
->fnptr;

639  
TRUE
;

640 
	}
}

650 
	$io_›í
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
fmt
, ...) {

651 *
¥Ÿo_∑π
 = 
NULL
;

652 *
∑th_∑π
 = 
NULL
;

653 *
›ti⁄s_∑π
 = 
NULL
;

654 *
key
, *
vÆue
;

655 
ªsu…
;

656 
uri_c›y
[4096];

657 
va_li°
 
≠
;

658 
	`ASSERT
(
io_öôülized
);

660 
	`va_°¨t
(
≠
, 
fmt
);

661 
	`io_utû_v¢¥ötf
(
uri_c›y
, (uri_c›y), 
fmt
, 
≠
);

662 
	`va_íd
(
≠
);

664 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"O≥nög %s\n", 
uri_c›y
);

666 if((
¥Ÿo_∑π
 = 
	`°r°r
(
uri_c›y
,"://"))) {

667 *
¥Ÿo_∑π
 = '\0';

668 
∑th_∑π
 = 
¥Ÿo_∑π
 + 3;

669 
¥Ÿo_∑π
 = 
uri_c›y
;

672 if(
∑th_∑π
)

673 
	`io_uædecode
(
∑th_∑π
);

676 
›ti⁄s_∑π
 = 
	`°rchr
(
∑th_∑π
,'?');

677 if(
›ti⁄s_∑π
) {

678 *
›ti⁄s_∑π
 = '\0';

679 
›ti⁄s_∑π
++;

683 
›ti⁄s_∑π
) {

684 
key
 = 
›ti⁄s_∑π
;

685 
›ti⁄s_∑π
 = 
	`°rchr
(options_part,'&');

686 if(
›ti⁄s_∑π
) {

687 *
›ti⁄s_∑π
 = '\0';

688 
›ti⁄s_∑π
++;

690 
vÆue
 = 
	`°rchr
(
key
,'=');

691 if(
vÆue
) {

692 *
vÆue
 = '\0';

693 
vÆue
++;

696 if((
key
Ë&& (
vÆue
)) {

697 
	`io_uædecode
(
key
);

698 
	`io_uædecode
(
vÆue
);

699 
	`io_›ti⁄_add
(
ph™dÀ
,
key
,
vÆue
);

703 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"Checkög h™dÀ∏f‹ %s\n",
¥Ÿo_∑π
);

704 if(!
	`io_assign_h™dÀ
(
ph™dÀ
,
¥Ÿo_∑π
)) {

705  
FALSE
;

708 
ph™dÀ
->
›í
 = 
FALSE
;

709 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"›íög %s\n",
∑th_∑π
);

710 
ªsu…
 = 
ph™dÀ
->
‚±r
->
	`‚_›í
’h™dÀ,
∑th_∑π
);

712 if(!
ªsu…
) {

713 
	`io_îr
(
ph™dÀ
,
IO_E_OTHER
);

714  
FALSE
;

716 
ph™dÀ
->
›í
 = 
TRUE
;

717  
ªsu…
;

718 
	}
}

726 
	$io_˛o£
(
IO_PRIVHANDLE
 *
ph™dÀ
) {

727 
ªsu…
=
FALSE
;

729 
	`ASSERT
(
io_öôülized
);

730 
	`ASSERT
(
ph™dÀ
);

731 
	`ASSERT
(
ph™dÀ
->
‚±r
);

732 
	`ASSERT
(
ph™dÀ
->
‚±r
->
‚_˛o£
);

734 if((!
ph™dÀ
Ë|| (!ph™dÀ->
‚±r
)) {

735 
	`io_îr
(
ph™dÀ
,
IO_E_NOTINIT
);

736  
FALSE
;

739 if(!
ph™dÀ
->
‚±r
->
‚_˛o£
) {

740 
	`io_îr
(
ph™dÀ
,
IO_E_BADFN
);

741  
FALSE
;

744 if(
ph™dÀ
->
›í
) {

745 
ªsu…
 = 
ph™dÀ
->
‚±r
->
	`‚_˛o£
(phandle);

746 if(!
ªsu…
)

747 
	`io_îr
(
ph™dÀ
,
IO_E_OTHER
);

750 
ph™dÀ
->
›í
 = 
FALSE
;

751 
	`io_›ti⁄_di•o£
(
ph™dÀ
);

752  
ªsu…
;

753 
	}
}

770 
	$io_ªad_timeout
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
, 
uöt32_t
 *
Àn
,

771 
uöt32_t
 *
ms
) {

772 
IO_WAITHANDLE
 *
pwh
;

774 
	`ASSERT
(
io_öôülized
);

775 
	`ASSERT
(
ph™dÀ
);

776 
	`ASSERT
(
ph™dÀ
->
›í
);

777 
	`ASSERT
(
ph™dÀ
->
‚±r
);

778 
	`ASSERT
(
ph™dÀ
->
‚±r
->
‚_ªad
);

780 
	`io_îr_¥ötf
(
IO_LOG_SPAM
,"entering io_read_timeout\n");

782 if((!
ph™dÀ
Ë|| (!ph™dÀ->
›í
Ë|| (!ph™dÀ->
‚±r
)) {

783 
	`io_îr
(
ph™dÀ
,
IO_E_NOTINIT
);

784 *
Àn
 = 0;

785  
FALSE
;

788 if(!
ph™dÀ
->
‚±r
->
‚_ªad
) {

789 
	`io_îr
(
ph™dÀ
,
IO_E_BADFN
);

790 *
Àn
 = 0;

791  
FALSE
;

794 if(
ms
) {

796 
pwh
=
	`io_waô_√w
();

797 if(!
pwh
) {

798 
	`io_îr
(
ph™dÀ
,
IO_E_INTERNAL
);

799  
FALSE
;

802 
	`io_waô_add
(
pwh
,
ph™dÀ
,
IO_WAIT_READ
 | 
IO_WAIT_ERROR
);

803 if(!
	`io_waô
(
pwh
,
ms
)) {

804 
	`io_waô_di•o£
(
pwh
);

805 
	`io_îr
(
ph™dÀ
,
IO_E_INTERNAL
);

806  
FALSE
;

808 
	`io_waô_di•o£
(
pwh
);

811  
	`io_ªad
(
ph™dÀ
,
buf
,
Àn
);

812 
	}
}

823 
	$io_ªad
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
, 
uöt32_t
 *
Àn
) {

824 
ªsu…
;

825 *
buf_±r
 = 
buf
;

826 
uöt32_t
 
ªad_size
;

827 
uöt32_t
 
max_Àn
 = *
Àn
;

829 
	`ASSERT
(
io_öôülized
);

830 
	`ASSERT
(
ph™dÀ
);

831 
	`ASSERT
(
ph™dÀ
->
›í
);

832 
	`ASSERT
(
ph™dÀ
->
‚±r
);

833 
	`ASSERT
(
ph™dÀ
->
‚±r
->
‚_ªad
);

835 
	`io_îr_¥ötf
(
IO_LOG_SPAM
,"entering io_read\n");

837 if((!
ph™dÀ
Ë|| (!ph™dÀ->
›í
Ë|| (!ph™dÀ->
‚±r
)) {

838 
	`io_îr
(
ph™dÀ
,
IO_E_NOTINIT
);

839 *
Àn
 = 0;

840  
FALSE
;

843 if(!
ph™dÀ
->
‚±r
->
‚_ªad
) {

844 
	`io_îr
(
ph™dÀ
,
IO_E_BADFN
);

845 *
Àn
 = 0;

846  
FALSE
;

850 if(
ph™dÀ
->
buf„rög
) {

851 *
Àn
 = 0;

852 
max_Àn
) {

854 if(
ph™dÀ
->
buf„r_off£t
 <Öh™dÀ->
buf„r_Àn
) {

855 
	`io_îr_¥ötf
(
IO_LOG_SPAM
,"Fulfilling from buffer\n");

856 
ªad_size
 = 
max_Àn
;

857 if(
ªad_size
 > (
ph™dÀ
->
buf„r_Àn
 -Öh™dÀ->
buf„r_off£t
))

858 
ªad_size
 = 
ph™dÀ
->
buf„r_Àn
 -Öh™dÀ->
buf„r_off£t
;

859 
	`mem˝y
((*)
buf_±r
,(*)&
ph™dÀ
->
buf„r
[ph™dÀ->
buf„r_off£t
], 
ªad_size
);

860 *
Àn
 +
ªad_size
;

861 
max_Àn
 -
ªad_size
;

862 
buf_±r
 +
ªad_size
;

863 
ph™dÀ
->
buf„r_off£t
 +
ªad_size
;

866 
	`io_îr_¥ötf
(
IO_LOG_SPAM
,"readingÇew block\n");

867 
ph™dÀ
->
buf„r_Àn
 = 
IO_BUFFER_SIZE
;

868 if(!
ph™dÀ
->
‚±r
->
	`‚_ªad
’h™dÀ,ph™dÀ->
buf„r
,&ph™dÀ->
buf„r_Àn
)) {

869 
	`io_îr
(
ph™dÀ
,
IO_E_OTHER
);

870  
FALSE
;

872 
ph™dÀ
->
buf„r_off£t
 = 0;

873 if(
ph™dÀ
->
buf„r_Àn
 == 0)

874  
TRUE
;

877  
TRUE
;

880 
ªsu…
 = 
ph™dÀ
->
‚±r
->
	`‚_ªad
’h™dÀ,
buf
,
Àn
);

881 if(!
ªsu…
)

882 
	`io_îr
(
ph™dÀ
,
IO_E_OTHER
);

884 
	`io_îr_¥ötf
(
IO_LOG_SPAM
,"Ród %d byãs\n",*
Àn
);

885  
ªsu…
;

886 
	}
}

904 
	$io_ªadlöe_timeout
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
,

905 
uöt32_t
 *
Àn
, uöt32_à*
ms
) {

906 
uöt32_t
 
numªad
 = 0;

907 
uöt32_t
 
to_ªad
;

908 
ascii
 = 0;

910 if(
	`io_›ti⁄_gë
(
ph™dÀ
,"ascii",
NULL
))

911 
ascii
 = 1;

913 
	`io_îr_¥ötf
(
IO_LOG_SPAM
,"enteringÑeadline_timeout\n");

915 
numªad
 < (*
Àn
 - 1)) {

916 
to_ªad
 = 1;

917 if(
	`io_ªad_timeout
(
ph™dÀ
, 
buf
 + 
numªad
, &
to_ªad
, 
ms
)) {

918 if(!
to_ªad
) {

919 *
Àn
 = 
numªad
;

920 
buf
[
numªad
] = '\0';

921  
TRUE
;

923 if((!
ascii
Ë|| (
to_ªad
 != '\r')) {

924 if(
buf
[
numªad
] == '\n') {

925 
buf
[
numªad
+1] = '\0';

926 *
Àn
 = 
numªad
 + 1;

927  
TRUE
;

929 
numªad
++;

935 
buf
[
numªad
-1] = '\0';

936 *
Àn
 = 
numªad
-1;

938 
	`io_îr_¥ötf
(
IO_LOG_LOG
,"BufferÅoo small in io_readline_timeout()\n");

939  
TRUE
;

940 
	}
}

957 
	$io_ªadlöe
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
,

958 
uöt32_t
 *
Àn
) {

960 
	`io_îr_¥ötf
(
IO_LOG_SPAM
,"entering io_readline\n");

961  
	`io_ªadlöe_timeout
(
ph™dÀ
, 
buf
, 
Àn
, 
NULL
);

962 
	}
}

974 
	$io_wrôe
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
, 
uöt32_t
 *
Àn
) {

975 
ªsu…
;

976 
ascii
=0;

977 
mu°_‰ì
=
FALSE
;

978 *
ªÆ_buf„r
;

979 *
d°
;

981 
uöt32_t
 
ascii_Àn
;

982 
uöt32_t
 
ödex
;

983 
uöt32_t
 
ªÆ_Àn
;

985 
	`ASSERT
(
io_öôülized
);

986 
	`ASSERT
(
ph™dÀ
);

987 
	`ASSERT
(
ph™dÀ
->
›í
);

988 
	`ASSERT
(
ph™dÀ
->
‚±r
);

989 
	`ASSERT
(
ph™dÀ
->
‚±r
->
‚_wrôe
);

991 if((!
ph™dÀ
Ë|| (!ph™dÀ->
›í
Ë|| (!ph™dÀ->
‚±r
)) {

992 
	`io_îr
(
ph™dÀ
,
IO_E_NOTINIT
);

993 *
Àn
 = 0;

994  
FALSE
;

997 if(!
ph™dÀ
->
‚±r
->
‚_wrôe
) {

998 
	`io_îr
(
ph™dÀ
,
IO_E_BADFN
);

999 *
Àn
 = 0;

1000  
FALSE
;

1004 #ifde‡
WIN32


1006 if(
	`io_›ti⁄_gë
(
ph™dÀ
,"ascii",
NULL
))

1007 
ascii
 = 1;

1010 if(
ascii
) {

1011 
ascii_Àn
 = *
Àn
;

1012 
ödex
 = 0; index < *
Àn
; index++) {

1013 if(
buf
[
ödex
] == '\n')

1014 
ascii_Àn
++;

1016 
ªÆ_buf„r
 = (*)
	`mÆloc
(
ascii_Àn
);

1017 if(!
ªÆ_buf„r
) {

1018 
	`io_îr_¥ötf
(
IO_LOG_FATAL
,"CouldÇotálloc buffer in io_printf\n");

1019 
	`exô
(-1);

1022 
mu°_‰ì
 = 
TRUE
;

1023 
d°
 = 
ªÆ_buf„r
;

1024 
ödex
 = 0; index < *
Àn
; index++) {

1025 if(
buf
[
ödex
] == '\n')

1026 *
d°
++ = '\r';

1027 *
d°
++ = 
buf
[
ödex
];

1029 
ªÆ_Àn
 = 
ascii_Àn
;

1031 
ªÆ_buf„r
 = 
buf
;

1032 
ªÆ_Àn
 = *
Àn
;

1035 
ªsu…
 = 
ph™dÀ
->
‚±r
->
	`‚_wrôe
’h™dÀ,
ªÆ_buf„r
,&
ªÆ_Àn
);

1037 if(!
ªsu…
)

1038 
	`io_îr
(
ph™dÀ
,
IO_E_OTHER
);

1040 if(
mu°_‰ì
) {

1041 if(
ªÆ_Àn
 =
ascii_Àn
)

1042 
ªÆ_Àn
 = *
Àn
;

1043 
	`‰ì
(
ªÆ_buf„r
);

1046 *
Àn
 = 
ªÆ_Àn
;

1047  
ªsu…
;

1048 
	}
}

1059 
	$io_¥ötf
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
fmt
, ...) {

1060 *
outbuf
;

1061 *
√wbuf
;

1062 
va_li°
 
≠
;

1063 
size
=200;

1064 
√w_size
;

1065 
uöt32_t
 
Àn
;

1067 
outbuf
 = (*)
	`mÆloc
(
size
);

1068 if(!
outbuf
) {

1069 
	`io_îr_¥ötf
(
IO_LOG_FATAL
,"CouldÇotálloc buffer in io_printf\n");

1070 
	`exô
(1);

1074 
	`va_°¨t
(
≠
,
fmt
);

1075 
√w_size
=
	`v¢¥ötf
(
outbuf
,
size
,
fmt
,
≠
);

1076 
	`va_íd
(
≠
);

1078 if(
√w_size
 > -1 &&Çew_sizê< 
size
)

1081 if(
√w_size
 > -1)

1082 
size
 = 
√w_size
 + 1;

1084 
size
 *= 2;

1086 if((
√wbuf
 = 
	`ªÆloc
(
outbuf
,
size
)Ë=
NULL
) {

1087 
	`‰ì
(
outbuf
);

1088 
	`io_îr_¥ötf
(
IO_LOG_FATAL
,"mallocÉrror in io_printf\n");

1089 
	`exô
(1);

1091 
outbuf
 = 
√wbuf
;

1094 
Àn
 = 
√w_size
;

1095 if(!
	`io_wrôe
(
ph™dÀ
,(*)
outbuf
,&
Àn
Ë|| (À¿!
√w_size
)) {

1096 
	`‰ì
(
outbuf
);

1097  
FALSE
;

1100 
	`‰ì
(
outbuf
);

1101  
TRUE
;

1102 
	}
}

1111 
	$io_size
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
uöt64_t
 *
size
) {

1112 
ªsu…
;

1114 
	`ASSERT
(
io_öôülized
);

1115 
	`ASSERT
(
ph™dÀ
);

1116 
	`ASSERT
(
ph™dÀ
->
›í
);

1117 
	`ASSERT
(
ph™dÀ
->
‚±r
);

1119 if((!
ph™dÀ
Ë|| (!ph™dÀ->
›í
Ë|| (!ph™dÀ->
‚±r
)) {

1120 
	`io_îr
(
ph™dÀ
,
IO_E_NOTINIT
);

1121  
FALSE
;

1124 if(!
ph™dÀ
->
‚±r
->
‚_size
) {

1125 
	`io_îr
(
ph™dÀ
,
IO_E_BADFN
);

1126  
FALSE
;

1129 
ªsu…
 = 
ph™dÀ
->
‚±r
->
	`‚_size
’h™dÀ,
size
);

1130 if(!
ªsu…
)

1131 
	`io_îr
(
ph™dÀ
,
IO_E_OTHER
);

1133  
ªsu…
;

1134 
	}
}

1144 
	$io_£ços
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
uöt64_t
 
off£t
, 
whí˚
) {

1145 
ªsu…
;

1147 
	`ASSERT
(
io_öôülized
);

1148 
	`ASSERT
(
ph™dÀ
);

1149 
	`ASSERT
(
ph™dÀ
->
›í
);

1150 
	`ASSERT
(
ph™dÀ
->
‚±r
);

1151 
	`ASSERT
(
ph™dÀ
->
‚±r
->
‚_£ços
);

1153 if((!
ph™dÀ
Ë|| (!ph™dÀ->
›í
Ë|| (!ph™dÀ->
‚±r
)) {

1154 
	`io_îr
(
ph™dÀ
,
IO_E_NOTINIT
);

1155  
FALSE
;

1158 if(!
ph™dÀ
->
‚±r
->
‚_£ços
) {

1159 
	`io_îr
(
ph™dÀ
,
IO_E_BADFN
);

1160  
FALSE
;

1163 
ªsu…
 = 
ph™dÀ
->
‚±r
->
	`‚_£ços
’h™dÀ, 
off£t
, 
whí˚
);

1164 if(!
ªsu…
)

1165 
	`io_îr
(
ph™dÀ
,
IO_E_OTHER
);

1167  
ªsu…
;

1168 
	}
}

1177 
	$io_gëpos
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
uöt64_t
 *
pos
) {

1178 
ªsu…
;

1180 
	`ASSERT
(
io_öôülized
);

1181 
	`ASSERT
(
ph™dÀ
);

1182 
	`ASSERT
(
ph™dÀ
->
›í
);

1183 
	`ASSERT
(
ph™dÀ
->
‚±r
);

1184 
	`ASSERT
(
ph™dÀ
->
‚±r
->
‚_gëpos
);

1186 if((!
ph™dÀ
Ë|| (!ph™dÀ->
›í
Ë|| (!ph™dÀ->
‚±r
)) {

1187 
	`io_îr
(
ph™dÀ
,
IO_E_NOTINIT
);

1188  
FALSE
;

1191 if(!
ph™dÀ
->
‚±r
->
‚_gëpos
) {

1192 
	`io_îr
(
ph™dÀ
,
IO_E_BADFN
);

1193  
FALSE
;

1196 
ªsu…
 = 
ph™dÀ
->
‚±r
->
	`‚_gëpos
’h™dÀ, 
pos
);

1197 if(!
ªsu…
)

1198 
	`io_îr
(
ph™dÀ
,
IO_E_OTHER
);

1200  
ªsu…
;

1201 
	}
}

1209 
	$io_buf„r
(
IO_PRIVHANDLE
 *
ph™dÀ
) {

1210 
	`ASSERT
(
ph™dÀ
);

1212 if(!
ph™dÀ
)

1213  
FALSE
;

1215 if(
ph™dÀ
->
buf„r
)

1216  
TRUE
;

1218 
ph™dÀ
->
buf„r
 = (*)
	`mÆloc
(
IO_BUFFER_SIZE
);

1219 if(!
ph™dÀ
->
buf„r
) {

1220 
	`io_îr_¥ötf
(
IO_LOG_FATAL
,"MallocÉrror in io_buffer\n");

1221 
	`exô
(-1);

1224 
ph™dÀ
->
buf„rög
=1;

1226  
TRUE
;

1227 
	}
}

1235 *
	$io_îr°r
(
IO_PRIVHANDLE
 *
ph™dÀ
) {

1236 
	`ASSERT
(
ph™dÀ
);

1237 
	`ASSERT
(
ph™dÀ
->
îr_°r
);

1239 if(!
ph™dÀ
)

1242 if(!
ph™dÀ
->
îr_°r
)

1245  
ph™dÀ
->
îr_°r
;

1246 
	}
}

1254 
uöt32_t
 
	$io_îrcode
(
IO_PRIVHANDLE
 *
ph™dÀ
) {

1255 
	`ASSERT
(
ph™dÀ
);

1257 if(!
ph™dÀ
)

1260  
ph™dÀ
->
îr
;

1261 
	}
}

1268 
	$io_di•o£
(
IO_PRIVHANDLE
 *
ph™dÀ
) {

1269 
	`ASSERT
(
ph™dÀ
);

1271 if(!
ph™dÀ
)

1274 if(
ph™dÀ
->
›í
)

1275 
	`io_˛o£
(
ph™dÀ
);

1277 
	`io_›ti⁄_di•o£
(
ph™dÀ
);

1278 if(
ph™dÀ
->
îr_°r
)

1279 
	`‰ì
(
ph™dÀ
->
îr_°r
);

1281 
	`‰ì
(
ph™dÀ
);

1282 
	}
}

1291 
	$io_îr
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
uöt32_t
 
îr‹code
) {

1292 
	`ASSERT
(
ph™dÀ
);

1293 
	`ASSERT
(
îr‹code
 || 
ph™dÀ
->
‚±r
);

1295 if((!
ph™dÀ
Ë|| (!
îr‹code
 && !ph™dÀ->
‚±r
))

1298 if(
ph™dÀ
->
îr_°r
)

1299 
	`‰ì
(
ph™dÀ
->
îr_°r
);

1301 
ph™dÀ
->
îr
 = 
îr‹code
;

1303 if(
îr‹code
) {

1304 
ph™dÀ
->
îr_°r
 = 
	`°rdup
(
io_îr_°rögs
[
îr‹code
 & 0x00FFFFFF]);

1305 
ph™dÀ
->
îr
 = 
îr‹code
;

1306 
ph™dÀ
->
is_loˇl
 = 
TRUE
;

1309 
ph™dÀ
->
îr_°r
 =Öh™dÀ->
‚±r
->
	`‚_gëîrmsg
’h™dÀ, &ph™dÀ->
îr
, &ph™dÀ->
is_loˇl
);

1312 (
ph™dÀ
->
îr_°r
[
	`°æí
(phandle->err_str) - 1] == '\n') ||

1313 (
ph™dÀ
->
îr_°r
[
	`°æí
(phandle->err_str) -1] == '\r'))

1314 
ph™dÀ
->
îr_°r
[
	`°æí
(phandle->err_str) -1] = '\0';

1315 
	}
}

1324 
	$io_fûe_©èch
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
FILE_T
 
fd
) {

1325 
IO_FILE_PRIV
 *
¥iv
;

1327 
	`ASSERT
(
ph™dÀ
);

1329 if(!
ph™dÀ
) {

1330  
FALSE
;

1333 if(!
	`io_assign_h™dÀ
(
ph™dÀ
,"file")) {

1334  
FALSE
;

1337 
¥iv
 = (
IO_FILE_PRIV
*)
	`mÆloc
((IO_FILE_PRIV));

1338 if(!
¥iv
) {

1339 
	`io_îr_¥ötf
(
IO_LOG_FATAL
,"MallocÉrror in io_file_attach\n");

1340  
FALSE
;

1342 
ph™dÀ
->
¥iv©e
 = (*)
¥iv
;

1343 
	`mem£t
(
¥iv
,0x00,(
IO_FILE_PRIV
));

1345 
¥iv
->
fd
 = fd;

1346 
¥iv
->
›íed
 = 
TRUE
;

1348  
TRUE
;

1349 
	}
}

1359 
	$io_fûe_›í
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
uri
) {

1360 
IO_FILE_PRIV
 *
¥iv
;

1361 *
mode
;

1362 *
≥rmissi⁄s
;

1363 
uöt32_t
 
«tive_mode
=0;

1364 #ifde‡
WIN32


1365 
uöt32_t
 
«tive_≥rmissi⁄s
=0;

1366 
WCHAR
 *
utf16_∑th
;

1369 
	`ASSERT
(
ph™dÀ
);

1370 if(!
ph™dÀ
) {

1371  
FALSE
;

1374 
¥iv
 = (
IO_FILE_PRIV
*)
	`mÆloc
((IO_FILE_PRIV));

1375 if(!
¥iv
) {

1376 
	`io_îr_¥ötf
(
IO_LOG_FATAL
,"MallocÉrror in io_file_attach\n");

1377  
FALSE
;

1379 
ph™dÀ
->
¥iv©e
 = (*)
¥iv
;

1380 
	`mem£t
(
¥iv
,0x00,(
IO_FILE_PRIV
));

1382 
¥iv
->
›í_Êags
 = 0;

1383 
mode
 = 
	`io_›ti⁄_gë
(
ph™dÀ
,"mode","r");

1384 
≥rmissi⁄s
 = 
	`io_›ti⁄_gë
(
ph™dÀ
,"permissions","0666");

1386 if(
	`°rcmp
(
mode
,"r")==0)

1387 
¥iv
->
›í_Êags
 = 
IO_FILE_READ
;

1388 if(
	`°rcmp
(
mode
,"r+")==0)

1389 
¥iv
->
›í_Êags
 = 
IO_FILE_READ
 | 
IO_FILE_WRITE
;

1390 if(
	`°rcmp
(
mode
,"w")==0)

1391 
¥iv
->
›í_Êags
 = 
IO_FILE_WRITE
 | 
IO_FILE_CREATE
 | 
IO_FILE_TRUNCATE
;

1392 if(
	`°rcmp
(
mode
,"w+")==0)

1393 
¥iv
->
›í_Êags
 = 
IO_FILE_READ
 | 
IO_FILE_WRITE
 | 
IO_FILE_CREATE
 | 
IO_FILE_TRUNCATE
;

1394 if(
	`°rcmp
(
mode
,"a")==0)

1395 
¥iv
->
›í_Êags
 = 
IO_FILE_WRITE
 | 
IO_FILE_APPEND
 | 
IO_FILE_CREATE
;

1396 if(
	`°rcmp
(
mode
,"a+")==0)

1397 
¥iv
->
›í_Êags
 = 
IO_FILE_READ
 | 
IO_FILE_WRITE
 | 
IO_FILE_APPEND
 | 
IO_FILE_CREATE
;

1400 #ifde‡
WIN32


1401 if(
¥iv
->
›í_Êags
 & 
IO_FILE_READ
)

1402 
«tive_≥rmissi⁄s
 |
GENERIC_READ
;

1403 if(
¥iv
->
›í_Êags
 & 
IO_FILE_WRITE
)

1404 
«tive_≥rmissi⁄s
 |
GENERIC_WRITE
;

1406 if(
¥iv
->
›í_Êags
 & 
IO_FILE_CREATE
)

1407 
«tive_mode
 |
OPEN_ALWAYS
;

1409 
«tive_mode
 |
OPEN_EXISTING
;

1411 
utf16_∑th
 = (
WCHAR
 *)
	`utû_utf8toutf16_Æloc
(
uri
);

1412 
¥iv
->
fd
 = 
	`Cª©eFûeW
(
utf16_∑th
,
«tive_≥rmissi⁄s
,
FILE_SHARE_READ
,
NULL
,

1413 
«tive_mode
,
FILE_ATTRIBUTE_NORMAL
,
NULL
);

1414 
	`‰ì
(
utf16_∑th
);

1415 if(
¥iv
->
fd
 =
INVALID_HANDLE_VALUE
) {

1416 
	`io_fûe_£ãº
(
ph™dÀ
,
IO_E_FILE_OTHER
);

1417  
FALSE
;

1420 if(
¥iv
->
›í_Êags
 & 
IO_FILE_TRUNCATE
)

1421 
	`SëEndOfFûe
(
¥iv
->
fd
);

1423 if((
¥iv
->
›í_Êags
 & 
IO_FILE_READ
Ë&& (¥iv->›í_Êag†& 
IO_FILE_WRITE
))

1424 
«tive_mode
 |
O_RDWR
;

1426 if(
¥iv
->
›í_Êags
 & 
IO_FILE_READ
)

1427 
«tive_mode
 |
O_RDONLY
;

1428 if(
¥iv
->
›í_Êags
 & 
IO_FILE_WRITE
)

1429 
«tive_mode
 |
O_WRONLY
;

1431 if(
¥iv
->
›í_Êags
 & 
IO_FILE_TRUNCATE
)

1432 
«tive_mode
 |
O_TRUNC
;

1433 if(
¥iv
->
›í_Êags
 & 
IO_FILE_APPEND
)

1434 
«tive_mode
 |
O_APPEND
;

1435 if(
¥iv
->
›í_Êags
 & 
IO_FILE_CREATE
)

1436 
«tive_mode
 |
O_CREAT
;

1438 
¥iv
->
fd
 = 
	`›í
(
uri
,
«tive_mode
,
	`°πﬁ
(
≥rmissi⁄s
,(**)
NULL
,8));

1439 if(
¥iv
->
fd
 == -1) {

1440 
	`io_fûe_£ãº
(
ph™dÀ
,
IO_E_FILE_OTHER
);

1441  
FALSE
;

1445 
¥iv
->
›íed
 = 
TRUE
;

1446  
TRUE
;

1447 
	}
}

1455 
	$io_fûe_˛o£
(
IO_PRIVHANDLE
 *
ph™dÀ
) {

1456 
IO_FILE_PRIV
 *
¥iv
;

1458 
	`ASSERT
(
ph™dÀ
);

1459 
	`ASSERT
(
ph™dÀ
->
¥iv©e
);

1461 if((!
ph™dÀ
Ë|| (!ph™dÀ->
¥iv©e
)) {

1462  
FALSE
;

1465 
¥iv
 = (
IO_FILE_PRIV
*Ë
ph™dÀ
->
¥iv©e
;

1467 if(!
¥iv
->
›íed
) {

1468 
	`io_fûe_£ãº
(
ph™dÀ
,
IO_E_FILE_NOTOPEN
);

1469  
FALSE
;

1473 #ifde‡
WIN32


1474 
	`Clo£H™dÀ
(
¥iv
->
fd
);

1476 
	`˛o£
(
¥iv
->
fd
);

1479 
	`‰ì
(
¥iv
);

1480 
ph™dÀ
->
¥iv©e
 = 
NULL
;

1482  
TRUE
;

1483 
	}
}

1493 
	$io_fûe_ªad
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
, 
uöt32_t
 *
Àn
) {

1494 
IO_FILE_PRIV
 *
¥iv
;

1495 
ªsu…
;

1497 
	`ASSERT
(
ph™dÀ
);

1498 
	`ASSERT
(
ph™dÀ
->
¥iv©e
);

1500 if((!
ph™dÀ
Ë|| (!ph™dÀ->
¥iv©e
)) {

1501 *
Àn
 = 0;

1502  
FALSE
;

1505 
¥iv
 = (
IO_FILE_PRIV
*Ë
ph™dÀ
->
¥iv©e
;

1506 
	`ASSERT
(
¥iv
->
›íed
);

1508 if(!
¥iv
->
›íed
) {

1509 
	`io_fûe_£ãº
(
ph™dÀ
,
IO_E_FILE_NOTOPEN
);

1510 *
Àn
 = 0;

1511  
FALSE
;

1515 #ifde‡
WIN32


1516 
ªsu…
 = (Ë
	`RódFûe
(
¥iv
->
fd
,
buf
,*
Àn
,Àn,
NULL
);

1517 if(!
ªsu…
) {

1518 
	`io_fûe_£ãº
(
ph™dÀ
,
IO_E_FILE_OTHER
);

1519 *
Àn
 = 0;

1520 
ªsu…
 = 
FALSE
;

1522 
ªsu…
 = 
TRUE
;

1525 ((
ªsu…
 = 
	`ªad
(
¥iv
->
fd
, 
buf
, *
Àn
)) == -1) &&

1526 (
î∫o
 =
EINTR
));

1528 if(
ªsu…
 < 0) {

1529 
	`io_fûe_£ãº
(
ph™dÀ
,
IO_E_FILE_OTHER
);

1530 *
Àn
 = 0;

1531 
ªsu…
 = 
FALSE
;

1533 *
Àn
 = 
ªsu…
;

1534 
ªsu…
 = 
TRUE
;

1538  
ªsu…
;

1539 
	}
}

1549 
	$io_fûe_wrôe
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
, 
uöt32_t
 *
Àn
) {

1550 
IO_FILE_PRIV
 *
¥iv
;

1551 
ªsu…
;

1553 
	`ASSERT
(
ph™dÀ
);

1554 
	`ASSERT
(
ph™dÀ
->
¥iv©e
);

1556 if((!
ph™dÀ
Ë|| (!ph™dÀ->
¥iv©e
)) {

1557 *
Àn
 = 0;

1558  
FALSE
;

1561 
¥iv
 = (
IO_FILE_PRIV
*Ë
ph™dÀ
->
¥iv©e
;

1562 
	`ASSERT
(
¥iv
->
›íed
);

1564 if(!
¥iv
->
›íed
) {

1565 
	`io_fûe_£ãº
(
ph™dÀ
,
IO_E_FILE_NOTOPEN
);

1566 *
Àn
 = 0;

1567  
FALSE
;

1571 #ifde‡
WIN32


1572 
ªsu…
 = (Ë
	`WrôeFûe
(
¥iv
->
fd
,
buf
,*
Àn
,Àn,
NULL
);

1573 if(!
ªsu…
) {

1574 
	`io_fûe_£ãº
(
ph™dÀ
,
IO_E_FILE_OTHER
);

1575 *
Àn
 = 0;

1576 
ªsu…
 = 
FALSE
;

1578 
ªsu…
 = 
TRUE
;

1582 ((
ªsu…
 = 
	`wrôe
(
¥iv
->
fd
, 
buf
, *
Àn
)) == -1) &&

1583 (
î∫o
 =
EINTR
));

1585 if(
ªsu…
 < 0) {

1586 
	`io_fûe_£ãº
(
ph™dÀ
,
IO_E_FILE_OTHER
);

1587 *
Àn
 = 0;

1588 
ªsu…
 = 
FALSE
;

1590 *
Àn
 = 
ªsu…
;

1591 
ªsu…
 = 
TRUE
;

1595  
ªsu…
;

1596 
	}
}

1605 
	$io_fûe_size
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
uöt64_t
 *
size
) {

1606 
IO_FILE_PRIV
 *
¥iv
;

1607 
ªsu…
=
FALSE
;

1608 #ifde‡
WIN32


1609 
LARGE_INTEGER
 
liSize
;

1611 
uöt64_t
 
cuΩos
;

1614 
	`ASSERT
(
ph™dÀ
);

1615 
	`ASSERT
(
ph™dÀ
->
¥iv©e
);

1617 if((!
ph™dÀ
Ë|| (!ph™dÀ->
¥iv©e
)) {

1618 *
size
 = 0;

1619  
FALSE
;

1622 
¥iv
 = (
IO_FILE_PRIV
*Ë
ph™dÀ
->
¥iv©e
;

1623 
	`ASSERT
(
¥iv
->
›íed
);

1625 if(!
¥iv
->
›íed
) {

1626 *
size
 = 0;

1627  
FALSE
;

1630 #ifde‡
WIN32


1631 
ªsu…
 = 
	`GëFûeSizeEx
(
¥iv
->
fd
,&
liSize
);

1632 *
size
 = 
liSize
.
QuadP¨t
;

1634 
ªsu…
 = 
FALSE
;

1635 if(
	`io_fûe_gëpos
(
ph™dÀ
,&
cuΩos
))

1636 if(
	`io_fûe_£ços
(
ph™dÀ
,0,
SEEK_END
))

1637 if(
	`io_fûe_gëpos
(
ph™dÀ
,
size
))

1638 if(
	`io_fûe_£ços
(
ph™dÀ
, 
cuΩos
, 
SEEK_SET
))

1639 
ªsu…
 = 
TRUE
;

1641  
ªsu…
;

1642 
	}
}

1652 
	$io_fûe_£ços
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
uöt64_t
 
off£t
, 
whí˚
) {

1653 
IO_FILE_PRIV
 *
¥iv
;

1654 
ªsu…
=
FALSE
;

1655 #ifde‡
WIN32


1656 
«tive_posôi⁄
;

1657 
LARGE_INTEGER
 
liSize
;

1660 
	`ASSERT
(
ph™dÀ
);

1661 
	`ASSERT
(
ph™dÀ
->
¥iv©e
);

1663 if((!
ph™dÀ
Ë|| (!ph™dÀ->
¥iv©e
)) {

1664  
FALSE
;

1667 
¥iv
 = (
IO_FILE_PRIV
*Ë
ph™dÀ
->
¥iv©e
;

1668 
	`ASSERT
(
¥iv
->
›íed
);

1670 if(!
¥iv
->
›íed
) {

1671  
FALSE
;

1674 #ifde‡
WIN32


1675 
whí˚
) {

1676 
SEEK_SET
:

1677 
«tive_posôi⁄
 = 
FILE_BEGIN
;

1679 
SEEK_CUR
:

1680 
«tive_posôi⁄
 = 
FILE_CURRENT
;

1682 
SEEK_END
:

1683 
«tive_posôi⁄
 = 
FILE_END
;

1686 
liSize
.
QuadP¨t
 = 
off£t
;

1687 
ªsu…
 = 
	`SëFûePoöãrEx
(
¥iv
->
fd
,
liSize
,
NULL
,(
DWORD
)
«tive_posôi⁄
);

1689 
ªsu…
 = 
TRUE
;

1690 if(
	`l£ek
(
¥iv
->
fd
, (
off_t
)
off£t
, 
whí˚
) == -1)

1691 
ªsu…
 = 
FALSE
;

1694 if(!
ªsu…
) {

1695 
	`io_fûe_£ãº
(
ph™dÀ
, 
IO_E_FILE_OTHER
);

1698  
ªsu…
;

1699 
	}
}

1708 
	$io_fûe_gëpos
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
uöt64_t
 *
pos
) {

1709 
IO_FILE_PRIV
 *
¥iv
;

1710 
ªsu…
=
FALSE
;

1712 #ifde‡
WIN32


1713 
LARGE_INTEGER
 
liPos
;

1714 
LARGE_INTEGER
 
liResu…
;

1717 
	`ASSERT
(
ph™dÀ
);

1718 
	`ASSERT
(
ph™dÀ
->
¥iv©e
);

1720 if((!
ph™dÀ
Ë|| (!ph™dÀ->
¥iv©e
)) {

1721  
FALSE
;

1724 
¥iv
 = (
IO_FILE_PRIV
*Ë
ph™dÀ
->
¥iv©e
;

1725 
	`ASSERT
(
¥iv
->
›íed
);

1727 if(!
¥iv
->
›íed
) {

1728  
FALSE
;

1731 #ifde‡
WIN32


1732 
liPos
.
QuadP¨t
 = 0;

1733 
ªsu…
 = 
	`SëFûePoöãrEx
(
¥iv
->
fd
,
liPos
,&
liResu…
,
FILE_CURRENT
);

1734 *
pos
 = 
liResu…
.
QuadP¨t
;

1736 
ªsu…
 = 
TRUE
;

1737 *
pos
 = 
	`l£ek
(
¥iv
->
fd
, 0, 
SEEK_CUR
);

1738 if((*
pos
) == -1)

1739 
ªsu…
 = 
FALSE
;

1741 if(!
ªsu…
)

1742 
	`io_fûe_£ãº
(
ph™dÀ
,
IO_E_FILE_OTHER
);

1743  
ªsu…
;

1744 
	}
}

1754 
	$io_fûe_£ãº
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
ERR_T
 
îrcode
) {

1755 
IO_FILE_PRIV
 *
¥iv
;

1757 
	`ASSERT
(
ph™dÀ
);

1759 if(!
ph™dÀ
)

1762 
¥iv
 = (
IO_FILE_PRIV
*)(
ph™dÀ
->
¥iv©e
);

1764 if(
îrcode
) {

1765 
¥iv
->
îr
 = 
îrcode
;

1766 
¥iv
->
loˇl_îr
 = 
TRUE
;

1768 
¥iv
->
îr
 = 
î∫o
;

1769 
¥iv
->
loˇl_îr
 = 
FALSE
;

1771 
	}
}

1781 *
	$io_fûe_gëîrmsg
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
ERR_T
 *
code
, *
is_loˇl
) {

1782 
IO_FILE_PRIV
 *
¥iv
;

1783 #ifde‡
WIN32


1784 
ÕEº‹Buf
[256];

1787 
	`ASSERT
(
ph™dÀ
);

1789 if(!
ph™dÀ
)

1790  
NULL
;

1792 
¥iv
 = (
IO_FILE_PRIV
*)(
ph™dÀ
->
¥iv©e
);

1793 
	`ASSERT
(
¥iv
);

1795 if(!
¥iv
) {

1799 if(
code
)

1800 *
code
 = 
¥iv
->
îr
;

1802 if(
¥iv
->
loˇl_îr
) {

1803 if(
is_loˇl
)

1804 *
is_loˇl
 = 
TRUE
;

1805  
	`°rdup
(
io_fûe_îr_°rögs
[
¥iv
->
îr
 & 0x00FFFFFF]);

1807 if(
is_loˇl
)

1808 *
is_loˇl
=
FALSE
;

1809 #ifde‡
WIN32


1810 
	`F‹m©Mesßge
(
FORMAT_MESSAGE_FROM_SYSTEM
 | 
FORMAT_MESSAGE_IGNORE_INSERTS
,

1811 
NULL
,
¥iv
->
îr
,
	`MAKELANGID
(
LANG_NEUTRAL
,
SUBLANG_DEFAULT
),

1812 (
LPTSTR
)
ÕEº‹Buf
,÷pEº‹Buf),
NULL
);

1813  
	`°rdup
(
ÕEº‹Buf
);

1815  
	`°rdup
(
	`°ªº‹
(
¥iv
->
îr
));

1818 
	}
}

1827 
	$io_fûe_gëwaôabÀ
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
mode
, 
WAITABLE_T
 *
ªtvÆ
) {

1828 
IO_FILE_PRIV
 *
¥iv
;

1830 
	`ASSERT
(
ph™dÀ
);

1831 
	`ASSERT
(
ph™dÀ
->
¥iv©e
);

1832 
	`ASSERT
(
ªtvÆ
);

1834 if((!
ph™dÀ
Ë|| (!ph™dÀ->
¥iv©e
)) {

1835  
FALSE
;

1838 if(!
ªtvÆ
) {

1839 
	`io_fûe_£ãº
(
ph™dÀ
,
IO_E_FILE_UNKNOWN
);

1840  
FALSE
;

1843 
¥iv
 = (
IO_FILE_PRIV
*Ë
ph™dÀ
->
¥iv©e
;

1844 
	`ASSERT
(
¥iv
->
›íed
);

1846 if(!
¥iv
->
›íed
) {

1847 
	`io_fûe_£ãº
(
ph™dÀ
,
IO_E_FILE_NOTOPEN
);

1848  
FALSE
;

1851 *
ªtvÆ
 = 
¥iv
->
fd
;

1852  
TRUE
;

1853 
	}
}

1858 
	$io_fûe_gëfd
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
FILE_T
 *
pfd
) {

1859 
IO_FILE_PRIV
 *
¥iv
;

1861 
	`ASSERT
(
ph™dÀ
);

1862 
	`ASSERT
(
ph™dÀ
->
¥iv©e
);

1864 if((!
ph™dÀ
Ë|| (!ph™dÀ->
¥iv©e
)) {

1865  
FALSE
;

1868 if(!
pfd
) {

1869 
	`io_fûe_£ãº
(
ph™dÀ
,
IO_E_FILE_UNKNOWN
);

1870  
FALSE
;

1873 
¥iv
 = (
IO_FILE_PRIV
*Ë
ph™dÀ
->
¥iv©e
;

1874 
	`ASSERT
(
¥iv
->
›íed
);

1876 if(!
¥iv
->
›íed
) {

1877 
	`io_fûe_£ãº
(
ph™dÀ
,
IO_E_FILE_NOTOPEN
);

1878  
FALSE
;

1881 *
pfd
 = 
¥iv
->
fd
;

1882  
TRUE
;

1883 
	}
}

1893 
	$io_sockë_©èch
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
SOCKET_T
 
fd
) {

1894 
IO_SOCKET_PRIV
 *
¥iv
;

1896 
	`ASSERT
(
ph™dÀ
);

1898 if(!
ph™dÀ
) {

1899  
FALSE
;

1902 if(!
	`io_assign_h™dÀ
(
ph™dÀ
,"socket")) {

1903  
FALSE
;

1906 
¥iv
 = (
IO_SOCKET_PRIV
*)
	`mÆloc
((IO_SOCKET_PRIV));

1907 if(!
¥iv
) {

1908 
	`io_îr_¥ötf
(
IO_LOG_FATAL
,"MallocÉrror in io_socket_attach\n");

1909  
FALSE
;

1911 
ph™dÀ
->
¥iv©e
 = (*)
¥iv
;

1912 
	`mem£t
(
¥iv
,0x00,(
IO_SOCKET_PRIV
));

1914 
¥iv
->
fd
 = fd;

1915 
¥iv
->
›íed
 = 
TRUE
;

1917  
TRUE
;

1918 
	}
}

1928 
	$io_sockë_›í
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
uri
) {

1929 *
p‹t_∑π
;

1930 *
£rvî_∑π
;

1931 
ho°ít
 *
phe
;

1932 
p‹t
 = 80;

1933 
ªtvÆ
;

1934 
is_udp
;

1935 
IO_SOCKET_PRIV
 *
¥iv
;

1937 
	`ASSERT
(
ph™dÀ
);

1939 if(!
ph™dÀ
) {

1940 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_UNKNOWN
);

1941  
FALSE
;

1944 
is_udp
 = 
	`io_i•rŸo
(
ph™dÀ
,"udp");

1946 
¥iv
 = (
IO_SOCKET_PRIV
*)
	`mÆloc
((IO_SOCKET_PRIV));

1947 if(!
¥iv
) {

1948 
	`io_îr_¥ötf
(
IO_LOG_FATAL
,"MallocÉrror in io_socket_attach\n");

1949  
FALSE
;

1951 
ph™dÀ
->
¥iv©e
 = (*)
¥iv
;

1952 
	`mem£t
(
¥iv
,0x00,(
IO_SOCKET_PRIV
));

1955 
£rvî_∑π
 = 
uri
;

1956 
p‹t_∑π
 = 
	`°rchr
(
£rvî_∑π
,':');

1957 if(
p‹t_∑π
) {

1958 *
p‹t_∑π
 = '\0';

1959 
p‹t_∑π
++;

1960 
p‹t
 = 
	`©oi
(
p‹t_∑π
);

1963 
	`ASSERT
(
p‹t_∑π
);

1965 if(
	`öë_addr
(
£rvî_∑π
Ë=
INADDR_NONE
) {

1966 
phe
=
	`gëho°by«me
(
£rvî_∑π
);

1967 if(
phe
 =
NULL
) {

1968 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_BADHOST
);

1969  
FALSE
;

1971 
	`mem˝y
((*)&
¥iv
->
si_ªmŸe
.
sö_addr
,(*)(
phe
->
h_addr_li°
[0]),

1972 (
ö_addr
));

1974 
¥iv
->
si_ªmŸe
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
£rvî_∑π
);

1977 
¥iv
->
si_ªmŸe
.
sö_p‹t
 = 
	`ht⁄s
(()
p‹t
);

1978 
¥iv
->
si_ªmŸe
.
sö_Ámûy
 = 
AF_INET
;

1980 if(
is_udp
) {

1981 
¥iv
->
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 
IPPROTO_UDP
);

1983 
¥iv
->
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

1985 if(
¥iv
->
fd
 == -1) {

1986 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_OTHER
);

1987  
FALSE
;

1990 if(
is_udp
) {

1991 
¥iv
->
›íed
 = 
TRUE
;

1992 
¥iv
->
is_udp
 = 
TRUE
;

1993  
TRUE
;

1998 
ªtvÆ
 = 
	`c⁄√˘
(
¥iv
->
fd
,(
sockaddr
 *)&¥iv->
si_ªmŸe
,

1999 (
¥iv
->
si_ªmŸe
));

2000 if((
ªtvÆ
 !-1Ë|| (
î∫o
 !
EINTR
))

2004 if(
ªtvÆ
 == -1) {

2005 
	`˛o£sockë
(
¥iv
->
fd
);

2006 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_OTHER
);

2007  
FALSE
;

2010 
¥iv
->
›íed
 = 
TRUE
;

2011  
TRUE
;

2012 
	}
}

2023 
	$io_li°í_›í
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
uri
) {

2024 
IO_SOCKET_PRIV
 *
¥iv
;

2025 
sockaddr_ö
 
£rvî
;

2026 
p‹t
;

2027 
ªtvÆ
;

2028 
›t
;

2029 
backlog
;

2030 
ªu£
;

2031 
mu…iˇ°
=0;

2032 
ù_mªq
 
mªq
;

2033 *
mˇ°_group
;

2035 
	`ASSERT
(
ph™dÀ
 && 
uri
);

2037 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
, "Doing io_listen_open\n");

2039 if((!
ph™dÀ
Ë|| (!
uri
)) {

2040 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_UNKNOWN
);

2041  
FALSE
;

2044 
¥iv
 = (
IO_SOCKET_PRIV
*)
	`mÆloc
((IO_SOCKET_PRIV));

2045 if(!
¥iv
) {

2046 
	`io_îr_¥ötf
(
IO_LOG_FATAL
,"MallocÉrror in io_listen_open\n");

2047  
FALSE
;

2050 
ph™dÀ
->
¥iv©e
=(*)
¥iv
;

2051 
	`mem£t
(
¥iv
,0x0,(
IO_SOCKET_PRIV
));

2053 if(
	`io_i•rŸo
(
ph™dÀ
, "udplisten")) {

2054 
¥iv
->
is_udp
 = 1;

2058 
backlog
 = 
	`©oi
(
	`io_›ti⁄_gë
(
ph™dÀ
,"backlog","5"));

2059 
ªu£
 = 
	`©oi
(
	`io_›ti⁄_gë
(
ph™dÀ
,"reuseaddr","1"));

2062 
p‹t
 = 
	`©oi
(
uri
);

2064 if(
¥iv
->
is_udp
) {

2066 
mu…iˇ°
 = 
	`©oi
(
	`io_›ti⁄_gë
(
ph™dÀ
,"multicast","0"));

2068 
¥iv
->
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 
IPPROTO_UDP
);

2069 if((
¥iv
->
fd
 !-1Ë&& (
mu…iˇ°
)) {

2070 
›t
 = 
	`©oi
(
	`io_›ti⁄_gë
(
ph™dÀ
,"mcast_ttl","4"));

2071 
	`£tsock›t
(
¥iv
->
fd
, 
IPPROTO_IP
, 
IP_MULTICAST_TTL
, (*)&
›t
,

2072 (
›t
));

2073 
mˇ°_group
 = 
	`io_›ti⁄_gë
(
ph™dÀ
,"mˇ°_group",
NULL
);

2074 if(!
mˇ°_group
) {

2075 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_NOMCAST
);

2076 (
	`˛o£sockë
(
¥iv
->
fd
Ë=-1Ë&& (
î∫o
 =
EINTR
));

2077  
FALSE
;

2079 
mªq
.
imr_mu…üddr
.
s_addr
 = 
	`öë_addr
(
mˇ°_group
);

2080 
mªq
.
imr_öãrÁ˚
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

2081 if(
	`£tsock›t
(
¥iv
->
fd
,
IPPROTO_IP
,
IP_ADD_MEMBERSHIP
,(*)&
mªq
,

2082 (
mªq
)) < 0) {

2083 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_OTHER
);

2084 (
	`˛o£sockë
(
¥iv
->
fd
Ë=-1Ë&& (
î∫o
 =
EINTR
));

2085  
FALSE
;

2090 
¥iv
->
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

2093 if(
¥iv
->
fd
 == -1) {

2094 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_OTHER
);

2095 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"Couldn't open socket\n");

2096  
FALSE
;

2099 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"Socket opened\n");

2100 
›t
 = 
ªu£
;

2101 if(
	`£tsock›t
(
¥iv
->
fd
,
SOL_SOCKET
, 
SO_REUSEADDR
,(*)&
›t
,

2102 (
›t
)) == -1) {

2103 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_OTHER
);

2104 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"Error setting SO_REUSEADDR\n");

2105 (
	`˛o£sockë
(
¥iv
->
fd
Ë=-1Ë&& (
î∫o
 =
EINTR
));

2106  
FALSE
;

2112 if(
	`°rcmp
(
devi˚_öf
, "Any"))

2114 
i‰eq
 
i‰
;

2116 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

2117 
	`°∫˝y
(
i‰
.
i‰_«me
, 
devi˚_öf
, 
IFNAMSIZ
-1);

2119 if(
	`io˘l
(
¥iv
->
fd
, 
SIOCGIFADDR
, &
i‰
)==-1)  -1;

2121 
£rvî
.
sö_addr
 = ((
sockaddr_ö
 *)&
i‰
.
i‰_addr
)->sin_addr;

2122 
	`¥ötf
("iTu√†£rvîÜi°íáàöãrÁ˚ = %s:%s\n", 
devi˚_öf
, 
	`öë_¡ﬂ
(
£rvî
.
sö_addr
));

2127 
£rvî
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

2130 
£rvî
.
sö_Ámûy
 = 
AF_INET
;

2131 
£rvî
.
sö_p‹t
 = 
	`ht⁄s
(()
p‹t
);

2133 ((
ªtvÆ
 =

2134 
	`böd
(
¥iv
->
fd
,(
sockaddr
 *)&
£rvî
, (server))) == -1)

2135 && (
î∫o
 =
EINTR
));

2137 if(
ªtvÆ
 == -1) {

2138 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_OTHER
);

2139 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"Error binding socket\n");

2140 (
	`˛o£sockë
(
¥iv
->
fd
Ë=-1Ë&& (
î∫o
 =
EINTR
));

2141  
FALSE
;

2144 if(
¥iv
->
is_udp
) {

2145 
¥iv
->
›íed
 = 
TRUE
;

2146 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"Set up UDPÜistener successfully\n");

2147  
TRUE
;

2150 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"PreparingÅoÜisten with %d backlog on %d\n",

2151 
backlog
, 
p‹t
);

2152 ((
ªtvÆ
 = 
	`li°í
(
¥iv
->
fd
,
backlog
)Ë=-1Ë&& (
î∫o
 =
EINTR
));

2153 if(
ªtvÆ
 == -1) {

2154 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_OTHER
);

2155 (
	`˛o£sockë
(
¥iv
->
fd
Ë=-1Ë&& (
î∫o
 =
EINTR
));

2156  
FALSE
;

2159 
¥iv
->
›íed
 = 
TRUE
;

2160  
TRUE
;

2161 
	}
}

2171 
	$io_li°í_ac˚±
(
IO_PRIVHANDLE
 *
ph™dÀ
, IO_PRIVHANDLE *
pchûd
,

2172 
ö_addr
 *
ho°
) {

2173 
sockÀn_t
 
Àn
 = (
sockaddr
);

2174 
sockaddr_ö
 
˛õ¡
;

2175 
SOCKET_T
 
chûd_fd
;

2176 
IO_SOCKET_PRIV
 *
¥iv
;

2178 
	`ASSERT
(
ph™dÀ
);

2179 
	`ASSERT
(
pchûd
);

2181 if(!
ph™dÀ
)

2182  
FALSE
;

2184 if(!
pchûd
) {

2185 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_NOTINIT
);

2186  
FALSE
;

2189 if(!
	`io_i•rŸo
(
ph™dÀ
,"listen")) {

2190 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_BADFN
);

2191  
FALSE
;

2194 
¥iv
 = (
IO_SOCKET_PRIV
 *)
ph™dÀ
->
¥iv©e
;

2196 ((
chûd_fd
 =

2197 
	`ac˚±
(
¥iv
->
fd
,(
sockaddr
 *)(&
˛õ¡
),&
Àn
)) == -1) &&

2198 (
î∫o
 =
EINTR
));

2200 if(
chûd_fd
 == -1) {

2201 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_OTHER
);

2202  
FALSE
;

2205 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"GŸÜi°í sockë %d\n",
chûd_fd
);

2208 if(
ho°
)

2209 *
ho°
 = 
˛õ¡
.
sö_addr
;

2212  
	`io_sockë_©èch
(
pchûd
, 
chûd_fd
);

2213 
	}
}

2221 
	$io_sockë_˛o£
(
IO_PRIVHANDLE
 *
ph™dÀ
) {

2222 
IO_SOCKET_PRIV
 *
¥iv
;

2224 
	`ASSERT
(
ph™dÀ
);

2225 
	`ASSERT
(
ph™dÀ
->
¥iv©e
);

2227 if((!
ph™dÀ
)||(!ph™dÀ->
¥iv©e
)) {

2228 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_NOTOPEN
);

2229  
FALSE
;

2232 
¥iv
 = (
IO_SOCKET_PRIV
*)
ph™dÀ
->
¥iv©e
;

2233 
	`ASSERT
(
¥iv
->
›íed
);

2235 if(!
¥iv
->
›íed
) {

2236 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_NOTOPEN
);

2237  
FALSE
;

2240 
	`shutdown
(
¥iv
->
fd
,
SHUT_RDWR
);

2241 
	`˛o£sockë
(
¥iv
->
fd
);

2243 #ifde‡
WIN32


2244 if(
¥iv
->
hEvít
) {

2245 
	`WSAClo£Evít
(
¥iv
->
hEvít
);

2246 
¥iv
->
hEvít
 = 
NULL
;

2250 
	`‰ì
(
¥iv
);

2251 
ph™dÀ
->
¥iv©e
 = 
NULL
;

2253  
TRUE
;

2254 
	}
}

2264 
	$io_sockë_ªad
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
, 
uöt32_t
 *
Àn
) {

2265 
ssize_t
 
byãs_ªad
;

2266 
IO_SOCKET_PRIV
 *
¥iv
;

2268 
	`ASSERT
(
ph™dÀ
);

2269 
	`ASSERT
(
ph™dÀ
->
¥iv©e
);

2271 if((!
ph™dÀ
)||(!ph™dÀ->
¥iv©e
)) {

2272 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_NOTOPEN
);

2273  
FALSE
;

2276 
¥iv
 = (
IO_SOCKET_PRIV
*)
ph™dÀ
->
¥iv©e
;

2277 
	`ASSERT
(
¥iv
->
›íed
);

2279 if(!
¥iv
->
›íed
) {

2280 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_NOTOPEN
);

2281  
FALSE
;

2284 ((
byãs_ªad
 = 
	`ªcv
(
¥iv
->
fd
, 
buf
, *
Àn
, 0)) == -1) &&

2285 (
î∫o
 =
EINTR
));

2287 if(
byãs_ªad
 == -1) {

2288 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_OTHER
);

2289  
FALSE
;

2292 *
Àn
 = 
byãs_ªad
;

2293  
TRUE
;

2294 
	}
}

2304 
	$io_sockë_wrôe
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
,
uöt32_t
 *
Àn
) {

2305 
IO_SOCKET_PRIV
 *
¥iv
;

2306 
¶í
;

2308 
uöt32_t
 
byã°owrôe
;

2309 
ssize_t
 
byãswrôãn
=0;

2310 
uöt32_t
 
tŸÆbyãs
;

2311 *
buÂ
;

2312 
blockög
 = 0;

2314 
	`ASSERT
(
ph™dÀ
);

2315 
	`ASSERT
(
ph™dÀ
->
¥iv©e
);

2317 if((!
ph™dÀ
)||(!ph™dÀ->
¥iv©e
)) {

2318 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_NOTOPEN
);

2319  
FALSE
;

2322 
¥iv
 = (
IO_SOCKET_PRIV
*)
ph™dÀ
->
¥iv©e
;

2323 
	`ASSERT
(
¥iv
->
›íed
);

2325 if(!
¥iv
->
›íed
) {

2326 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_NOTOPEN
);

2327  
FALSE
;

2330 
buÂ
 = 
buf
, 
byã°owrôe
 = *
Àn
, 
tŸÆbyãs
=0;

2331 
byã°owrôe
 > 0;

2332 
buÂ
 +
byãswrôãn
, 
byã°owrôe
 -= byteswritten) {

2333 if(
¥iv
->
is_udp
) {

2334 
¶í
 = (
sockaddr_ö
);

2335 
byãswrôãn
 = 
	`£ndto
(
¥iv
->
fd
, 
buÂ
, 
byã°owrôe
, 0,

2336 (
sockaddr
 *)&
¥iv
->
si_ªmŸe
, 
¶í
);

2338 
byãswrôãn
 = 
	`£nd
(
¥iv
->
fd
, 
buÂ
, 
byã°owrôe
, 0);

2341 
	`io_îr_¥ötf
(
IO_LOG_SPAM
,"wrŸê%d byã†tÿsockë %d\n",
byãswrôãn
,
¥iv
->
fd
);

2343 #ifde‡
WIN32


2344 if(
	`WSAGëLa°Eº‹
(Ë=
WSAEWOULDBLOCK
) {

2345 
byãswrôãn
 = 0;

2347 if(
¥iv
->
hEvít
) {

2348 
	`WSAEvítSñe˘
(
¥iv
->
fd
,(
WSAEVENT
Ìriv->
hEvít
,0);

2351 
blockög
 = 0;

2352 if(
	`io˘lsockë
(
¥iv
->
fd
,
FIONBIO
,&
blockög
)) {

2353 
	`io_îr_¥ötf
(
IO_LOG_LOG
,"Couldn'à£àsockëÅÿblockög: %ld\n",
	`WSAGëLa°Eº‹
());

2357 if((
byãswrôãn
 =-1 ) && (
î∫o
 !
EINTR
)) {

2358 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_OTHER
);

2359 *
Àn
 = 
tŸÆbyãs
;

2360  
FALSE
;

2363 if(
byãswrôãn
 == -1)

2364 
byãswrôãn
 = 0;

2365 
tŸÆbyãs
 +
byãswrôãn
;

2368 *
Àn
 = 
tŸÆbyãs
;

2369  
TRUE
;

2370 
	}
}

2379 
	$io_sockë_size
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
uöt64_t
 *
size
) {

2380  
FALSE
;

2381 
	}
}

2391 
	$io_sockë_£ços
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
uöt64_t
 
off£t
, 
whí˚
) {

2392  
FALSE
;

2393 
	}
}

2402 
	$io_sockë_gëpos
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
uöt64_t
 *
pos
) {

2403  
FALSE
;

2404 
	}
}

2414 
	$io_sockë_£ãº
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
ERR_T
 
îrcode
) {

2415 
IO_SOCKET_PRIV
 *
¥iv
;

2417 
	`ASSERT
(
ph™dÀ
);

2419 if(!
ph™dÀ
)

2422 
¥iv
 = (
IO_SOCKET_PRIV
*)(
ph™dÀ
->
¥iv©e
);

2424 if(
îrcode
) {

2425 
¥iv
->
îr
 = 
îrcode
;

2426 
¥iv
->
loˇl_îr
 = 
TRUE
;

2428 
¥iv
->
loˇl_îr
 = 
FALSE
;

2429 #ifde‡
WIN32


2430 
¥iv
->
îr
 = 
	`WSAGëLa°Eº‹
();

2432 if(
¥iv
->
îr
 =
WSAEADDRINUSE
) {

2433 
¥iv
->
îr
 = 
IO_E_SOCKET_INUSE
;

2434 
¥iv
->
loˇl_îr
 = 
TRUE
;

2437 
¥iv
->
îr
 = 
î∫o
;

2439 if(
¥iv
->
îr
 =
EADDRINUSE
) {

2440 
¥iv
->
îr
 = 
IO_E_SOCKET_INUSE
;

2441 
¥iv
->
loˇl_îr
 = 
TRUE
;

2445 
	}
}

2455 *
	$io_sockë_gëîrmsg
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
ERR_T
 *
code
, *
is_loˇl
) {

2456 
IO_SOCKET_PRIV
 *
¥iv
;

2458 #ifde‡
WIN32


2459 
ÕEº‹Buf
[256];

2462 
	`ASSERT
(
ph™dÀ
);

2464 
¥iv
 = (
IO_SOCKET_PRIV
*)(
ph™dÀ
->
¥iv©e
);

2465 if(*
code
)

2466 *
code
 = 
¥iv
->
îr
;

2468 if(
¥iv
->
loˇl_îr
) {

2469 *
is_loˇl
 = 
TRUE
;

2470  
	`°rdup
(
io_sockë_îr_°rögs
[
¥iv
->
îr
 & 0x00FFFFFF]);

2472 *
is_loˇl
 = 
FALSE
;

2473 #ifde‡
WIN32


2474 
	`F‹m©Mesßge
(
FORMAT_MESSAGE_FROM_SYSTEM
 | 
FORMAT_MESSAGE_IGNORE_INSERTS
,

2475 
NULL
,
¥iv
->
îr
,
	`MAKELANGID
(
LANG_NEUTRAL
,
SUBLANG_DEFAULT
),

2476 (
LPTSTR
)
ÕEº‹Buf
,÷pEº‹Buf),
NULL
);

2477  
	`°rdup
(
ÕEº‹Buf
);

2480  
	`°rdup
(
	`°ªº‹
(
¥iv
->
îr
));

2483 
	}
}

2492 
	$io_sockë_gëwaôabÀ
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
mode
, 
WAITABLE_T
 *
ªtvÆ
) {

2493 
IO_SOCKET_PRIV
 *
¥iv
;

2494 #ifde‡
WIN32


2495 
lEvíts
=0;

2498 
	`ASSERT
(
ph™dÀ
);

2499 
	`ASSERT
(
ph™dÀ
->
¥iv©e
);

2500 
	`ASSERT
(
ªtvÆ
);

2501 
	`ASSERT
(
mode
);

2503 if((!
ph™dÀ
Ë|| (!ph™dÀ->
¥iv©e
)) {

2504 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_UNKNOWN
);

2505  
FALSE
;

2508 if(!
ªtvÆ
) {

2509 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_UNKNOWN
);

2510  
FALSE
;

2513 if(!
mode
) {

2514 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_INVALID
);

2515  
FALSE
;

2518 
¥iv
 = (
IO_SOCKET_PRIV
*Ë
ph™dÀ
->
¥iv©e
;

2519 
	`ASSERT
(
¥iv
->
›íed
);

2521 if(!
¥iv
->
›íed
) {

2522 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_NOTOPEN
);

2523  
FALSE
;

2526 #ifde‡
WIN32


2527 
	`io_îr_¥ötf
(
IO_LOG_SPAM
,"Building synthesizedÉvent for socket\n");

2528 if(
¥iv
->
hEvít
) {

2529 if(
mode
 =
¥iv
->
waô_mode
) {

2530 *
ªtvÆ
 = 
¥iv
->
hEvít
;

2531  
TRUE
;

2533 
	`WSAClo£Evít
(
¥iv
->
hEvít
);

2534 
¥iv
->
hEvít
 = 
NULL
;

2538 
¥iv
->
hEvít
 = (
WAITABLE_T
)
	`WSACª©eEvít
();

2539 if(!
¥iv
->
hEvít
) {

2540 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_OTHER
);

2541  
FALSE
;

2544 if(
mode
 & 
IO_WAIT_READ
)

2545 
lEvíts
 = 
FD_READ
 | 
FD_OOB
 | 
FD_ACCEPT
 | 
FD_CLOSE
;

2546 if(
mode
 & 
IO_WAIT_WRITE
)

2547 
lEvíts
 |
FD_WRITE
 | 
FD_CLOSE
;

2548 if(
mode
 & 
IO_WAIT_ERROR
)

2549 
lEvíts
 |
FD_CLOSE
;

2551 if(
	`WSAEvítSñe˘
(
¥iv
->
fd
,(
WSAEVENT
Ìriv->
hEvít
,
lEvíts
Ë=
SOCKET_ERROR
) {

2552 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_OTHER
);

2553  
FALSE
;

2555 *
ªtvÆ
 = 
¥iv
->
hEvít
;

2557 *
ªtvÆ
 = 
¥iv
->
fd
;

2559  
TRUE
;

2560 
	}
}

2565 
	$io_sockë_gësockë
(
IO_PRIVHANDLE
 *
ph™dÀ
, 
SOCKET_T
 *
psock
) {

2566 
IO_SOCKET_PRIV
 *
¥iv
;

2568 
	`ASSERT
(
ph™dÀ
);

2569 
	`ASSERT
(
ph™dÀ
->
¥iv©e
);

2571 if((!
ph™dÀ
Ë|| (!ph™dÀ->
¥iv©e
)) {

2572  
FALSE
;

2575 if(!
psock
) {

2576 
	`io_fûe_£ãº
(
ph™dÀ
,
IO_E_SOCKET_UNKNOWN
);

2577  
FALSE
;

2580 
¥iv
 = (
IO_SOCKET_PRIV
*Ë
ph™dÀ
->
¥iv©e
;

2581 
	`ASSERT
(
¥iv
->
›íed
);

2583 if(!
¥iv
->
›íed
) {

2584 
	`io_fûe_£ãº
(
ph™dÀ
,
IO_E_SOCKET_NOTOPEN
);

2585  
FALSE
;

2588 *
psock
 = 
¥iv
->
fd
;

2589  
TRUE
;

2590 
	}
}

2603 
	$io_udp_ªcv‰om
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
, 
uöt32_t
 *
Àn
,

2604 
sockaddr_ö
 *
si_ªmŸe
, 
sockÀn_t
 *
si_Àn
) {

2605 
ssize_t
 
byãs_ªad
;

2606 
IO_SOCKET_PRIV
 *
¥iv
;

2609 
	`ASSERT
(
ph™dÀ
);

2610 
	`ASSERT
(
ph™dÀ
->
¥iv©e
);

2612 if((!
ph™dÀ
)||(!ph™dÀ->
¥iv©e
)) {

2613 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_NOTOPEN
);

2614  
FALSE
;

2617 
¥iv
 = (
IO_SOCKET_PRIV
*)
ph™dÀ
->
¥iv©e
;

2618 
	`ASSERT
(
¥iv
->
›íed
);

2619 
	`ASSERT
(
¥iv
->
is_udp
);

2621 if(!
¥iv
->
›íed
) {

2622 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_NOTOPEN
);

2623  
FALSE
;

2626 if(!
¥iv
->
is_udp
) {

2627 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_BADFN
);

2628  
FALSE
;

2631 ((
byãs_ªad
 = 
	`ªcv‰om
(
¥iv
->
fd
, 
buf
, *
Àn
, 0,

2632 (
sockaddr
 *)
si_ªmŸe
,

2633 
si_Àn
)) == -1) &&

2634 (
î∫o
 =
EINTR
));

2636 if(
byãs_ªad
 == -1) {

2637 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_OTHER
);

2638  
FALSE
;

2641 *
Àn
 = 
byãs_ªad
;

2642  
TRUE
;

2643 
	}
}

2655 
	$io_udp_£ndto
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
buf
, 
uöt32_t
 *
Àn
,

2656 
sockaddr_ö
 *
si_ªmŸe
, 
sockÀn_t
 
si_Àn
) {

2657 
IO_SOCKET_PRIV
 *
¥iv
;

2658 
uöt32_t
 
byã°owrôe
;

2659 
ssize_t
 
byãswrôãn
;

2660 
uöt32_t
 
tŸÆbyãs
;

2661 *
buÂ
;

2663 
	`ASSERT
(
ph™dÀ
);

2664 
	`ASSERT
(
ph™dÀ
->
¥iv©e
);

2666 if((!
ph™dÀ
)||(!ph™dÀ->
¥iv©e
)) {

2667 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_NOTOPEN
);

2668  
FALSE
;

2671 
¥iv
 = (
IO_SOCKET_PRIV
*)
ph™dÀ
->
¥iv©e
;

2672 
	`ASSERT
(
¥iv
->
›íed
);

2673 
	`ASSERT
(
¥iv
->
is_udp
);

2675 if(!
¥iv
->
›íed
) {

2676 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_NOTOPEN
);

2677  
FALSE
;

2680 if(!
¥iv
->
is_udp
) {

2681 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_BADFN
);

2682  
FALSE
;

2685 
buÂ
 = 
buf
, 
byã°owrôe
 = *
Àn
, 
tŸÆbyãs
=0;

2686 
byã°owrôe
 > 0;

2687 
buÂ
 +
byãswrôãn
, 
byã°owrôe
 -= byteswritten) {

2688 
byãswrôãn
 = 
	`£ndto
(
¥iv
->
fd
, 
buf
, *
Àn
, 0,

2689 (
sockaddr
 *)
si_ªmŸe
, 
si_Àn
);

2691 if((
byãswrôãn
 =-1 ) && (
î∫o
 !
EINTR
)) {

2692 
	`io_sockë_£ãº
(
ph™dÀ
,
IO_E_SOCKET_OTHER
);

2693  
FALSE
;

2695 if(
byãswrôãn
 == -1)

2696 
byãswrôãn
 = 0;

2697 
tŸÆbyãs
 +
byãswrôãn
;

2700 *
Àn
 = 
tŸÆbyãs
;

2701  
TRUE
;

2702 
	}
}

2711 
	$io_›ti⁄_di•o£
(
IO_PRIVHANDLE
 *
ph™dÀ
) {

2712 
IO_OPTIONLIST
 *
pcuºít
;

2714 
	`ASSERT
(
ph™dÀ
);

2716 if(!
ph™dÀ
)

2717  
TRUE
;

2719 
	`io_lock
();

2720 
ph™dÀ
->
pﬁ
) {

2721 
pcuºít
 = 
ph™dÀ
->
pﬁ
;

2722 if(
pcuºít
->
key
Ë
	`‰ì
(pcurrent->key);

2723 if(
pcuºít
->
vÆue
Ë
	`‰ì
(pcurrent->value);

2724 
ph™dÀ
->
pﬁ
 = 
pcuºít
->
√xt
;

2725 
	`‰ì
(
pcuºít
);

2727 
	`io_u∆ock
();

2729  
TRUE
;

2730 
	}
}

2740 
	$io_›ti⁄_add
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
key
, *
vÆue
) {

2741 
IO_OPTIONLIST
 *
≤ew
;

2743 
	`ASSERT
(
ph™dÀ
);

2744 if(!
ph™dÀ
Ë 
FALSE
;

2746 
≤ew
 = (
IO_OPTIONLIST
*)
	`mÆloc
((IO_OPTIONLIST));

2747 if(!
≤ew
) {

2748 
	`io_îr_¥ötf
(
IO_LOG_FATAL
,"MallocÉrror in io_option_add\n");

2749  
FALSE
;

2752 
≤ew
->
key
 = 
	`°rdup
(key);

2753 
≤ew
->
vÆue
 = 
	`°rdup
(value);

2755 if((!
≤ew
->
key
Ë|| (!≤ew->
vÆue
)) {

2756 
	`io_îr_¥ötf
(
IO_LOG_FATAL
,"MallocÉrror in io_option_add\n");

2757 if(
≤ew
->
key
Ë
	`‰ì
(pnew->key);

2758 if(
≤ew
->
vÆue
Ë
	`‰ì
(pnew->value);

2759 
	`‰ì
(
≤ew
);

2761  
FALSE
;

2765 
	`io_lock
();

2766 
≤ew
->
√xt
 = 
ph™dÀ
->
pﬁ
;

2767 
ph™dÀ
->
pﬁ
 = 
≤ew
;

2768 
	`io_u∆ock
();

2770  
TRUE
;

2771 
	}
}

2780 * 
	$io_›ti⁄_gë
(
IO_PRIVHANDLE
 *
ph™dÀ
,*
›ti⁄
,*
dÊt
) {

2781 
IO_OPTIONLIST
 *
pcuºít
;

2783 
	`ASSERT
(
ph™dÀ
);

2785 if(!
ph™dÀ
Ë 
dÊt
;

2787 
	`io_lock
();

2788 
pcuºít
 = 
ph™dÀ
->
pﬁ
;

2789 
pcuºít
 && (
	`°rˇ£cmp
’cuºít->
key
,
›ti⁄
) != 0))

2790 
pcuºít
 =Öcuºít->
√xt
;

2791 
	`io_u∆ock
();

2793 if(!
pcuºít
)

2794  
dÊt
;

2796  
pcuºít
->
vÆue
;

2797 
	}
}

2803 
	$io_i•rŸo
(
IO_PRIVHANDLE
 *
ph™dÀ
, *
¥Ÿo
) {

2804 
	`ASSERT
(
ph™dÀ
 &&Öh™dÀ->
¥Ÿo
);

2806 if(!
ph™dÀ
 || !ph™dÀ->
¥Ÿo
)

2807  
FALSE
;

2809 if(
	`°rˇ£cmp
(
ph™dÀ
->
¥Ÿo
,Öroto) == 0)

2810  
TRUE
;

2812  
FALSE
;

2813 
	}
}

2820 
IO_WAITHANDLE
 *
	$io_waô_√w
() {

2821 
IO_WAITHANDLE
 *
≤ew
;

2823 
≤ew
 = (
IO_WAITHANDLE
*)
	`mÆloc
((IO_WAITHANDLE));

2824 if(!
≤ew
) {

2825 
	`io_îr_¥ötf
(
IO_LOG_FATAL
,"mallocÉrror in io_wait_new\n");

2826  
NULL
;

2829 
	`mem£t
(
≤ew
,0x00,(
IO_WAITHANDLE
));

2831 #ifde‡
WIN32


2832 
≤ew
->
hWaôIãms
 = (
WAITABLE_T
 *)
	`mÆloc
((WAITABLE_TË* 
IO_HANDLES_START
);

2833 if(!
≤ew
->
hWaôIãms
) {

2834 
	`‰ì
(
≤ew
);

2835  
NULL
;

2837 
≤ew
->
µH™dÀ
 = (
IO_PRIVHANDLE
 **)
	`mÆloc
((IO_PRIVHANDLE*Ë* 
IO_HANDLES_START
);

2838 if(!
≤ew
->
µH™dÀ
) {

2839 
	`‰ì
(
≤ew
->
hWaôIãms
);

2840 
	`‰ì
(
≤ew
);

2841  
NULL
;

2844 
≤ew
->
dwIãmCou¡
 = 0;

2845 
≤ew
->
dwMaxIãms
 = 
IO_HANDLES_START
;

2847 
	`FD_ZERO
(&
≤ew
->
ªad_fds
);

2848 
	`FD_ZERO
(&
≤ew
->
wrôe_fds
);

2849 
	`FD_ZERO
(&
≤ew
->
îr_fds
);

2852  
≤ew
;

2853 
	}
}

2863 
	$io_waô_add
(
IO_WAITHANDLE
 *
pwaô
, 
IO_PRIVHANDLE
 *
ph™dÀ
, 
ty≥
) {

2864 
WAITABLE_T
 
waôabÀ
;

2865 #ifde‡
WIN32


2866 *
±mp
;

2869 
	`ASSERT
(
pwaô
);

2870 
	`ASSERT
(
ph™dÀ
 &&Öh™dÀ->
›í
 &&Öh™dÀ->
‚±r
 &&

2871 
ph™dÀ
->
‚±r
->
‚_gëwaôabÀ
);

2873 if(!
pwaô
) {

2874 
	`io_îr_¥ötf
(
IO_LOG_WARN
,"io_wait_add: bad IO_WAITHANDLE\n");

2875  
FALSE
;

2878 if(!
ph™dÀ
 || !ph™dÀ->
›í
 || !ph™dÀ->
‚±r
 ||

2879 !
ph™dÀ
->
‚±r
->
‚_gëwaôabÀ
) {

2880 
	`io_îr_¥ötf
(
IO_LOG_WARN
,"io_wait_add: impossibleÅo get waitable\n");

2881  
FALSE
;

2884 
	`io_îr_¥ötf
(
IO_LOG_SPAM
,"Gëtög iÿwaôabÀ o‡ty≥ %d\n",
ty≥
);

2885 if(!
ph™dÀ
->
‚±r
->
	`‚_gëwaôabÀ
’h™dÀ, 
ty≥
, &
waôabÀ
)) {

2886 
	`io_îr_¥ötf
(
IO_LOG_WARN
,"io_wait_add:Érror getting waitable\n");

2887  
FALSE
;

2890 #ifde‡
WIN32


2891 
	`ASSERT
(
pwaô
->
dwIãmCou¡
 <pwaô->
dwMaxIãms
);

2893 
pwaô
->
dwMaxIãms
 <pwaô->
dwIãmCou¡
) {

2894 
±mp
 = 
	`ªÆloc
(
pwaô
->
hWaôIãms
,(
WAITABLE_T
Ë* (pwaô->
dwMaxIãms
 + 
IO_HANDLES_GROW
));

2895 if(!
±mp
) {

2896  
FALSE
;

2898 
pwaô
->
hWaôIãms
 = 
±mp
;

2899 
±mp
 = 
	`ªÆloc
(
pwaô
->
µH™dÀ
,(
IO_PRIVHANDLE
 *Ë* (pwaô->
dwMaxIãms
 + 
IO_HANDLES_GROW
));

2900 if(!
±mp
) {

2901  
FALSE
;

2903 
pwaô
->
µH™dÀ
 = 
±mp
;

2904 
pwaô
->
dwMaxIãms
 +
IO_HANDLES_GROW
;

2907 
pwaô
->
hWaôIãms
[pwaô->
dwIãmCou¡
] = 
waôabÀ
;

2908 
pwaô
->
µH™dÀ
[pwaô->
dwIãmCou¡
] = 
ph™dÀ
;

2910 
	`io_îr_¥ötf
(
IO_LOG_SPAM
,"AddedÉvent %08X withÖHandle %08Xás %d\n",

2911 
waôabÀ
,
ph™dÀ
,
pwaô
->
dwIãmCou¡
);

2913 
pwaô
->
dwIãmCou¡
++;

2915 if(
waôabÀ
 > 
pwaô
->
max_fd
)

2916 
pwaô
->
max_fd
 = 
waôabÀ
;

2918 
	`io_îr_¥ötf
(
IO_LOG_SPAM
,"Addög %dÅÿwaôli°\n",
waôabÀ
);

2920 if(
ty≥
 & 
IO_WAIT_READ
)

2921 
	`FD_SET
(
waôabÀ
,&
pwaô
->
ªad_fds
);

2922 if(
ty≥
 & 
IO_WAIT_WRITE
)

2923 
	`FD_SET
(
waôabÀ
,&
pwaô
->
wrôe_fds
);

2924 if(
ty≥
 & 
IO_WAIT_ERROR
)

2925 
	`FD_SET
(
waôabÀ
,&
pwaô
->
îr_fds
);

2928  
TRUE
;

2929 
	}
}

2939 
	$io_waô
(
IO_WAITHANDLE
 *
pwaô
, 
uöt32_t
 *
ms
) {

2940 
timevÆ
 
timeout
;

2941 
timevÆ
 
°¨t_time
, 
íd_time
;

2942 
uöt32_t
 
ñ≠£d_ms
;

2943 
uöt32_t
 
waô_ms
;

2944 #ifde‡
WIN32


2945 
SOCKET_T
 
sock
;

2947 
ªtvÆ
=0;

2949 
	`ASSERT
(
pwaô
);

2951 if(!
pwaô
)

2952  
FALSE
;

2954 
waô_ms
 = *
ms
;

2955 
timeout
.
tv_£c
 = 
waô_ms
/1000;

2956 if(!
timeout
.
tv_£c
)

2957 
timeout
.
tv_£c
++;

2958 
timeout
.
tv_u£c
 = 0;

2960 
	`gëtimeofday
(&
°¨t_time
,
NULL
);

2961 #ifde‡
WIN32


2962 
	`ASSERT
(
pwaô
->
dwIãmCou¡
);

2964 
	`io_îr_¥ötf
(
IO_LOG_SPAM
,"Waiting on %d items for %d sec\n",

2965 
pwaô
->
dwIãmCou¡
,
timeout
.
tv_£c
);

2968 
pwaô
->
dwLa°Resu…
 = 
	`WaôF‹Mu…ùÀObje˘s
’waô->
dwIãmCou¡
,pwaô->
hWaôIãms
,
FALSE
,*
ms
);

2969 if((
pwaô
->
dwLa°Resu…
 =
WAIT_FAILED
Ë|| (pwaô->dwLa°Resu… =
WAIT_TIMEOUT
))

2972 
pwaô
->
dwWhichEvít
 =Öwaô->
dwLa°Resu…
 - 
WAIT_OBJECT_0
;

2973 if(
pwaô
->
dwWhichEvít
 >pwaô->
dwIãmCou¡
) {

2974 
pwaô
->
dwWhichEvít
 =Öwaô->
dwLa°Resu…
 - 
WAIT_ABANDONED_0
;

2975 
	`ASSERT
(
pwaô
->
dwWhichEvít
 <Öwaô->
dwIãmCou¡
);

2976 if(
pwaô
->
dwWhichEvít
 <Öwaô->
dwIãmCou¡
)

2977  
FALSE
;

2982 
	`io_îr_¥ötf
(
IO_LOG_SPAM
,"GŸ waô o¿ödex %d\n",
pwaô
->
dwWhichEvít
);

2983 if(!
pwaô
->
µH™dÀ
[pwaô->
dwWhichEvít
]->
‚±r
->
‚_gësockë
) {

2985 
pwaô
->
wßNëw‹kEvíts
.
lNëw‹kEvíts
 = 
FD_READ
;

2989 if(!
pwaô
->
µH™dÀ
[pwaô->
dwWhichEvít
]->
‚±r
->
	`‚_gësockë
’waô->µH™dÀ[pwaô->dwWhichEvít],&
sock
)) {

2990 
	`io_îr_¥ötf
(
IO_LOG_SPAM
,"CouldÇot get socket handle\n");

2991  
FALSE
;

2994 
	`io_îr_¥ötf
(
IO_LOG_SPAM
,"GettingÉvent details for wait object\n");

2995 
	`WSAEnumNëw‹kEvíts
(
sock
,
pwaô
->
hWaôIãms
[pwaô->
dwWhichEvít
],&pwaô->
wßNëw‹kEvíts
);

2996 if(
pwaô
->
wßNëw‹kEvíts
.
lNëw‹kEvíts
 != 0) {

2997 
	`io_îr_¥ötf
(
IO_LOG_SPAM
,"GŸ %ld\n",
pwaô
->
wßNëw‹kEvíts
.
lNëw‹kEvíts
);

3001 
	`io_îr_¥ötf
(
IO_LOG_SPAM
,"Skipping spurious wakeup\n");

3004 if(
pwaô
->
dwLa°Resu…
 =
WAIT_FAILED
)

3005  
FALSE
;

3008 if(
WAIT_TIMEOUT
 =
pwaô
->
dwLa°Resu…
) {

3009 *
ms
 = 0;

3010  
FALSE
;

3013 
	`ASSERT
(
pwaô
->
max_fd
);

3015 
	`mem˝y
(&
pwaô
->
ªsu…_ªad
, &pwaô->
ªad_fds
, (pwait->read_fds));

3016 
	`mem˝y
(&
pwaô
->
ªsu…_wrôe
, &pwaô->
wrôe_fds
, (pwait->write_fds));

3017 
	`mem˝y
(&
pwaô
->
ªsu…_îr
, &pwaô->
îr_fds
, (pwait->err_fds));

3019 if(!
pwaô
->
max_fd
) {

3020 
	`io_îr_¥ötf
(
IO_LOG_WARN
,"No fds being monitored in io_wait\n");

3021  
FALSE
;

3024 
	`io_îr_¥ötf
(
IO_LOG_SPAM
,"selecting on %dÇfds, for %d.%d sec\n",

3025 
pwaô
->
max_fd
+1,
timeout
.
tv_£c
,timeout.
tv_u£c
);

3027 ((
ªtvÆ
 = 
	`£À˘
(
pwaô
->
max_fd
+1,&pwaô->
ªsu…_ªad
,

3028 &
pwaô
->
ªsu…_wrôe
, &pwaô->
ªsu…_îr
,

3029 &
timeout
)) == -1) &&

3030 (
î∫o
 =
EINTR
));

3032 if(
ªtvÆ
 == -1) {

3033 
	`io_îr_¥ötf
(
IO_LOG_WARN
,"Eº‹ i¿£À˘: %s\n",
	`°ªº‹
(
î∫o
));

3034  
FALSE
;

3037 if(
ªtvÆ
 == 0) {

3038 
	`io_îr_¥ötf
(
IO_LOG_WARN
,"timeout in select\n");

3039 *
ms
 = 0;

3040  
FALSE
;

3044 
	`gëtimeofday
(&
íd_time
,
NULL
);

3045 
ñ≠£d_ms
 = ((
íd_time
.
tv_£c
 - 
°¨t_time
.tv_sec) * 1000) +

3046 ((
íd_time
.
tv_u£c
 - 
°¨t_time
.tv_usec)/1000);

3047 if(
ñ≠£d_ms
 > 
waô_ms
)

3048 *
ms
 = 0;

3050 *
ms
 -
ñ≠£d_ms
;

3052  
TRUE
;

3053 
	}
}

3062 
	$io_waô_°©us
(
IO_WAITHANDLE
 *
pwaô
, 
IO_PRIVHANDLE
 *
ph™dÀ
) {

3063 
ªtvÆ
 = 0;

3065 #i‚de‡
WIN32


3066 
WAITABLE_T
 
waôabÀ
;

3069 
	`ASSERT
(
pwaô
);

3071 if(!
pwaô
) {

3072 
	`io_îr_¥ötf
(
IO_LOG_WARN
,"io_wait_status: invalid IO_WAITHANDLE\n");

3076 
	`ASSERT
(
ph™dÀ
 &&Öh™dÀ->
›í
 &&Öh™dÀ->
‚±r
 &&

3077 
ph™dÀ
->
‚±r
->
‚_gëwaôabÀ
);

3079 if(!
ph™dÀ
 || !ph™dÀ->
›í
 || !ph™dÀ->
‚±r
 ||

3080 !
ph™dÀ
->
‚±r
->
‚_gëwaôabÀ
) {

3081 
	`io_îr_¥ötf
(
IO_LOG_WARN
,"io_wait_status: can't get WAITABLE_T for "

3086 #ifde‡
WIN32


3087 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
," ëw‹k: %08x\n",
pwaô
->
wßNëw‹kEvíts
.
lNëw‹kEvíts
);

3089 if(
pwaô
->
wßNëw‹kEvíts
.
lNëw‹kEvíts
 =
FD_READ
) {

3090 
ªtvÆ
 |
IO_WAIT_READ
;

3091 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"Set: FD_READ\n");

3093 if(
pwaô
->
wßNëw‹kEvíts
.
lNëw‹kEvíts
 =
FD_ACCEPT
) {

3094 
ªtvÆ
 |
IO_WAIT_READ
;

3095 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"Set: FD_ACCEPT\n");

3097 if(
pwaô
->
wßNëw‹kEvíts
.
lNëw‹kEvíts
 =
FD_OOB
) {

3098 
ªtvÆ
 |
IO_WAIT_READ
;

3099 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"Set: FD_OOB\n");

3101 if(
pwaô
->
wßNëw‹kEvíts
.
lNëw‹kEvíts
 =
FD_WRITE
) {

3102 
ªtvÆ
 |
IO_WAIT_WRITE
;

3103 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"Set: FD_WRITE\n");

3105 if(
pwaô
->
wßNëw‹kEvíts
.
lNëw‹kEvíts
 =
FD_CLOSE
) {

3106 
ªtvÆ
 |
IO_WAIT_READ
 | 
IO_WAIT_ERROR
 | 
IO_WAIT_WRITE
;

3107 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"Set: FD_CLOSE\n");

3110 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"Waô sètus: %d\n",
ªtvÆ
);

3124 if(!
ph™dÀ
->
‚±r
->
	`‚_gëwaôabÀ
’h™dÀ, 1, &
waôabÀ
))

3127 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"Checkög sètu†o‡fd %d\n",
waôabÀ
);

3128 if(
	`FD_ISSET
(
waôabÀ
,&
pwaô
->
ªsu…_ªad
))

3129 
ªtvÆ
 |
IO_WAIT_READ
;

3130 if(
	`FD_ISSET
(
waôabÀ
,&
pwaô
->
ªsu…_wrôe
))

3131 
ªtvÆ
 |
IO_WAIT_WRITE
;

3132 if(
	`FD_ISSET
(
waôabÀ
,&
pwaô
->
ªsu…_îr
))

3133 
ªtvÆ
 |
IO_WAIT_ERROR
;

3134 
	`io_îr_¥ötf
(
IO_LOG_DEBUG
,"Rëu∫ög %d\n",
ªtvÆ
);

3137  
ªtvÆ
;

3138 
	}
}

3146 
	$io_waô_di•o£
(
IO_WAITHANDLE
 *
pwaô
) {

3147 
	`ASSERT
(
pwaô
);

3149 if(!
pwaô
)

3150  
TRUE
;

3152 #ifde‡
WIN32


3153 if(
pwaô
->
hWaôIãms
)

3154 
	`‰ì
(
pwaô
->
hWaôIãms
);

3155 if(
pwaô
->
µH™dÀ
)

3156 
	`‰ì
(
pwaô
->
µH™dÀ
);

3159 
	`‰ì
(
pwaô
);

3160  
TRUE
;

3161 
	}
}

	@io.h

7 #i‚de‡
_IO_H_


8 
	#_IO_H_


	)

10 #ifde‡
HAVE_CONFIG_H


11 
	~"c⁄fig.h
"

14 #i‚de‡
WIN32


15 
	~<°döt.h
>

16 
	~<√töë/ö.h
>

17 
	~<sys/sockë.h
>

19 
	#WIN32_LEAN_AND_MEAN


	)

20 
	~<wödows.h
>

21 
	~<ws2t˝ù.h
>

24 
	~"io-îr‹s.h
"

26 * 
	tIOHANDLE
;

27 * 
	tIO_WAITHANDLE
;

29 
	#INVALID_HANDLE
 
NULL


	)

31 #ifde‡
WIN32


32 
	#SOCKET_T
 
SOCKET


	)

33 
	#FILE_T
 
HANDLE


	)

34 
	#mode_t
 

	)

35 
	t__öt8
 
	tuöt8_t
;

36 
	t__öt16
 
	tuöt16_t
;

37 
	t__öt32
 
	tuöt32_t
;

38 
	t__öt64
 
	tuöt64_t
;

40 
	#SOCKET_T
 

	)

41 
	#FILE_T
 

	)

61 
io_öô
();

62 
io_deöô
();

63 
io_£t_îrh™dÀr
((*
îr_h™dÀr
)(, *));

64 
	`io_£t_lockh™dÀr
((*
lock_h™dÀr
)());

66 
IOHANDLE
 
	`io_√w
();

67 
	`io_›í
(
IOHANDLE
 
io
, *
fmt
, ...);

68 
	`io_˛o£
(
IOHANDLE
 
io
);

69 
	`io_ªad
(
IOHANDLE
 
io
, *
buf
, 
uöt32_t
 *
Àn
);

70 
	`io_ªad_timeout
(
IOHANDLE
 
io
, *
buf
, 
uöt32_t
 *
Àn
,

71 
uöt32_t
 *
ms
);

72 
	`io_wrôe
(
IOHANDLE
 
io
, *
buf
, 
uöt32_t
 *
Àn
);

73 
	`io_¥ötf
(
IOHANDLE
 
io
, *
fmt
, ...);

74 
	`io_size
(
IOHANDLE
 
io
, 
uöt64_t
 *
size
);

75 
	`io_£ços
(
IOHANDLE
 
io
, 
uöt64_t
 
off£t
, 
whí˚
);

76 
	`io_gëpos
(
IOHANDLE
 
io
, 
uöt64_t
 *
pos
);

77 
	`io_buf„r
(
IOHANDLE
 
io
);

78 
	`io_ªadlöe
(
IOHANDLE
 
io
, *
buf
, 
uöt32_t
 *
Àn
);

79 
	`io_ªadlöe_timeout
(
IOHANDLE
 
io
, *
buf
, 
uöt32_t
 *
Àn
,

80 
uöt32_t
 *
ms
);

81 * 
	`io_îr°r
(
IOHANDLE
 
io
);

82 
	`io_îrcode
(
IOHANDLE
 
io
);

83 
	`io_di•o£
(
IOHANDLE
 
io
);

88 
	`io_li°í_ac˚±
(
IOHANDLE
 
io
, IOHANDLE 
chûd
, 
ö_addr
 *
ho°
);

92 
	`io_fûe_©èch
(
IOHANDLE
 
io
, 
FILE_T
 
fd
);

93 
	`io_sockë_©èch
(
IOHANDLE
 
io
, 
SOCKET_T
 
fd
);

96 
	`io_udp_ªcv‰om
(
IOHANDLE
 
io
, *
buf
, 
uöt32_t
 *
Àn
,

97 
sockaddr_ö
 *
si_ªmŸe
, 
sockÀn_t
 *
si_Àn
);

98 
	`io_udp_£ndto
(
IOHANDLE
 
io
, *
buf
, 
uöt32_t
 *
Àn
,

99 
sockaddr_ö
 *
si_ªmŸe
, 
sockÀn_t
 
si_Àn
);

101 
	`io_i•rŸo
(
IOHANDLE
 
io
, *
¥Ÿo
);

105 
	`io_°©
(*
fûe
);

106 
	`io_föd
(*
fûe
, *
cuºít
, **
ªtu∫ed
, 
Àn
);

108 
	#IO_WAIT_READ
 1

	)

109 
	#IO_WAIT_WRITE
 2

	)

110 
	#IO_WAIT_ERROR
 4

	)

112 
IO_WAITHANDLE
 
	`io_waô_√w
();

113 
	`io_waô_add
(
IO_WAITHANDLE
 
wh
, 
IOHANDLE
 
io
, 
ty≥
);

114 
	`io_waô
(
IO_WAITHANDLE
 
wh
, 
uöt32_t
 *
ms
);

115 
	`io_waô_°©us
(
IO_WAITHANDLE
 
wh
, 
IOHANDLE
 
io
);

116 
	`io_waô_di•o£
(
IO_WAITHANDLE
 
wh
);

118 #i‚de‡
TRUE


119 
	#TRUE
 1

	)

120 
	#FALSE
 0

	)

	@ll.c

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 
	~<±hªad.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

31 
	~"dØpd.h
"

32 
	~"Œ.h
"

33 
	~"îr.h
"

38 
_Œ_add_ôem
(
LL
 *
∂
, *
key
, *
vpvÆ
, 
ivÆ
, 
ty≥
);

39 
_Œ_upd©e_ôem
(
LL_ITEM
 *
∂i
, *
vpvÆ
, 
ivÆ
, 
ty≥
);

40 
_Œ_dump
(
LL
 *
∂
, 
dïth
);

48 
	$Œ_¸óã
(
LL
 **
µl
) {

49 *
µl
 = (
LL
 *)
	`mÆloc
((
_LL
));

50 if(!*
µl
)

51  
LL_E_MALLOC
;

53 
	`mem£t
(*
µl
,0x0,(
_LL
));

56 (*
µl
)->
Êags
 = 
LL_FLAG_NODUPS
 | 
LL_FLAG_INHERIT
;

57  
LL_E_SUCCESS
;

58 
	}
}

66 
	$Œ_de°roy
(
LL
 *
∂
) {

67 
LL_ITEM
 *
cuºít
,*
œ°
;

69 
œ°
 = &(
∂
->
ôemli°
);

70 
cuºít
 = 
∂
->
ôemli°
.
√xt
;

72 
cuºít
) {

73 
cuºít
->
ty≥
) {

74 
LL_TYPE_LL
:

75 
	`Œ_de°roy
(
cuºít
->
vÆue
.
as_Œ
);

77 
LL_TYPE_STRING
:

78 
	`‰ì
(
cuºít
->
vÆue
.
as_°rög
);

83 
	`‰ì
(
cuºít
->
key
);

84 
œ°
 = 
cuºít
;

85 
cuºít
 = cuºít->
√xt
;

86 
	`‰ì
(
œ°
);

89 
	`‰ì
(
∂
);

91  
LL_E_SUCCESS
;

92 
	}
}

97 
	$Œ_add_°rög
(
LL
 *
∂
, *
key
, *
cvÆ
) {

98  
	`_Œ_add_ôem
(
∂
,
key
,
cvÆ
,0,
LL_TYPE_STRING
);

99 
	}
}

104 
	$Œ_add_öt
(
LL
 *
∂
, *
key
, 
ivÆ
) {

105  
	`_Œ_add_ôem
(
∂
,
key
,
NULL
,
ivÆ
,
LL_TYPE_INT
);

106 
	}
}

111 
	$Œ_add_Œ
(
LL
 *
∂
, *
key
, LL *
≤ew
) {

112 
ªsu…
;

114 
ªsu…
 = 
	`_Œ_add_ôem
(
∂
,
key
,(*)
≤ew
,0,
LL_TYPE_LL
);

115 if(
ªsu…
 =
LL_E_SUCCESS
) {

116 if(
∂
->
Êags
 & 
LL_FLAG_INHERIT
) {

117 
≤ew
->
Êags
 = 
∂
->flags;

120  
ªsu…
;

121 
	}
}

123 
	$Œ_dñ_ôem
(
LL
 *
∂
, *
key
) {

124 
LL_ITEM
 *
phód
, *
±aû
;

126 
±aû
 = &
∂
->
ôemli°
;

127 
phód
 = 
∂
->
ôemli°
.
√xt
;

129 
phód
) {

130 if((
∂
->
Êags
 & 
LL_FLAG_HONORCASE
) &&

131 (
	`°rcmp
(
phód
->
key
,key)==0))

133 if((!(
∂
->
Êags
 & 
LL_FLAG_HONORCASE
) &&

134 (
	`°rˇ£cmp
(
phód
->
key
,key)==0)))

137 
±aû
=
phód
;

138 
phód
ıhód->
√xt
;

141 if(
phód
) {

143 if(
∂
->
èû±r
 =
phód
)

144 
∂
->
èû±r
 = 
±aû
;

145 
±aû
->
√xt
 = 
phód
->next;

148  
LL_E_NOKEY
;

150  
LL_E_SUCCESS
;

151 
	}
}

156 
	$_Œ_add_ôem
(
LL
 *
∂
, *
key
, * 
vpvÆ
, 
ivÆ
, 
ty≥
) {

157 
LL_ITEM
 *
∂i
;

159 if(!
key
) {

160 
	`DPRINTF
(
E_LOG
,
L_MISC
,"_ll_add_item:ÖassedÇull key\n");

161  
LL_E_BADPARAM
;

164 if(
∂
->
Êags
 & 
LL_FLAG_NODUPS
) {

165 if(
	`Œ_„tch_ôem
(
∂
,
key
))

166  
LL_E_DUP
;

169 
∂i
=(
LL_ITEM
 *)
	`mÆloc
((LL_ITEM));

170 if(!
∂i
) {

171  
LL_E_MALLOC
;

174 
∂i
->
ty≥
 =Åype;

175 
∂i
->
key
 = 
	`°rdup
(key);

177 
ty≥
) {

178 
LL_TYPE_INT
:

179 
∂i
->
vÆue
.
as_öt
 = 
ivÆ
;

181 
LL_TYPE_LL
:

182 
∂i
->
vÆue
.
as_Œ
 = (
LL
 *)
vpvÆ
;

184 
LL_TYPE_STRING
:

185 if(!
vpvÆ
) {

186 
	`DPRINTF
(
E_LOG
,
L_MISC
,"_ll_add_item:ÖassedÇull value\n");

187 
	`‰ì
(
∂i
);

188  
LL_E_BADPARAM
;

190 
∂i
->
vÆue
.
as_°rög
 = 
	`°rdup
((*)
vpvÆ
);

196 if(
∂
->
Êags
 & 
LL_FLAG_HEADINSERT
) {

197 
∂i
->
√xt
 = 
∂
->
ôemli°
.next;

198 
∂
->
ôemli°
.
√xt
 = 
∂i
;

200 
∂i
->
√xt
 = 
NULL
;

201 if(
∂
->
èû±r
) {

202 
∂
->
èû±r
->
√xt
 = 
∂i
;

204 
∂
->
ôemli°
.
√xt
 = 
∂i
;

206 
∂
->
èû±r
 = 
∂i
;

209  
LL_E_SUCCESS
;

210 
	}
}

215 
	$Œ_upd©e_°rög
(
LL_ITEM
 *
∂i
, *
cvÆ
) {

216  
	`_Œ_upd©e_ôem
(
∂i
,
cvÆ
,0,
LL_TYPE_STRING
);

217 
	}
}

222 
	$Œ_upd©e_öt
(
LL_ITEM
 *
∂i
, 
ivÆ
) {

223  
	`_Œ_upd©e_ôem
(
∂i
,
NULL
,
ivÆ
,
LL_TYPE_INT
);

224 
	}
}

233 
	$Œ_upd©e_Œ
(
LL_ITEM
 *
∂i
, 
LL
 *
≤ew
) {

234 
ªsu…
;

236 
ªsu…
 = 
	`_Œ_upd©e_ôem
(
∂i
,(*)
≤ew
,0,
LL_TYPE_LL
);

237  
ªsu…
;

238 
	}
}

244 
	$_Œ_upd©e_ôem
(
LL_ITEM
 *
∂i
, * 
vpvÆ
, 
ivÆ
, 
ty≥
) {

247 
∂i
->
ty≥
) {

248 
LL_TYPE_LL
:

249 
	`Œ_de°roy
(
∂i
->
vÆue
.
as_Œ
);

251 
LL_TYPE_STRING
:

252 
	`‰ì
(
∂i
->
vÆue
.
as_°rög
);

254 
LL_TYPE_INT
:

259 
∂i
->
ty≥
 =Åype;

261 
∂i
->
ty≥
) {

262 
LL_TYPE_INT
:

263 
∂i
->
vÆue
.
as_öt
 = 
ivÆ
;

265 
LL_TYPE_LL
:

266 
∂i
->
vÆue
.
as_Œ
 = (
LL
 *)
vpvÆ
;

268 
LL_TYPE_STRING
:

269 
∂i
->
vÆue
.
as_°rög
 = 
	`°rdup
((*)
vpvÆ
);

275  
LL_E_SUCCESS
;

276 
	}
}

288 
LL_ITEM
 *
	$Œ_„tch_ôem
(
LL
 *
∂
, *
key
) {

289 
LL_ITEM
 *
cuºít
;

291 if(!
∂
)

292  
NULL
;

294 
cuºít
 = 
∂
->
ôemli°
.
√xt
;

295 
cuºít
) {

296 if(
∂
->
Êags
 & 
LL_FLAG_HONORCASE
) {

297 if(!
	`°rcmp
(
cuºít
->
key
,key))

298  
cuºít
;

300 if(!
	`°rˇ£cmp
(
cuºít
->
key
,key))

301  
cuºít
;

303 
cuºít
 = cuºít->
√xt
;

306  
cuºít
;

307 
	}
}

315 
	$Œ_£t_Êags
(
LL
 *
∂
, 
Êags
) {

316 
∂
->
Êags
 = flags;

317  
LL_E_SUCCESS
;

318 
	}
}

326 
	$Œ_gë_Êags
(
LL
 *
∂
, *
Êags
) {

327 *
Êags
 = 
∂
->flags;

328  
LL_E_SUCCESS
;

329 
	}
}

336 
	$Œ_dump
(
LL
 *
∂
) {

337 
	`_Œ_dump
(
∂
,0);

339 
	}
}

349 
	$_Œ_dump
(
LL
 *
∂
, 
dïth
) {

350 
LL_ITEM
 *
∂i
;

351 
∂i
 = 
∂
->
ôemli°
.
√xt
;

352 
∂i
) {

353 
∂i
->
ty≥
) {

354 
LL_TYPE_INT
:

355 
	`¥ötf
("%*s%†(öt): %d\n",
dïth
*2,"",
∂i
->
key
,∂i->
vÆue
.
as_öt
);

357 
LL_TYPE_STRING
:

358 
	`¥ötf
("%*s%†(°rög): %s\n",
dïth
*2,"",
∂i
->
key
,∂i->
vÆue
.
as_°rög
);

360 
LL_TYPE_LL
:

361 
	`¥ötf
("%*s%†÷i°)\n",
dïth
*2,"",
∂i
->
key
);

362 
	`_Œ_dump
(
∂i
->
vÆue
.
as_Œ
,
dïth
+1);

365 
∂i
 =Öli->
√xt
;

367 
	}
}

377 
LL_ITEM
 *
	$Œ_gë_√xt
(
LL
 *
∂
, 
LL_ITEM
 *
¥ev
) {

378 if(!
∂
)

379  
NULL
;

381 if(!
¥ev
)

382  
∂
->
ôemli°
.
√xt
;

384  
¥ev
->
√xt
;

385 
	}
}

	@ll.h

22 #i‚de‡
_LL_H_


23 
	#_LL_H_


	)

25 
	#LL_TYPE_INT
 0

	)

26 
	#LL_TYPE_STRING
 1

	)

27 
	#LL_TYPE_LL
 2

	)

30 
	#LL_E_SUCCESS
 0

	)

31 
	#LL_E_MALLOC
 1

	)

32 
	#LL_E_NOKEY
 2

	)

33 
	#LL_E_DUP
 3

	)

34 
	#LL_E_BADPARAM
 4

	)

36 
	#LL_FLAG_HONORCASE
 1

	)

37 
	#LL_FLAG_HEADINSERT
 2

	)

38 
	#LL_FLAG_NODUPS
 4

	)

39 
	#LL_FLAG_INHERIT
 8

	)

41 
	s_LLITEM
 {

42 
	mty≥
;

43 *
	mkey
;

45 
	mas_öt
;

46 *
	mas_°rög
;

47 
_LL
 *
	mas_Œ
;

48 } 
	mvÆue
;

49 
_LLITEM
 *
	m√xt
;

50 } 
	tLL_ITEM
, *
	tLL_ITEMHANDLE
;

52 
	s_LL
 {

53 
	mÊags
;

54 
_LLITEM
 *
	mèû±r
;

55 
_LLITEM
 
	môemli°
;

56 } 
	tLL
, *
	tLL_HANDLE
;

60 
Œ_¸óã
(
LL
 **
µl
);

61 
Œ_de°roy
(
LL
 *
∂
);

63 
Œ_add_°rög
(
LL
 *
∂
, *
key
, *
cvÆ
);

64 
Œ_add_öt
(
LL
 *
∂
, *
key
, 
ivÆ
);

65 
Œ_add_Œ
(
LL
 *
∂
, *
key
, LL *
≤ew
);

67 
Œ_upd©e_°rög
(
LL_ITEM
 *
∂i
, *
cvÆ
);

68 
Œ_upd©e_öt
(
LL_ITEM
 *
∂i
, 
ivÆ
);

69 
Œ_upd©e_Œ
(
LL_ITEM
 *
∂i
, 
LL
 *
≤ew
);

71 
Œ_£t_Êags
(
LL
 *
∂
, 
Êags
);

72 
Œ_gë_Êags
(
LL
 *
∂
, *
Êags
);

74 
Œ_dñ_ôem
(
LL
 *
∂
, *
key
);

76 
LL_ITEM
 *
Œ_„tch_ôem
(
LL
 *
∂
, *
key
);

77 
LL_ITEM
 *
Œ_gë_√xt
(
LL
 *
∂
, LL_ITEM *
¥ev
);

79 
Œ_dump
(
LL
 *
∂
);

	@main.c

50 #ifde‡
HAVE_CONFIG_H


51 
	~"c⁄fig.h
"

54 
	~<î∫o.h
>

55 
	~<f˙é.h
>

56 
	~<limôs.h
>

57 
	~<±hªad.h
>

58 
	~<sig«l.h
>

59 
	~<°d¨g.h
>

60 #ifde‡
HAVE_STDINT_H


61 
	~<°döt.h
>

63 
	~<°dio.h
>

64 
	~<°dlib.h
>

65 
	~<°rög.h
>

66 #ifde‡
HAVE_DIRENT_H


67 
	~<dúít.h
>

69 #ifde‡
HAVE_UNISTD_H


70 
	~<uni°d.h
>

73 
	~<sys/°©.h
>

74 
	~<sys/ty≥s.h
>

75 #ifde‡
HAVE_SYS_WAIT_H


76 
	~<sys/waô.h
>

79 
	~"dØpd.h
"

81 
	~"c⁄f.h
"

82 
	~"c⁄figfûe.h
"

83 
	~"îr.h
"

84 
	~"mp3-sˇ¬î.h
"

85 
	~"web£rvî.h
"

86 
	~"ª°¨t.h
"

87 
	~"db-gíîic.h
"

88 
	~"os.h
"

89 
	~"∂ugö.h
"

90 
	~"utû.h
"

91 
	~"u≤p.h
"

92 
	~"io.h
"

94 
	gdevi˚_öf
[10]="Any";

96 #ifde‡
HAVE_GETOPT_H


97 
	~"gë›t.h
"

100 #i‚de‡
WITHOUT_MDNS


101 
	~"ªnd.h
"

105 
	#MAIN_SLEEP_INTERVAL
 2

	)

108 #i‡!
HAVE_ATOLL


109 
	#©ﬁl
(
a
Ë
	`©ﬁ
◊)

	)

113 
	#PATH_SCAN


	)

114 #ifde‡
PATH_SCAN


115 
	#DBG_PATH_SCAN
(
x
Ë
	)
x

117 
	#DBG_PATH_SCAN
(
x
)

	)

123 
CONFIG
 
	gc⁄fig
;

128 
ußge
(*
¥ogøm
);

129 
maö_h™dÀr
(
WS_CONNINFO
 *
pwsc
);

130 
maö_auth
(
WS_CONNINFO
 *
pwsc
, *
u£∫ame
, *
∑ssw‹d
);

131 
txt_add
(*
txåec‹d
, *
fmt
, ...);

132 
maö_io_îrh™dÀr
(
Àvñ
, *
msg
);

133 
maö_ws_îrh™dÀr
(
Àvñ
, *
msg
);

139 *
	$Æpha_wö_∑th_to_löux
(*
p°r
){

140 
wö_ch¨
=92;

141 
löux_ch¨
=47;

142 
i
=0;

143 
p°r
[
i
] !
NULL
){

144 if–
p°r
[
i
] =
wö_ch¨
 ) {

145 
	`DBG_PATH_SCAN
(
	`¥ötf
("p°r[%d]=%c\n",
i
,
p°r
[i]);)

146 
p°r
[
i
]
löux_ch¨
;

148 
i
++;

151  
p°r
;

152 
	}
}

155 
	$fûãr
(c⁄° 
dúít
 *
íåy
)

157 *
œ°_dŸ
 = 
NULL
;

158 if(
	`°r°r
(
íåy
->
d_«me
, ".") ==Éntry->d_name)

160 if(
íåy
->
d_ty≥
 & 
DT_DIR
)

162 if((
íåy
->
d_ty≥
 & 
DT_REG
) &&

163 (
œ°_dŸ
 = 
	`°ºchr
(
íåy
->
d_«me
, '.')) &&

164 (
	`°rˇ£cmp
(
œ°_dŸ
, ".mp3") == 0))

166 if((
íåy
->
d_ty≥
 & 
DT_REG
) &&

167 (
œ°_dŸ
 = 
	`°ºchr
(
íåy
->
d_«me
, '.')) &&

168 (
	`°rˇ£cmp
(
œ°_dŸ
, ".ogg") == 0))

170 if((
íåy
->
d_ty≥
 & 
DT_REG
) &&

171 (
œ°_dŸ
 = 
	`°ºchr
(
íåy
->
d_«me
, '.')) &&

172 (
	`°rˇ£cmp
(
œ°_dŸ
, ".flac") == 0))

174 if((
íåy
->
d_ty≥
 & 
DT_REG
) &&

175 (
œ°_dŸ
 = 
	`°ºchr
(
íåy
->
d_«me
, '.')) &&

176 (
	`°rˇ£cmp
(
œ°_dŸ
, ".m4a") == 0))

178 if((
íåy
->
d_ty≥
 & 
DT_REG
) &&

179 (
œ°_dŸ
 = 
	`°ºchr
(
íåy
->
d_«me
, '.')) &&

180 (
	`°rˇ£cmp
(
œ°_dŸ
, ".m4p") == 0))

184 
	}
}

188 
	$fûãr
(c⁄° 
dúít
 *
íåy
)

190 *
œ°_dŸ
 = 
NULL
;

191 if(
	`°r°r
(
íåy
->
d_«me
, ".") ==Éntry->d_name)

193 if(
íåy
->
d_ty≥
 & 
DT_DIR
)

195 if((
íåy
->
d_ty≥
 & 
DT_REG
) &&

196 (
œ°_dŸ
 = 
	`°ºchr
(
íåy
->
d_«me
, '.')) &&

197 (
	`°rˇ£cmp
(
œ°_dŸ
, ".mp3") == 0))

201 
	}
}

204 
	$gë_mp3_cou¡
(c⁄° *
fûe
)

206 
dúít
 **
«mñi°
;

207 *
fuŒ«me
 = 
NULL
;

208 
n
, 
cou¡
 = 0;

210 if((
n
 = 
	`sˇndú
(
fûe
, &
«mñi°
, 
fûãr
, 
Æphas‹t
)) < 0)

213 
n
--)

215 if((
fuŒ«me
 = 
	`mÆloc
(
	`°æí
(
fûe
Ë+ såÀn(
«mñi°
[
n
]->
d_«me
) + 2)))

217 
	`•rötf
(
fuŒ«me
, "%s%s%s", 
fûe
, fûe[
	`°æí
(fûeË- 1] ='/' ? "" : "/", 
«mñi°
[
n
]->
d_«me
);

218 if(
«mñi°
[
n
]->
d_ty≥
 & 
DT_DIR
)

219 
cou¡
 +
	`gë_mp3_cou¡
(
fuŒ«me
);

220 if(
«mñi°
[
n
]->
d_ty≥
 & 
DT_REG
)

221 
cou¡
++;

222 
	`‰ì
(
fuŒ«me
);

224 
	`‰ì
(
«mñi°
[
n
]);

226 
	`‰ì
(
«mñi°
);

227  
cou¡
;

228 
	}
}

234 
	$Æpha_å™sf‹m_vﬁume
(**
∑th
){

236 
dú_ödex
=0;

238 
mp3∑th
[512]="/mnt/HD/";

239 
mp3_tmp
[512]="/mnt/HD/";

240 
vﬁume
[12];

241 
m¡
[12];

242 
sym
[4];

243 
FILE
 *
sh¨e_fﬁdî_numbî
;

245 
vﬁume_1
[12];

246 
vﬁume_2
[12];

247 
vﬁume_3
[12];

248 
vﬁume_4
[12];

250 
„
 = 0;

253 
sh¨e_fﬁdî_numbî
 = 
NULL
;

254 
	`mem£t
(
vﬁume
, 0, 12);

255 
	`mem£t
(
m¡
, 0 , 12);

256 
	`mem£t
(
sym
, 0 , 4);

257 
	`mem£t
(
vﬁume_1
, 0, 12);

258 
	`mem£t
(
vﬁume_2
, 0 ,12);

259 
	`mem£t
(
vﬁume_3
, 0 ,12);

260 
	`mem£t
(
vﬁume_4
, 0 ,12);

263 
sh¨e_fﬁdî_numbî
=
	`f›í
("/etc/shared_name", "r");

264 i‡(
sh¨e_fﬁdî_numbî
 =
NULL
)

265 
	`¥ötf
("main.c: open /etc/shared_name faild...\n");

267 
	`¥ötf
("main.c: open /etc/shared_name successfully...\n");

270 
	`„of
(
sh¨e_fﬁdî_numbî
) == 0) {

271 
„
 = 
	`fsˇnf
(
sh¨e_fﬁdî_numbî
, "%†%†%s", 
vﬁume
, 
sym
, 
m¡
);

272 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.c: fsˇnf: fe=%d\n", 
„
);)

273 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.c: fsˇnf: /ëc/sh¨ed_«me: %†%†%s\n", 
vﬁume
, 
sym
, 
m¡
);)

274 if(
„
<0)

277 if–!
	`°rcmp
(
vﬁume
, "Volume_1")) {

278 
	`mem˝y
(
vﬁume_1
, 
m¡
, 12);

279 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.¯: Vﬁume_1=%s\n", 
m¡
);)

281 i‡–!
	`°rcmp
(
vﬁume
, "Volume_2")) {

282 
	`mem˝y
(
vﬁume_2
, 
m¡
, 12);

283 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.¯: Vﬁume_2=%s\n", 
m¡
);)

285 i‡–!
	`°rcmp
(
vﬁume
, "Volume_3")) {

286 
	`mem˝y
(
vﬁume_3
, 
m¡
, 12);

287 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.¯: Vﬁume_3=%s\n", 
m¡
);)

289 i‡–!
	`°rcmp
(
vﬁume
, "Volume_4")) {

290 
	`mem˝y
(
vﬁume_4
, 
m¡
, 12);

291 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.¯: Vﬁume_4=%s\n", 
m¡
);)

294 
dú_ödex
=0;

295 
dú_ödex
 < 1000) {

296 if–
∑th
[
dú_ödex
] !
NULL
) {

297 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.c: c⁄fig_mp3_∑th[%d]=%s\n",
dú_ödex
,
∑th
[dir_index]);)

300 *
p°r
;

301 if–!
	`°∫cmp
(
∑th
[
dú_ödex
], "Vﬁume_1", 8Ë&& 
	`°æí
(
vﬁume_1
)){

302 
	`°rˇt
(
mp3∑th
, 
vﬁume_1
);

303 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.c: Vﬁume_1ánd mp3∑th=%s\n", 
mp3∑th
);)

304 if((
p°r
 = 
	`°r°r
(
∑th
[
dú_ödex
], "Volume_")))

305 
p°r
 +
	`°æí
("Volume_")+1;

307 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.c: c©ched_mp3_∑th=%s\n",
p°r
);)

309 
p°r
=
	`Æpha_wö_∑th_to_löux
(pstr);

311 if(
p°r
!=
NULL
) {

312 
	`°rˇt
(
mp3∑th
,
p°r
);

313 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.c: mp3∑th=%s\n",
mp3∑th
);)

314 
∑th
[
dú_ödex
]=
	`°rdup
(
mp3∑th
);

315 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.c:Ö©h[%d]=%s\n",
dú_ödex
,
∑th
[dir_index]);)

318 i‡–!
	`°∫cmp
(
∑th
[
dú_ödex
], "Vﬁume_2", 8Ë&& 
	`°æí
(
vﬁume_2
) ){

319 
	`°rˇt
(
mp3∑th
,
vﬁume_2
);

320 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.c: Vﬁume_2: mp3∑th=%s\n", 
mp3∑th
);)

322 if((
p°r
 = 
	`°r°r
(
∑th
[
dú_ödex
], "Volume_")))

323 
p°r
 +
	`°æí
("Volume_")+1;

324 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.c: c©ched_mp3_∑th=%s\n",
p°r
);)

325 
p°r
=
	`Æpha_wö_∑th_to_löux
(pstr);

326 if(
p°r
!=
NULL
) {

327 
	`°rˇt
(
mp3∑th
,
p°r
);

328 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.c: mp3∑th=%s\n",
mp3∑th
);)

329 
∑th
[
dú_ödex
]=
	`°rdup
(
mp3∑th
);

330 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.c:Ö©h[%d]=%s\n",
dú_ödex
,
∑th
[dir_index]);)

333 i‡–!
	`°∫cmp
(
∑th
[
dú_ödex
], "Vﬁume_3", 8Ë&& 
	`°æí
(
vﬁume_3
)){

334 
	`°rˇt
(
mp3∑th
,
vﬁume_3
);

335 
	`DBG_PATH_SCAN
(
	`¥ötf
("Vﬁume_3: mp3∑th=%s\n", 
mp3∑th
);)

337 if((
p°r
 = 
	`°r°r
(
∑th
[
dú_ödex
], "Volume_")))

338 
p°r
 +
	`°æí
("Volume_")+1;

340 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.c: c©ched_mp3_∑th=%s\n",
p°r
);)

341 
p°r
=
	`Æpha_wö_∑th_to_löux
(pstr);

342 if(
p°r
!=
NULL
) {

343 
	`°rˇt
(
mp3∑th
,
p°r
);

344 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.c: mp3∑th=%s\n",
mp3∑th
);)

345 
∑th
[
dú_ödex
]=
	`°rdup
(
mp3∑th
);

346 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.c:Ö©h[%d]=%s\n",
dú_ödex
,
∑th
[dir_index]);)

349 i‡–!
	`°∫cmp
(
∑th
[
dú_ödex
], "Vﬁume_4", 8Ë&& 
	`°æí
(
vﬁume_4
)) {

350 
	`°rˇt
(
mp3∑th
,
vﬁume_4
);

351 
	`DBG_PATH_SCAN
(
	`¥ötf
("Vﬁume_4: mp3∑th=%s\n", 
mp3∑th
);)

353 if((
p°r
 = 
	`°r°r
(
∑th
[
dú_ödex
], "Volume_")))

354 
p°r
 +
	`°æí
("Volume_")+1;

356 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.c: c©ched_mp3_∑th=%s\n",
p°r
);)

357 
p°r
=
	`Æpha_wö_∑th_to_löux
(pstr);

358 if(
p°r
!=
NULL
) {

359 
	`°rˇt
(
mp3∑th
,
p°r
);

360 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.c: mp3∑th=%s\n",
mp3∑th
);)

361 
∑th
[
dú_ödex
]=
	`°rdup
(
mp3∑th
);

362 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.c:Ö©h[%d]=%s\n",
dú_ödex
,
∑th
[dir_index]);)

366 
	`mem˝y
(
mp3∑th
, 
mp3_tmp
, 128);

367 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.c: cÀ™: mp3∑th=%s\n",
mp3∑th
);)

368 
	`DBG_PATH_SCAN
(
	`¥ötf
("\n");)

369 
dú_ödex
++;

372 
	`DBG_PATH_SCAN
(
	`¥ötf
("maö.c:Ö©h[%d]=NULL\n",
dú_ödex
);)

373 
dú_ödex
=1000;

378 
	`f˛o£
(
sh¨e_fﬁdî_numbî
);

380 
	}
}

387 
	$txt_add
(*
txåec‹d
, *
fmt
, ...) {

388 
va_li°
 
≠
;

389 
buff
[256];

390 
Àn
;

391 *
íd
;

393 
	`va_°¨t
(
≠
, 
fmt
);

394 
	`v¢¥ötf
(
buff
, (buff), 
fmt
, 
≠
);

395 
	`va_íd
(
≠
);

397 
Àn
 = ()
	`°æí
(
buff
);

398 if(
Àn
 + 
	`°æí
(
txåec‹d
) > 255) {

399 
	`DPRINTF
(
E_FATAL
,
L_MAIN
,"dns-sdÅext stringÅooÜong. Tryá shorter "

403 
íd
 = 
txåec‹d
 + 
	`°æí
(txtrecord);

404 *
íd
 = 
Àn
;

405 
	`°r˝y
(
íd
+1,
buff
);

406 
	}
}

408 
	$maö_h™dÀr
(
WS_CONNINFO
 *
pwsc
) {

409 
	`DPRINTF
(
E_DBG
,
L_MAIN
,"in main_handler\n");

410 if(
	`∂ugö_uæ_ˇndi•©ch
(
pwsc
)) {

411 
	`DPRINTF
(
E_DBG
,
L_MAIN
,"Di•©chög %†tÿ∂ugö\n",
	`ws_uri
(
pwsc
));

412 
	`∂ugö_uæ_h™dÀ
(
pwsc
);

416 
	`DPRINTF
(
E_DBG
,
L_MAIN
,"Di•©chög %†tÿc⁄fig h™dÀr\n",
	`ws_uri
(
pwsc
));

417 
	`c⁄fig_h™dÀr
(
pwsc
);

418 
	}
}

420 
	$maö_auth
(
WS_CONNINFO
 *
pwsc
, *
u£∫ame
, *
∑ssw‹d
) {

421 
	`DPRINTF
(
E_DBG
,
L_MAIN
,"in main_auth\n");

422 if(
	`∂ugö_uæ_ˇndi•©ch
(
pwsc
)) {

423 
	`DPRINTF
(
E_DBG
,
L_MAIN
,"Di•©chögáuth f‹ %†tÿ∂ugö\n",
	`ws_uri
(
pwsc
));

424  
	`∂ugö_auth_h™dÀ
(
pwsc
,
u£∫ame
,
∑ssw‹d
);

427 
	`DPRINTF
(
E_DBG
,
L_MAIN
,"Di•©chögáuth f‹ %†tÿc⁄figáuth\n",
	`ws_uri
(
pwsc
));

428  
	`c⁄fig_auth
(
pwsc
, 
u£∫ame
, 
∑ssw‹d
);

429 
	}
}

437 
	$ußge
(*
¥ogøm
) {

438 
	`¥ötf
("Ußge: %†[›ti⁄s]\n\n",
¥ogøm
);

439 
	`¥ötf
("Options:\n");

440 
	`¥ötf
(" -a Set cwdÅoápp dir before starting\n");

441 
	`¥ötf
(" -d <number> Debuglevel (0-9)\n");

442 
	`¥ötf
(" -D <mod,mod..> Debug modules\n");

443 
	`¥ötf
(" -m Disable mDNS\n");

444 
	`¥ötf
(" -c <file> Use configfile specified\n");

445 
	`¥ötf
(" -P <file> WriteÅhe PID ot specified file\n");

446 
	`¥ötf
(" -f Run in foreground\n");

447 
	`¥ötf
(" -y Yes, goáheadándÑunásÇon-root user\n");

448 
	`¥ötf
(" -b <id> ffidÅo be broadcast\n");

449 
	`¥ötf
(" -V Display version information\n");

450 
	`¥ötf
(" -k KilláÑunning daemon (based onÖidfile)\n");

451 
	`¥ötf
(" -u The codepage ofÅhe file\n");

452 
	`¥ötf
(" -i InterfaceÅhat will bindÅo it\n");

453 
	`¥ötf
("\n\n");

454 
	`¥ötf
("Valid debug modules:\n");

455 
	`¥ötf
(" config,webserver,database,scan,query,index,browse\n");

456 
	`¥ötf
("Ölaylist,art,daap,main,rend,misc\n");

457 
	`¥ötf
("\n\n");

458 
	}
}

465 
	$lﬂd_∂ugö_dú
(*
∂ugödú
) {

466 
DIR
 *
d_∂ugö
;

467 
de
[(
dúít
Ë+ 
MAXNAMLEN
 + 1];

468 
dúít
 *
pde
;

469 *
≥xt
;

470 *
≥º
=
NULL
;

471 
lﬂded
=
FALSE
;

472 
∂ugö
[
PATH_MAX
];

474 if((
d_∂ugö
=
	`›ídú
(
∂ugödú
)Ë=
NULL
) {

475 
	`DPRINTF
(
E_LOG
,
L_MAIN
,"Error openingÖlugin dir %s. Ignoring\n",

476 
∂ugödú
);

477  
FALSE
;

480 (
	`ªaddú_r
(
d_∂ugö
,(
dúít
 *)
de
,&
pde
) != 1) &&Öde) {

481 
≥xt
 = 
	`°ºchr
(
pde
->
d_«me
,'.');

482 if((
≥xt
Ë&& ((
	`°rˇ£cmp
(pext,".so") == 0) ||

483 (
	`°rˇ£cmp
(
≥xt
,".dylib") == 0) ||

484 (
	`°rˇ£cmp
(
≥xt
,".dll") == 0))) {

486 
	`¢¥ötf
(
∂ugö
,
PATH_MAX
,"%s%c%s",
∂ugödú
,

487 
PATHSEP
,
pde
->
d_«me
);

488 if(
	`∂ugö_lﬂd
(&
≥º
,
∂ugö
Ë!
PLUGIN_E_SUCCESS
) {

489 
	`DPRINTF
(
E_LOG
,
L_MAIN
,"ErrorÜoadingÖlugin %s: %s\n",

490 
∂ugö
,
≥º
);

491 
	`‰ì
(
≥º
);

492 
≥º
 = 
NULL
;

494 
lﬂded
 = 
TRUE
;

498 
	`˛o£dú
(
d_∂ugö
);

501  
lﬂded
;

502 
	}
}

510 
	$maö_io_îrh™dÀr
(
Àvñ
, *
msg
) {

511 
	`DPRINTF
(
Àvñ
,
L_MAIN
,"%s",
msg
);

512 
	}
}

520 
	$maö_ws_îrh™dÀr
(
Àvñ
, *
msg
) {

521 
	`DPRINTF
(
Àvñ
,
L_WS
,"%s",
msg
);

522 
	}
}

541 
	$maö
(
¨gc
, *
¨gv
[]) {

542 
›ti⁄
;

543 *
c⁄figfûe
=
CONFFILE
;

544 
WSCONFIG
 
ws_c⁄fig
;

545 
ªlﬂd
=0;

546 
°¨t_time
;

547 
íd_time
;

548 
ªsˇn_cou¡î
=0;

549 
ﬁd_s⁄g_cou¡
, 
s⁄g_cou¡
;

550 
f‹˚_n⁄_roŸ
=0;

551 
skù_öôül
=1;

552 
kûl_£rvî
=0;

553 
c⁄vît_c⁄f
=0;

554 *
db_ty≥
,*
db_∑rms
,*
web_roŸ
,*
ru«s
, *
tmp
;

555 **
mp3_dú_¨øy
;

556 *
£rvî«me
, *
iÁ˚
;

557 *
ffid
 = 
NULL
;

558 
≠pdú
 = 0;

559 *
≥º
=
NULL
;

560 
txåec‹d
[255];

561 *
ph™dÀ
;

562 *
∂ugödú
;

563 
îr
;

564 *
≠µ©h
;

565 
debugÀvñ
=0;

566 
∂ugös_lﬂded
 = 0;

567 
tŸÆ_mp3
 =0;

568 
sˇn_föish
=0;

569 
c⁄fig
.
u£_mdns
=1;

570 
	`îr_£éevñ
(2);

571 
c⁄fig
.
f‹eground
=0;

572 
˛ón_IPC
=0;

573 
£rvî_ªady
=0;

574 
£rvî_Êag_ã°
=0;

575 *
code_∑ge
=
NULL
;

577 (
›ti⁄
=
	`gë›t
(
¨gc
,
¨gv
,"D:d:c:P:i:mfrysi:u:vab:Vk")) != -1) {

578 
›ti⁄
) {

580 
≠pdú
 = 1;

584 
ffid
=
›èrg
;

588 
debugÀvñ
 = 
	`©oi
(
›èrg
);

589 
	`îr_£éevñ
(
debugÀvñ
);

593 if(
	`îr_£tdebugmask
(
›èrg
)) {

594 
	`ußge
(
¨gv
[0]);

595 
	`exô
(
EXIT_FAILURE
);

600 
c⁄fig
.
f‹eground
=1;

601 
	`îr_£tde°
(
	`îr_gëde°
(Ë| 
LOGDEST_STDERR
);

605 
c⁄figfûe
=
›èrg
;

609 
c⁄fig
.
u£_mdns
=0;

612 #i‚de‡
WIN32


614 
	`os_£t_pidfûe
(
›èrg
);

618 
ªlﬂd
=1;

622 
skù_öôül
=0;

626 
f‹˚_n⁄_roŸ
=1;

629 #ifde‡
WIN32


631 
	`os_ªgi°î
();

632 
	`exô
(
EXIT_SUCCESS
);

636 
	`os_uƒegi°î
();

637 
	`exô
(
EXIT_SUCCESS
);

641 
code_∑ge
=
›èrg
;

645 
c⁄vît_c⁄f
=1;

649 
kûl_£rvî
=1;

653 
	`Ârötf
(
°dîr
,"FúeÊy Medü Sîvî: Vîsi⁄ %s\n",
VERSION
);

654 
	`exô
(
EXIT_SUCCESS
);

658 
	`mem£t
(
devi˚_öf
, 0, (device_inf));

659 
	`°∫˝y
(
devi˚_öf
, 
›èrg
, 9);

660 
	`¥ötf
("%†%d\n",
devi˚_öf
,
__LINE__
);

664 
	`ußge
(
¨gv
[0]);

665 
	`exô
(
EXIT_FAILURE
);

670 if((
	`gëuid
()Ë&& (!
f‹˚_n⁄_roŸ
Ë&& (!
c⁄vît_c⁄f
)) {

671 
	`Ârötf
(
°dîr
,"YouáreÇotÑoot. This isálmost certainly wrong. "

674 
	`exô
(
EXIT_FAILURE
);

678 if(
kûl_£rvî
) {

679 
	`os_sig«l_£rvî
(
S_STOP
);

680 
	`exô
(0);

683 
	`io_öô
();

684 
	`io_£t_îrh™dÀr
(
maö_io_îrh™dÀr
);

685 
	`ws_£t_îrh™dÀr
(
maö_ws_îrh™dÀr
);

689 
c⁄fig
.
°©s
.
°¨t_time
=°¨t_time=()
	`time
(
NULL
);

690 
c⁄fig
.
°›
=0;

693 if(
≠pdú
) {

694 
≠µ©h
 = 
	`os_≠µ©h
(
¨gv
[0]);

695 
	`DPRINTF
(
E_INF
,
L_MAIN
,"Ch™gög cwdÅÿ%s\n",
≠µ©h
);

696 
	`chdú
(
≠µ©h
);

697 
	`‰ì
(
≠µ©h
);

698 
c⁄figfûe
="mt-daapd.conf";

701 if(
CONF_E_SUCCESS
 !
	`c⁄f_ªad
(
c⁄figfûe
)) {

702 
	`Ârötf
(
°dîr
,"Eº‹Ñódög c⁄fig fûê(%s)\n",
c⁄figfûe
);

703 
	`exô
(
EXIT_FAILURE
);

706 if(
debugÀvñ
)

707 
	`îr_£éevñ
(
debugÀvñ
);

709 if(
c⁄vît_c⁄f
) {

710 
	`Ârötf
(
°dîr
,"Converting config file...\n");

711 if(
CONF_E_SUCCESS
 !
	`c⁄f_wrôe
()) {

712 
	`Ârötf
(
°dîr
,"Error writing config file.\n");

713 
	`exô
(
EXIT_FAILURE
);

715 
	`exô
(
EXIT_SUCCESS
);

718 
	`DPRINTF
(
E_LOG
,
L_MAIN
,"Firefly Version %s: Starting with debuglevel %d\n",

719 
VERSION
,
	`îr_gëÀvñ
());

724 
	`∂ugö_öô
();

725 if((
∂ugödú
=
	`c⁄f_Æloc_°rög
("∂ugös","∂ugö_dú",
NULL
)) != NULL) {

728 if(!
	`lﬂd_∂ugö_dú
(
∂ugödú
)) {

729 
	`DPRINTF
(
E_LOG
,
L_MAIN
,"Warning: CouldÇotÜoadÖlugins\n");

731 
∂ugös_lﬂded
 = 
TRUE
;

733 
	`‰ì
(
∂ugödú
);

736 if(!
∂ugös_lﬂded
) {

737 if((!
	`lﬂd_∂ugö_dú
("/usr/lib/firefly/plugins")) &&

738 (!
	`lﬂd_∂ugö_dú
("/usr/lib/mt-daapd/plugins")) &&

739 (!
	`lﬂd_∂ugö_dú
("/lib/mt-daapd/plugins")) &&

740 (!
	`lﬂd_∂ugö_dú
("/lib/mt-daapd/plugins")) &&

741 (!
	`lﬂd_∂ugö_dú
("/usr/local/lib/mt-daapd/plugins")) &&

742 (!
	`lﬂd_∂ugö_dú
("/usr/local/lib/mt-daapd/plugins")) &&

743 (!
	`lﬂd_∂ugö_dú
("/opt/share/firefly/plugins")) &&

744 (!
	`lﬂd_∂ugö_dú
("/opt/share/mt-daapd/plugins")) &&

745 (!
	`lﬂd_∂ugö_dú
("/opt/lib/firefly/plugins")) &&

746 (!
	`lﬂd_∂ugö_dú
("/opt/lib/mt-daapd/plugins")) &&

747 (!
	`lﬂd_∂ugö_dú
("plugins/.libs"))) {

748 
	`DPRINTF
(
E_FATAL
,
L_MAIN
,"plugins/plugin_dirÇot specified\n");

752 
ph™dÀ
=
NULL
;

753 (
ph™dÀ
=
	`∂ugö_íum
(phandle))) {

754 
	`DPRINTF
(
E_LOG
,
L_MAIN
,"PlugöÜﬂded: %s\n",
	`∂ugö_gë_des¸ùti⁄
(
ph™dÀ
));

757 
ru«s
 = 
	`c⁄f_Æloc_°rög
("general","runas","nobody");

759 #i‚de‡
WITHOUT_MDNS


760 if(
c⁄fig
.
u£_mdns
) {

761 
	`DPRINTF
(
E_LOG
,
L_MAIN
,"StartingÑendezvous daemon\n");

762 if(
	`ªnd_öô
(
ru«s
)) {

763 
	`DPRINTF
(
E_FATAL
,
L_MAIN
|
L_REND
,"Error inÑend_init: %s\n",

764 
	`°ªº‹
(
î∫o
));

769 if(!
	`os_öô
(
c⁄fig
.
f‹eground
,
ru«s
)) {

770 
	`DPRINTF
(
E_LOG
,
L_MAIN
,"CouldÇot initialize server\n");

771 
	`os_deöô
();

772 
	`exô
(
EXIT_FAILURE
);

774 
	`‰ì
(
ru«s
);

776 #ifde‡
UPNP


777 
	`u≤p_öô
();

781 
db_ty≥
 = 
	`c⁄f_Æloc_°rög
("general","db_type","sqlite");

782 
db_∑rms
 = 
	`c⁄f_Æloc_°rög
("general","db_parms","/var/cache/mt-daapd");

783 
îr
=
	`db_›í
(&
≥º
,
db_ty≥
,
db_∑rms
);

785 if(
îr
) {

786 
	`DPRINTF
(
E_LOG
,
L_MAIN
|
L_DB
,"Eº‹ o≥nög db: %s\n",
≥º
);

787 #i‚de‡
WITHOUT_MDNS


788 if(
c⁄fig
.
u£_mdns
) {

789 
	`ªnd_°›
();

792 
	`os_deöô
();

793 
	`exô
(
EXIT_FAILURE
);

796 
	`‰ì
(
db_ty≥
);

797 
	`‰ì
(
db_∑rms
);

800 
	`DPRINTF
(
E_LOG
,
L_MAIN
|
L_DB
,"Initializing database\n");

801 if(
	`db_öô
(
ªlﬂd
)) {

802 
	`DPRINTF
(
E_FATAL
,
L_MAIN
|
L_DB
,"Eº‹ i¿db_öô: %s\n",
	`°ªº‹
(
î∫o
));

805 
îr
=
	`db_gë_s⁄g_cou¡
(&
≥º
,&
s⁄g_cou¡
);

806 if(
îr
 !
DB_E_SUCCESS
) {

807 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"Eº‹ gëtög s⁄g cou¡: %s\n",
≥º
);

810 if(!
s⁄g_cou¡
)

811 
ªlﬂd
 = 1;

814 if(!
s⁄g_cou¡
){

816 
	`c⁄f_gë_¨øy
("gíîÆ","mp3_dú",&
mp3_dú_¨øy
);

817 
tŸÆ_mp3
 = 
	`gë_mp3_cou¡
(
mp3_dú_¨øy
[0]);

818 
	`¥ötf
("tŸÆ mp3=%d\n",
tŸÆ_mp3
);

819 if(
tŸÆ_mp3
 == 0){

820 
sˇn_föish
 = 1;

824 
ªlﬂd
 = 1;

829 
sˇn_föish
=1;

833 if(
	`c⁄f_gë_¨øy
("gíîÆ","mp3_dú",&
mp3_dú_¨øy
)) {

834 if((!
skù_öôül
Ë|| (
ªlﬂd
)) {

835 
	`DPRINTF
(
E_LOG
,
L_MAIN
|
L_SCAN
,"Starting mp3 scan\n");

836 
	`∂ugö_evít_di•©ch
(
PLUGIN_EVENT_FULLSCAN_START
,0,
NULL
,0);

837 
°¨t_time
=(Ë
	`time
(
NULL
);

838 if(
	`sˇn_öô
(
mp3_dú_¨øy
,
code_∑ge
)) {

839 
	`DPRINTF
(
E_LOG
,
L_MAIN
|
L_SCAN
,"Eº‹ sˇ¬ög MP3 fûes: %s\n",
	`°ªº‹
(
î∫o
));

841 if(!
c⁄fig
.
°›
) {

842 
	`∂ugö_evít_di•©ch
(
PLUGIN_EVENT_FULLSCAN_END
,0,
NULL
,0);

843 
îr
=
	`db_gë_s⁄g_cou¡
(&
≥º
,&
s⁄g_cou¡
);

844 
íd_time
=(Ë
	`time
(
NULL
);

845 
	`DPRINTF
(
E_LOG
,
L_MAIN
|
L_SCAN
,"Scanned %d songs in %d seconds\n",

846 
s⁄g_cou¡
,
íd_time
 - 
°¨t_time
);

849 
sˇn_föish
=1;

853 
	`c⁄f_di•o£_¨øy
(
mp3_dú_¨øy
);

857 
web_roŸ
 = 
	`c⁄f_Æloc_°rög
("gíîÆ","web_roŸ",
NULL
);

858 
ws_c⁄fig
.
web_roŸ
=web_root;

859 
ws_c⁄fig
.
p‹t
=
	`c⁄f_gë_öt
("general","port",0);

861 
	`DPRINTF
(
E_LOG
,
L_MAIN
|
L_WS
,"Starting web server from %s onÖort %d\n",

862 
ws_c⁄fig
.
web_roŸ
, ws_c⁄fig.
p‹t
);

864 
c⁄fig
.
£rvî
=
	`ws_öô
(&
ws_c⁄fig
);

865 if(!
c⁄fig
.
£rvî
) {

867 
	`DPRINTF
(
E_FATAL
,
L_MAIN
|
L_WS
,"Error initializing web server\n");

870 if(
E_WS_SUCCESS
 !
	`ws_°¨t
(
c⁄fig
.
£rvî
)) {

872 
	`DPRINTF
(
E_FATAL
,
L_MAIN
|
L_WS
,"Error starting web server\n");

875 
	`ws_ªgi°îh™dÀr
(
c⁄fig
.
£rvî
, "/",
maö_h™dÀr
,
maö_auth
,

878 #i‚de‡
WITHOUT_MDNS


879 if(
c⁄fig
.
u£_mdns
) {

880 
£rvî«me
 = 
	`c⁄f_gë_£rvî«me
();

882 
	`mem£t
(
txåec‹d
,0,(txtrecord));

883 
	`txt_add
(
txåec‹d
,"txtvers=1");

884 
	`txt_add
(
txåec‹d
,"D©aba£ ID=%0X",
	`utû_djb_hash_°r
(
£rvî«me
));

885 
	`txt_add
(
txåec‹d
,"MachöêID=%0X",
	`utû_djb_hash_°r
(
£rvî«me
));

886 
	`txt_add
(
txåec‹d
,"MachöêName=%s",
£rvî«me
);

887 
	`txt_add
(
txåec‹d
,"mtd-vîsi⁄=" 
VERSION
);

888 
	`txt_add
(
txåec‹d
,"iTSh Version=131073");

889 
	`txt_add
(
txåec‹d
,"Version=196610");

890 
tmp
 = 
	`c⁄f_Æloc_°rög
("gíîÆ","∑ssw‹d",
NULL
);

891 if(
tmp
 && (
	`°æí
—mp)==0)Ëtmp=
NULL
;

893 
	`txt_add
(
txåec‹d
,"Passw‹d=%s",
tmp
 ? "true" : "false");

894 if(
tmp
Ë
	`‰ì
(tmp);

896 
	`§™d
(()
	`time
(
NULL
));

898 if(
ffid
) {

899 
	`txt_add
(
txåec‹d
,"ffid=%s",
ffid
);

901 
	`txt_add
(
txåec‹d
,"ffid=%08x",
	`ønd
());

904 
	`DPRINTF
(
E_LOG
,
L_MAIN
|
L_REND
,"RegisteringÑendezvousÇames\n");

905 
iÁ˚
 = 
	`c⁄f_Æloc_°rög
("general","interface","");

907 
	`ªnd_ªgi°î
(
£rvî«me
,"_hâp._t˝",
ws_c⁄fig
.
p‹t
,
iÁ˚
,
txåec‹d
);

909 
	`∂ugö_ªnd_ªgi°î
(
£rvî«me
,
ws_c⁄fig
.
p‹t
,
iÁ˚
,
txåec‹d
);

911 
	`‰ì
(
£rvî«me
);

912 
	`‰ì
(
iÁ˚
);

916 
íd_time
=(Ë
	`time
(
NULL
);

918 
îr
=
	`db_gë_s⁄g_cou¡
(&
≥º
,&
s⁄g_cou¡
);

919 if(
îr
 !
DB_E_SUCCESS
) {

920 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"Eº‹ gëtög s⁄g cou¡: %s\n",
≥º
);

923 
	`DPRINTF
(
E_LOG
,
L_MAIN
,"Serving %d songs. Startup complete in %d seconds\n",

924 
s⁄g_cou¡
,
íd_time
-
°¨t_time
);

927 
£rvî_ªady
 = 1;

929 if(
	`c⁄f_gë_öt
("gíîÆ","ªsˇn_öãrvÆ",0Ë&& (!
ªlﬂd
) &&

930 (!
	`c⁄f_gë_öt
("scanning","skip_first",0)))

931 
c⁄fig
.
ªlﬂd
 = 1;

933 !
c⁄fig
.
°›
) {

934 if–(
	`c⁄f_gë_öt
("general", "rescan_interval", 0) &&

935 (
ªsˇn_cou¡î
 > 
	`c⁄f_gë_öt
("general", "rescan_interval", 0)) )) {

936 if((
	`c⁄f_gë_öt
("gíîÆ","Æways_sˇn",0)Ë|| (
	`c⁄fig_gë_£ssi⁄_cou¡
())) {

937 
c⁄fig
.
ªlﬂd
=1;

940 
	`DPRINTF
(
E_DBG
,
L_MAIN
|
L_SCAN
|
L_DB
,"Skipped bground scan...Ço users\n");

942 
ªsˇn_cou¡î
=0;

944 if(
c⁄fig
.
ªlﬂd
) {

946 
ﬁd_s⁄g_cou¡
 = 
s⁄g_cou¡
;

947 
°¨t_time
=(Ë
	`time
(
NULL
);

948 
	`DPRINTF
(
E_LOG
,
L_MAIN
|
L_DB
|
L_SCAN
,"Rescanning database\n");

949 
	`db_öô
(1);

950 if(
	`c⁄f_gë_¨øy
("gíîÆ","mp3_dú",&
mp3_dú_¨øy
)) {

954 if(
c⁄fig
.
fuŒ_ªlﬂd
) {

955 
c⁄fig
.
fuŒ_ªlﬂd
=0;

956 
	`db_f‹˚_ªsˇn
(
NULL
);

957 
c⁄fig
.
ªlﬂd
=0;

961 if(
	`sˇn_öô
(
mp3_dú_¨øy
,
code_∑ge
)) {

962 
	`DPRINTF
(
E_LOG
,
L_MAIN
|
L_DB
|
L_SCAN
,"ErrorÑescanning... badÖath?\n");

964 
	`c⁄f_di•o£_¨øy
(
mp3_dú_¨øy
);

966 
c⁄fig
.
ªlﬂd
=0;

967 
	`db_gë_s⁄g_cou¡
(
NULL
,&
s⁄g_cou¡
);

968 
	`DPRINTF
(
E_LOG
,
L_MAIN
|
L_DB
|
L_SCAN
,"Scanned %d songs (was %d) in "

969 "%d sec⁄ds\n",
s⁄g_cou¡
,
ﬁd_s⁄g_cou¡
,

970 
	`time
(
NULL
)-
°¨t_time
);

973 
sˇn_föish
=1;

977 
	`os_waô
(
MAIN_SLEEP_INTERVAL
);

978 
ªsˇn_cou¡î
 +
MAIN_SLEEP_INTERVAL
;

981 
	`DPRINTF
(
E_LOG
,
L_MAIN
,"Stopping gracefully\n");

983 #i‚de‡
WITHOUT_MDNS


984 if(
c⁄fig
.
u£_mdns
) {

985 
	`DPRINTF
(
E_LOG
,
L_MAIN
|
L_REND
,"StoppingÑendezvous daemon\n");

986 
	`ªnd_°›
();

990 #ifde‡
UPNP


991 
	`u≤p_deöô
();

1002 
	`‰ì
(
web_roŸ
);

1003 
	`c⁄f_˛o£
();

1005 
	`DPRINTF
(
E_LOG
,
L_MAIN
|
L_DB
,"Closing database\n");

1006 
	`db_deöô
();

1008 
	`DPRINTF
(
E_LOG
,
L_MAIN
,"Done!\n");

1010 
	`os_deöô
();

1011 
	`io_deöô
();

1012 
	`mem_dump
();

1013  
EXIT_SUCCESS
;

1014 
	}
}

	@mdns/DNSCommon.c

354 
	#mDNS_In°™tüãI∆öes
 1

	)

355 
	~"DNSComm⁄.h
"

358 #i‡(
deföed
(
_MSC_VER
))

362 #¥agm®
w¨nög
(
dißbÀ
:4127)

365 #¥agm®
w¨nög
(
dißbÀ
:4295)

369 #i‡
COMPILER_LIKES_PRAGMA_MARK


370 #¥agm®
m¨k
 -

371 #¥agm®
m¨k
 - 
DNameLi°
 
c›y
/
dóŒoˇti⁄
 
routöes


374 
mDNSexp‹t
 
DNameLi°EÀm
 *
	$mDNS_C›yDNameLi°
(c⁄° 
DNameLi°EÀm
 *
‹ig
)

376 
DNameLi°EÀm
 *
c›y
 = 
mDNSNULL
, *
√wñem
;

377 c⁄° 
DNameLi°EÀm
 *
±r
;

379 
±r
 = 
‹ig
;Öå;Öå =Öå->
√xt
)

381 
√wñem
 = (
DNameLi°EÀm
*)
	`mDNSPœtf‹mMemAŒoˇã
((DNameListElem));

382 i‡(!
√wñem
Ë{ 
	`LogMsg
("ERROR: mÆloc");  
mDNSNULL
; }

383 
	`AssignDomaöName
(&
√wñem
->
«me
, &
±r
->name);

384 
√wñem
->
√xt
 = 
c›y
;

385 
c›y
 = 
√wñem
;

387  
c›y
;

388 
	}
}

390 
mDNSexp‹t
 
	$mDNS_FªeDNameLi°
(
DNameLi°EÀm
 *
li°
)

392 
DNameLi°EÀm
 *
Âå
;

394 
li°
)

396 
Âå
 = 
li°
;

397 
li°
 =Üi°->
√xt
;

398 
	`mDNSPœtf‹mMemFªe
(
Âå
);

400 
	}
}

403 #i‡
COMPILER_LIKES_PRAGMA_MARK


404 #¥agm®
m¨k
 -

405 #¥agm®
m¨k
 - 
GíîÆ
 
Utûôy
 
Fun˘i⁄s


409 
mDNSexp‹t
 
mDNSBoﬁ
 
	$IsPriv©eV4Addr
(
mDNSAddr
 *
addr
)

411 
mDNSu8
 *
b
;

413 i‡(
addr
->
ty≥
 !
mDNSAddrTy≥_IPv4
Ë 
mDNSÁl£
;

414 
b
 = 
addr
->
ù
.
v4
.b;

416  ((
b
[0] == 10) ||

417 (
b
[0] == 172 && b[1] > 15 && b[1] < 32) ||

418 (
b
[0] == 192 && b[1] == 168));

419 
	}
}

421 
mDNSexp‹t
 c⁄° 
Nëw‹kI¡îÁ˚Info
 *
	$GëFú°A˘iveI¡îÁ˚
(c⁄° 
Nëw‹kI¡îÁ˚Info
 *
ötf
)

423 
ötf
 && !ötf->
I¡îÁ˚A˘ive
Ëöt‡ötf->
√xt
;

424 (
ötf
);

425 
	}
}

427 
mDNSexp‹t
 
mDNSI¡îÁ˚ID
 
	$GëNextA˘iveI¡îÁ˚ID
(c⁄° 
Nëw‹kI¡îÁ˚Info
 *
ötf
)

429 c⁄° 
Nëw‹kI¡îÁ˚Info
 *
√xt
 = 
	`GëFú°A˘iveI¡îÁ˚
(
ötf
->next);

430 i‡(
√xt
Ë“ext->
I¡îÁ˚ID
); (
mDNSNULL
);

431 
	}
}

433 
mDNSexp‹t
 
mDNSu32
 
	$NumCacheRec‹dsF‹I¡îÁ˚ID
(c⁄° 
mDNS
 *c⁄° 
m
, 
mDNSI¡îÁ˚ID
 
id
)

435 
mDNSu32
 
¶Ÿ
, 
u£d
 = 0;

436 
CacheGroup
 *
cg
;

437 
CacheRec‹d
 *
º
;

438 
	`FORALL_CACHERECORDS
(
¶Ÿ
, 
cg
, 
º
)

439 i‡(
º
->
ª§ec
.
I¡îÁ˚ID
 =
id
Ë
u£d
++;

440 (
u£d
);

441 
	}
}

443 
mDNSexp‹t
 *
	$DNSTy≥Name
(
mDNSu16
 
ºty≥
)

445 
ºty≥
)

447 
kDNSTy≥_A
: ("Addr");

448 
kDNSTy≥_NS
: ("NS");

449 
kDNSTy≥_CNAME
:("CNAME");

450 
kDNSTy≥_SOA
: ("SOA");

451 
kDNSTy≥_NULL
: ("NULL");

452 
kDNSTy≥_PTR
: ("PTR");

453 
kDNSTy≥_HINFO
:("HINFO");

454 
kDNSTy≥_TXT
: ("TXT");

455 
kDNSTy≥_AAAA
: ("AAAA");

456 
kDNSTy≥_SRV
: ("SRV");

457 
kDNSQTy≥_ANY
: ("ANY");

459 
buf„r
[16];

460 
	`mDNS_¢¥ötf
(
buf„r
, (buf„r), "(%d)", 
ºty≥
);

461 (
buf„r
);

464 
	}
}

469 
mDNSexp‹t
 *
	$GëRRDi•œySåög_rdb
(c⁄° 
Resour˚Rec‹d
 *
º
, 
RD©aBody
 *
rd
, *
buf„r
)

471 
	#Max
 (
MaxMsg
-1)

	)

472 *
±r
 = 
buf„r
;

473 
mDNSu32
 
Àngth
 = 
	`mDNS_¢¥ötf
(
buf„r
, 
Max
, "%4d %##†%†", 
º
->
rdÀngth
,Ñr->
«me
->
c
, 
	`DNSTy≥Name
‘r->
ºty≥
));

474 
º
->
ºty≥
)

476 
kDNSTy≥_A
: 
	`mDNS_¢¥ötf
(
buf„r
+
Àngth
, 
Max
-Àngth, "%.4a", &
rd
->
ùv4
); ;

478 
kDNSTy≥_NS
:

479 
kDNSTy≥_CNAME
:

480 
kDNSTy≥_PTR
: 
	`mDNS_¢¥ötf
(
buf„r
+
Àngth
, 
Max
-Àngth, "%##s", 
rd
->
«me
.
c
); ;

482 
kDNSTy≥_HINFO
:

483 
kDNSTy≥_TXT
: 
	`mDNS_¢¥ötf
(
buf„r
+
Àngth
, 
Max
-Àngth, "%#s", 
rd
->
txt
.
c
); ;

485 
kDNSTy≥_AAAA
: 
	`mDNS_¢¥ötf
(
buf„r
+
Àngth
, 
Max
-Àngth, "%.16a", &
rd
->
ùv6
); ;

486 
kDNSTy≥_SRV
: 
	`mDNS_¢¥ötf
(
buf„r
+
Àngth
, 
Max
-length, "%u %u %u %##s",

487 
rd
->
§v
.
¥i‹ôy
,Ñd->§v.
weight
, 
	`mDNSVÆ16
‘d->§v.
p‹t
),Ñd->§v.
èrgë
.
c
); ;

488 : 
	`mDNS_¢¥ötf
(
buf„r
+
Àngth
, 
Max
-Àngth, "RDLí %d: %s", 
º
->
rdÀngth
, 
rd
->
d©a
); ;

490 
±r
 = 
buf„r
; *ptr;Ötr++) if (*ptr < ' ') *ptr='.';

491 (
buf„r
);

492 
	}
}

494 
mDNSexp‹t
 
mDNSu32
 
	$mDNSR™dom
(
mDNSu32
 
max
)

496 
mDNSu32
 
£ed
 = 0;

497 
mDNSu32
 
mask
 = 1;

499 i‡(!
£ed
)

501 
i
;

502 
£ed
 = 
	`mDNSPœtf‹mR™domSìd
();

503 
i
=0; i<100; i++Ë
£ed
 = seed * 21 + 1;

505 
mask
 < 
max
) mask = (mask << 1) | 1;

506 dÿ
£ed
 = sìd * 21 + 1; (£ed & 
mask
Ë> 
max
);

507  (
£ed
 & 
mask
);

508 
	}
}

510 
mDNSexp‹t
 
mDNSu32
 
	$mDNSR™domFromFixedSìd
(
mDNSu32
 
£ed
, mDNSu32 
max
)

512 
mDNSu32
 
mask
 = 1;

513 
mask
 < 
max
) mask = (mask << 1) | 1;

514 dÿ
£ed
 = sìd * 21 + 1; (£ed & 
mask
Ë> 
max
);

515  (
£ed
 & 
mask
);

516 
	}
}

518 
mDNSexp‹t
 
mDNSBoﬁ
 
	$mDNSSameAddªss
(c⁄° 
mDNSAddr
 *
ù1
, c⁄° mDNSAdd∏*
ù2
)

520 i‡(
ù1
->
ty≥
 =
ù2
->type)

522 
ù1
->
ty≥
)

524 
mDNSAddrTy≥_N⁄e
 : (
mDNSåue
);

525 
mDNSAddrTy≥_IPv4
 : (
mDNSBoﬁ
)(
	`mDNSSameIPv4Addªss
(
ù1
->
ù
.
v4
, 
ù2
->ip.v4));

526 
mDNSAddrTy≥_IPv6
 : (
mDNSBoﬁ
)(
	`mDNSSameIPv6Addªss
(
ù1
->
ù
.
v6
, 
ù2
->ip.v6));

529 (
mDNSÁl£
);

530 
	}
}

532 
mDNSexp‹t
 
mDNSBoﬁ
 
	$mDNSAddrIsDNSMu…iˇ°
(c⁄° 
mDNSAddr
 *
ù
)

534 
ù
->
ty≥
)

536 
mDNSAddrTy≥_IPv4
: (
mDNSBoﬁ
)(
ù
->ù.
v4
.
NŸAnI¡egî
 =
AŒDNSLökGroupv4
.NotAnInteger);

537 
mDNSAddrTy≥_IPv6
: (
mDNSBoﬁ
)(
ù
->ù.
v6
.
l
[0] =
AŒDNSLökGroupv6
.l[0] &&

538 
ù
->ù.
v6
.
l
[1] =
AŒDNSLökGroupv6
.l[1] &&

539 
ù
->ù.
v6
.
l
[2] =
AŒDNSLökGroupv6
.l[2] &&

540 
ù
->ù.
v6
.
l
[3] =
AŒDNSLökGroupv6
.l[3] );

541 : (
mDNSÁl£
);

543 
	}
}

546 #i‡
COMPILER_LIKES_PRAGMA_MARK


547 #¥agm®
m¨k
 -

548 #¥agm®
m¨k
 - 
Domaö
 
Name
 
Utûôy
 
Fun˘i⁄s


551 
mDNSexp‹t
 
mDNSBoﬁ
 
	$SameDomaöLabñ
(c⁄° 
mDNSu8
 *
a
, c⁄° mDNSu8 *
b
)

553 
i
;

554 c⁄° 
Àn
 = *
a
++;

556 i‡(
Àn
 > 
MAX_DOMAIN_LABEL
)

557 { 
	`debugf
("MÆf‹medÜabñ (toÿl⁄g)"); (
mDNSÁl£
); }

559 i‡(
Àn
 !*
b
++Ë(
mDNSÁl£
);

560 
i
=0; i<
Àn
; i++)

562 
mDNSu8
 
ac
 = *
a
++;

563 
mDNSu8
 
bc
 = *
b
++;

564 i‡(
	`mDNSIsUµîCa£
(
ac
))ác += 'a' - 'A';

565 i‡(
	`mDNSIsUµîCa£
(
bc
)) bc += 'a' - 'A';

566 i‡(
ac
 !
bc
Ë(
mDNSÁl£
);

568 (
mDNSåue
);

569 
	}
}

571 
mDNSexp‹t
 
mDNSBoﬁ
 
	$SameDomaöName
(c⁄° 
domaö«me
 *c⁄° 
d1
, c⁄° domaö«mê*c⁄° 
d2
)

573 c⁄° 
mDNSu8
 * 
a
 = 
d1
->
c
;

574 c⁄° 
mDNSu8
 * 
b
 = 
d2
->
c
;

575 c⁄° 
mDNSu8
 *c⁄° 
max
 = 
d1
->
c
 + 
MAX_DOMAIN_NAME
;

577 *
a
 || *
b
)

579 i‡(
a
 + 1 + *®>
max
)

580 { 
	`debugf
("MÆf‹med domaöÇamê(m‹êth™ 255 ch¨a˘îs)"); (
mDNSÁl£
); }

581 i‡(!
	`SameDomaöLabñ
(
a
, 
b
)Ë(
mDNSÁl£
);

582 
a
 += 1 + *a;

583 
b
 += 1 + *b;

586 (
mDNSåue
);

587 
	}
}

589 
mDNSexp‹t
 
mDNSBoﬁ
 
	$IsLoˇlDomaö
(c⁄° 
domaö«me
 *
d
)

593 c⁄° 
domaö«me
 *
nL
 = (domainname*)"\x5" "local";

594 c⁄° 
domaö«me
 *
nR
 = (domainname*)"\x3" "254" "\x3" "169" "\x7" "in-addr" "\x4" "arpa";

595 c⁄° 
domaö«me
 *
n8
 = (domainname*)"\x1" "8" "\x1" "e" "\x1" "f" "\x3" "ip6" "\x4" "arpa";

596 c⁄° 
domaö«me
 *
n9
 = (domainname*)"\x1" "9" "\x1" "e" "\x1" "f" "\x3" "ip6" "\x4" "arpa";

597 c⁄° 
domaö«me
 *
nA
 = (domainname*)"\x1" "a" "\x1" "e" "\x1" "f" "\x3" "ip6" "\x4" "arpa";

598 c⁄° 
domaö«me
 *
nB
 = (domainname*)"\x1" "b" "\x1" "e" "\x1" "f" "\x3" "ip6" "\x4" "arpa";

600 c⁄° 
domaö«me
 *
d1
, *
d2
, *
d3
, *
d4
, *
d5
, *
d6
;

601 
d1
 = 
d2
 = 
d3
 = 
d4
 = 
d5
 = 
d6
 = 
mDNSNULL
;

602 
d
->
c
[0])

604 
d6
 = 
d5
; d5 = 
d4
; d4 = 
d3
; d3 = 
d2
; d2 = 
d1
; d1 = 
d
;

605 
d
 = (
domaö«me
*)(d->
c
 + 1 + d->c[0]);

608 i‡(
d1
 && 
	`SameDomaöName
(d1, 
nL
)Ë(
mDNSåue
);

609 i‡(
d4
 && 
	`SameDomaöName
(d4, 
nR
)Ë(
mDNSåue
);

610 i‡(
d6
 && 
	`SameDomaöName
(d6, 
n8
)Ë(
mDNSåue
);

611 i‡(
d6
 && 
	`SameDomaöName
(d6, 
n9
)Ë(
mDNSåue
);

612 i‡(
d6
 && 
	`SameDomaöName
(d6, 
nA
)Ë(
mDNSåue
);

613 i‡(
d6
 && 
	`SameDomaöName
(d6, 
nB
)Ë(
mDNSåue
);

614 (
mDNSÁl£
);

615 
	}
}

622 
mDNSexp‹t
 
mDNSu16
 
	$DomaöNameLígth
(c⁄° 
domaö«me
 *c⁄° 
«me
)

624 c⁄° 
mDNSu8
 *
§c
 = 
«me
->
c
;

625 *
§c
)

627 i‡(*
§c
 > 
MAX_DOMAIN_LABEL
Ë(
MAX_DOMAIN_NAME
+1);

628 
§c
 += 1 + *src;

629 i‡(
§c
 - 
«me
->
c
 >
MAX_DOMAIN_NAME
) (MAX_DOMAIN_NAME+1);

631 ((
mDNSu16
)(
§c
 - 
«me
->
c
 + 1));

632 
	}
}

643 
mDNSexp‹t
 
mDNSu16
 
	$Com¥es£dDomaöNameLígth
(c⁄° 
domaö«me
 *c⁄° 
«me
, c⁄° domaö«mê*
∑ª¡
)

645 c⁄° 
mDNSu8
 *
§c
 = 
«me
->
c
;

646 i‡(
∑ª¡
 &&Ö¨ít->
c
[0] =0Ë∑ª¡ = 
mDNSNULL
;

647 *
§c
)

649 i‡(*
§c
 > 
MAX_DOMAIN_LABEL
Ë(
MAX_DOMAIN_NAME
+1);

650 i‡(
∑ª¡
 && 
	`SameDomaöName
((
domaö«me
 *)
§c
,Ö¨ít)Ë((
mDNSu16
)(§¯- 
«me
->
c
 + 2));

651 
§c
 += 1 + *src;

652 i‡(
§c
 - 
«me
->
c
 >
MAX_DOMAIN_NAME
) (MAX_DOMAIN_NAME+1);

654 ((
mDNSu16
)(
§c
 - 
«me
->
c
 + 1));

655 
	}
}

664 
mDNSexp‹t
 
mDNSu8
 *
	$AµídLôîÆLabñSåög
(
domaö«me
 *c⁄° 
«me
, c⁄° *
c°r
)

666 
mDNSu8
 * 
±r
 = 
«me
->
c
 + 
	`DomaöNameLígth
(name) - 1;

667 c⁄° 
mDNSu8
 *c⁄° 
lim1
 = 
«me
->
c
 + 
MAX_DOMAIN_NAME
 - 1;

668 c⁄° 
mDNSu8
 *c⁄° 
lim2
 = 
±r
 + 1 + 
MAX_DOMAIN_LABEL
;

669 c⁄° 
mDNSu8
 *c⁄° 
lim
 = (
lim1
 < 
lim2
) ?Üim1 :Üim2;

670 
mDNSu8
 *
Àngthbyã
 = 
±r
++;

672 *
c°r
 && 
±r
 < 
lim
Ë*±r++ = (
mDNSu8
)*cstr++;

673 *
Àngthbyã
 = (
mDNSu8
)(
±r
 -Üengthbyte - 1);

674 *
±r
++ = 0;

675 i‡(*
c°r
Ë(
mDNSNULL
);

676 (
±r
);

677 
	}
}

686 
mDNSexp‹t
 
mDNSu8
 *
	$AµídDNSNameSåög
(
domaö«me
 *c⁄° 
«me
, c⁄° *
c°rög
)

688 c⁄° *
c°r
 = 
c°rög
;

689 
mDNSu8
 * 
±r
 = 
«me
->
c
 + 
	`DomaöNameLígth
(name) - 1;

690 c⁄° 
mDNSu8
 *c⁄° 
lim
 = 
«me
->
c
 + 
MAX_DOMAIN_NAME
 - 1;

691 *
c°r
 && 
±r
 < 
lim
)

693 
mDNSu8
 *
Àngthbyã
 = 
±r
++;

694 i‡(*
c°r
 ='.'Ë{ 
	`LogMsg
("AµídDNSNameSåög: IŒegÆÉm±yÜabñ i¿«mê\"%s\"", 
c°rög
); (
mDNSNULL
); }

695 *
c°r
 && *c°∏!'.' && 
±r
 < 
lim
)

697 
mDNSu8
 
c
 = (mDNSu8)*
c°r
++;

698 i‡(
c
 == '\\')

700 
c
 = (
mDNSu8
)*
c°r
++;

701 i‡(
	`mdnsIsDigô
(
c°r
[-1]) && mdnsIsDigit(cstr[0]) && mdnsIsDigit(cstr[1]))

703 
v0
 = 
c°r
[-1] - '0';

704 
v1
 = 
c°r
[ 0] - '0';

705 
v2
 = 
c°r
[ 1] - '0';

706 
vÆ
 = 
v0
 * 100 + 
v1
 * 10 + 
v2
;

707 i‡(
vÆ
 <255Ë{ 
c
 = (
mDNSu8
)vÆ; 
c°r
 += 2; }

710 *
±r
++ = 
c
;

712 i‡(*
c°r
) cstr++;

713 i‡(
±r
 - 
Àngthbyã
 - 1 > 
MAX_DOMAIN_LABEL
)

714 (
mDNSNULL
);

715 *
Àngthbyã
 = (
mDNSu8
)(
±r
 -Üengthbyte - 1);

718 *
±r
++ = 0;

719 i‡(*
c°r
Ë(
mDNSNULL
);

720 (
±r
);

721 
	}
}

728 
mDNSexp‹t
 
mDNSu8
 *
	$AµídDomaöLabñ
(
domaö«me
 *c⁄° 
«me
, c⁄° 
domaöœbñ
 *c⁄° 
œbñ
)

730 
i
;

731 
mDNSu8
 *
±r
 = 
«me
->
c
 + 
	`DomaöNameLígth
(name) - 1;

734 i‡(
œbñ
->
c
[0] > 
MAX_DOMAIN_LABEL
Ë(
mDNSNULL
);

737 i‡(
±r
 + 1 + 
œbñ
->
c
[0] + 1 > 
«me
->¯+ 
MAX_DOMAIN_NAME
Ë(
mDNSNULL
);

739 
i
=0; i<=
œbñ
->
c
[0]; i++Ë*
±r
++ =Üabel->c[i];

740 *
±r
++ = 0;

741 (
±r
);

742 
	}
}

744 
mDNSexp‹t
 
mDNSu8
 *
	$AµídDomaöName
(
domaö«me
 *c⁄° 
«me
, c⁄° domaö«mê*c⁄° 
≠≥nd
)

746 
mDNSu8
 * 
±r
 = 
«me
->
c
 + 
	`DomaöNameLígth
(name) - 1;

747 c⁄° 
mDNSu8
 *c⁄° 
lim
 = 
«me
->
c
 + 
MAX_DOMAIN_NAME
 - 1;

748 c⁄° 
mDNSu8
 * 
§c
 = 
≠≥nd
->
c
;

749 
§c
[0])

751 
i
;

752 i‡(
±r
 + 1 + 
§c
[0] > 
lim
Ë(
mDNSNULL
);

753 
i
=0; i<=
§c
[0]; i++Ë*
±r
++ = src[i];

754 *
±r
 = 0;

755 
§c
 +
i
;

757 (
±r
);

758 
	}
}

766 
mDNSexp‹t
 
mDNSBoﬁ
 
	$MakeDomaöLabñFromLôîÆSåög
(
domaöœbñ
 *c⁄° 
œbñ
, c⁄° *
c°r
)

768 
mDNSu8
 * 
±r
 = 
œbñ
->
c
 + 1;

769 c⁄° 
mDNSu8
 *c⁄° 
limô
 = 
œbñ
->
c
 + 1 + 
MAX_DOMAIN_LABEL
;

770 *
c°r
 && 
±r
 < 
limô
Ë*±r++ = (
mDNSu8
)*cstr++;

771 
œbñ
->
c
[0] = (
mDNSu8
)(
±r
 -Üabel->c - 1);

772 (*
c°r
 == 0);

773 
	}
}

782 
mDNSexp‹t
 
mDNSu8
 *
	$MakeDomaöNameFromDNSNameSåög
(
domaö«me
 *c⁄° 
«me
, c⁄° *
c°r
)

784 
«me
->
c
[0] = 0;

785 (
	`AµídDNSNameSåög
(
«me
, 
c°r
));

786 
	}
}

788 
mDNSexp‹t
 *
	$C⁄vîtDomaöLabñToCSåög_wôhesˇ≥
(c⁄° 
domaöœbñ
 *c⁄° 
œbñ
, *
±r
, 
esc
)

790 c⁄° 
mDNSu8
 * 
§c
 = 
œbñ
->
c
;

791 c⁄° 
mDNSu8
 
Àn
 = *
§c
++;

792 c⁄° 
mDNSu8
 *c⁄° 
íd
 = 
§c
 + 
Àn
;

793 i‡(
Àn
 > 
MAX_DOMAIN_LABEL
Ë(
mDNSNULL
);

794 
§c
 < 
íd
)

796 
mDNSu8
 
c
 = *
§c
++;

797 i‡(
esc
)

799 i‡(
c
 ='.' || c =
esc
)

800 *
±r
++ = 
esc
;

801 i‡(
c
 <= ' ')

803 *
±r
++ = 
esc
;

804 *
±r
++ = (Ë('0' + (
c
 / 100) );

805 *
±r
++ = (Ë('0' + (
c
 / 10) % 10);

806 
c
 = (
mDNSu8
)('0' + (c ) % 10);

809 *
±r
++ = ()
c
;

811 *
±r
 = 0;

812 (
±r
);

813 
	}
}

816 
mDNSexp‹t
 *
	$C⁄vîtDomaöNameToCSåög_wôhesˇ≥
(c⁄° 
domaö«me
 *c⁄° 
«me
, *
±r
, 
esc
)

818 c⁄° 
mDNSu8
 *
§c
 = 
«me
->
c
;

819 c⁄° 
mDNSu8
 *c⁄° 
max
 = 
«me
->
c
 + 
MAX_DOMAIN_NAME
;

821 i‡(*
§c
 =0Ë*
±r
++ = '.';

823 *
§c
)

825 i‡(
§c
 + 1 + *§¯>
max
Ë(
mDNSNULL
);

826 
±r
 = 
	`C⁄vîtDomaöLabñToCSåög_wôhesˇ≥
((c⁄° 
domaöœbñ
 *)
§c
,Öå, 
esc
);

827 i‡(!
±r
Ë(
mDNSNULL
);

828 
§c
 += 1 + *src;

829 *
±r
++ = '.';

832 *
±r
++ = 0;

833 (
±r
);

834 
	}
}

841 
mDNSexp‹t
 
	$C⁄vîtUTF8P°rögToRFC1034Ho°Labñ
(c⁄° 
mDNSu8
 
UTF8Name
[], 
domaöœbñ
 *c⁄° 
ho°œbñ
)

843 c⁄° 
mDNSu8
 * 
§c
 = &
UTF8Name
[1];

844 c⁄° 
mDNSu8
 *c⁄° 
íd
 = &
UTF8Name
[1] + UTF8Name[0];

845 
mDNSu8
 * 
±r
 = &
ho°œbñ
->
c
[1];

846 c⁄° 
mDNSu8
 *c⁄° 
lim
 = &
ho°œbñ
->
c
[1] + 
MAX_DOMAIN_LABEL
;

847 
§c
 < 
íd
)

850 i‡(
§c
[0] == '\'') { src++; ; }

851 i‡(
§c
 + 2 < 
íd
 && src[0] == 0xE2 && src[1] == 0x80 && src[2] == 0x99)

852 { 
§c
 += 3; ; }

853 i‡(
±r
 < 
lim
)

855 i‡(
	`mdnsVÆidHo°Ch¨
(*
§c
, (
±r
 > &
ho°œbñ
->
c
[1]), (§¯< 
íd
-1))) *ptr++ = *src;

856 i‡(
±r
 > &
ho°œbñ
->
c
[1] &&Ötr[-1] != '-') *ptr++ = '-';

858 
§c
++;

860 
±r
 > &
ho°œbñ
->
c
[1] &&Ötr[-1] == '-')Ötr--;

861 
ho°œbñ
->
c
[0] = (
mDNSu8
)(
±r
 - &hostlabel->c[1]);

862 
	}
}

864 
mDNSexp‹t
 
mDNSu8
 *
	$C⁄°ru˘Sîvi˚Name
(
domaö«me
 *c⁄° 
fqdn
,

865 c⁄° 
domaöœbñ
 *
«me
, c⁄° 
domaö«me
 *
ty≥
, c⁄° domaö«mê*c⁄° 
domaö
)

867 
i
, 
Àn
;

868 
mDNSu8
 *
d°
 = 
fqdn
->
c
;

869 c⁄° 
mDNSu8
 *
§c
;

870 c⁄° *
îr‹msg
;

874 i‡(!
«me
 && 
ty≥
)

876 c⁄° 
mDNSu8
 *
s0
 = 
ty≥
->
c
;

877 i‡(
s0
[0] && s0[0] < 0x40)

879 c⁄° 
mDNSu8
 * 
s1
 = 
s0
 + 1 + s0[0];

880 i‡(
s1
[0] && s1[0] < 0x40)

882 c⁄° 
mDNSu8
 *
s2
 = 
s1
 + 1 + s1[0];

883 i‡(
s2
[0] && s2[0] < 0x40 && s2[1+s2[0]] == 0)

885 c⁄° 
mDNSu8
 
SubTy≥Labñ
[5] = "\x04_sub";

886 
§c
 = 
s0
;

887 
Àn
 = *
§c
;

888 
i
=0; i <
Àn
; i++Ë*
d°
++ = *
§c
++;

889 
i
=0; i < ()(
SubTy≥Labñ
); i++Ë*
d°
++ = SubTypeLabel[i];

890 
ty≥
 = (
domaö«me
 *)
s1
;

894 i‡(
	`SameDomaöName
((
domaö«me
*)
s0
, (domainname*)"\x09_services\x07_dns-sd\x04_udp") ||

895 
	`SameDomaöName
((
domaö«me
*)
s0
, (domainname*)"\x09_services\x05_mdns\x04_udp"))

896 
d°
 -(
SubTy≥Labñ
);

902 i‡(
«me
 &&Çame->
c
[0])

904 
§c
 = 
«me
->
c
;

905 
Àn
 = *
§c
;

906 i‡(
Àn
 >0x40Ë{ 
îr‹msg
="Sîvi˚ in°™˚Çamêtoÿl⁄g"; 
Áû
; }

907 
i
=0; i<=
Àn
; i++Ë*
d°
++ = *
§c
++;

910 
«me
 = (
domaöœbñ
*)"";

912 
§c
 = 
ty≥
->
c
;

913 
Àn
 = *
§c
;

914 i‡(
Àn
 < 2 ||Üí >0x40 || (À¿> 15 && !
	`SameDomaöName
(
domaö
, &
loˇldomaö
)))

916 
îr‹msg
="ApplicationÖrotocolÇame must be underscoreÖlus 1-14 characters. See <http://www.dns-sd.org/ServiceTypes.html>";

917 
Áû
;

919 i‡(
§c
[1] !'_'Ë{ 
îr‹msg
="Aµliˇti⁄ÖrŸocﬁÇamêmu° begö wôh undîsc‹e"; 
Áû
; }

920 
i
=2; i<=
Àn
; i++)

921 i‡(!
	`mdnsIsLëãr
(
§c
[
i
]Ë&& !
	`mdnsIsDigô
(src[i]) && src[i] != '-' && src[i] != '_')

922 { 
îr‹msg
="Aµliˇti⁄ÖrŸocﬁÇamêmu° c⁄èö o∆yÜëãrs, digôs,ánd hyphís"; 
Áû
; }

923 
i
=0; i<=
Àn
; i++Ë*
d°
++ = *
§c
++;

925 
Àn
 = *
§c
;

926 i‡(!(
Àn
 =4 && 
§c
[1] == '_' &&

927 (((
§c
[2] | 0x20) == 'u' && (src[3] | 0x20) == 'd') || ((src[2] | 0x20) == 't' && (src[3] | 0x20) == 'c')) &&

928 (
§c
[4] | 0x20) == 'p'))

929 { 
îr‹msg
="Tøn•‹à¥ŸocﬁÇamêmu° bê_ud∞‹ _t˝"; 
Áû
; }

930 
i
=0; i<=
Àn
; i++Ë*
d°
++ = *
§c
++;

932 i‡(*
§c
Ë{ 
îr‹msg
="Sîvi˚Åy≥ mu° havê⁄lyÅwÿœbñs"; 
Áû
; }

934 *
d°
 = 0;

935 i‡(!
domaö
->
c
[0]Ë{ 
îr‹msg
="Sîvi˚ domaö mu° bên⁄-em±y"; 
Áû
; }

936 i‡(
	`SameDomaöName
(
domaö
, (
domaö«me
*)"\x05" "local" "\x04" "arpa"))

937 { 
îr‹msg
="IŒegÆ domaö \"loˇl.¨∑.\" U£ \"loˇl.\" (‹Ém±y såög)"; 
Áû
; }

938 
d°
 = 
	`AµídDomaöName
(
fqdn
, 
domaö
);

939 i‡(!
d°
Ë{ 
îr‹msg
="Sîvi˚ domaöÅoÿl⁄g"; 
Áû
; }

940 (
d°
);

942 
Áû
:

943 
	`LogMsg
("C⁄°ru˘Sîvi˚Name: %s: %#s.%##s%##s", 
îr‹msg
, 
«me
->
c
, 
ty≥
->c, 
domaö
->c);

944 (
mDNSNULL
);

945 
	}
}

952 
mDNSexp‹t
 
mDNSBoﬁ
 
	$Dec⁄°ru˘Sîvi˚Name
(c⁄° 
domaö«me
 *c⁄° 
fqdn
,

953 
domaöœbñ
 *c⁄° 
«me
, 
domaö«me
 *c⁄° 
ty≥
, domaö«mê*c⁄° 
domaö
)

955 
i
, 
Àn
;

956 c⁄° 
mDNSu8
 *
§c
 = 
fqdn
->
c
;

957 c⁄° 
mDNSu8
 *
max
 = 
fqdn
->
c
 + 
MAX_DOMAIN_NAME
;

958 
mDNSu8
 *
d°
;

960 
d°
 = 
«me
->
c
;

961 
Àn
 = *
§c
;

962 i‡(!
Àn
Ë{ 
	`debugf
("Dec⁄°ru˘Sîvi˚Name: FQDNÉm±y!"); (
mDNSÁl£
); }

963 i‡(
Àn
 >0x40Ë{ 
	`debugf
("Dec⁄°ru˘Sîvi˚Name: In°™˚Çamêtoÿl⁄g"); (
mDNSÁl£
); }

964 
i
=0; i<=
Àn
; i++Ë*
d°
++ = *
§c
++;

966 
d°
 = 
ty≥
->
c
;

967 
Àn
 = *
§c
;

968 i‡(!
Àn
Ë{ 
	`debugf
("Dec⁄°ru˘Sîvi˚Name: FQDN c⁄èö†⁄ly o√Üabñ!"); (
mDNSÁl£
); }

969 i‡(
Àn
 >0x40Ë{ 
	`debugf
("Dec⁄°ru˘Sîvi˚Name: Aµliˇti⁄ÖrŸocﬁÇamêtoÿl⁄g"); (
mDNSÁl£
); }

970 
i
=0; i<=
Àn
; i++Ë*
d°
++ = *
§c
++;

972 
Àn
 = *
§c
;

973 i‡(!
Àn
Ë{ 
	`debugf
("Dec⁄°ru˘Sîvi˚Name: FQDN c⁄èö†⁄lyÅwÿœbñs!"); (
mDNSÁl£
); }

974 i‡(
Àn
 >0x40Ë{ 
	`debugf
("Dec⁄°ru˘Sîvi˚Name: Tøn•‹à¥ŸocﬁÇamêtoÿl⁄g"); (
mDNSÁl£
); }

975 
i
=0; i<=
Àn
; i++Ë*
d°
++ = *
§c
++;

976 *
d°
++ = 0;

978 
d°
 = 
domaö
->
c
;

979 *
§c
)

981 
Àn
 = *
§c
;

982 i‡(
Àn
 >= 0x40)

983 { 
	`debugf
("Dec⁄°ru˘Sîvi˚Name: Labñ i¿£rvi˚ domaöÅoÿl⁄g"); (
mDNSÁl£
); }

984 i‡(
§c
 + 1 + 
Àn
 + 1 >
max
)

985 { 
	`debugf
("Dec⁄°ru˘Sîvi˚Name: TŸÆ sîvi˚ domaöÅoÿl⁄g"); (
mDNSÁl£
); }

986 
i
=0; i<=
Àn
; i++Ë*
d°
++ = *
§c
++;

988 *
d°
++ = 0;

990 (
mDNSåue
);

991 
	}
}

1008 
mDNSexp‹t
 
mDNSu32
 
	$TrunˇãUTF8ToLígth
(
mDNSu8
 *
°rög
, 
mDNSu32
 
Àngth
, mDNSu32 
max
)

1010 i‡(
Àngth
 > 
max
)

1012 
mDNSu8
 
c1
 = 
°rög
[
max
];

1013 
mDNSu8
 
c2
 = (
max
+1 < 
Àngth
Ë? 
°rög
[max+1] : 0xB0;

1014 
Àngth
 = 
max
;

1015 
Àngth
 > 0)

1020 
mDNSBoﬁ
 
c⁄töu©i⁄
 = ((
c1
 & 0xC0) == 0x80);

1021 
mDNSBoﬁ
 
£c⁄dsuºog©e
 = (
c1
 =0xED && (
c2
 & 0xF0) == 0xB0);

1022 i‡(!
c⁄töu©i⁄
 && !
£c⁄dsuºog©e
) ;

1023 
c2
 = 
c1
;

1024 
c1
 = 
°rög
[--
Àngth
];

1027 
Àngth
 > 0 && 
°rög
[length-1] <= ' ')Üength--;

1029 (
Àngth
);

1030 
	}
}

1034 
mDNSexp‹t
 
mDNSBoﬁ
 
	$LabñC⁄èösSuffix
(c⁄° 
domaöœbñ
 *c⁄° 
«me
, c⁄° 
mDNSBoﬁ
 
RichText
)

1036 
mDNSu16
 
l
 = 
«me
->
c
[0];

1038 i‡(
RichText
)

1040 i‡(
l
 < 4Ë 
mDNSÁl£
;

1041 i‡(
«me
->
c
[
l
--] !')'Ë 
mDNSÁl£
;

1042 i‡(!
	`mdnsIsDigô
(
«me
->
c
[
l
])Ë 
mDNSÁl£
;

1043 
l
--;

1044 
l
 > 2 && 
	`mdnsIsDigô
(
«me
->
c
[l]))Ü--;

1045  (
«me
->
c
[
l
] == '(' &&Çame->c[l - 1] == ' ');

1049 i‡(
l
 < 2Ë 
mDNSÁl£
;

1050 i‡(!
	`mdnsIsDigô
(
«me
->
c
[
l
])Ë 
mDNSÁl£
;

1051 
l
--;

1052 
l
 > 2 && 
	`mdnsIsDigô
(
«me
->
c
[l]))Ü--;

1053  (
«me
->
c
[
l
] == '-');

1055 
	}
}

1060 
mDNSexp‹t
 
mDNSu32
 
	$RemoveLabñSuffix
(
domaöœbñ
 *
«me
, 
mDNSBoﬁ
 
RichText
)

1062 
mDNSu32
 
vÆ
 = 0, 
mu…ùlõr
 = 1;

1065 i‡(
RichText
 && 
«me
->
c
[0] >= 1 &&Çame->c[name->c[0]] == ')')Çame->c[0]--;

1068 
	`mdnsIsDigô
(
«me
->
c
[name->c[0]]))

1069 { 
vÆ
 +(
«me
->
c
[«me->c[0]] - '0'Ë* 
mu…ùlõr
; multiplier *= 10;Çame->c[0]--; }

1072 i‡(
RichText
)

1074 i‡(
«me
->
c
[0] >= 2 &&Çame->c[name->c[0]] == '(' &&Çame->c[name->c[0]-1] == ' ')Çame->c[0] -= 2;

1078 i‡(
«me
->
c
[0] >= 1 &&Çame->c[name->c[0]] == '-')Çame->c[0] -= 1;

1081 (
vÆ
);

1082 
	}
}

1086 
mDNSexp‹t
 
	$AµídLabñSuffix
(
domaöœbñ
 *
«me
, 
mDNSu32
 
vÆ
, 
mDNSBoﬁ
 
RichText
)

1088 
mDNSu32
 
divis‹
 = 1, 
ch¨s
 = 2;

1089 i‡(
RichText
Ë
ch¨s
 = 4;

1092 i‡(
RichText
Ë
«me
->
c
[name->c[0]] == ' ')Çame->c[0]--;

1094 
vÆ
 >
divis‹
 * 10Ë{ divis‹ *10; 
ch¨s
++; }

1096 
«me
->
c
[0] = (
mDNSu8
Ë
	`TrunˇãUTF8ToLígth
“ame->c+1,Çame->c[0], 
MAX_DOMAIN_LABEL
 - 
ch¨s
);

1098 i‡(
RichText
Ë{ 
«me
->
c
[++name->c[0]] = ' ';Çame->c[++name->c[0]] = '('; }

1099 { 
«me
->
c
[++name->c[0]] = '-'; }

1101 
divis‹
)

1103 
«me
->
c
[++«me->c[0]] = (
mDNSu8
)('0' + 
vÆ
 / 
divis‹
);

1104 
vÆ
 %
divis‹
;

1105 
divis‹
 /= 10;

1108 i‡(
RichText
Ë
«me
->
c
[++name->c[0]] = ')';

1109 
	}
}

1111 
mDNSexp‹t
 
	$In¸emítLabñSuffix
(
domaöœbñ
 *
«me
, 
mDNSBoﬁ
 
RichText
)

1113 
mDNSu32
 
vÆ
 = 0;

1115 i‡(
	`LabñC⁄èösSuffix
(
«me
, 
RichText
))

1116 
vÆ
 = 
	`RemoveLabñSuffix
(
«me
, 
RichText
);

1122 i‡(
vÆ
 == 0) val = 2;

1123 i‡(
vÆ
 < 10) val++;

1124 
vÆ
 +1 + 
	`mDNSR™dom
(99);

1126 
	`AµídLabñSuffix
(
«me
, 
vÆ
, 
RichText
);

1127 
	}
}

1130 #i‡
COMPILER_LIKES_PRAGMA_MARK


1131 #¥agm®
m¨k
 -

1132 #¥agm®
m¨k
 - 
Resour˚
 
Rec‹d
 
Utûôy
 
Fun˘i⁄s


1135 
mDNSexp‹t
 
mDNSu32
 
	$RD©aHashVÆue
(
mDNSu16
 c⁄° 
rdÀngth
, c⁄° 
RD©aBody
 *c⁄° 
rdb
)

1137 
mDNSu32
 
sum
 = 0;

1138 
i
;

1139 
i
=0; i+1 < 
rdÀngth
; i+=2)

1141 
sum
 +(((
mDNSu32
)(
rdb
->
d©a
[
i
])) << 8) |Ñdb->data[i+1];

1142 
sum
 = (sum<<3) | (sum>>29);

1144 i‡(
i
 < 
rdÀngth
)

1146 
sum
 +((
mDNSu32
)(
rdb
->
d©a
[
i
])) << 8;

1148 (
sum
);

1149 
	}
}

1153 
mDNSexp‹t
 
mDNSBoﬁ
 
	$SameRD©aBody
(c⁄° 
Resour˚Rec‹d
 *c⁄° 
r1
, c⁄° 
RD©aBody
 *c⁄° 
r2
)

1155 
r1
->
ºty≥
)

1157 
kDNSTy≥_CNAME
:

1158 
kDNSTy≥_PTR
: (
	`SameDomaöName
(&
r1
->
rd©a
->
u
.
«me
, &
r2
->name));

1160 
kDNSTy≥_SRV
: (
mDNSBoﬁ
)–
r1
->
rd©a
->
u
.
§v
.
¥i‹ôy
 =
r2
->srv.priority &&

1161 
r1
->
rd©a
->
u
.
§v
.
weight
 =
r2
->srv.weight &&

1162 
r1
->
rd©a
->
u
.
§v
.
p‹t
.
NŸAnI¡egî
 =
r2
->srv.port.NotAnInteger &&

1163 
	`SameDomaöName
(&
r1
->
rd©a
->
u
.
§v
.
èrgë
, &
r2
->srv.target) );

1165 : (
	`mDNSPœtf‹mMemSame
(
r1
->
rd©a
->
u
.
d©a
, 
r2
->d©a,Ñ1->
rdÀngth
));

1167 
	}
}

1169 
mDNSexp‹t
 
mDNSBoﬁ
 
	$SameRD©a
(c⁄° 
Resour˚Rec‹d
 *c⁄° 
r1
, c⁄° Resour˚Rec‹d *c⁄° 
r2
)

1171 i‡(
r1
->
ºty≥
 !
r2
->ºty≥Ë(
mDNSÁl£
);

1172 i‡(
r1
->
rdÀngth
 !
r2
->rdÀngthË(
mDNSÁl£
);

1173 i‡(
r1
->
rd©ahash
 !
r2
->rd©ahashË(
mDNSÁl£
);

1174 (
	`SameRD©aBody
(
r1
, &
r2
->
rd©a
->
u
));

1175 
	}
}

1177 
mDNSexp‹t
 
mDNSBoﬁ
 
	$SameResour˚Rec‹d
(
Resour˚Rec‹d
 *
r1
, Resour˚Rec‹d *
r2
)

1179  (
r1
->
«mehash
 =
r2
->namehash &&

1180 
r1
->
ºty≥
 =
r2
->rrtype &&

1181 
	`SameDomaöName
(
r1
->
«me
, 
r2
->name) &&

1182 
	`SameRD©a
(
r1
, 
r2
));

1183 
	}
}

1185 
mDNSexp‹t
 
mDNSBoﬁ
 
	$Resour˚Rec‹dAnswîsQue°i⁄
(c⁄° 
Resour˚Rec‹d
 *c⁄° 
º
, c⁄° 
DNSQue°i⁄
 *c⁄° 
q
)

1187 i‡(
º
->
I¡îÁ˚ID
 &&

1188 
q
 ->
I¡îÁ˚ID
 && q->I¡îÁ˚ID !
mDNSI¡îÁ˚_LoˇlO∆y
 &&

1189 
º
->
I¡îÁ˚ID
 !
q
->I¡îÁ˚IDË(
mDNSÁl£
);

1192 i‡(
º
->
ºty≥
 !
kDNSTy≥_CNAME
 &&Ñr->ºty≥ !
q
->
qty≥
 && q->qty≥ !
kDNSQTy≥_ANY
 ) (
mDNSÁl£
);

1193 i‡–
º
->
º˛ass
 !
q
->
q˛ass
 && q->q˛as†!
kDNSQCœss_ANY
Ë(
mDNSÁl£
);

1194 (
º
->
«mehash
 =
q
->
q«mehash
 && 
	`SameDomaöName
‘r->
«me
, &q->
q«me
));

1195 
	}
}

1197 
mDNSexp‹t
 
mDNSu16
 
	$GëRDLígth
(c⁄° 
Resour˚Rec‹d
 *c⁄° 
º
, 
mDNSBoﬁ
 
e°im©e
)

1199 c⁄° 
RD©aBody
 *
rd
 = &
º
->
rd©a
->
u
;

1200 c⁄° 
domaö«me
 *c⁄° 
«me
 = 
e°im©e
 ? 
º
->«mê: 
mDNSNULL
;

1201 
º
->
ºty≥
)

1203 
kDNSTy≥_A
: ((
rd
->
ùv4
));

1204 
kDNSTy≥_CNAME
:

1205 
kDNSTy≥_NS
:

1206 
kDNSTy≥_PTR
: (
	`Com¥es£dDomaöNameLígth
(&
rd
->
«me
,Çame));

1207 
kDNSTy≥_HINFO
:(
mDNSu16
)(2 + ()
rd
->
d©a
[0] + ()rd->data[1 + ()rd->data[0]]);

1208 
kDNSTy≥_NULL
:

1209 
kDNSTy≥_TXT
: (
º
->
rdÀngth
);

1210 
kDNSTy≥_AAAA
: ((
rd
->
ùv6
));

1211 
kDNSTy≥_SRV
: (
mDNSu16
)(6 + 
	`Com¥es£dDomaöNameLígth
(&
rd
->
§v
.
èrgë
, 
«me
));

1212 
kDNSTy≥_SOA
:  (
mDNSu16
)(
	`Com¥es£dDomaöNameLígth
(&
rd
->
sﬂ
.
m«me
, 
«me
) +

1213 
	`Com¥es£dDomaöNameLígth
(&
rd
->
sﬂ
.
∫ame
, 
«me
) +

1214 5 * (
mDNSO∑que32
));

1215 
kDNSTy≥_OPT
: (
º
->
rdÀngth
);

1216 : 
	`debugf
("W¨nög! D⁄'àknow howÅÿgëÜígth o‡ªsour˚Åy≥ %d", 
º
->
ºty≥
);

1217 (
º
->
rdÀngth
);

1219 
	}
}

1221 
mDNSexp‹t
 
mDNSBoﬁ
 
	$VÆid©eRD©a
(c⁄° 
mDNSu16
 
ºty≥
, c⁄° mDNSu16 
rdÀngth
, c⁄° 
RD©a
 *c⁄° 
rd
)

1223 
mDNSu16
 
Àn
;

1225 
ºty≥
)

1227 
kDNSTy≥_A
: (
rdÀngth
 =(
mDNSv4Addr
));

1229 
kDNSTy≥_NS
:

1230 
kDNSTy≥_MD
:

1231 
kDNSTy≥_MF
:

1232 
kDNSTy≥_CNAME
:

1234 
kDNSTy≥_MB
:

1235 
kDNSTy≥_MG
:

1236 
kDNSTy≥_MR
:

1239 
kDNSTy≥_PTR
: i‡(!
rdÀngth
Ë(
mDNSÁl£
);

1240 
Àn
 = 
	`DomaöNameLígth
(&
rd
->
u
.
«me
);

1241 (
Àn
 <
MAX_DOMAIN_NAME
 && 
rdÀngth
 ==Üen);

1243 
kDNSTy≥_HINFO
:

1244 
kDNSTy≥_MINFO
:

1245 
kDNSTy≥_TXT
: i‡(!
rdÀngth
Ë(
mDNSÁl£
);

1247 c⁄° 
mDNSu8
 *
±r
 = 
rd
->
u
.
txt
.
c
;

1248 c⁄° 
mDNSu8
 *
íd
 = 
rd
->
u
.
txt
.
c
 + 
rdÀngth
;

1249 
±r
 < 
íd
)Ötr += 1 +Ötr[0];

1250  (
±r
 =
íd
);

1253 
kDNSTy≥_AAAA
: (
rdÀngth
 =(
mDNSv6Addr
));

1255 
kDNSTy≥_MX
: i‡(!
rdÀngth
Ë(
mDNSÁl£
);

1256 
Àn
 = 
	`DomaöNameLígth
(&
rd
->
u
.
mx
.
exch™ge
);

1257 (
Àn
 <
MAX_DOMAIN_NAME
 && 
rdÀngth
 == 2+len);

1259 
kDNSTy≥_SRV
: i‡(!
rdÀngth
Ë(
mDNSÁl£
);

1260 
Àn
 = 
	`DomaöNameLígth
(&
rd
->
u
.
§v
.
èrgë
);

1261 (
Àn
 <
MAX_DOMAIN_NAME
 && 
rdÀngth
 == 6+len);

1263 : (
mDNSåue
);

1265 
	}
}

1268 #i‡
COMPILER_LIKES_PRAGMA_MARK


1269 #¥agm®
m¨k
 -

1270 #¥agm®
m¨k
 -

1271 #¥agm®
m¨k
 - 
DNS
 
Mesßge
 
Cª©i⁄
 
Fun˘i⁄s


1274 
mDNSexp‹t
 
	$InôülizeDNSMesßge
(
DNSMesßgeHódî
 *
h
, 
mDNSO∑que16
 
id
, mDNSO∑que16 
Êags
)

1276 
h
->
id
 = id;

1277 
h
->
Êags
 = flags;

1278 
h
->
numQue°i⁄s
 = 0;

1279 
h
->
numAnswîs
 = 0;

1280 
h
->
numAuth‹ôõs
 = 0;

1281 
h
->
numAddôi⁄Æs
 = 0;

1282 
	}
}

1284 
mDNSexp‹t
 c⁄° 
mDNSu8
 *
	$FödCom¥essi⁄Poöãr
(c⁄° 
mDNSu8
 *c⁄° 
ba£
, c⁄° mDNSu8 *c⁄° 
íd
, c⁄° mDNSu8 *c⁄° 
dom«me
)

1286 c⁄° 
mDNSu8
 *
ªsu…
 = 
íd
 - *
dom«me
 - 1;

1288 i‡(*
dom«me
 =0Ë(
mDNSNULL
);

1291 
ªsu…
 >
ba£
)

1295 i‡(
ªsu…
[0] =
dom«me
[0] &&Ñesult[1] == domname[1])

1297 c⁄° 
mDNSu8
 *
«me
 = 
dom«me
;

1298 c⁄° 
mDNSu8
 *
èrg
 = 
ªsu…
;

1299 
èrg
 + *
«me
 < 
íd
)

1302 
i
;

1303 c⁄° 
mDNSu8
 *
poöãπ¨gë
;

1304 
i
=0; i <*
«me
; i++Ëi‡(
èrg
[i] !=Çame[i]) ;

1305 i‡(
i
 <*
«me
) ;

1306 
èrg
 +1 + *
«me
;

1307 
«me
 += 1 + *name;

1308 i‡(*
«me
 =0 && *
èrg
 =0Ë(
ªsu…
);

1309 i‡(*
«me
 == 0) ;

1312 i‡(
èrg
[0] < 0x40) ;

1313 i‡(
èrg
[0] < 0xC0) ;

1314 i‡(
èrg
+1 >
íd
) ;

1315 
poöãπ¨gë
 = 
ba£
 + (((
mDNSu16
)(
èrg
[0] & 0x3F)) << 8) +Åarg[1];

1316 i‡(
èrg
 < 
poöãπ¨gë
) ;

1317 i‡(
poöãπ¨gë
[0] >= 0x40) ;

1318 
èrg
 = 
poöãπ¨gë
;

1321 
ªsu…
--;

1323 (
mDNSNULL
);

1324 
	}
}

1333 
mDNSexp‹t
 
mDNSu8
 *
	$putDomaöNameAsLabñs
(c⁄° 
DNSMesßge
 *c⁄° 
msg
,

1334 
mDNSu8
 *
±r
, c⁄° mDNSu8 *c⁄° 
limô
, c⁄° 
domaö«me
 *c⁄° 
«me
)

1336 c⁄° 
mDNSu8
 *c⁄° 
ba£
 = (c⁄° mDNSu8 *)
msg
;

1337 c⁄° 
mDNSu8
 * 
≈
 = 
«me
->
c
;

1338 c⁄° 
mDNSu8
 *c⁄° 
max
 = 
«me
->
c
 + 
MAX_DOMAIN_NAME
;

1339 c⁄° 
mDNSu8
 * 
poöãr
 = 
mDNSNULL
;

1340 c⁄° 
mDNSu8
 *c⁄° 
£¨chlimô
 = 
±r
;

1342 *
≈
 && 
±r
 < 
limô
-1)

1344 i‡(*
≈
 > 
MAX_DOMAIN_LABEL
)

1345 { 
	`LogMsg
("MÆf‹med domaöÇamê%##†÷abñ m‹êth™ 63 byãs)", 
«me
->
c
); (
mDNSNULL
); }

1356 i‡(
≈
 + 1 + *≈ >
max
)

1357 { 
	`LogMsg
("MÆf‹med domaöÇamê%##†(m‹êth™ 255 byãs)", 
«me
->
c
); (
mDNSNULL
); }

1359 i‡(
ba£
Ë
poöãr
 = 
	`FödCom¥essi⁄Poöãr
(ba£, 
£¨chlimô
, 
≈
);

1360 i‡(
poöãr
)

1362 
mDNSu16
 
off£t
 = (mDNSu16)(
poöãr
 - 
ba£
);

1363 *
±r
++ = (
mDNSu8
)(0xC0 | (
off£t
 >> 8));

1364 *
±r
++ = (
mDNSu8
)–
off£t
 & 0xFF);

1365 (
±r
);

1369 
i
;

1370 
mDNSu8
 
Àn
 = *
≈
++;

1371 i‡(
±r
 + 1 + 
Àn
 >
limô
Ë(
mDNSNULL
);

1372 *
±r
++ = 
Àn
;

1373 
i
=0; i<
Àn
; i++Ë*
±r
++ = *
≈
++;

1377 i‡(
±r
 < 
limô
)

1379 *
±r
++ = 0;

1380 (
±r
);

1383 (
mDNSNULL
);

1384 
	}
}

1386 
mDNSloˇl
 
mDNSu8
 *
	$putVÆ16
(
mDNSu8
 *
±r
, 
mDNSu16
 
vÆ
)

1388 
±r
[0] = (
mDNSu8
)((
vÆ
 >> 8 ) & 0xFF);

1389 
±r
[1] = (
mDNSu8
)((
vÆ
 ) & 0xFF);

1390  
±r
 + (
mDNSO∑que16
);

1391 
	}
}

1393 
mDNSloˇl
 
mDNSu8
 *
	$putVÆ32
(
mDNSu8
 *
±r
, 
mDNSu32
 
vÆ
)

1395 
±r
[0] = (
mDNSu8
)((
vÆ
 >> 24) & 0xFF);

1396 
±r
[1] = (
mDNSu8
)((
vÆ
 >> 16) & 0xFF);

1397 
±r
[2] = (
mDNSu8
)((
vÆ
 >> 8) & 0xFF);

1398 
±r
[3] = (
mDNSu8
)((
vÆ
 ) & 0xFF);

1399  
±r
 + (
mDNSu32
);

1400 
	}
}

1402 
mDNSloˇl
 
mDNSu8
 *
	$putO±RD©a
(
mDNSu8
 *
±r
, c⁄° mDNSu8 *
limô
, 
Resour˚Rec‹d
 *
º
)

1404 
≈ut
 = 0;

1405 
rd©aO±
 *
›t
;

1407 
≈ut
 < 
º
->
rdÀngth
)

1410 i‡(
±r
 + (2 * (
mDNSu16
)Ë> 
limô
Ë
•a˚_îr
;

1411 
›t
 = (
rd©aO±
 *)(
º
->
rd©a
->
u
.
d©a
 + 
≈ut
);

1412 
±r
 = 
	`putVÆ16
’å, 
›t
->opt);

1413 
±r
 = 
	`putVÆ16
’å, 
›t
->
›éí
);

1414 
≈ut
 +2 * (
mDNSu16
);

1415 i‡(
›t
->›à=
kDNSO±_LLQ
)

1417 i‡(
±r
 + 
LLQ_OPTLEN
 > 
limô
Ë
•a˚_îr
;

1418 
±r
 = 
	`putVÆ16
’å, 
›t
->
O±D©a
.
Œq
.
vîs
);

1419 
±r
 = 
	`putVÆ16
’å, 
›t
->
O±D©a
.
Œq
.
ŒqOp
);

1420 
±r
 = 
	`putVÆ16
’å, 
›t
->
O±D©a
.
Œq
.
îr
);

1421 
	`mDNSPœtf‹mMemC›y
(
›t
->
O±D©a
.
Œq
.
id
, 
±r
, 8);

1422 
±r
 += 8;

1423 
±r
 = 
	`putVÆ32
’å, 
›t
->
O±D©a
.
Œq
.
Àa£
);

1424 
≈ut
 +
LLQ_OPTLEN
;

1426 i‡(
›t
->›à=
kDNSO±_Ló£
)

1428 i‡(
±r
 + (
mDNSs32
Ë> 
limô
Ë
•a˚_îr
;

1429 
±r
 = 
	`putVÆ32
’å, 
›t
->
O±D©a
.
Àa£
);

1430 
≈ut
 +(
mDNSs32
);

1432 { 
	`LogMsg
("putO±RD©®- unknow¿›ti⁄ %d", 
›t
->›t);  
mDNSNULL
; }

1435  
±r
;

1437 
•a˚_îr
:

1438 
	`LogMsg
("ERROR:ÖutOptRData - out of space");

1439  
mDNSNULL
;

1440 
	}
}

1442 
mDNSloˇl
 
mDNSu16
 
	$gëVÆ16
(c⁄° 
mDNSu8
 **
±r
)

1444 
mDNSu16
 
vÆ
 = (mDNSu16)(((mDNSu16)(*
±r
)[0]) << 8 | (*ptr)[1]);

1445 *
±r
 +(
mDNSO∑que16
);

1446  
vÆ
;

1447 
	}
}

1449 
mDNSloˇl
 c⁄° 
mDNSu8
 *
	$gëO±Rd©a
(c⁄° 
mDNSu8
 *
±r
, c⁄° mDNSu8 *c⁄° 
limô
, 
L¨geCacheRec‹d
 *c⁄° 
¸
, 
mDNSu16
 
pktRDLí
)

1451 
ƒód
 = 0;

1452 
Resour˚Rec‹d
 *c⁄° 
º
 = &
¸
->
r
.
ª§ec
;

1453 
rd©aO±
 *
›t
 = (rd©aO± *)
º
->
rd©a
->
u
.
d©a
;

1455 
ƒód
 < 
pktRDLí
 && (
mDNSu8
 *)
›t
 < 
º
->
rd©a
->
u
.
d©a
 + 
MaximumRDSize
 - (
rd©aO±
))

1458 i‡(
ƒód
 + (2 * (
mDNSu16
)Ë> 
º
->
rd©a
->
MaxRDLígth
Ë
•a˚_îr
;

1459 
›t
->›à
	`gëVÆ16
(&
±r
);

1460 
›t
->
›éí
 = 
	`gëVÆ16
(&
±r
);

1461 
ƒód
 +2 * (
mDNSu16
);

1462 i‡(
›t
->›à=
kDNSO±_LLQ
)

1464 i‡(()(
limô
 - 
±r
Ë< 
LLQ_OPTLEN
Ë
•a˚_îr
;

1465 
›t
->
O±D©a
.
Œq
.
vîs
 = 
	`gëVÆ16
(&
±r
);

1466 
›t
->
O±D©a
.
Œq
.
ŒqOp
 = 
	`gëVÆ16
(&
±r
);

1467 
›t
->
O±D©a
.
Œq
.
îr
 = 
	`gëVÆ16
(&
±r
);

1468 
	`mDNSPœtf‹mMemC›y
(
±r
, 
›t
->
O±D©a
.
Œq
.
id
, 8);

1469 
±r
 += 8;

1470 
›t
->
O±D©a
.
Œq
.
Àa£
 = (
mDNSu32
Ë((mDNSu32)
±r
[0] << 24 | (mDNSu32)ptr[1] << 16 | (mDNSu32)ptr[2] << 8 |Ötr[3]);

1471 i‡(
›t
->
O±D©a
.
Œq
.
Àa£
 > 0x70000000UL / 
mDNSPœtf‹mO√Sec⁄d
)

1472 
›t
->
O±D©a
.
Œq
.
Àa£
 = 0x70000000UL / 
mDNSPœtf‹mO√Sec⁄d
;

1473 
±r
 +(
mDNSO∑que32
);

1474 
ƒód
 +
LLQ_OPTLEN
;

1476 i‡(
›t
->›à=
kDNSO±_Ló£
)

1478 i‡(()(
limô
 - 
±r
Ë< (
mDNSs32
)Ë
•a˚_îr
;

1480 
›t
->
O±D©a
.
Àa£
 = (
mDNSu32
Ë((mDNSu32)
±r
[0] << 24 | (mDNSu32)ptr[1] << 16 | (mDNSu32)ptr[2] << 8 |Ötr[3]);

1481 i‡(
›t
->
O±D©a
.
Àa£
 > 0x70000000UL / 
mDNSPœtf‹mO√Sec⁄d
)

1482 
›t
->
O±D©a
.
Àa£
 = 0x70000000UL / 
mDNSPœtf‹mO√Sec⁄d
;

1483 
±r
 +(
mDNSs32
);

1484 
ƒód
 +(
mDNSs32
);

1486 { 
	`LogMsg
("ERROR: gëO±Rd©®- unknow¿›à%d", 
›t
->›t);  
mDNSNULL
; }

1487 
›t
++;

1490 
º
->
rdÀngth
 = 
pktRDLí
;

1491  
±r
;

1493 
•a˚_îr
:

1494 
	`LogMsg
("ERROR: getLLQRdata - out of space");

1495  
mDNSNULL
;

1496 
	}
}

1498 
mDNSexp‹t
 
mDNSu8
 *
	$putRD©a
(c⁄° 
DNSMesßge
 *c⁄° 
msg
, 
mDNSu8
 *
±r
, c⁄° mDNSu8 *c⁄° 
limô
, 
Resour˚Rec‹d
 *
º
)

1500 
º
->
ºty≥
)

1502 
kDNSTy≥_A
: i‡(
º
->
rdÀngth
 != 4)

1504 
	`debugf
("putRD©a: IŒegÆÜígth %d f‹ kDNSTy≥_A", 
º
->
rdÀngth
);

1505 (
mDNSNULL
);

1507 i‡(
±r
 + 4 > 
limô
Ë(
mDNSNULL
);

1508 *
±r
++ = 
º
->
rd©a
->
u
.
ùv4
.
b
[0];

1509 *
±r
++ = 
º
->
rd©a
->
u
.
ùv4
.
b
[1];

1510 *
±r
++ = 
º
->
rd©a
->
u
.
ùv4
.
b
[2];

1511 *
±r
++ = 
º
->
rd©a
->
u
.
ùv4
.
b
[3];

1512 (
±r
);

1514 
kDNSTy≥_CNAME
:

1515 
kDNSTy≥_PTR
: (
	`putDomaöNameAsLabñs
(
msg
, 
±r
, 
limô
, &
º
->
rd©a
->
u
.
«me
));

1517 
kDNSTy≥_AAAA
: i‡(
º
->
rdÀngth
 !‘r->
rd©a
->
u
.
ùv6
))

1519 
	`debugf
("putRD©a: IŒegÆÜígth %d f‹ kDNSTy≥_AAAA", 
º
->
rdÀngth
);

1520 (
mDNSNULL
);

1522 i‡(
±r
 + (
º
->
rd©a
->
u
.
ùv6
Ë> 
limô
Ë(
mDNSNULL
);

1523 
	`mDNSPœtf‹mMemC›y
(&
º
->
rd©a
->
u
.
ùv6
, 
±r
, (rr->rdata->u.ipv6));

1524 (
±r
 + (
º
->
rd©a
->
u
.
ùv6
));

1526 
kDNSTy≥_SRV
: i‡(
±r
 + 6 > 
limô
Ë(
mDNSNULL
);

1527 *
±r
++ = (
mDNSu8
)(
º
->
rd©a
->
u
.
§v
.
¥i‹ôy
 >> 8);

1528 *
±r
++ = (
mDNSu8
)(
º
->
rd©a
->
u
.
§v
.
¥i‹ôy
 & 0xFF);

1529 *
±r
++ = (
mDNSu8
)(
º
->
rd©a
->
u
.
§v
.
weight
 >> 8);

1530 *
±r
++ = (
mDNSu8
)(
º
->
rd©a
->
u
.
§v
.
weight
 & 0xFF);

1531 *
±r
++ = 
º
->
rd©a
->
u
.
§v
.
p‹t
.
b
[0];

1532 *
±r
++ = 
º
->
rd©a
->
u
.
§v
.
p‹t
.
b
[1];

1533 (
	`putDomaöNameAsLabñs
(
msg
, 
±r
, 
limô
, &
º
->
rd©a
->
u
.
§v
.
èrgë
));

1534 
kDNSTy≥_OPT
:  
	`putO±RD©a
(
±r
, 
limô
, 
º
);

1536 : 
	`debugf
("putRD©a: W¨nög! Wrôög unknow¿ªsour˚Åy≥ %dá†øw d©a", 
º
->
ºty≥
);

1538 
kDNSTy≥_HINFO
:

1539 
kDNSTy≥_TXT
:

1540 
kDNSTy≥_TSIG
: i‡(
±r
 + 
º
->
rdÀngth
 > 
limô
Ë(
mDNSNULL
);

1541 
	`mDNSPœtf‹mMemC›y
(
º
->
rd©a
->
u
.
d©a
, 
±r
,Ñr->
rdÀngth
);

1542 (
±r
 + 
º
->
rdÀngth
);

1544 
	}
}

1546 
mDNSexp‹t
 
mDNSu8
 *
	$PutResour˚Rec‹dTTLWôhLimô
(
DNSMesßge
 *c⁄° 
msg
, 
mDNSu8
 *
±r
, 
mDNSu16
 *
cou¡
, 
Resour˚Rec‹d
 *
º
, 
mDNSu32
 
âl
, c⁄° mDNSu8 *
limô
)

1548 
mDNSu8
 *
ído‰d©a
;

1549 
mDNSu16
 
a˘uÆLígth
;

1551 i‡(
º
->
Rec‹dTy≥
 =
kDNSRec‹dTy≥Uƒegi°îed
)

1553 
	`LogMsg
("PutResour˚Rec‹d ERROR! Aâem±ÅÿpuàkDNSRec‹dTy≥Uƒegi°îed %##†(%s)", 
º
->
«me
->
c
, 
	`DNSTy≥Name
‘r->
ºty≥
));

1554 (
±r
);

1557 
±r
 = 
	`putDomaöNameAsLabñs
(
msg
,Öå, 
limô
, 
º
->
«me
);

1558 i‡(!
±r
 ||Öå + 10 >
limô
Ë(
mDNSNULL
);

1559 
±r
[0] = (
mDNSu8
)(
º
->
ºty≥
 >> 8);

1560 
±r
[1] = (
mDNSu8
)(
º
->
ºty≥
 & 0xFF);

1561 
±r
[2] = (
mDNSu8
)(
º
->
º˛ass
 >> 8);

1562 
±r
[3] = (
mDNSu8
)(
º
->
º˛ass
 & 0xFF);

1563 
±r
[4] = (
mDNSu8
)((
âl
 >> 24) & 0xFF);

1564 
±r
[5] = (
mDNSu8
)((
âl
 >> 16) & 0xFF);

1565 
±r
[6] = (
mDNSu8
)((
âl
 >> 8) & 0xFF);

1566 
±r
[7] = (
mDNSu8
)–
âl
 & 0xFF);

1567 
ído‰d©a
 = 
	`putRD©a
(
msg
, 
±r
+10, 
limô
, 
º
);

1568 i‡(!
ído‰d©a
Ë{ 
	`vîbo£debugf
("R™ ouào‡•a˚ i¿PutResour˚Rec‹d f‹ %##†(%s)", 
º
->
«me
->
c
, 
	`DNSTy≥Name
‘r->
ºty≥
)); (
mDNSNULL
); }

1572 
a˘uÆLígth
 = (
mDNSu16
)(
ído‰d©a
 - 
±r
 - 10);

1573 
±r
[8] = (
mDNSu8
)(
a˘uÆLígth
 >> 8);

1574 
±r
[9] = (
mDNSu8
)(
a˘uÆLígth
 & 0xFF);

1576 i‡(
cou¡
) (*count)++;

1577 
	`LogMsg
("PutResour˚Rec‹dTTL: ERROR: Nÿèrgë cou¡Åÿupd©êf‹ %##†(%s)", 
º
->
«me
->
c
, 
	`DNSTy≥Name
‘r->
ºty≥
));

1578 (
ído‰d©a
);

1579 
	}
}

1581 
mDNSexp‹t
 
mDNSu8
 *
	$PutResour˚Rec‹dC≠≥dTTL
(
DNSMesßge
 *c⁄° 
msg
, 
mDNSu8
 *
±r
, 
mDNSu16
 *
cou¡
, 
Resour˚Rec‹d
 *
º
, 
mDNSu32


1582 
maxâl
)

1584 i‡(
maxâl
 > 
º
->
º‹igöÆâl
) maxttl =Ñr->rroriginalttl;

1585 (
	`PutResour˚Rec‹dTTL
(
msg
, 
±r
, 
cou¡
, 
º
, 
maxâl
));

1586 
	}
}

1588 
mDNSexp‹t
 
mDNSu8
 *
	$putEm±yResour˚Rec‹d
(
DNSMesßge
 *c⁄° 
msg
, 
mDNSu8
 *
±r
, c⁄° mDNSu8 *c⁄° 
limô
,

1589 
mDNSu16
 *
cou¡
, c⁄° 
AuthRec‹d
 *
º
)

1591 
±r
 = 
	`putDomaöNameAsLabñs
(
msg
,Öå, 
limô
, 
º
->
ª§ec
.
«me
);

1592 i‡(!
±r
 ||Öå + 10 > 
limô
Ë(
mDNSNULL
);

1593 
±r
[0] = (
mDNSu8
)(
º
->
ª§ec
.
ºty≥
 >> 8);

1594 
±r
[1] = (
mDNSu8
)(
º
->
ª§ec
.
ºty≥
 & 0xFF);

1595 
±r
[2] = (
mDNSu8
)(
º
->
ª§ec
.
º˛ass
 >> 8);

1596 
±r
[3] = (
mDNSu8
)(
º
->
ª§ec
.
º˛ass
 & 0xFF);

1597 
±r
[4] =Ötr[5] =Ötr[6] =Ötr[7] = 0;

1598 
±r
[8] =Ötr[9] = 0;

1599 (*
cou¡
)++;

1600 (
±r
 + 10);

1601 
	}
}

1603 
mDNSexp‹t
 
mDNSu8
 *
	$putQue°i⁄
(
DNSMesßge
 *c⁄° 
msg
, 
mDNSu8
 *
±r
, c⁄° mDNSu8 *c⁄° 
limô
, c⁄° 
domaö«me
 *c⁄° 
«me
, 
mDNSu16
 
ºty≥
, mDNSu16 
º˛ass
)

1605 
±r
 = 
	`putDomaöNameAsLabñs
(
msg
,Öå, 
limô
, 
«me
);

1606 i‡(!
±r
 ||Öå+4 >
limô
Ë(
mDNSNULL
);

1607 
±r
[0] = (
mDNSu8
)(
ºty≥
 >> 8);

1608 
±r
[1] = (
mDNSu8
)(
ºty≥
 & 0xFF);

1609 
±r
[2] = (
mDNSu8
)(
º˛ass
 >> 8);

1610 
±r
[3] = (
mDNSu8
)(
º˛ass
 & 0xFF);

1611 
msg
->
h
.
numQue°i⁄s
++;

1612 (
±r
+4);

1613 
	}
}

1616 
mDNSexp‹t
 
mDNSu8
 *
	$putZ⁄e
(
DNSMesßge
 *c⁄° 
msg
, 
mDNSu8
 *
±r
, mDNSu8 *
limô
, c⁄° 
domaö«me
 *
z⁄e
, 
mDNSO∑que16
 
z⁄eCœss
)

1618 
±r
 = 
	`putDomaöNameAsLabñs
(
msg
,Öå, 
limô
, 
z⁄e
);

1619 i‡(!
±r
 ||Öå + 4 > 
limô
Ë 
mDNSNULL
;

1620 *
±r
++ = (
mDNSu8
)(
kDNSTy≥_SOA
 >> 8);

1621 *
±r
++ = (
mDNSu8
)(
kDNSTy≥_SOA
 & 0xFF);

1622 *
±r
++ = 
z⁄eCœss
.
b
[0];

1623 *
±r
++ = 
z⁄eCœss
.
b
[1];

1624 
msg
->
h
.
mDNS_numZ⁄es
++;

1625  
±r
;

1626 
	}
}

1629 
mDNSexp‹t
 
mDNSu8
 *
	$putPªªqNameNŸInU£
(
domaö«me
 *
«me
, 
DNSMesßge
 *
msg
, 
mDNSu8
 *
±r
, mDNSu8 *
íd
)

1631 
AuthRec‹d
 
¥îeq
;

1633 
	`mDNSPœtf‹mMemZîo
(&
¥îeq
, (
AuthRec‹d
));

1634 
	`mDNS_SëupResour˚Rec‹d
(&
¥îeq
, 
mDNSNULL
, 
mDNSI¡îÁ˚_Any
, 
kDNSQTy≥_ANY
, 
kSènd¨dTTL
, 0, mDNSNULL, mDNSNULL);

1635 
	`AssignDomaöName
(
¥îeq
.
ª§ec
.
«me
,Çame);

1636 
¥îeq
.
ª§ec
.
ºty≥
 = 
kDNSQTy≥_ANY
;

1637 
¥îeq
.
ª§ec
.
º˛ass
 = 
kDNSCœss_NONE
;

1638 
±r
 = 
	`putEm±yResour˚Rec‹d
(
msg
,Öå, 
íd
, &msg->
h
.
mDNS_numPªªqs
, &
¥îeq
);

1639  
±r
;

1640 
	}
}

1643 
mDNSexp‹t
 
mDNSu8
 *
	$putDñëi⁄Rec‹d
(
DNSMesßge
 *
msg
, 
mDNSu8
 *
±r
, 
Resour˚Rec‹d
 *
º
)

1645 
mDNSu16
 
‹ig˛ass
;

1648 
‹ig˛ass
 = 
º
->
º˛ass
;

1649 
º
->
º˛ass
 = 
kDNSCœss_NONE
;

1650 
±r
 = 
	`PutResour˚Rec‹dTTLJumbo
(
msg
,Öå, &msg->
h
.
mDNS_numUpd©es
, 
º
, 0);

1651 
º
->
º˛ass
 = 
‹ig˛ass
;

1652  
±r
;

1653 
	}
}

1655 
mDNSexp‹t
 
mDNSu8
 *
	$putDñëeRRSë
(
DNSMesßge
 *
msg
, 
mDNSu8
 *
±r
, c⁄° 
domaö«me
 *
«me
, 
mDNSu16
 
ºty≥
)

1657 c⁄° 
mDNSu8
 *
limô
 = 
msg
->
d©a
 + 
AbsﬁuãMaxDNSMesßgeD©a
;

1658 
mDNSu16
 
˛ass
 = 
kDNSQCœss_ANY
;

1660 
±r
 = 
	`putDomaöNameAsLabñs
(
msg
,Öå, 
limô
, 
«me
);

1661 i‡(!
±r
 ||Öå + 10 >
limô
Ë 
mDNSNULL
;

1662 
±r
[0] = (
mDNSu8
)(
ºty≥
 >> 8);

1663 
±r
[1] = (
mDNSu8
)(
ºty≥
 & 0xFF);

1664 
±r
[2] = (
mDNSu8
)(
˛ass
 >> 8);

1665 
±r
[3] = (
mDNSu8
)(
˛ass
 & 0xFF);

1666 
±r
[4] =Ötr[5] =Ötr[6] =Ötr[7] = 0;

1667 
±r
[8] =Ötr[9] = 0;

1669 
msg
->
h
.
mDNS_numUpd©es
++;

1670  
±r
 + 10;

1671 
	}
}

1674 
mDNSexp‹t
 
mDNSu8
 *
	$putDñëeAŒRRSës
(
DNSMesßge
 *
msg
, 
mDNSu8
 *
±r
, c⁄° 
domaö«me
 *
«me
)

1676 c⁄° 
mDNSu8
 *
limô
 = 
msg
->
d©a
 + 
AbsﬁuãMaxDNSMesßgeD©a
;

1677 
mDNSu16
 
˛ass
 = 
kDNSQCœss_ANY
;

1678 
mDNSu16
 
ºty≥
 = 
kDNSQTy≥_ANY
;

1680 
±r
 = 
	`putDomaöNameAsLabñs
(
msg
,Öå, 
limô
, 
«me
);

1681 i‡(!
±r
 ||Öå + 10 >
limô
Ë 
mDNSNULL
;

1682 
±r
[0] = (
mDNSu8
)(
ºty≥
 >> 8);

1683 
±r
[1] = (
mDNSu8
)(
ºty≥
 & 0xFF);

1684 
±r
[2] = (
mDNSu8
)(
˛ass
 >> 8);

1685 
±r
[3] = (
mDNSu8
)(
˛ass
 & 0xFF);

1686 
±r
[4] =Ötr[5] =Ötr[6] =Ötr[7] = 0;

1687 
±r
[8] =Ötr[9] = 0;

1689 
msg
->
h
.
mDNS_numUpd©es
++;

1690  
±r
 + 10;

1691 
	}
}

1694 
mDNSexp‹t
 
mDNSu8
 *
	$putUpd©eLó£
(
DNSMesßge
 *
msg
, 
mDNSu8
 *
íd
, 
mDNSu32
 
Àa£
)

1696 
AuthRec‹d
 
º
;

1697 
Resour˚Rec‹d
 *
›t
 = &
º
.
ª§ec
;

1698 
rd©aO±
 *
›tRD
;

1700 
	`mDNSPœtf‹mMemZîo
(&
º
, (
AuthRec‹d
));

1701 
	`mDNS_SëupResour˚Rec‹d
(&
º
, 
mDNSNULL
, 
mDNSI¡îÁ˚_Any
, 
kDNSTy≥_OPT
, 
kSènd¨dTTL
, 0, mDNSNULL, mDNSNULL);

1703 
›t
->
Rec‹dTy≥
 = 
kDNSRec‹dTy≥KnownUnique
;

1704 
›t
->
ºty≥
 = 
kDNSTy≥_OPT
;

1705 
›t
->
rdÀngth
 = 
LEASE_OPT_RDLEN
;

1706 
›t
->
rde°im©e
 = 
LEASE_OPT_RDLEN
;

1708 
›tRD
 = &
º
.
ª§ec
.
rd©a
->
u
.
›t
;

1709 
›tRD
->
›t
 = 
kDNSO±_Ló£
;

1710 
›tRD
->
›éí
 = (
mDNSs32
);

1711 
›tRD
->
O±D©a
.
Àa£
 =Üease;

1712 
íd
 = 
	`PutResour˚Rec‹dTTLJumbo
(
msg
,Énd, &msg->
h
.
numAddôi⁄Æs
, 
›t
, 0);

1713 i‡(!
íd
Ë{ 
	`LogMsg
("ERROR:ÖutUpd©eLó£ - PutResour˚Rec‹dTTL");  
mDNSNULL
; }

1715  
íd
;

1716 
	}
}

1719 #i‡
COMPILER_LIKES_PRAGMA_MARK


1720 #¥agm®
m¨k
 -

1721 #¥agm®
m¨k
 - 
DNS
 
Mesßge
 
P¨sög
 
Fun˘i⁄s


1724 
mDNSexp‹t
 
mDNSu32
 
	$DomaöNameHashVÆue
(c⁄° 
domaö«me
 *c⁄° 
«me
)

1726 
mDNSu32
 
sum
 = 0;

1727 c⁄° 
mDNSu8
 *
c
;

1729 
c
 = 
«me
->c; c[0] != 0 && c[1] != 0; c += 2)

1731 
sum
 +((
	`mDNSIsUµîCa£
(
c
[0]) ? c[0] + 'a' - 'A' : c[0]) << 8) |

1732 (
	`mDNSIsUµîCa£
(
c
[1]) ? c[1] + 'a' - 'A' : c[1]);

1733 
sum
 = (sum<<3) | (sum>>29);

1735 i‡(
c
[0]Ë
sum
 +((
	`mDNSIsUµîCa£
(c[0]) ? c[0] + 'a' - 'A' : c[0]) << 8);

1736 (
sum
);

1737 
	}
}

1739 
mDNSexp‹t
 
	$SëNewRD©a
(
Resour˚Rec‹d
 *c⁄° 
º
, 
RD©a
 *
NewRD©a
, 
mDNSu16
 
rdÀngth
)

1741 
domaö«me
 *
èrgë
;

1742 i‡(
NewRD©a
)

1744 
º
->
rd©a
 = 
NewRD©a
;

1745 
º
->
rdÀngth
 =Ñdlength;

1748 
èrgë
 = 
	`GëRRDomaöNameT¨gë
(
º
);

1749 
º
->
rdÀngth
 = 
	`GëRDLígth
‘r, 
mDNSÁl£
);

1750 
º
->
rde°im©e
 = 
	`GëRDLígth
‘r, 
mDNSåue
);

1751 
º
->
rd©ahash
 = 
èrgë
 ? 
	`DomaöNameHashVÆue
—¨gëË: 
	`RD©aHashVÆue
‘r->
rdÀngth
, &º->
rd©a
->
u
);

1752 
	}
}

1754 
mDNSexp‹t
 c⁄° 
mDNSu8
 *
	$skùDomaöName
(c⁄° 
DNSMesßge
 *c⁄° 
msg
, c⁄° 
mDNSu8
 *
±r
, c⁄° mDNSu8 *c⁄° 
íd
)

1756 
mDNSu16
 
tŸÆ
 = 0;

1758 i‡(
±r
 < (
mDNSu8
*)
msg
 ||Öå >
íd
)

1759 { 
	`debugf
("skùDomaöName: IŒegÆÖåÇŸ wôhöÖackë bound¨õs"); (
mDNSNULL
); }

1763 c⁄° 
mDNSu8
 
Àn
 = *
±r
++;

1764 i‡(
Àn
 =0Ë(
±r
);

1765 
Àn
 & 0xC0)

1767 0x00: i‡(
±r
 + 
Àn
 >
íd
)

1768 { 
	`debugf
("skùDomaöName: MÆf‹med domaöÇamê(ovîrun†∑ckëÉnd)"); (
mDNSNULL
); }

1769 i‡(
tŸÆ
 + 1 + 
Àn
 >
MAX_DOMAIN_NAME
)

1770 { 
	`debugf
("skùDomaöName: MÆf‹med domaöÇamê(m‹êth™ 255 ch¨a˘îs)"); (
mDNSNULL
); }

1771 
±r
 +
Àn
;

1772 
tŸÆ
 +1 + 
Àn
;

1775 0x40: 
	`debugf
("skùDomaöName: Exãnded EDNS0ÜabñÅy≥†0x%XÇŸ suµ‹ãd", 
Àn
); (
mDNSNULL
);

1776 0x80: 
	`debugf
("skùDomaöName: IŒegÆÜabñÜígth 0x%X", 
Àn
); (
mDNSNULL
);

1777 0xC0: (
±r
+1);

1780 
	}
}

1783 
mDNSexp‹t
 c⁄° 
mDNSu8
 *
	$gëDomaöName
(c⁄° 
DNSMesßge
 *c⁄° 
msg
, c⁄° 
mDNSu8
 *
±r
, c⁄° mDNSu8 *c⁄° 
íd
,

1784 
domaö«me
 *c⁄° 
«me
)

1786 c⁄° 
mDNSu8
 *
√xtbyã
 = 
mDNSNULL
;

1787 
mDNSu8
 *
≈
 = 
«me
->
c
;

1788 c⁄° 
mDNSu8
 *c⁄° 
limô
 = 
≈
 + 
MAX_DOMAIN_NAME
;

1790 i‡(
±r
 < (
mDNSu8
*)
msg
 ||Öå >
íd
)

1791 { 
	`debugf
("gëDomaöName: IŒegÆÖåÇŸ wôhöÖackë bound¨õs"); (
mDNSNULL
); }

1793 *
≈
 = 0;

1797 c⁄° 
mDNSu8
 
Àn
 = *
±r
++;

1798 i‡(
Àn
 == 0) ;

1799 
Àn
 & 0xC0)

1801 
i
;

1802 
mDNSu16
 
off£t
;

1804 0x00: i‡(
±r
 + 
Àn
 >
íd
)

1805 { 
	`debugf
("gëDomaöName: MÆf‹med domaöÇamê(ovîrun†∑ckëÉnd)"); (
mDNSNULL
); }

1806 i‡(
≈
 + 1 + 
Àn
 >
limô
)

1807 { 
	`debugf
("gëDomaöName: MÆf‹med domaöÇamê(m‹êth™ 255 ch¨a˘îs)"); (
mDNSNULL
); }

1808 *
≈
++ = 
Àn
;

1809 
i
=0; i<
Àn
; i++Ë*
≈
++ = *
±r
++;

1810 *
≈
 = 0;

1813 0x40: 
	`debugf
("gëDomaöName: Exãnded EDNS0ÜabñÅy≥†0x%XÇŸ suµ‹ãd i¿«mê%##s", 
Àn
, 
«me
->
c
);

1814 (
mDNSNULL
);

1816 0x80: 
	`debugf
("gëDomaöName: IŒegÆÜabñÜígth 0x%X i¿domaöÇamê%##s", 
Àn
, 
«me
->
c
); (
mDNSNULL
);

1818 0xC0: 
off£t
 = (
mDNSu16
)((((mDNSu16)(
Àn
 & 0x3F)Ë<< 8Ë| *
±r
++);

1819 i‡(!
√xtbyã
Ë√xtbyã = 
±r
;

1820 
±r
 = (
mDNSu8
 *)
msg
 + 
off£t
;

1821 i‡(
±r
 < (
mDNSu8
*)
msg
 ||Öå >
íd
)

1822 { 
	`debugf
("gëDomaöName: IŒegÆ com¥essi⁄Öoöã∏nŸ wôhöÖackë bound¨õs"); (
mDNSNULL
); }

1823 i‡(*
±r
 & 0xC0)

1824 { 
	`debugf
("gëDomaöName: Com¥essi⁄Öoöã∏mu°ÖoöàtÿªÆÜabñ"); (
mDNSNULL
); }

1829 i‡(
√xtbyã
) (nextbyte);

1830 (
±r
);

1831 
	}
}

1833 
mDNSexp‹t
 c⁄° 
mDNSu8
 *
	$skùResour˚Rec‹d
(c⁄° 
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
±r
, c⁄° mDNSu8 *
íd
)

1835 
mDNSu16
 
pkådÀngth
;

1837 
±r
 = 
	`skùDomaöName
(
msg
,Öå, 
íd
);

1838 i‡(!
±r
Ë{ 
	`debugf
("skùResour˚Rec‹d: MÆf‹med RRÇame"); (
mDNSNULL
); }

1840 i‡(
±r
 + 10 > 
íd
Ë{ 
	`debugf
("skùResour˚Rec‹d: MÆf‹med RR --Çÿty≥/˛ass/âl/Àn!"); (
mDNSNULL
); }

1841 
pkådÀngth
 = (
mDNSu16
)((mDNSu16)
±r
[8] << 8 |Ötr[9]);

1842 
±r
 += 10;

1843 i‡(
±r
 + 
pkådÀngth
 > 
íd
Ë{ 
	`debugf
("skùResour˚Rec‹d: RDATAÉx˚ed†íd o‡∑ckë"); (
mDNSNULL
); }

1845 (
±r
 + 
pkådÀngth
);

1846 
	}
}

1848 
mDNSexp‹t
 c⁄° 
mDNSu8
 *
	$GëL¨geResour˚Rec‹d
(
mDNS
 *c⁄° 
m
, c⁄° 
DNSMesßge
 * c⁄° 
msg
, c⁄° 
mDNSu8
 *
±r
,

1849 c⁄° 
mDNSu8
 *
íd
, c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, mDNSu8 
Rec‹dTy≥
, 
L¨geCacheRec‹d
 *
œrge¸
)

1851 
CacheRec‹d
 *
º
 = &
œrge¸
->
r
;

1852 
mDNSu16
 
pkådÀngth
;

1854 i‡(
œrge¸
 =&
m
->
ªc
 &&Ü¨ge¸->
r
.
ª§ec
.
Rec‹dTy≥
)

1855 
	`LogMsg
("GëL¨geResour˚Rec‹d: m->ª¯≠≥¨†tÿbêÆªady i¿u£ f‹ %s", 
	`CRDi•œySåög
(
m
, &
œrge¸
->
r
));

1857 
º
->
√xt
 = 
mDNSNULL
;

1858 
º
->
ª§ec
.
«me
 = &
œrge¸
->
«me°‹age
;

1860 
º
->
NextInKALi°
 = 
mDNSNULL
;

1861 
º
->
TimeRcvd
 = 
m
 ? m->
timíow
 : 0;

1862 
º
->
DñayDñivîy
 = 0;

1863 
º
->
NextRequúedQuîy
 = 
m
 ? m->
timíow
 : 0;

1864 
º
->
La°U£d
 = 
m
 ? m->
timíow
 : 0;

1865 
º
->
CRA˘iveQue°i⁄
 = 
mDNSNULL
;

1866 
º
->
U«nswîedQuîõs
 = 0;

1867 
º
->
La°U«nswîedTime
= 0;

1868 
º
->
MPU«nswîedQ
 = 0;

1869 
º
->
MPLa°U«nswîedQT
= 0;

1870 
º
->
MPU«nswîedKA
 = 0;

1871 
º
->
MPEx≥˘ögKA
 = 
mDNSÁl£
;

1872 
º
->
NextInCFLi°
 = 
mDNSNULL
;

1874 
º
->
ª§ec
.
I¡îÁ˚ID
 = InterfaceID;

1875 
±r
 = 
	`gëDomaöName
(
msg
,Öå, 
íd
, 
º
->
ª§ec
.
«me
);

1876 i‡(!
±r
Ë{ 
	`debugf
("GëResour˚Rec‹d: MÆf‹med RRÇame"); (
mDNSNULL
); }

1878 i‡(
±r
 + 10 > 
íd
Ë{ 
	`debugf
("GëResour˚Rec‹d: MÆf‹med RR --Çÿty≥/˛ass/âl/Àn!"); (
mDNSNULL
); }

1880 
º
->
ª§ec
.
ºty≥
 = (
mDNSu16
Ë((mDNSu16)
±r
[0] << 8 |Ötr[1]);

1881 
º
->
ª§ec
.
º˛ass
 = (
mDNSu16
)(((mDNSu16)
±r
[2] << 8 |Öå[3]Ë& 
kDNSCœss_Mask
);

1882 
º
->
ª§ec
.
º‹igöÆâl
 = (
mDNSu32
Ë((mDNSu32)
±r
[4] << 24 | (mDNSu32)ptr[5] << 16 | (mDNSu32)ptr[6] << 8 |Ötr[7]);

1883 i‡(
º
->
ª§ec
.
º‹igöÆâl
 > 0x70000000UL / 
mDNSPœtf‹mO√Sec⁄d
 && (
mDNSs32
)rr->resrec.rroriginalttl != -1)

1884 
º
->
ª§ec
.
º‹igöÆâl
 = 0x70000000UL / 
mDNSPœtf‹mO√Sec⁄d
;

1887 
pkådÀngth
 = (
mDNSu16
)((mDNSu16)
±r
[8] << 8 |Ötr[9]);

1888 i‡(
±r
[2] & (
kDNSCœss_UniqueRRSë
 >> 8))

1889 
Rec‹dTy≥
 |
kDNSRec‹dTy≥PackëUniqueMask
;

1890 
±r
 += 10;

1891 i‡(
±r
 + 
pkådÀngth
 > 
íd
Ë{ 
	`debugf
("GëResour˚Rec‹d: RDATAÉx˚ed†íd o‡∑ckë"); (
mDNSNULL
); }

1892 
íd
 = 
±r
 + 
pkådÀngth
;

1894 
º
->
ª§ec
.
rd©a
 = (
RD©a
*)&º->
rd©a°‹age
;

1895 
º
->
ª§ec
.
rd©a
->
MaxRDLígth
 = 
MaximumRDSize
;

1897 i‡(!
Rec‹dTy≥
Ë
	`LogMsg
("GëL¨geResour˚Rec‹d: NÿRec‹dTy≥ f‹ %##s", 
º
->
ª§ec
.
«me
->
c
);

1899 
º
->
ª§ec
.
ºty≥
)

1901 
kDNSTy≥_A
: 
º
->
ª§ec
.
rd©a
->
u
.
ùv4
.
b
[0] = 
±r
[0];

1902 
º
->
ª§ec
.
rd©a
->
u
.
ùv4
.
b
[1] = 
±r
[1];

1903 
º
->
ª§ec
.
rd©a
->
u
.
ùv4
.
b
[2] = 
±r
[2];

1904 
º
->
ª§ec
.
rd©a
->
u
.
ùv4
.
b
[3] = 
±r
[3];

1907 
kDNSTy≥_CNAME
:

1908 
kDNSTy≥_NS
:

1909 
kDNSTy≥_PTR
: i‡(!
	`gëDomaöName
(
msg
, 
±r
, 
íd
, &
º
->
ª§ec
.
rd©a
->
u
.
«me
))

1910 { 
	`debugf
("GëResour˚Rec‹d: MÆf‹med CNAME/PTR RDATAÇame"); (
mDNSNULL
); }

1914 
kDNSTy≥_NULL
:

1915 
kDNSTy≥_HINFO
:

1916 
kDNSTy≥_TXT
: i‡(
pkådÀngth
 > 
º
->
ª§ec
.
rd©a
->
MaxRDLígth
)

1918 
	`debugf
("GetResourceRecord: %sÑdata size (%d)Éxceeds storage (%d)",

1919 
	`DNSTy≥Name
(
º
->
ª§ec
.
ºty≥
), 
pkådÀngth
,Ñr->ª§ec.
rd©a
->
MaxRDLígth
);

1920 (
mDNSNULL
);

1922 
º
->
ª§ec
.
rdÀngth
 = 
pkådÀngth
;

1923 
	`mDNSPœtf‹mMemC›y
(
±r
, 
º
->
ª§ec
.
rd©a
->
u
.
d©a
, 
pkådÀngth
);

1926 
kDNSTy≥_AAAA
: 
	`mDNSPœtf‹mMemC›y
(
±r
, &
º
->
ª§ec
.
rd©a
->
u
.
ùv6
, (rr->resrec.rdata->u.ipv6));

1929 
kDNSTy≥_SRV
: 
º
->
ª§ec
.
rd©a
->
u
.
§v
.
¥i‹ôy
 = (
mDNSu16
)((mDNSu16)
±r
[0] << 8 |Ötr[1]);

1930 
º
->
ª§ec
.
rd©a
->
u
.
§v
.
weight
 = (
mDNSu16
)((mDNSu16)
±r
[2] << 8 |Ötr[3]);

1931 
º
->
ª§ec
.
rd©a
->
u
.
§v
.
p‹t
.
b
[0] = 
±r
[4];

1932 
º
->
ª§ec
.
rd©a
->
u
.
§v
.
p‹t
.
b
[1] = 
±r
[5];

1933 i‡(!
	`gëDomaöName
(
msg
, 
±r
+6, 
íd
, &
º
->
ª§ec
.
rd©a
->
u
.
§v
.
èrgë
))

1934 { 
	`debugf
("GëResour˚Rec‹d: MÆf‹med SRV RDATAÇame"); (
mDNSNULL
); }

1938 
kDNSTy≥_SOA
: 
±r
 = 
	`gëDomaöName
(
msg
,Öå, 
íd
, &
º
->
ª§ec
.
rd©a
->
u
.
sﬂ
.
m«me
);

1939 i‡(!
±r
Ë{ 
	`debugf
("GëResour˚Rec‹d: MÆf‹med SOA RDATA m«me");  
mDNSNULL
; }

1940 
±r
 = 
	`gëDomaöName
(
msg
,Öå, 
íd
, &
º
->
ª§ec
.
rd©a
->
u
.
sﬂ
.
∫ame
);

1941 i‡(!
±r
Ë{ 
	`debugf
("GëResour˚Rec‹d: MÆf‹med SOA RDATAÑ«me");  
mDNSNULL
; }

1942 i‡(
±r
 + 0x14 !
íd
Ë{ 
	`debugf
("GëResour˚Rec‹d: MÆf‹med SOA RDATA");  
mDNSNULL
; }

1943 
º
->
ª§ec
.
rd©a
->
u
.
sﬂ
.
£rül
 = (
mDNSs32
Ë((mDNSs32)
±r
[0x00] << 24 | (mDNSs32)ptr[0x01] << 16 | (mDNSs32)ptr[0x02] << 8 |Ötr[0x03]);

1944 
º
->
ª§ec
.
rd©a
->
u
.
sﬂ
.
ª‰esh
 = (
mDNSu32
Ë((mDNSu32)
±r
[0x04] << 24 | (mDNSu32)ptr[0x05] << 16 | (mDNSu32)ptr[0x06] << 8 |Ötr[0x07]);

1945 
º
->
ª§ec
.
rd©a
->
u
.
sﬂ
.
ªåy
 = (
mDNSu32
Ë((mDNSu32)
±r
[0x08] << 24 | (mDNSu32)ptr[0x09] << 16 | (mDNSu32)ptr[0x0A] << 8 |Ötr[0x0B]);

1946 
º
->
ª§ec
.
rd©a
->
u
.
sﬂ
.
expúe
 = (
mDNSu32
Ë((mDNSu32)
±r
[0x0C] << 24 | (mDNSu32)ptr[0x0D] << 16 | (mDNSu32)ptr[0x0E] << 8 |Ötr[0x0F]);

1947 
º
->
ª§ec
.
rd©a
->
u
.
sﬂ
.
mö
 = (
mDNSu32
Ë((mDNSu32)
±r
[0x10] << 24 | (mDNSu32)ptr[0x11] << 16 | (mDNSu32)ptr[0x12] << 8 |Ötr[0x13]);

1950 
kDNSTy≥_OPT
: 
	`gëO±Rd©a
(
±r
, 
íd
, 
œrge¸
, 
pkådÀngth
); ;

1952 : i‡(
pkådÀngth
 > 
º
->
ª§ec
.
rd©a
->
MaxRDLígth
)

1954 
	`debugf
("GetResourceRecord:Ñdata %d (%s) size (%d)Éxceeds storage (%d)",

1955 
º
->
ª§ec
.
ºty≥
, 
	`DNSTy≥Name
‘r->ª§ec.ºty≥), 
pkådÀngth
,Ñr->ª§ec.
rd©a
->
MaxRDLígth
);

1956 (
mDNSNULL
);

1958 
	`debugf
("GetResourceRecord: Warning! ReadingÑesourceÅype %d (%s)ás opaque data",

1959 
º
->
ª§ec
.
ºty≥
, 
	`DNSTy≥Name
(rr->resrec.rrtype));

1965 
º
->
ª§ec
.
rdÀngth
 = 
pkådÀngth
;

1966 
	`mDNSPœtf‹mMemC›y
(
±r
, 
º
->
ª§ec
.
rd©a
->
u
.
d©a
, 
pkådÀngth
);

1970 
º
->
ª§ec
.
«mehash
 = 
	`DomaöNameHashVÆue
‘r->ª§ec.
«me
);

1971 
	`SëNewRD©a
(&
º
->
ª§ec
, 
mDNSNULL
, 0);

1974 
º
->
ª§ec
.
Rec‹dTy≥
 = RecordType;

1975 (
±r
 + 
pkådÀngth
);

1976 
	}
}

1978 
mDNSexp‹t
 c⁄° 
mDNSu8
 *
	$skùQue°i⁄
(c⁄° 
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
±r
, c⁄° mDNSu8 *
íd
)

1980 
±r
 = 
	`skùDomaöName
(
msg
,Öå, 
íd
);

1981 i‡(!
±r
Ë{ 
	`debugf
("skùQue°i⁄: MÆf‹med domaöÇamêö DNS que°i⁄ se˘i⁄"); (
mDNSNULL
); }

1982 i‡(
±r
+4 > 
íd
Ë{ 
	`debugf
("skùQue°i⁄: MÆf‹med DNS que°i⁄ se˘i⁄ --ÇÿquîyÅy≥ánd cœss!"); (
mDNSNULL
); }

1983 (
±r
+4);

1984 
	}
}

1986 
mDNSexp‹t
 c⁄° 
mDNSu8
 *
	$gëQue°i⁄
(c⁄° 
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
±r
, c⁄° mDNSu8 *
íd
, c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
,

1987 
DNSQue°i⁄
 *
que°i⁄
)

1989 
que°i⁄
->
I¡îÁ˚ID
 = InterfaceID;

1990 
±r
 = 
	`gëDomaöName
(
msg
,Öå, 
íd
, &
que°i⁄
->
q«me
);

1991 i‡(!
±r
Ë{ 
	`debugf
("MÆf‹med domaöÇamêö DNS que°i⁄ se˘i⁄"); (
mDNSNULL
); }

1992 i‡(
±r
+4 > 
íd
Ë{ 
	`debugf
("MÆf‹med DNS que°i⁄ se˘i⁄ --ÇÿquîyÅy≥ánd cœss!"); (
mDNSNULL
); }

1994 
que°i⁄
->
q«mehash
 = 
	`DomaöNameHashVÆue
(&que°i⁄->
q«me
);

1995 
que°i⁄
->
qty≥
 = (
mDNSu16
)((mDNSu16)
±r
[0] << 8 |Ötr[1]);

1996 
que°i⁄
->
q˛ass
 = (
mDNSu16
)((mDNSu16)
±r
[2] << 8 |Ötr[3]);

1997 (
±r
+4);

1998 
	}
}

2000 
mDNSexp‹t
 c⁄° 
mDNSu8
 *
	$LoˇãAnswîs
(c⁄° 
DNSMesßge
 *c⁄° 
msg
, c⁄° 
mDNSu8
 *c⁄° 
íd
)

2002 
i
;

2003 c⁄° 
mDNSu8
 *
±r
 = 
msg
->
d©a
;

2004 
i
 = 0; i < 
msg
->
h
.
numQue°i⁄s
 && 
±r
; i++Ë±∏
	`skùQue°i⁄
(msg,Öå, 
íd
);

2005 (
±r
);

2006 
	}
}

2008 
mDNSexp‹t
 c⁄° 
mDNSu8
 *
	$LoˇãAuth‹ôõs
(c⁄° 
DNSMesßge
 *c⁄° 
msg
, c⁄° 
mDNSu8
 *c⁄° 
íd
)

2010 
i
;

2011 c⁄° 
mDNSu8
 *
±r
 = 
	`LoˇãAnswîs
(
msg
, 
íd
);

2012 
i
 = 0; i < 
msg
->
h
.
numAnswîs
 && 
±r
; i++Ë±∏
	`skùResour˚Rec‹d
(msg,Öå, 
íd
);

2013 (
±r
);

2014 
	}
}

2016 
mDNSexp‹t
 c⁄° 
mDNSu8
 *
	$LoˇãAddôi⁄Æs
(c⁄° 
DNSMesßge
 *c⁄° 
msg
, c⁄° 
mDNSu8
 *c⁄° 
íd
)

2018 
i
;

2019 c⁄° 
mDNSu8
 *
±r
 = 
	`LoˇãAuth‹ôõs
(
msg
, 
íd
);

2020 
i
 = 0; i < 
msg
->
h
.
numAuth‹ôõs
; i++Ë
±r
 = 
	`skùResour˚Rec‹d
(msg,Öå, 
íd
);

2021  (
±r
);

2022 
	}
}

2025 #i‡
COMPILER_LIKES_PRAGMA_MARK


2026 #¥agm®
m¨k
 -

2027 #¥agm®
m¨k
 -

2028 #¥agm®
m¨k
 - 
Packë
 
Sídög
 
Fun˘i⁄s


2031 
mDNSexp‹t
 
mSètus
 
	$mDNSSídDNSMesßge
(c⁄° 
mDNS
 *c⁄° 
m
, 
DNSMesßge
 *c⁄° 
msg
, 
mDNSu8
 *
íd
,

2032 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, c⁄° 
mDNSAddr
 *
d°
, 
mDNSIPP‹t
 
d°p‹t
, 
sd
, 
uDNS_AuthInfo
 *
authInfo
)

2034 
mSètus
 
°©us
;

2035 
n£¡
;

2036 
mDNSs32
 
msgÀn
;

2037 
mDNSu8
 
Ànbuf
[2];

2038 
mDNSu16
 
numQue°i⁄s
 = 
msg
->
h
.numQuestions;

2039 
mDNSu16
 
numAnswîs
 = 
msg
->
h
.numAnswers;

2040 
mDNSu16
 
numAuth‹ôõs
 = 
msg
->
h
.numAuthorities;

2041 
mDNSu16
 
numAddôi⁄Æs
 = 
msg
->
h
.numAdditionals;

2042 
mDNSu8
 *
±r
 = (mDNSu8 *)&
msg
->
h
.
numQue°i⁄s
;

2045 *
±r
++ = (
mDNSu8
)(
numQue°i⁄s
 >> 8);

2046 *
±r
++ = (
mDNSu8
)(
numQue°i⁄s
 & 0xFF);

2047 *
±r
++ = (
mDNSu8
)(
numAnswîs
 >> 8);

2048 *
±r
++ = (
mDNSu8
)(
numAnswîs
 & 0xFF);

2049 *
±r
++ = (
mDNSu8
)(
numAuth‹ôõs
 >> 8);

2050 *
±r
++ = (
mDNSu8
)(
numAuth‹ôõs
 & 0xFF);

2051 *
±r
++ = (
mDNSu8
)(
numAddôi⁄Æs
 >> 8);

2052 *
±r
++ = (
mDNSu8
)(
numAddôi⁄Æs
 & 0xFF);

2054 i‡(
authInfo
)

2056 
íd
 = 
	`DNSDige°_SignMesßge
(
msg
, &íd, &
numAddôi⁄Æs
, 
authInfo
);

2057 i‡(!
íd
Ë 
mSètus_UnknownEº
;

2062 i‡(
sd
 >= 0)

2064 
msgÀn
 = (
mDNSu16
)(
íd
 - (
mDNSu8
 *)
msg
);

2065 
Ànbuf
[0] = (
mDNSu8
)(
msgÀn
 >> 8);

2066 
Ànbuf
[1] = (
mDNSu8
)(
msgÀn
 & 0xFF);

2067 
n£¡
 = 
	`mDNSPœtf‹mWrôeTCP
(
sd
, (*)
Ànbuf
, 2);

2069 i‡(
n£¡
 !2Ë
t˝_îr‹
;

2070 
n£¡
 = 
	`mDNSPœtf‹mWrôeTCP
(
sd
, (*)
msg
, 
msgÀn
);

2071 i‡(
n£¡
 !
msgÀn
Ë
t˝_îr‹
;

2072 
°©us
 = 
mSètus_NoEº‹
;

2076 
°©us
 = 
	`mDNSPœtf‹mSídUDP
(
m
, 
msg
, 
íd
, 
I¡îÁ˚ID
, 
d°
, 
d°p‹t
);

2080 
msg
->
h
.
numQue°i⁄s
 =ÇumQuestions;

2081 
msg
->
h
.
numAnswîs
 =ÇumAnswers;

2082 
msg
->
h
.
numAuth‹ôõs
 =ÇumAuthorities;

2083 
msg
->
h
.
numAddôi⁄Æs
 = (
mDNSu16
)(
authInfo
 ?ÇumAdditionals - 1 :ÇumAdditionals);

2085 (
°©us
);

2087 
t˝_îr‹
:

2088 
	`LogMsg
("mDNSSendDNSMessage:Érror sending message overÅcp");

2089  
mSètus_UnknownEº
;

2090 
	}
}

2093 #i‡
COMPILER_LIKES_PRAGMA_MARK


2094 #¥agm®
m¨k
 -

2095 #¥agm®
m¨k
 - 
RR
 
Li°
 
M™agemít
 & 
Task
 Management

2098 
mDNSexp‹t
 
	$mDNS_Lock
(
mDNS
 *c⁄° 
m
)

2101 
	`mDNSPœtf‹mLock
(
m
);

2107 i‡(
m
->
mDNS_busy
 !m->
mDNS_ªíå™cy
)

2108 
	`LogMsg
("mDNS_Lock: Lockög faûuª! mDNS_busy (%ldË!mDNS_ªíå™cy (%ld)", 
m
->
mDNS_busy
, m->
mDNS_ªíå™cy
);

2112 i‡(
m
->
mDNS_busy
 == 0)

2114 i‡(
m
->
timíow
)

2115 
	`LogMsg
("mDNS_Lock: m->timíowáÃódy së (%ld/%ld)", 
m
->
timíow
, 
	`mDNS_TimeNow_NoLock
(m));

2116 
m
->
timíow
 = 
	`mDNS_TimeNow_NoLock
(m);

2117 i‡(
m
->
timíow
 == 0) m->timenow = 1;

2119 i‡(
m
->
timíow
 == 0)

2121 
	`LogMsg
("mDNS_Lock: m->mDNS_busy i†%ld buàm->timíowÇŸ së", 
m
->
mDNS_busy
);

2122 
m
->
timíow
 = 
	`mDNS_TimeNow_NoLock
(m);

2123 i‡(
m
->
timíow
 == 0) m->timenow = 1;

2126 i‡(
m
->
timíow_œ°
 - m->
timíow
 > 0)

2128 
m
->
timíow_adju°
 +m->
timíow_œ°
 - m->
timíow
;

2130 
m
->
timíow
 = m->
timíow_œ°
;

2132 
m
->
timíow_œ°
 = m->
timíow
;

2135 
m
->
mDNS_busy
++;

2136 
	}
}

2138 
mDNSloˇl
 
mDNSs32
 
	$GëNextScheduÀdEvít
(c⁄° 
mDNS
 *c⁄° 
m
)

2140 
mDNSs32
 
e
 = 
m
->
timíow
 + 0x78000000;

2141 i‡(
m
->
mDNSPœtf‹mSètus
 !
mSètus_NoEº‹
 || m->
SÀïSèã
Ë(
e
);

2142 i‡(
m
->
NewQue°i⁄s
)

2144 i‡(
m
->
NewQue°i⁄s
->
DñayAnswîög
Ë
e
 = m->NewQuestions->DelayAnswering;

2145 (
m
->
timíow
);

2147 i‡(
m
->
NewLoˇlO∆yQue°i⁄s
Ë(m->
timíow
);

2148 i‡(
m
->
NewLoˇlRec‹ds
 && 
	`LoˇlRec‹dRódy
(m->NewLoˇlRec‹ds)Ë(m->
timíow
);

2149 i‡(
m
->
SuµªssSídög
) (m->SuppressSending);

2150 #i‚de‡
UNICAST_DISABLED


2151 i‡(
e
 - 
m
->
uDNS_öfo
.
√xãvít
 > 0)É = m->uDNS_info.nextevent;

2153 i‡(
e
 - 
m
->
NextCacheCheck
 > 0)É = m->NextCacheCheck;

2154 i‡(
e
 - 
m
->
NextScheduÀdQuîy
 > 0)É = m->NextScheduledQuery;

2155 i‡(
e
 - 
m
->
NextScheduÀdProbe
 > 0)É = m->NextScheduledProbe;

2156 i‡(
e
 - 
m
->
NextScheduÀdRe•⁄£
 > 0)É = m->NextScheduledResponse;

2157 (
e
);

2158 
	}
}

2160 
mDNSexp‹t
 
	$mDNS_U∆ock
(
mDNS
 *c⁄° 
m
)

2163 
m
->
mDNS_busy
--;

2166 i‡(
m
->
mDNS_busy
 !m->
mDNS_ªíå™cy
)

2167 
	`LogMsg
("mDNS_U∆ock: Lockög faûuª! mDNS_busy (%ldË!mDNS_ªíå™cy (%ld)", 
m
->
mDNS_busy
, m->
mDNS_ªíå™cy
);

2170 i‡(
m
->
mDNS_busy
 == 0)

2172 
m
->
NextScheduÀdEvít
 = 
	`GëNextScheduÀdEvít
(m);

2173 i‡(
m
->
timíow
 =0Ë
	`LogMsg
("mDNS_Unlock: ERROR! m->timenowáready zero");

2174 
m
->
timíow
 = 0;

2178 
	`mDNSPœtf‹mU∆ock
(
m
);

2179 
	}
}

	@mdns/DNSCommon.h

139 #i‚de‡
__DNSCOMMON_H_


140 
	#__DNSCOMMON_H_


	)

142 
	~"mDNSEmbeddedAPI.h
"

144 #ifdef 
__˝lu•lus


150 #i‡
COMPILER_LIKES_PRAGMA_MARK


151 #¥agm®
m¨k
 - 
DNS
 
PrŸocﬁ
 
C⁄°™ts


156 
kDNSFœg0_QR_Mask
 = 0x80,

157 
kDNSFœg0_QR_Quîy
 = 0x00,

158 
kDNSFœg0_QR_Re•⁄£
 = 0x80,

160 
kDNSFœg0_OP_Mask
 = 0x78,

161 
kDNSFœg0_OP_StdQuîy
 = 0x00,

162 
kDNSFœg0_OP_Iquîy
 = 0x08,

163 
kDNSFœg0_OP_Sètus
 = 0x10,

164 
kDNSFœg0_OP_Unu£d3
 = 0x18,

165 
kDNSFœg0_OP_NŸify
 = 0x20,

166 
kDNSFœg0_OP_Upd©e
 = 0x28,

168 
kDNSFœg0_QROP_Mask
 = 
kDNSFœg0_QR_Mask
 | 
kDNSFœg0_OP_Mask
,

170 
kDNSFœg0_AA
 = 0x04,

171 
kDNSFœg0_TC
 = 0x02,

172 
kDNSFœg0_RD
 = 0x01,

173 
kDNSFœg1_RA
 = 0x80,

175 
kDNSFœg1_Zîo
 = 0x40,

176 
kDNSFœg1_AD
 = 0x20,

177 
kDNSFœg1_CD
 = 0x10,

179 
kDNSFœg1_RC
 = 0x0F,

180 
kDNSFœg1_RC_NoEº
 = 0x00,

181 
kDNSFœg1_RC_FmtEº
 = 0x01,

182 
kDNSFœg1_RC_SrvEº
 = 0x02,

183 
kDNSFœg1_RC_NXDomaö
 = 0x03,

184 
kDNSFœg1_RC_NŸIm∂
 = 0x04,

185 
kDNSFœg1_RC_Refu£d
 = 0x05,

186 
kDNSFœg1_RC_YXDomaö
 = 0x06,

187 
kDNSFœg1_RC_YXRRSë
 = 0x07,

188 
kDNSFœg1_RC_NXRRSë
 = 0x08,

189 
kDNSFœg1_RC_NŸAuth
 = 0x09,

190 
kDNSFœg1_RC_NŸZ⁄e
 = 0x0A

191 } 
	tDNS_Fœgs
;

195 
TSIG_EºBadSig
 = 16,

196 
TSIG_EºBadKey
 = 17,

197 
TSIG_EºBadTime
 = 18

198 } 
	tTSIG_Eº‹Code
;

202 #i‡
COMPILER_LIKES_PRAGMA_MARK


203 #¥agm®
m¨k
 -

204 #¥agm®
m¨k
 - 
GíîÆ
 
Utûôy
 
Fun˘i⁄s


207 c⁄° 
Nëw‹kI¡îÁ˚Info
 *
GëFú°A˘iveI¡îÁ˚
(c⁄° Nëw‹kI¡îÁ˚Infÿ*
ötf
);

208 
mDNSI¡îÁ˚ID
 
GëNextA˘iveI¡îÁ˚ID
(c⁄° 
Nëw‹kI¡îÁ˚Info
 *
ötf
);

210 
mDNSu32
 
mDNSR™dom
(mDNSu32 
max
);

211 
mDNSu32
 
mDNSR™domFromFixedSìd
(mDNSu32 
£ed
, mDNSu32 
max
);

215 #i‡
COMPILER_LIKES_PRAGMA_MARK


216 #¥agm®
m¨k
 -

217 #¥agm®
m¨k
 - 
Domaö
 
Name
 
Utûôy
 
Fun˘i⁄s


220 
	#mdnsIsDigô
(
X
Ë((XË>'0' && (XË<'9')

	)

221 
	#mDNSIsUµîCa£
(
X
Ë((XË>'A' && (XË<'Z')

	)

222 
	#mDNSIsLowîCa£
(
X
Ë((XË>'a' && (XË<'z')

	)

223 
	#mdnsIsLëãr
(
X
Ë(
	`mDNSIsUµîCa£
(XË|| 
	`mDNSIsLowîCa£
(X))

	)

225 
	#mdnsVÆidHo°Ch¨
(
X
, 
nŸfú°
, 
nŸœ°
Ë(
	`mdnsIsLëãr
(XË|| 
	`mdnsIsDigô
(XË|| (“Ÿfú°Ë&& (nŸœ°Ë&& (XË='-'Ë)

	)

227 
mDNSu16
 
Com¥es£dDomaöNameLígth
(c⁄° 
domaö«me
 *c⁄° 
«me
, c⁄° domaö«mê*
∑ª¡
);

229 
mDNSu32
 
TrunˇãUTF8ToLígth
(
mDNSu8
 *
°rög
, mDNSu32 
Àngth
, mDNSu32 
max
);

230 
mDNSBoﬁ
 
LabñC⁄èösSuffix
(c⁄° 
domaöœbñ
 *c⁄° 
«me
, c⁄° mDNSBoﬁ 
RichText
);

231 
mDNSu32
 
RemoveLabñSuffix
(
domaöœbñ
 *
«me
, 
mDNSBoﬁ
 
RichText
);

232 
AµídLabñSuffix
(
domaöœbñ
 *
«me
, 
mDNSu32
 
vÆ
, 
mDNSBoﬁ
 
RichText
);

233 
mDNS_Ho°NameCÆlback
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
, 
mSètus
 
ªsu…
);

234 
	#VÆid©eDomaöName
(
N
Ë(
	`DomaöNameLígth
(NË<
MAX_DOMAIN_NAME
)

	)

238 #i‡
COMPILER_LIKES_PRAGMA_MARK


239 #¥agm®
m¨k
 -

240 #¥agm®
m¨k
 - 
Resour˚
 
Rec‹d
 
Utûôy
 
Fun˘i⁄s


243 
mDNSu32
 
RD©aHashVÆue
(
mDNSu16
 c⁄° 
rdÀngth
, c⁄° 
RD©aBody
 *c⁄° 
rdb
);

245 
mDNSBoﬁ
 
SameRD©aBody
(c⁄° 
Resour˚Rec‹d
 *c⁄° 
r1
, c⁄° 
RD©aBody
 *c⁄° 
r2
);

246 
mDNSBoﬁ
 
SameRD©a
(c⁄° 
Resour˚Rec‹d
 *c⁄° 
r1
, c⁄° Resour˚Rec‹d *c⁄° 
r2
);

248 
mDNSBoﬁ
 
Resour˚Rec‹dAnswîsQue°i⁄
(c⁄° 
Resour˚Rec‹d
 *c⁄° 
º
, c⁄° 
DNSQue°i⁄
 *c⁄° 
q
);

250 
mDNSBoﬁ
 
SameResour˚Rec‹d
(
Resour˚Rec‹d
 *
r1
, Resour˚Rec‹d *
r2
);

252 
mDNSu16
 
GëRDLígth
(c⁄° 
Resour˚Rec‹d
 *c⁄° 
º
, 
mDNSBoﬁ
 
e°im©e
);

254 
	#GëRRDomaöNameT¨gë
(
RR
) ( \

255 ((
RR
)->
ºty≥
 =
kDNSTy≥_CNAME
 || (RR)->ºty≥ =
kDNSTy≥_PTR
 || (RR)->ºty≥ =
kDNSTy≥_NS
) \

256 ? &(
RR
)->
rd©a
->
u
.
«me
 : \

257 ((
RR
)->
ºty≥
 =
kDNSTy≥_SRV
 ) ? &(RR)->
rd©a
->
u
.
§v
.
èrgë
 : 
mDNSNULL
 )

	)

259 
mDNSBoﬁ
 
VÆid©eRD©a
(c⁄° 
mDNSu16
 
ºty≥
, c⁄° mDNSu16 
rdÀngth
, c⁄° 
RD©a
 *c⁄° 
rd
);

260 
	#LoˇlRec‹dRódy
(
X
Ë((X)->
ª§ec
.
Rec‹dTy≥
 !
kDNSRec‹dTy≥Unique
 && (X)->ª§ec.Rec‹dTy≥ !
kDNSRec‹dTy≥Dîegi°îög
)

	)

264 #i‡
COMPILER_LIKES_PRAGMA_MARK


265 #¥agm®
m¨k
 -

266 #¥agm®
m¨k
 -

267 #¥agm®
m¨k
 - 
DNS
 
Mesßge
 
Cª©i⁄
 
Fun˘i⁄s


270 
InôülizeDNSMesßge
(
DNSMesßgeHódî
 *
h
, 
mDNSO∑que16
 
id
, mDNSO∑que16 
Êags
);

271 c⁄° 
mDNSu8
 *
FödCom¥essi⁄Poöãr
(c⁄° mDNSu8 *c⁄° 
ba£
, c⁄° mDNSu8 *c⁄° 
íd
, c⁄° mDNSu8 *c⁄° 
dom«me
);

273 
mDNSu8
 *
putDomaöNameAsLabñs
(c⁄° 
DNSMesßge
 *c⁄° 
msg
, mDNSu8 *
±r
, c⁄° mDNSu8 *c⁄° 
limô
, c⁄° 
domaö«me
 *c⁄° 
«me
);

275 
mDNSu8
 *
putRD©a
(c⁄° 
DNSMesßge
 *c⁄° 
msg
, mDNSu8 *
±r
, c⁄° mDNSu8 *c⁄° 
limô
, 
Resour˚Rec‹d
 *
º
);

280 
mDNSu8
 *
PutResour˚Rec‹dTTLWôhLimô
(
DNSMesßge
 *c⁄° 
msg
, mDNSu8 *
±r
, 
mDNSu16
 *
cou¡
, 
Resour˚Rec‹d
 *
º
, 
mDNSu32
 
âl
, c⁄° mDNSu8 *
limô
);

282 
	#PutResour˚Rec‹dTTL
(
msg
, 
±r
, 
cou¡
, 
º
, 
âl
Ë
	`PutResour˚Rec‹dTTLWôhLimô
((msg), (ptr), (count), (rr), (ttl), \

283 ((
msg
)->
h
.
numAnswîs
 || (msg)->h.
numAuth‹ôõs
 || (msg)->h.
numAddôi⁄Æs
Ë? (msg)->
d©a
 + 
N‹mÆMaxDNSMesßgeD©a
 : (msg)->d©®+ 
AbsﬁuãMaxDNSMesßgeD©a
)

	)

285 
	#PutResour˚Rec‹dTTLJumbo
(
msg
, 
±r
, 
cou¡
, 
º
, 
âl
Ë
	`PutResour˚Rec‹dTTLWôhLimô
((msg), (ptr), (count), (rr), (ttl), \

286 (
msg
)->
d©a
 + 
AbsﬁuãMaxDNSMesßgeD©a
)

	)

288 
mDNSu8
 *
PutResour˚Rec‹dC≠≥dTTL
(
DNSMesßge
 *c⁄° 
msg
, mDNSu8 *
±r
, 
mDNSu16
 *
cou¡
, 
Resour˚Rec‹d
 *
º
, 
mDNSu32
 
maxâl
);

290 
mDNSu8
 *
putEm±yResour˚Rec‹d
(
DNSMesßge
 *c⁄° 
msg
, mDNSu8 *
±r
, c⁄° mDNSu8 *c⁄° 
limô
, 
mDNSu16
 *
cou¡
, c⁄° 
AuthRec‹d
 *
º
);

292 
mDNSu8
 *
putQue°i⁄
(
DNSMesßge
 *c⁄° 
msg
, mDNSu8 *
±r
, c⁄° mDNSu8 *c⁄° 
limô
, c⁄° 
domaö«me
 *c⁄° 
«me
, 
mDNSu16
 
ºty≥
, mDNSu16 
º˛ass
);

294 
mDNSu8
 *
putZ⁄e
(
DNSMesßge
 *c⁄° 
msg
, mDNSu8 *
±r
, mDNSu8 *
limô
, c⁄° 
domaö«me
 *
z⁄e
, 
mDNSO∑que16
 
z⁄eCœss
);

296 
mDNSu8
 *
putPªªqNameNŸInU£
(
domaö«me
 *
«me
, 
DNSMesßge
 *
msg
, mDNSu8 *
±r
, mDNSu8 *
íd
);

298 
mDNSu8
 *
putDñëi⁄Rec‹d
(
DNSMesßge
 *
msg
, mDNSu8 *
±r
, 
Resour˚Rec‹d
 *
º
);

300 
mDNSu8
 *
putDñëeRRSë
(
DNSMesßge
 *
msg
, mDNSu8 *
±r
, c⁄° 
domaö«me
 *
«me
, 
mDNSu16
 
ºty≥
);

302 
mDNSu8
 *
putDñëeAŒRRSës
(
DNSMesßge
 *
msg
, mDNSu8 *
±r
, c⁄° 
domaö«me
 *
«me
);

304 
mDNSu8
 *
putUpd©eLó£
(
DNSMesßge
 *
msg
, mDNSu8 *
íd
, 
mDNSu32
 
Àa£
);

306 
	#PutResour˚Rec‹d
(
MSG
, 
P
, 
C
, 
RR
Ë
	`PutResour˚Rec‹dTTL
((MSG), (P), (C), (RR), (RR)->
º‹igöÆâl
)

	)

310 #i‡
COMPILER_LIKES_PRAGMA_MARK


311 #¥agm®
m¨k
 -

312 #¥agm®
m¨k
 - 
DNS
 
Mesßge
 
P¨sög
 
Fun˘i⁄s


315 
mDNSu32
 
DomaöNameHashVÆue
(c⁄° 
domaö«me
 *c⁄° 
«me
);

317 
SëNewRD©a
(
Resour˚Rec‹d
 *c⁄° 
º
, 
RD©a
 *
NewRD©a
, 
mDNSu16
 
rdÀngth
);

320 c⁄° 
mDNSu8
 *
skùDomaöName
(c⁄° 
DNSMesßge
 *c⁄° 
msg
, c⁄° mDNSu8 *
±r
, c⁄° mDNSu8 *c⁄° 
íd
);

322 c⁄° 
mDNSu8
 *
gëDomaöName
(c⁄° 
DNSMesßge
 *c⁄° 
msg
, c⁄° mDNSu8 *
±r
, c⁄° mDNSu8 *c⁄° 
íd
,

323 
domaö«me
 *c⁄° 
«me
);

325 c⁄° 
mDNSu8
 *
skùResour˚Rec‹d
(c⁄° 
DNSMesßge
 *
msg
, c⁄° mDNSu8 *
±r
, c⁄° mDNSu8 *
íd
);

327 c⁄° 
mDNSu8
 *
GëL¨geResour˚Rec‹d
(
mDNS
 *c⁄° 
m
, c⁄° 
DNSMesßge
 * c⁄° 
msg
, c⁄° mDNSu8 *
±r
,

328 c⁄° 
mDNSu8
 * 
íd
, c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, mDNSu8 
Rec‹dTy≥
, 
L¨geCacheRec‹d
 *
œrge¸
);

330 c⁄° 
mDNSu8
 *
skùQue°i⁄
(c⁄° 
DNSMesßge
 *
msg
, c⁄° mDNSu8 *
±r
, c⁄° mDNSu8 *
íd
);

332 c⁄° 
mDNSu8
 *
gëQue°i⁄
(c⁄° 
DNSMesßge
 *
msg
, c⁄° mDNSu8 *
±r
, c⁄° mDNSu8 *
íd
, c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
,

333 
DNSQue°i⁄
 *
que°i⁄
);

335 c⁄° 
mDNSu8
 *
LoˇãAnswîs
(c⁄° 
DNSMesßge
 *c⁄° 
msg
, c⁄° mDNSu8 *c⁄° 
íd
);

337 c⁄° 
mDNSu8
 *
LoˇãAuth‹ôõs
(c⁄° 
DNSMesßge
 *c⁄° 
msg
, c⁄° mDNSu8 *c⁄° 
íd
);

339 c⁄° 
mDNSu8
 *
LoˇãAddôi⁄Æs
(c⁄° 
DNSMesßge
 *c⁄° 
msg
, c⁄° mDNSu8 *c⁄° 
íd
);

343 #i‡
COMPILER_LIKES_PRAGMA_MARK


344 #¥agm®
m¨k
 -

345 #¥agm®
m¨k
 -

346 #¥agm®
m¨k
 - 
Packë
 
Sídög
 
Fun˘i⁄s


349 
mSètus
 
mDNSSídDNSMesßge
(c⁄° 
mDNS
 *c⁄° 
m
, 
DNSMesßge
 *c⁄° 
msg
, 
mDNSu8
 *
íd
,

350 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, c⁄° 
mDNSAddr
 *
d°
, 
mDNSIPP‹t
 
d°p‹t
, 
sd
, 
uDNS_AuthInfo
 *
authInfo
);

354 #i‡
COMPILER_LIKES_PRAGMA_MARK


355 #¥agm®
m¨k
 -

356 #¥agm®
m¨k
 - 
RR
 
Li°
 
M™agemít
 & 
Task
 Management

359 
mDNS_Lock
(
mDNS
 *c⁄° 
m
);

360 
mDNS_U∆ock
(
mDNS
 *c⁄° 
m
);

362 #ifdef 
__˝lu•lus


	@mdns/DNSDigest.c

79 #ifde‡
__˝lu•lus


83 
	~"mDNSEmbeddedAPI.h
"

84 
	~"DNSComm⁄.h
"

87 #if(
deföed
(
_MSC_VER
))

91 #¥agm®
w¨nög
(
dißbÀ
:4127)

95 #i‡
COMPILER_LIKES_PRAGMA_MARK


96 #¥agm®
m¨k
 - 
MD5
 
Hash
 
Fun˘i⁄s


229 
	#MD5_DIGEST_LENGTH
 16

	)

230 
	#MD5_BLOCK_BYTES
 64

	)

231 
	#MD5_BLOCK_LONG
 (
MD5_BLOCK_BYTES
 / (
mDNSu32
))

	)

233 
	sMD5°©e_°


235 
mDNSu32
 
A
,
B
,
C
,
D
;

236 
mDNSu32
 
Nl
,
Nh
;

237 
mDNSu32
 
d©a
[
MD5_BLOCK_LONG
];

238 
num
;

239 } 
	tMD5_CTX
;

244 
	#MD5_CBLOCK
 64

	)

245 
	#MD5_LBLOCK
 (
MD5_CBLOCK
/4)

	)

246 
	#MD5_DIGEST_LENGTH
 16

	)

248 
MD5_Inô
(
MD5_CTX
 *
c
);

249 
MD5_Upd©e
(
MD5_CTX
 *
c
, c⁄° *
d©a
, 
Àn
);

250 
MD5_FöÆ
(*
md
, 
MD5_CTX
 *
c
);

251 
MD5_Tønsf‹m
(
MD5_CTX
 *
c
, c⁄° *
b
);

255 #i‚de‡
MD5_LONG_LOG2


256 
	#MD5_LONG_LOG2
 2

	)

259 #ifde‡
MD5_ASM


260 #i‡
deföed
(
__i386
Ë|| deföed(
__i386__
Ë|| deföed(
_M_IX86
Ë|| deföed(
__INTEL__
)

261 
	#md5_block_ho°_‹dî
 
md5_block_asm_ho°_‹dî


	)

262 #ñi‡
deföed
(
__•¨c
Ë&& deföed(
OPENSSL_SYS_ULTRASPARC
)

263 
md5_block_asm_d©a_‹dî_Æig√d
 (
MD5_CTX
 *
c
, c⁄° 
mDNSu32
 *
p
,
num
);

264 
	#HASH_BLOCK_DATA_ORDER_ALIGNED
 
md5_block_asm_d©a_‹dî_Æig√d


	)

268 
md5_block_ho°_‹dî
 (
MD5_CTX
 *
c
, c⁄° *
p
,
num
);

269 
md5_block_d©a_‹dî
 (
MD5_CTX
 *
c
, c⁄° *
p
,
num
);

271 #i‡
deföed
(
__i386
Ë|| deföed(
__i386__
Ë|| deföed(
_M_IX86
Ë|| deföed(
__INTEL__
)

293 
	#md5_block_d©a_‹dî
 
md5_block_ho°_‹dî


	)

296 
	#DATA_ORDER_IS_LITTLE_ENDIAN


	)

298 
	#HASH_LONG
 
mDNSu32


	)

299 
	#HASH_LONG_LOG2
 
MD5_LONG_LOG2


	)

300 
	#HASH_CTX
 
MD5_CTX


	)

301 
	#HASH_CBLOCK
 
MD5_CBLOCK


	)

302 
	#HASH_LBLOCK
 
MD5_LBLOCK


	)

304 
	#HASH_UPDATE
 
MD5_Upd©e


	)

305 
	#HASH_TRANSFORM
 
MD5_Tønsf‹m


	)

306 
	#HASH_FINAL
 
MD5_FöÆ


	)

308 
	#HASH_MAKE_STRING
(
c
,
s
) do { \

309 
Œ
; \

310 
Œ
=(
c
)->
A
; 
	`HOST_l2c
÷l,(
s
)); \

311 
Œ
=(
c
)->
B
; 
	`HOST_l2c
÷l,(
s
)); \

312 
Œ
=(
c
)->
C
; 
	`HOST_l2c
÷l,(
s
)); \

313 
Œ
=(
c
)->
D
; 
	`HOST_l2c
÷l,(
s
)); \

314 } 0)

	)

315 
	#HASH_BLOCK_HOST_ORDER
 
md5_block_ho°_‹dî


	)

316 #i‡!
deföed
(
L_ENDIAN
Ë|| deföed(
md5_block_d©a_‹dî
)

317 
	#HASH_BLOCK_DATA_ORDER
 
md5_block_d©a_‹dî


	)

409 #i‡!
deföed
(
DATA_ORDER_IS_BIG_ENDIAN
Ë&& !deföed(
DATA_ORDER_IS_LITTLE_ENDIAN
)

413 #i‚de‡
HASH_CBLOCK


416 #i‚de‡
HASH_LONG


419 #i‚de‡
HASH_CTX


423 #i‚de‡
HASH_UPDATE


426 #i‚de‡
HASH_TRANSFORM


429 #i‚de‡
HASH_FINAL


433 #i‚de‡
HASH_BLOCK_HOST_ORDER


442 #i‚de‡
HASH_BLOCK_DATA_ORDER


447 #i‚de‡
HASH_LBLOCK


448 
	#HASH_LBLOCK
 (
HASH_CBLOCK
/4)

	)

451 #i‚de‡
HASH_LONG_LOG2


452 
	#HASH_LONG_LOG2
 2

	)

458 #unde‡
ROTATE


459 #i‚de‡
PEDANTIC


461 
	#ROTATE
(
a
,
n
Ë
	`_ÃŸl
◊,n)

	)

462 #ñi‡
deföed
(
__MWERKS__
)

463 #i‡
deföed
(
__POWERPC__
)

464 
	#ROTATE
(
a
,
n
Ë(
MD32_REG_T
)
	`__æwöm
((Ô,n,0,31)

	)

465 #ñi‡
deföed
(
__MC68K__
)

467 
	#ROTATE
(
a
,
n
Ë–n<24 ? 
	`__rﬁ
◊,nË: 
	`__r‹
◊,32-nË)

	)

469 
	#ROTATE
(
a
,
n
Ë
	`__rﬁ
◊,n)

	)

471 #ñi‡
deföed
(
__GNUC__
Ë&& __GNUC__>=2 && !deföed(
OPENSSL_NO_ASM
Ë&& !deföed(
OPENSSL_NO_INLINE_ASM
)

479 #i‡
deföed
(
__i386
Ë|| deföed(
__i386__
Ë|| deföed(
__x86_64
Ë|| deföed(
__x86_64__
)

480 
	#ROTATE
(
a
,
n
Ë({ 
ªt
; \

481 
	`asm
 ( \

483 : "Ù"(
ªt
) \

484 : "I"(
n
), "0"(
a
) \

486 
ªt
; \

487 })

	)

488 #ñi‡
deföed
(
__powîpc
Ë|| deföed(
__µc
)

489 
	#ROTATE
(
a
,
n
Ë({ 
ªt
; \

490 
	`asm
 ( \

492 : "Ù"(
ªt
) \

493 : "r"(
a
), "I"(
n
)); \

494 
ªt
; \

495 })

	)

503 #i‡
deföed
(
__GNUC__
Ë&& __GNUC__>=2 && !deföed(
OPENSSL_NO_ASM
Ë&& !deföed(
OPENSSL_NO_INLINE_ASM
)

505 #i‡(
deföed
(
__i386
Ë|| deföed(
__i386__
Ë|| deföed(
__x86_64
Ë|| deföed(
__x86_64__
)Ë&& !deföed(
I386_ONLY
)

506 
	#BE_FETCH32
(
a
Ë({ 
l
=(a);\

507 
	`asm
 ( \

509 : "Ù"(
l
) : "0"(l)); \

510 
l
; \

511 })

	)

512 #ñi‡
deföed
(
__powîpc
)

513 
	#LE_FETCH32
(
a
Ë({ 
l
; \

514 
	`asm
 ( \

516 : "Ù"(
l
) \

517 : "r"(
a
)); \

518 
l
; \

519 })

	)

521 #ñi‡
deföed
(
__•¨c
Ë&& deföed(
OPENSSL_SYS_ULTRASPARC
)

522 
	#LE_FETCH32
(
a
Ë({ 
l
; \

523 
	`asm
 ( \

525 : "Ù"(
l
) \

526 : "r"(
a
)); \

527 
l
; \

528 })

	)

533 #i‡
HASH_LONG_LOG2
==2

535 #ifde‡
ROTATE


537 
	#REVERSE_FETCH32
(
a
,
l
) ( \

538 
l
=*(c⁄° 
HASH_LONG
 *)(
a
), \

539 ((
	`ROTATE
(
l
,8)&0x00FF00FF)|(ROTATE((l&0x00FF00FF),24))) \

540 )

	)

543 
	#REVERSE_FETCH32
(
a
,
l
) ( \

544 
l
=*(c⁄° 
HASH_LONG
 *)(
a
), \

545 
l
=(((l>>8)&0x00FF00FF)|((l&0x00FF00FF)<<8)), \

546 
	`ROTATE
(
l
,16) \

547 )

	)

565 #i‚de‡
ROTATE


566 
	#ROTATE
(
a
,
n
Ë((◊)<<“))|((◊)&0xffffffff)>>(32-“))))

	)

577 #i‡
deföed
(
B_ENDIAN
)

578 #i‡
deföed
(
DATA_ORDER_IS_BIG_ENDIAN
)

579 #i‡!
deföed
(
HASH_BLOCK_DATA_ORDER_ALIGNED
Ë&& 
HASH_LONG_LOG2
==2

580 
	#HASH_BLOCK_DATA_ORDER_ALIGNED
 
HASH_BLOCK_HOST_ORDER


	)

582 #ñi‡
deföed
(
DATA_ORDER_IS_LITTLE_ENDIAN
)

583 #i‚de‡
HOST_FETCH32


584 #ifde‡
LE_FETCH32


585 
	#HOST_FETCH32
(
p
,
l
Ë
	`LE_FETCH32
’)

	)

586 #ñi‡
deföed
(
REVERSE_FETCH32
)

587 
	#HOST_FETCH32
(
p
,
l
Ë
	`REVERSE_FETCH32
’,l)

	)

591 #ñi‡
deföed
(
L_ENDIAN
)

592 #i‡
deföed
(
DATA_ORDER_IS_LITTLE_ENDIAN
)

593 #i‡!
deföed
(
HASH_BLOCK_DATA_ORDER_ALIGNED
Ë&& 
HASH_LONG_LOG2
==2

594 
	#HASH_BLOCK_DATA_ORDER_ALIGNED
 
HASH_BLOCK_HOST_ORDER


	)

596 #ñi‡
deföed
(
DATA_ORDER_IS_BIG_ENDIAN
)

597 #i‚de‡
HOST_FETCH32


598 #ifde‡
BE_FETCH32


599 
	#HOST_FETCH32
(
p
,
l
Ë
	`BE_FETCH32
’)

	)

600 #ñi‡
deföed
(
REVERSE_FETCH32
)

601 
	#HOST_FETCH32
(
p
,
l
Ë
	`REVERSE_FETCH32
’,l)

	)

607 #i‡!
deföed
(
HASH_BLOCK_DATA_ORDER_ALIGNED
)

608 #i‚de‡
HASH_BLOCK_DATA_ORDER


613 #i‡
deföed
(
DATA_ORDER_IS_BIG_ENDIAN
)

615 
	#HOST_c2l
(
c
,
l
) (l =((()(*((c)++)))<<24), \

616 
l
|=((()(*((
c
)++)))<<16), \

617 
l
|=((()(*((
c
)++)))<< 8), \

618 
l
|=((()(*((
c
)++))) ), \

619 
l
)

	)

620 
	#HOST_p_c2l
(
c
,
l
,
n
) { \

621 
n
) { \

622 0: 
l
 =(()(*((
c
)++)))<<24; \

623 1: 
l
|=(()(*((
c
)++)))<<16; \

624 2: 
l
|=(()(*((
c
)++)))<< 8; \

625 3: 
l
|=(()(*((
c
)++))); \

626 } }

	)

627 
	#HOST_p_c2l_p
(
c
,
l
,
sc
,
Àn
) { \

628 
sc
) { \

629 0: 
l
 =(()(*((
c
)++)))<<24; \

630 i‡(--
Àn
 == 0) ; \

631 1: 
l
|=(()(*((
c
)++)))<<16; \

632 i‡(--
Àn
 == 0) ; \

633 2: 
l
|=(()(*((
c
)++)))<< 8; \

634 } }

	)

636 
	#HOST_c2l_p
(
c
,
l
,
n
) { \

637 
l
=0; (
c
)+=
n
; \

638 
n
) { \

639 3: 
l
 =(()(*(--(
c
))))<< 8; \

640 2: 
l
|=(()(*(--(
c
))))<<16; \

641 1: 
l
|=(()(*(--(
c
))))<<24; \

642 } }

	)

643 
	#HOST_l2c
(
l
,
c
) (*((c)++)=()(((l)>>24)&0xff), \

644 *((
c
)++)=()(((
l
)>>16)&0xff), \

645 *((
c
)++)=()(((
l
)>> 8)&0xff), \

646 *((
c
)++)=()(((
l
) )&0xff), \

647 
l
)

	)

649 #ñi‡
deföed
(
DATA_ORDER_IS_LITTLE_ENDIAN
)

651 
	#HOST_c2l
(
c
,
l
) (l =((()(*((c)++))) ), \

652 
l
|=((()(*((
c
)++)))<< 8), \

653 
l
|=((()(*((
c
)++)))<<16), \

654 
l
|=((()(*((
c
)++)))<<24), \

655 
l
)

	)

656 
	#HOST_p_c2l
(
c
,
l
,
n
) { \

657 
n
) { \

658 0: 
l
 =(()(*((
c
)++))); \

659 1: 
l
|=(()(*((
c
)++)))<< 8; \

660 2: 
l
|=(()(*((
c
)++)))<<16; \

661 3: 
l
|=(()(*((
c
)++)))<<24; \

662 } }

	)

663 
	#HOST_p_c2l_p
(
c
,
l
,
sc
,
Àn
) { \

664 
sc
) { \

665 0: 
l
 =(()(*((
c
)++))); \

666 i‡(--
Àn
 == 0) ; \

667 1: 
l
|=(()(*((
c
)++)))<< 8; \

668 i‡(--
Àn
 == 0) ; \

669 2: 
l
|=(()(*((
c
)++)))<<16; \

670 } }

	)

672 
	#HOST_c2l_p
(
c
,
l
,
n
) { \

673 
l
=0; (
c
)+=
n
; \

674 
n
) { \

675 3: 
l
 =(()(*(--(
c
))))<<16; \

676 2: 
l
|=(()(*(--(
c
))))<< 8; \

677 1: 
l
|=(()(*(--(
c
)))); \

678 } }

	)

679 
	#HOST_l2c
(
l
,
c
) (*((c)++)=()(((l) )&0xff), \

680 *((
c
)++)=()(((
l
)>> 8)&0xff), \

681 *((
c
)++)=()(((
l
)>>16)&0xff), \

682 *((
c
)++)=()(((
l
)>>24)&0xff), \

683 
l
)

	)

691 
HASH_UPDATE
 (
HASH_CTX
 *
c
, c⁄° *
d©a_
, 
Àn
)

693 c⁄° *
d©a
=(c⁄° *)
d©a_
;

694 
HASH_LONG
 * 
p
;

695 
l
;

696 
sw
,
sc
,
ew
,
ec
;

698 i‡(
Àn
==0)  1;

700 
l
=(
c
->
Nl
+(
Àn
<<3))&0xffffffffL;

703 i‡(
l
 < 
c
->
Nl
)

704 
c
->
Nh
++;

705 
c
->
Nh
+=(
Àn
>>29);

706 
c
->
Nl
=
l
;

708 i‡(
c
->
num
 != 0)

710 
p
=
c
->
d©a
;

711 
sw
=
c
->
num
>>2;

712 
sc
=
c
->
num
&0x03;

714 i‡((
c
->
num
+
Àn
Ë>
HASH_CBLOCK
)

716 
l
=
p
[
sw
]; 
HOST_p_c2l
(
d©a
,l,
sc
);Ö[sw++]=l;

717 ; 
sw
<
HASH_LBLOCK
; sw++)

719 
HOST_c2l
(
d©a
,
l
); 
p
[
sw
]=l;

721 
HASH_BLOCK_HOST_ORDER
 (
c
,
p
,1);

722 
Àn
-=(
HASH_CBLOCK
-
c
->
num
);

723 
c
->
num
=0;

728 
c
->
num
+=
Àn
;

729 i‡((
sc
+
Àn
) < 4)

731 
l
=
p
[
sw
]; 
HOST_p_c2l_p
(
d©a
,l,
sc
,
Àn
);Ö[sw]=l;

735 
ew
=(
c
->
num
>>2);

736 
ec
=(
c
->
num
&0x03);

737 i‡(
sc
)

738 
l
=
p
[
sw
];

739 
HOST_p_c2l
(
d©a
,
l
,
sc
);

740 
p
[
sw
++]=
l
;

741 ; 
sw
 < 
ew
; sw++)

743 
HOST_c2l
(
d©a
,
l
); 
p
[
sw
]=l;

745 i‡(
ec
)

747 
HOST_c2l_p
(
d©a
,
l
,
ec
); 
p
[
sw
]=l;

754 
sw
=()(
Àn
/
HASH_CBLOCK
);

755 i‡(
sw
 > 0)

757 #i‡
deföed
(
HASH_BLOCK_DATA_ORDER_ALIGNED
)

762 i‡(((()
d©a
)%4) == 0)

765 
HASH_BLOCK_DATA_ORDER_ALIGNED
 (
c
,(
HASH_LONG
 *)
d©a
,
sw
);

766 
sw
*=
HASH_CBLOCK
;

767 
d©a
+=
sw
;

768 
Àn
-=
sw
;

771 #i‡!
deföed
(
HASH_BLOCK_DATA_ORDER
)

772 
sw
--)

774 
mem˝y
 (
p
=
c
->
d©a
,d©a,
HASH_CBLOCK
);

775 
HASH_BLOCK_DATA_ORDER_ALIGNED
(
c
,
p
,1);

776 
d©a
+=
HASH_CBLOCK
;

777 
Àn
-=
HASH_CBLOCK
;

781 #i‡
deföed
(
HASH_BLOCK_DATA_ORDER
)

783 
HASH_BLOCK_DATA_ORDER
(
c
,
d©a
,
sw
);

784 
sw
*=
HASH_CBLOCK
;

785 
d©a
+=
sw
;

786 
Àn
-=
sw
;

791 i‡(
Àn
!=0)

793 
p
 = 
c
->
d©a
;

794 
c
->
num
 = ()
Àn
;

795 
ew
=()(
Àn
>>2);

796 
ec
=()(
Àn
&0x03);

797 ; 
ew
;Éw--,
p
++)

799 
HOST_c2l
(
d©a
,
l
); *
p
=l;

801 
HOST_c2l_p
(
d©a
,
l
,
ec
);

802 *
p
=
l
;

808 
HASH_TRANSFORM
 (
HASH_CTX
 *
c
, c⁄° *
d©a
)

810 #i‡
deföed
(
HASH_BLOCK_DATA_ORDER_ALIGNED
)

811 i‡(((()
d©a
)%4) == 0)

813 
HASH_BLOCK_DATA_ORDER_ALIGNED
 (
c
,(
HASH_LONG
 *)
d©a
,1);

815 #i‡!
deföed
(
HASH_BLOCK_DATA_ORDER
)

817 
mem˝y
 (
c
->
d©a
,d©a,
HASH_CBLOCK
);

818 
HASH_BLOCK_DATA_ORDER_ALIGNED
 (
c
,c->
d©a
,1);

822 #i‡
deföed
(
HASH_BLOCK_DATA_ORDER
)

823 
HASH_BLOCK_DATA_ORDER
 (
c
,
d©a
,1);

828 
HASH_FINAL
 (*
md
, 
HASH_CTX
 *
c
)

830 
HASH_LONG
 *
p
;

831 
l
;

832 
i
,
j
;

833 c⁄° 
íd
[4]={0x80,0x00,0x00,0x00};

834 c⁄° *
˝
=
íd
;

837 
p
=
c
->
d©a
;

838 
i
=
c
->
num
>>2;

839 
j
=
c
->
num
&0x03;

851 #ifde‡
PURIFY


852 i‡(
j
==0Ë
p
[
i
]=0;

854 
l
=
p
[
i
];

856 
l
 = (
j
==0Ë? 0 : 
p
[
i
];

858 
HOST_p_c2l
(
˝
,
l
,
j
); 
p
[
i
++]=l;

860 i‡(
i
>(
HASH_LBLOCK
-2))

862 i‡(
i
<
HASH_LBLOCK
Ë
p
[i]=0;

863 
HASH_BLOCK_HOST_ORDER
 (
c
,
p
,1);

864 
i
=0;

866 ; 
i
<(
HASH_LBLOCK
-2); i++)

867 
p
[
i
]=0;

869 #i‡ 
deföed
(
DATA_ORDER_IS_BIG_ENDIAN
)

870 
p
[
HASH_LBLOCK
-2]=
c
->
Nh
;

871 
p
[
HASH_LBLOCK
-1]=
c
->
Nl
;

872 #ñi‡
deföed
(
DATA_ORDER_IS_LITTLE_ENDIAN
)

873 
p
[
HASH_LBLOCK
-2]=
c
->
Nl
;

874 
p
[
HASH_LBLOCK
-1]=
c
->
Nh
;

876 
HASH_BLOCK_HOST_ORDER
 (
c
,
p
,1);

878 #i‚de‡
HASH_MAKE_STRING


881 
HASH_MAKE_STRING
(
c
,
md
);

884 
c
->
num
=0;

892 #i‚de‡
MD32_REG_T


893 
	#MD32_REG_T
 

	)

929 
	#F
(
b
,
c
,
d
Ë((((cË^ (d)Ë& (b)Ë^ (d))

	)

930 
	#G
(
b
,
c
,
d
Ë((((bË^ (c)Ë& (d)Ë^ (c))

	)

931 
	#H
(
b
,
c
,
d
Ë((bË^ (cË^ (d))

	)

932 
	#I
(
b
,
c
,
d
Ë(((~(d)Ë| (b)Ë^ (c))

	)

934 
	#R0
(
a
,
b
,
c
,
d
,
k
,
s
,
t
) { \

935 
a
+=((
k
)+(
t
)+
	`F
((
b
),(
c
),(
d
))); \

936 
a
=
	`ROTATE
◊,
s
); \

937 
a
+=
b
; };\

938 

	)

939 
	#R1
(
a
,
b
,
c
,
d
,
k
,
s
,
t
) { \

940 
a
+=((
k
)+(
t
)+
	`G
((
b
),(
c
),(
d
))); \

941 
a
=
	`ROTATE
◊,
s
); \

942 
a
+=
b
; };

	)

944 
	#R2
(
a
,
b
,
c
,
d
,
k
,
s
,
t
) { \

945 
a
+=((
k
)+(
t
)+
	`H
((
b
),(
c
),(
d
))); \

946 
a
=
	`ROTATE
◊,
s
); \

947 
a
+=
b
; };

	)

949 
	#R3
(
a
,
b
,
c
,
d
,
k
,
s
,
t
) { \

950 
a
+=((
k
)+(
t
)+
	`I
((
b
),(
c
),(
d
))); \

951 
a
=
	`ROTATE
◊,
s
); \

952 
a
+=
b
; };

	)

960 
	#INIT_DATA_A
 ()0x67452301L

	)

961 
	#INIT_DATA_B
 ()0xefcdab89L

	)

962 
	#INIT_DATA_C
 ()0x98badc„L

	)

963 
	#INIT_DATA_D
 ()0x10325476L

	)

965 
MD5_Inô
(
MD5_CTX
 *
c
)

967 
c
->
A
=
INIT_DATA_A
;

968 
c
->
B
=
INIT_DATA_B
;

969 
c
->
C
=
INIT_DATA_C
;

970 
c
->
D
=
INIT_DATA_D
;

971 
c
->
Nl
=0;

972 
c
->
Nh
=0;

973 
c
->
num
=0;

977 #i‚de‡
md5_block_ho°_‹dî


978 
md5_block_ho°_‹dî
 (
MD5_CTX
 *
c
, c⁄° *
d©a
, 
num
)

980 c⁄° 
mDNSu32
 *
X
=(c⁄° mDNSu32 *)
d©a
;

981 
MD32_REG_T
 
A
,
B
,
C
,
D
;

983 
A
=
c
->A;

984 
B
=
c
->B;

985 
C
=
c
->C;

986 
D
=
c
->D;

988 ;
num
--;
X
+=
HASH_LBLOCK
)

991 
R0
(
A
,
B
,
C
,
D
,
X
[ 0], 7,0xd76aa478L);

992 
R0
(
D
,
A
,
B
,
C
,
X
[ 1],12,0xe8c7b756L);

993 
R0
(
C
,
D
,
A
,
B
,
X
[ 2],17,0x242070dbL);

994 
R0
(
B
,
C
,
D
,
A
,
X
[ 3],22,0xc1bdceeeL);

995 
R0
(
A
,
B
,
C
,
D
,
X
[ 4], 7,0xf57c0fafL);

996 
R0
(
D
,
A
,
B
,
C
,
X
[ 5],12,0x4787c62aL);

997 
R0
(
C
,
D
,
A
,
B
,
X
[ 6],17,0xa8304613L);

998 
R0
(
B
,
C
,
D
,
A
,
X
[ 7],22,0xfd469501L);

999 
R0
(
A
,
B
,
C
,
D
,
X
[ 8], 7,0x698098d8L);

1000 
R0
(
D
,
A
,
B
,
C
,
X
[ 9],12,0x8b44f7afL);

1001 
R0
(
C
,
D
,
A
,
B
,
X
[10],17,0xffff5bb1L);

1002 
R0
(
B
,
C
,
D
,
A
,
X
[11],22,0x895cd7beL);

1003 
R0
(
A
,
B
,
C
,
D
,
X
[12], 7,0x6b901122L);

1004 
R0
(
D
,
A
,
B
,
C
,
X
[13],12,0xfd987193L);

1005 
R0
(
C
,
D
,
A
,
B
,
X
[14],17,0xa679438eL);

1006 
R0
(
B
,
C
,
D
,
A
,
X
[15],22,0x49b40821L);

1008 
R1
(
A
,
B
,
C
,
D
,
X
[ 1], 5,0xf61e2562L);

1009 
R1
(
D
,
A
,
B
,
C
,
X
[ 6], 9,0xc040b340L);

1010 
R1
(
C
,
D
,
A
,
B
,
X
[11],14,0x265e5a51L);

1011 
R1
(
B
,
C
,
D
,
A
,
X
[ 0],20,0xe9b6c7aaL);

1012 
R1
(
A
,
B
,
C
,
D
,
X
[ 5], 5,0xd62f105dL);

1013 
R1
(
D
,
A
,
B
,
C
,
X
[10], 9,0x02441453L);

1014 
R1
(
C
,
D
,
A
,
B
,
X
[15],14,0xd8a1e681L);

1015 
R1
(
B
,
C
,
D
,
A
,
X
[ 4],20,0xe7d3fbc8L);

1016 
R1
(
A
,
B
,
C
,
D
,
X
[ 9], 5,0x21e1cde6L);

1017 
R1
(
D
,
A
,
B
,
C
,
X
[14], 9,0xc33707d6L);

1018 
R1
(
C
,
D
,
A
,
B
,
X
[ 3],14,0xf4d50d87L);

1019 
R1
(
B
,
C
,
D
,
A
,
X
[ 8],20,0x455a14edL);

1020 
R1
(
A
,
B
,
C
,
D
,
X
[13], 5,0xa9e3e905L);

1021 
R1
(
D
,
A
,
B
,
C
,
X
[ 2], 9,0xfcefa3f8L);

1022 
R1
(
C
,
D
,
A
,
B
,
X
[ 7],14,0x676f02d9L);

1023 
R1
(
B
,
C
,
D
,
A
,
X
[12],20,0x8d2a4c8aL);

1025 
R2
(
A
,
B
,
C
,
D
,
X
[ 5], 4,0xfffa3942L);

1026 
R2
(
D
,
A
,
B
,
C
,
X
[ 8],11,0x8771f681L);

1027 
R2
(
C
,
D
,
A
,
B
,
X
[11],16,0x6d9d6122L);

1028 
R2
(
B
,
C
,
D
,
A
,
X
[14],23,0xfde5380cL);

1029 
R2
(
A
,
B
,
C
,
D
,
X
[ 1], 4,0xa4beea44L);

1030 
R2
(
D
,
A
,
B
,
C
,
X
[ 4],11,0x4bdecfa9L);

1031 
R2
(
C
,
D
,
A
,
B
,
X
[ 7],16,0xf6bb4b60L);

1032 
R2
(
B
,
C
,
D
,
A
,
X
[10],23,0xbebfbc70L);

1033 
R2
(
A
,
B
,
C
,
D
,
X
[13], 4,0x289b7ec6L);

1034 
R2
(
D
,
A
,
B
,
C
,
X
[ 0],11,0xeaa127faL);

1035 
R2
(
C
,
D
,
A
,
B
,
X
[ 3],16,0xd4ef3085L);

1036 
R2
(
B
,
C
,
D
,
A
,
X
[ 6],23,0x04881d05L);

1037 
R2
(
A
,
B
,
C
,
D
,
X
[ 9], 4,0xd9d4d039L);

1038 
R2
(
D
,
A
,
B
,
C
,
X
[12],11,0xe6db99e5L);

1039 
R2
(
C
,
D
,
A
,
B
,
X
[15],16,0x1fa27cf8L);

1040 
R2
(
B
,
C
,
D
,
A
,
X
[ 2],23,0xc4ac5665L);

1042 
R3
(
A
,
B
,
C
,
D
,
X
[ 0], 6,0xf4292244L);

1043 
R3
(
D
,
A
,
B
,
C
,
X
[ 7],10,0x432aff97L);

1044 
R3
(
C
,
D
,
A
,
B
,
X
[14],15,0xab9423a7L);

1045 
R3
(
B
,
C
,
D
,
A
,
X
[ 5],21,0xfc93a039L);

1046 
R3
(
A
,
B
,
C
,
D
,
X
[12], 6,0x655b59c3L);

1047 
R3
(
D
,
A
,
B
,
C
,
X
[ 3],10,0x8f0ccc92L);

1048 
R3
(
C
,
D
,
A
,
B
,
X
[10],15,0xffeff47dL);

1049 
R3
(
B
,
C
,
D
,
A
,
X
[ 1],21,0x85845dd1L);

1050 
R3
(
A
,
B
,
C
,
D
,
X
[ 8], 6,0x6fa87e4fL);

1051 
R3
(
D
,
A
,
B
,
C
,
X
[15],10,0xfe2ce6e0L);

1052 
R3
(
C
,
D
,
A
,
B
,
X
[ 6],15,0xa3014314L);

1053 
R3
(
B
,
C
,
D
,
A
,
X
[13],21,0x4e0811a1L);

1054 
R3
(
A
,
B
,
C
,
D
,
X
[ 4], 6,0xf7537e82L);

1055 
R3
(
D
,
A
,
B
,
C
,
X
[11],10,0xbd3af235L);

1056 
R3
(
C
,
D
,
A
,
B
,
X
[ 2],15,0x2ad7d2bbL);

1057 
R3
(
B
,
C
,
D
,
A
,
X
[ 9],21,0xeb86d391L);

1059 
A
 = 
c
->A += A;

1060 
B
 = 
c
->B += B;

1061 
C
 = 
c
->C += C;

1062 
D
 = 
c
->D += D;

1067 #i‚de‡
md5_block_d©a_‹dî


1068 #ifde‡
X


1069 #unde‡
X


1071 
md5_block_d©a_‹dî
 (
MD5_CTX
 *
c
, c⁄° *
d©a_
, 
num
)

1073 c⁄° *
d©a
=
d©a_
;

1074 
MD32_REG_T
 
A
,
B
,
C
,
D
,
l
;

1075 #i‚de‡
MD32_XARRAY


1077 
MD32_REG_T
 
XX0
, 
XX1
, 
XX2
, 
XX3
, 
XX4
, 
XX5
, 
XX6
, 
XX7
,

1078 
XX8
, 
XX9
,
XX10
,
XX11
,
XX12
,
XX13
,
XX14
,
XX15
;

1079 
	#X
(
i
Ë
XX
##
	)
i

1081 
mDNSu32
 
XX
[
MD5_LBLOCK
];

1082 
	#X
(
i
Ë
XX
[i]

	)

1085 
A
=
c
->A;

1086 
B
=
c
->B;

1087 
C
=
c
->C;

1088 
D
=
c
->D;

1090 ;
num
--;)

1092 
HOST_c2l
(
d©a
,
l
); 
X
( 0)=l; HOST_c2l(data,l); X( 1)=l;

1094 
R0
(
A
,
B
,
C
,
D
,
X
–0), 7,0xd76Ø478L); 
HOST_c2l
(
d©a
,
l
); X( 2)=l;

1095 
R0
(
D
,
A
,
B
,
C
,
X
–1),12,0xe8c7b756L); 
HOST_c2l
(
d©a
,
l
); X( 3)=l;

1096 
R0
(
C
,
D
,
A
,
B
,
X
–2),17,0x242070dbL); 
HOST_c2l
(
d©a
,
l
); X( 4)=l;

1097 
R0
(
B
,
C
,
D
,
A
,
X
–3),22,0xc1bd˚ìL); 
HOST_c2l
(
d©a
,
l
); X( 5)=l;

1098 
R0
(
A
,
B
,
C
,
D
,
X
–4), 7,0xf57c0ÁfL); 
HOST_c2l
(
d©a
,
l
); X( 6)=l;

1099 
R0
(
D
,
A
,
B
,
C
,
X
–5),12,0x4787c62aL); 
HOST_c2l
(
d©a
,
l
); X( 7)=l;

1100 
R0
(
C
,
D
,
A
,
B
,
X
–6),17,0xa8304613L); 
HOST_c2l
(
d©a
,
l
); X( 8)=l;

1101 
R0
(
B
,
C
,
D
,
A
,
X
–7),22,0xfd469501L); 
HOST_c2l
(
d©a
,
l
); X( 9)=l;

1102 
R0
(
A
,
B
,
C
,
D
,
X
–8), 7,0x698098d8L); 
HOST_c2l
(
d©a
,
l
); X(10)=l;

1103 
R0
(
D
,
A
,
B
,
C
,
X
–9),12,0x8b44f7afL); 
HOST_c2l
(
d©a
,
l
); X(11)=l;

1104 
R0
(
C
,
D
,
A
,
B
,
X
(10),17,0xffff5bb1L); 
HOST_c2l
(
d©a
,
l
); X(12)=l;

1105 
R0
(
B
,
C
,
D
,
A
,
X
(11),22,0x895cd7beL); 
HOST_c2l
(
d©a
,
l
); X(13)=l;

1106 
R0
(
A
,
B
,
C
,
D
,
X
(12), 7,0x6b901122L); 
HOST_c2l
(
d©a
,
l
); X(14)=l;

1107 
R0
(
D
,
A
,
B
,
C
,
X
(13),12,0xfd987193L); 
HOST_c2l
(
d©a
,
l
); X(15)=l;

1108 
R0
(
C
,
D
,
A
,
B
,
X
(14),17,0xa679438eL);

1109 
R0
(
B
,
C
,
D
,
A
,
X
(15),22,0x49b40821L);

1111 
R1
(
A
,
B
,
C
,
D
,
X
( 1), 5,0xf61e2562L);

1112 
R1
(
D
,
A
,
B
,
C
,
X
( 6), 9,0xc040b340L);

1113 
R1
(
C
,
D
,
A
,
B
,
X
(11),14,0x265e5a51L);

1114 
R1
(
B
,
C
,
D
,
A
,
X
( 0),20,0xe9b6c7aaL);

1115 
R1
(
A
,
B
,
C
,
D
,
X
( 5), 5,0xd62f105dL);

1116 
R1
(
D
,
A
,
B
,
C
,
X
(10), 9,0x02441453L);

1117 
R1
(
C
,
D
,
A
,
B
,
X
(15),14,0xd8a1e681L);

1118 
R1
(
B
,
C
,
D
,
A
,
X
( 4),20,0xe7d3fbc8L);

1119 
R1
(
A
,
B
,
C
,
D
,
X
( 9), 5,0x21e1cde6L);

1120 
R1
(
D
,
A
,
B
,
C
,
X
(14), 9,0xc33707d6L);

1121 
R1
(
C
,
D
,
A
,
B
,
X
( 3),14,0xf4d50d87L);

1122 
R1
(
B
,
C
,
D
,
A
,
X
( 8),20,0x455a14edL);

1123 
R1
(
A
,
B
,
C
,
D
,
X
(13), 5,0xa9e3e905L);

1124 
R1
(
D
,
A
,
B
,
C
,
X
( 2), 9,0xfcefa3f8L);

1125 
R1
(
C
,
D
,
A
,
B
,
X
( 7),14,0x676f02d9L);

1126 
R1
(
B
,
C
,
D
,
A
,
X
(12),20,0x8d2a4c8aL);

1128 
R2
(
A
,
B
,
C
,
D
,
X
( 5), 4,0xfffa3942L);

1129 
R2
(
D
,
A
,
B
,
C
,
X
( 8),11,0x8771f681L);

1130 
R2
(
C
,
D
,
A
,
B
,
X
(11),16,0x6d9d6122L);

1131 
R2
(
B
,
C
,
D
,
A
,
X
(14),23,0xfde5380cL);

1132 
R2
(
A
,
B
,
C
,
D
,
X
( 1), 4,0xa4beea44L);

1133 
R2
(
D
,
A
,
B
,
C
,
X
( 4),11,0x4bdecfa9L);

1134 
R2
(
C
,
D
,
A
,
B
,
X
( 7),16,0xf6bb4b60L);

1135 
R2
(
B
,
C
,
D
,
A
,
X
(10),23,0xbebfbc70L);

1136 
R2
(
A
,
B
,
C
,
D
,
X
(13), 4,0x289b7ec6L);

1137 
R2
(
D
,
A
,
B
,
C
,
X
( 0),11,0xeaa127faL);

1138 
R2
(
C
,
D
,
A
,
B
,
X
( 3),16,0xd4ef3085L);

1139 
R2
(
B
,
C
,
D
,
A
,
X
( 6),23,0x04881d05L);

1140 
R2
(
A
,
B
,
C
,
D
,
X
( 9), 4,0xd9d4d039L);

1141 
R2
(
D
,
A
,
B
,
C
,
X
(12),11,0xe6db99e5L);

1142 
R2
(
C
,
D
,
A
,
B
,
X
(15),16,0x1fa27cf8L);

1143 
R2
(
B
,
C
,
D
,
A
,
X
( 2),23,0xc4ac5665L);

1145 
R3
(
A
,
B
,
C
,
D
,
X
( 0), 6,0xf4292244L);

1146 
R3
(
D
,
A
,
B
,
C
,
X
( 7),10,0x432aff97L);

1147 
R3
(
C
,
D
,
A
,
B
,
X
(14),15,0xab9423a7L);

1148 
R3
(
B
,
C
,
D
,
A
,
X
( 5),21,0xfc93a039L);

1149 
R3
(
A
,
B
,
C
,
D
,
X
(12), 6,0x655b59c3L);

1150 
R3
(
D
,
A
,
B
,
C
,
X
( 3),10,0x8f0ccc92L);

1151 
R3
(
C
,
D
,
A
,
B
,
X
(10),15,0xffeff47dL);

1152 
R3
(
B
,
C
,
D
,
A
,
X
( 1),21,0x85845dd1L);

1153 
R3
(
A
,
B
,
C
,
D
,
X
( 8), 6,0x6fa87e4fL);

1154 
R3
(
D
,
A
,
B
,
C
,
X
(15),10,0xfe2ce6e0L);

1155 
R3
(
C
,
D
,
A
,
B
,
X
( 6),15,0xa3014314L);

1156 
R3
(
B
,
C
,
D
,
A
,
X
(13),21,0x4e0811a1L);

1157 
R3
(
A
,
B
,
C
,
D
,
X
( 4), 6,0xf7537e82L);

1158 
R3
(
D
,
A
,
B
,
C
,
X
(11),10,0xbd3af235L);

1159 
R3
(
C
,
D
,
A
,
B
,
X
( 2),15,0x2ad7d2bbL);

1160 
R3
(
B
,
C
,
D
,
A
,
X
( 9),21,0xeb86d391L);

1162 
A
 = 
c
->A += A;

1163 
B
 = 
c
->B += B;

1164 
C
 = 
c
->C += C;

1165 
D
 = 
c
->D += D;

1173 #i‡
COMPILER_LIKES_PRAGMA_MARK


1174 #¥agm®
m¨k
 - 
ba£64
 -> 
bö¨y
 
c⁄vîsi⁄


1177 c⁄° 
Ba£64
[] =

1179 c⁄° 
Pad64
 = '=';

1182 
	#mDNSis•a˚
(
x
Ë(x ='\t' || x ='\n' || x ='\v' || x ='\f' || x ='\r' || x =' ')

	)

1184 c⁄° *
mDNS°rchr
(c⁄° *
s
, 
c
)

1188 i‡(
c
 =*
s
)  s;

1189 i‡(!*
s
Ë 
mDNSNULL
;

1190 
s
++;

1200 
mDNSexp‹t
 
mDNSs32
 
DNSDige°_Ba£64ToBö
(c⁄° *
§c
, 
mDNSu8
 *
èrgë
, 
mDNSu32
 
èrgsize
)

1202 
èrödex
, 
°©e
, 
ch
;

1203 c⁄° *
pos
;

1205 
°©e
 = 0;

1206 
èrödex
 = 0;

1208 (
ch
 = *
§c
++) != '\0') {

1209 i‡(
mDNSis•a˚
(
ch
))

1212 i‡(
ch
 =
Pad64
)

1215 
pos
 = 
mDNS°rchr
(
Ba£64
, 
ch
);

1216 i‡(
pos
 == 0)

1219 
°©e
) {

1221 i‡(
èrgë
) {

1222 i‡((
mDNSu32
)
èrödex
 >
èrgsize
)

1224 
èrgë
[
èrödex
] = (
mDNSu8
)((
pos
 - 
Ba£64
) << 2);

1226 
°©e
 = 1;

1229 i‡(
èrgë
) {

1230 i‡((
mDNSu32
)
èrödex
 + 1 >
èrgsize
)

1232 
èrgë
[
èrödex
] |(
pos
 - 
Ba£64
) >> 4;

1233 
èrgë
[
èrödex
+1] = (
mDNSu8
)(((
pos
 - 
Ba£64
) & 0x0f) << 4);

1235 
èrödex
++;

1236 
°©e
 = 2;

1239 i‡(
èrgë
) {

1240 i‡((
mDNSu32
)
èrödex
 + 1 >
èrgsize
)

1242 
èrgë
[
èrödex
] |(
pos
 - 
Ba£64
) >> 2;

1243 
èrgë
[
èrödex
+1] = (
mDNSu8
)(((
pos
 - 
Ba£64
) & 0x03) << 6);

1245 
èrödex
++;

1246 
°©e
 = 3;

1249 i‡(
èrgë
) {

1250 i‡((
mDNSu32
)
èrödex
 >
èrgsize
)

1252 
èrgë
[
èrödex
] |(
pos
 - 
Ba£64
);

1254 
èrödex
++;

1255 
°©e
 = 0;

1267 i‡(
ch
 =
Pad64
) {

1268 
ch
 = *
§c
++;

1269 
°©e
) {

1276 ()
mDNSNULL
; 
ch
 !'\0'; ch = *
§c
++)

1277 i‡(!
mDNSis•a˚
(
ch
))

1280 i‡(
ch
 !
Pad64
)

1282 
ch
 = *
§c
++;

1291 ()
mDNSNULL
; 
ch
 !'\0'; ch = *
§c
++)

1292 i‡(!
mDNSis•a˚
(
ch
))

1301 i‡(
èrgë
 &&Å¨gë[
èrödex
] != 0)

1309 i‡(
°©e
 != 0)

1313  (
èrödex
);

1318 #i‡
COMPILER_LIKES_PRAGMA_MARK


1319 #¥agm®
m¨k
 - 
API
 
exp‹ãd
 
to
 
mDNS
 
C‹e


1323 
	#HMAC_IPAD
 0x36

	)

1324 
	#HMAC_OPAD
 0x5c

	)

1325 
	#MD5_LEN
 16

	)

1327 
	#HMAC_MD5_AlgName
 (*(c⁄° 
domaö«me
*Ë"\010" "hmac-md5" "\007" "sig-Æg" "\003" "ªg" "\003" "öt")

	)

1330 
mDNSexp‹t
 
DNSDige°_C⁄°ru˘HMACKey
(
uDNS_AuthInfo
 *
öfo
, c⁄° 
mDNSu8
 *
key
, 
mDNSu32
 
Àn
)

1332 
MD5_CTX
 
k
;

1333 
mDNSu8
 
buf
[
MD5_LEN
];

1334 
i
;

1337 i‡(
Àn
 > 
HMAC_LEN
)

1339 
MD5_Inô
(&
k
);

1340 
MD5_Upd©e
(&
k
, 
key
, 
Àn
);

1341 
MD5_FöÆ
(
buf
, &
k
);

1342 
key
 = 
buf
;

1343 
Àn
 = 
MD5_LEN
;

1347 
mDNSPœtf‹mMemZîo
(
öfo
->
key
.
ùad
, 
HMAC_LEN
);

1348 
mDNSPœtf‹mMemZîo
(
öfo
->
key
.
›ad
, 
HMAC_LEN
);

1349 
mDNSPœtf‹mMemC›y
(
key
, 
öfo
->key.
ùad
, 
Àn
);

1350 
mDNSPœtf‹mMemC›y
(
key
, 
öfo
->key.
›ad
, 
Àn
);

1353 
i
 = 0; i < 
HMAC_LEN
; i++)

1355 
öfo
->
key
.
ùad
[
i
] ^
HMAC_IPAD
;

1356 
öfo
->
key
.
›ad
[
i
] ^
HMAC_OPAD
;

1361 
mDNSexp‹t
 
mDNSu8
 *
DNSDige°_SignMesßge
(
DNSMesßge
 *
msg
, mDNSu8 **
íd
, 
mDNSu16
 *
numAddôi⁄Æs
, 
uDNS_AuthInfo
 *
öfo
)

1363 
AuthRec‹d
 
tsig
;

1364 
mDNSu8
 *
cou¡På
, *
rd©a
;

1365 
mDNSu32
 
utc32
;

1366 
mDNSu8
 
utc48
[6];

1367 
mDNSu8
 
dige°
[
MD5_LEN
];

1368 
mDNSu8
 *
±r
 = *
íd
;

1369 
mDNSu32
 
Àn
;

1370 
mDNSO∑que16
 
buf
;

1371 
MD5_CTX
 
c
;

1374 
MD5_Inô
(&
c
);

1375 
MD5_Upd©e
(&
c
, 
öfo
->
key
.
ùad
, 
HMAC_LEN
);

1376 
MD5_Upd©e
(&
c
, (
mDNSu8
 *)
msg
, ()(*
íd
 - (mDNSu8 *)msg));

1379 
mDNSPœtf‹mMemZîo
(&
tsig
, (
AuthRec‹d
));

1380 
mDNS_SëupResour˚Rec‹d
(&
tsig
, 
mDNSNULL
, 0, 
kDNSTy≥_TSIG
, 0, 
kDNSRec‹dTy≥KnownUnique
, mDNSNULL, mDNSNULL);

1383 
AssignDomaöName
(
tsig
.
ª§ec
.
«me
, &
öfo
->
key«me
);

1384 
MD5_Upd©e
(&
c
, 
öfo
->
key«me
.c, 
DomaöNameLígth
(&info->keyname));

1387 
tsig
.
ª§ec
.
º˛ass
 = 
kDNSQCœss_ANY
;

1388 
buf
 = 
mDNSO∑que16‰omI¡VÆ
(
kDNSQCœss_ANY
);

1389 
MD5_Upd©e
(&
c
, 
buf
.
b
, (
mDNSO∑que16
));

1392 
tsig
.
ª§ec
.
º‹igöÆâl
 = 0;

1393 
MD5_Upd©e
(&
c
, (
mDNSu8
 *)&
tsig
.
ª§ec
.
º‹igöÆâl
, (tsig.resrec.rroriginalttl));

1396 
AssignDomaöName
(&
tsig
.
ª§ec
.
rd©a
->
u
.
«me
, &
HMAC_MD5_AlgName
);

1397 
Àn
 = 
DomaöNameLígth
(&
HMAC_MD5_AlgName
);

1398 
rd©a
 = 
tsig
.
ª§ec
.rd©a->
u
.
d©a
 + 
Àn
;

1399 
MD5_Upd©e
(&
c
, 
HMAC_MD5_AlgName
.c, 
Àn
);

1403 
utc32
 = (
mDNSu32
)
mDNSPœtf‹mUTC
();

1404 i‡(
utc32
 =()-1Ë{ 
LogMsg
("ERROR: DNSDige°_SignMesßgê- mDNSPœtf‹mUTCÑëu∫ed badÅimê-1");  
mDNSNULL
; }

1405 
utc48
[0] = 0;

1406 
utc48
[1] = 0;

1407 
utc48
[2] = (
mDNSu8
)((
utc32
 >> 24) & 0xff);

1408 
utc48
[3] = (
mDNSu8
)((
utc32
 >> 16) & 0xff);

1409 
utc48
[4] = (
mDNSu8
)((
utc32
 >> 8) & 0xff);

1410 
utc48
[5] = (
mDNSu8
)–
utc32
 & 0xff);

1412 
mDNSPœtf‹mMemC›y
(
utc48
, 
rd©a
, 6);

1413 
rd©a
 += 6;

1414 
MD5_Upd©e
(&
c
, 
utc48
, 6);

1417 
rd©a
[0] = (
mDNSu8
)((300 >> 8) & 0xff);

1418 
rd©a
[1] = (
mDNSu8
)( 300 & 0xff);

1419 
MD5_Upd©e
(&
c
, 
rd©a
, (
mDNSO∑que16
));

1420 
rd©a
 +(
mDNSO∑que16
);

1423 
buf
.
NŸAnI¡egî
 = 0;

1424 
MD5_Upd©e
(&
c
, 
buf
.
b
, (
mDNSO∑que16
));

1425 
MD5_Upd©e
(&
c
, 
buf
.
b
, (
mDNSO∑que16
));

1428 
MD5_FöÆ
(
dige°
, &
c
);

1431 
MD5_Inô
(&
c
);

1432 
MD5_Upd©e
(&
c
, 
öfo
->
key
.
›ad
, 
HMAC_LEN
);

1433 
MD5_Upd©e
(&
c
, 
dige°
, 
MD5_LEN
);

1434 
MD5_FöÆ
(
dige°
, &
c
);

1437 
rd©a
[0] = (
mDNSu8
)((
MD5_LEN
 >> 8) & 0xff);

1438 
rd©a
[1] = (
mDNSu8
)–
MD5_LEN
 & 0xff);

1439 
rd©a
 +(
mDNSO∑que16
);

1440 
mDNSPœtf‹mMemC›y
(
dige°
, 
rd©a
, 
MD5_LEN
);

1441 
rd©a
 +
MD5_LEN
;

1442 
rd©a
[0] = 
msg
->
h
.
id
.
b
[0];

1443 
rd©a
[1] = 
msg
->
h
.
id
.
b
[1];

1444 
rd©a
[2] = 0;

1445 
rd©a
[3] = 0;

1446 
rd©a
[4] = 0;

1447 
rd©a
[5] = 0;

1448 
rd©a
 += 6;

1450 
tsig
.
ª§ec
.
rdÀngth
 = (
mDNSu16
)(
rd©a
 -Åsig.ª§ec.rd©a->
u
.
d©a
);

1451 *
íd
 = 
PutResour˚Rec‹dTTLJumbo
(
msg
, 
±r
, 
numAddôi⁄Æs
, &
tsig
.
ª§ec
, 0);

1452 i‡(!*
íd
Ë{ 
LogMsg
("ERROR: DNSDige°_SignMesßgê- couldÇŸÖuàTSIG");  
mDNSNULL
; }

1455 
cou¡På
 = (
mDNSu8
 *)&
msg
->
h
.
numAddôi⁄Æs
;

1456 *
cou¡På
++ = (
mDNSu8
)(*
numAddôi⁄Æs
 >> 8);

1457 *
cou¡På
++ = (
mDNSu8
)(*
numAddôi⁄Æs
 & 0xFF);

1459  *
íd
;

1462 #ifde‡
__˝lu•lus


	@mdns/GenLinkedList.c

38 
	~"GíLökedLi°.h
"

42 
	#GETLINK
–
e
, 
o
Ë–*(**)((*Ë”Ë+ (o)Ë)

	)

45 
	#ASSIGNLINK
–
e
, 
l
, 
o
Ë–*((**)((*Ë”Ë+ (o))Ë÷))

	)

50 
	$InôLökedLi°
–
GíLökedLi°
 *
pLi°
, 
size_t
 
lökOff£t
)

53 
pLi°
->
Hód
 = 
NULL
;

54 
pLi°
->
Taû
 = 
NULL
;

55 
pLi°
->
LökOff£t
 = 
lökOff£t
;

56 
	}
}

59 
	$AddToTaû
–
GíLökedLi°
 *
pLi°
, *
ñem
)

62 i‡–
pLi°
->
Taû
) {

63 
	`ASSIGNLINK
–
pLi°
->
Taû
, 
ñem
,ÖLi°->
LökOff£t
);

65 
pLi°
->
Hód
 = 
ñem
;

66 
	`ASSIGNLINK
–
ñem
, 
NULL
, 
pLi°
->
LökOff£t
);

68 
pLi°
->
Taû
 = 
ñem
;

69 
	}
}

72 
	$AddToHód
–
GíLökedLi°
 *
pLi°
, *
ñem
)

75 
	`ASSIGNLINK
–
ñem
, 
pLi°
->
Hód
,ÖLi°->
LökOff£t
);

76 i‡–
pLi°
->
Taû
 =
NULL
)

77 
pLi°
->
Taû
 = 
ñem
;

79 
pLi°
->
Hód
 = 
ñem
;

80 
	}
}

83 
	$RemoveFromLi°
–
GíLökedLi°
 *
pLi°
, *
ñem
)

87 *
iEÀm
, *
œ°EÀm
;

89  
iEÀm
 = 
pLi°
->
Hód
, 
œ°EÀm
 = 
NULL
; iEÀm; iEÀm = 
	`GETLINK
–iEÀm,ÖLi°->
LökOff£t
)) {

90 i‡–
iEÀm
 =
ñem
) {

91 i‡–
œ°EÀm
) {

92 
	`ASSIGNLINK
–
œ°EÀm
, 
	`GETLINK
–
ñem
, 
pLi°
->
LökOff£t
),ÖList->LinkOffset);

94 
pLi°
->
Hód
 = 
	`GETLINK
–
ñem
,ÖLi°->
LökOff£t
);

96 i‡–
pLi°
->
Taû
 =
ñem
)

97 
pLi°
->
Taû
 = 
œ°EÀm
 ?Üa°EÀm : 
NULL
;

98 
	`ASSIGNLINK
–
ñem
, 
NULL
, 
pLi°
->
LökOff£t
);

101 
œ°EÀm
 = 
iEÀm
;

105 
	}
}

108 
	$Rïœ˚EÀm
–
GíLökedLi°
 *
pLi°
, *
ñemInLi°
, *
√wEÀm
)

111 *
iEÀm
, *
œ°EÀm
;

113 i‡–
ñemInLi°
 =
NULL
 || 
√wEÀm
 == NULL)

116  
iEÀm
 = 
pLi°
->
Hód
, 
œ°EÀm
 = 
NULL
; iEÀm; iEÀm = 
	`GETLINK
–iEÀm,ÖLi°->
LökOff£t
))

118 i‡–
iEÀm
 =
ñemInLi°
)

120 
	`ASSIGNLINK
–
√wEÀm
, 
	`GETLINK
–
ñemInLi°
, 
pLi°
->
LökOff£t
),ÖList->LinkOffset);

121 i‡–
œ°EÀm
)

123 
	`ASSIGNLINK
–
œ°EÀm
, 
√wEÀm
, 
pLi°
->
LökOff£t
);

127 
pLi°
->
Hód
 = 
√wEÀm
;

129 i‡–
pLi°
->
Taû
 =
ñemInLi°
)

130 
pLi°
->
Taû
 = 
√wEÀm
;

133 
œ°EÀm
 = 
iEÀm
;

137 
	}
}

142 
	$InôDoubÀLökedLi°
–
GíDoubÀLökedLi°
 *
pLi°
, 
size_t
 
fwdLökOff£t
,

143 
size_t
 
backLökOff£t
)

146 
pLi°
->
Hód
 = 
NULL
;

147 
pLi°
->
Taû
 = 
NULL
;

148 
pLi°
->
FwdLökOff£t
 = 
fwdLökOff£t
;

149 
pLi°
->
BackLökOff£t
 = 
backLökOff£t
;

150 
	}
}

153 
	$DLLAddToHód
–
GíDoubÀLökedLi°
 *
pLi°
, *
ñem
)

156 *
pNext
;

158 
pNext
 = 
pLi°
->
Hód
;

161 
	`ASSIGNLINK
–
ñem
, 
pLi°
->
Hód
,ÖLi°->
FwdLökOff£t
);

162 
pLi°
->
Hód
 = 
ñem
;

165 i‡–
pNext
) {

166 
	`ASSIGNLINK
–
pNext
, 
ñem
, 
pLi°
->
BackLökOff£t
);

168 
pLi°
->
Taû
 = 
ñem
;

169 
	`ASSIGNLINK
–
ñem
, 
NULL
, 
pLi°
->
BackLökOff£t
);

170 
	}
}

173 
	$DLLRemoveFromLi°
–
GíDoubÀLökedLi°
 *
pLi°
, *
ñem
)

177 *
pNext
, *
pPªv
;

179 
pNext
 = 
	`GETLINK
–
ñem
, 
pLi°
->
FwdLökOff£t
);

180 
pPªv
 = 
	`GETLINK
–
ñem
, 
pLi°
->
BackLökOff£t
);

183 i‡–
pPªv
)

184 
	`ASSIGNLINK
–
pPªv
, 
pNext
, 
pLi°
->
FwdLökOff£t
);

186 
pLi°
->
Hód
 = 
pNext
;

189 i‡–
pNext
)

190 
	`ASSIGNLINK
–
pNext
, 
pPªv
, 
pLi°
->
BackLökOff£t
);

192 
pLi°
->
Taû
 = 
pPªv
;

194 
	`ASSIGNLINK
–
ñem
, 
NULL
, 
pLi°
->
FwdLökOff£t
);

195 
	`ASSIGNLINK
–
ñem
, 
NULL
, 
pLi°
->
BackLökOff£t
);

196 
	}
}

202 
	#GETOFFSET
–
e
, 
o
Ë–*(
size_t
*)((*Ë”Ë+ (o)Ë)

	)

204 
AssignOff£tLök
–*
ñem
, *
lök
, 
size_t
 
lökOff£t
);

207 
	$AssignOff£tLök
–*
ñem
, *
lök
, 
size_t
 
lökOff£t
)

210 
	`GETOFFSET
–
ñem
, 
lökOff£t
Ë
lök
 ? (
size_t
)Üink - (size_t)Élem : 0;

211 
	}
}

214 *
	$GëHódPå
–
GíLökedOff£tLi°
 *
pLi°
)

217  
pLi°
->
Hód
 ? ( (*Ë’Li°Ë+ÖLi°->HódË: 
NULL
;

218 
	}
}

221 *
	$GëTaûPå
–
GíLökedOff£tLi°
 *
pLi°
)

224  
pLi°
->
Taû
 ? ( (*Ë’Li°Ë+ÖLi°->TaûË: 
NULL
;

225 
	}
}

228 *
	$GëOff£tLök
–
GíLökedOff£tLi°
 *
pLi°
, *
ñem
)

231 
size_t
 
√xtOff£t
;

233 
√xtOff£t
 = 
	`GETOFFSET
–
ñem
, 
pLi°
->
LökOff£t
);

235  
√xtOff£t
 ? (*Ë
ñem
 +ÇextOff£à: 
NULL
;

236 
	}
}

239 
	$InôLökedOff£tLi°
–
GíLökedOff£tLi°
 *
pLi°
, 
size_t
 
lökOff£t
)

242 
pLi°
->
Hód
 = 0;

243 
pLi°
->
Taû
 = 0;

244 
pLi°
->
LökOff£t
 = 
lökOff£t
;

245 
	}
}

248 
	$Off£tAddToTaû
–
GíLökedOff£tLi°
 *
pLi°
, *
ñem
)

251 i‡–
pLi°
->
Taû
) {

252 
	`AssignOff£tLök
–
	`GëTaûPå
–
pLi°
), 
ñem
,ÖLi°->
LökOff£t
);

254 
pLi°
->
Hód
 = (
size_t
Ë
ñem
 - (size_t)ÖList;

255 
	`AssignOff£tLök
–
ñem
, 
NULL
, 
pLi°
->
LökOff£t
);

257 
pLi°
->
Taû
 = (
size_t
Ë
ñem
 - (size_t)ÖList;

258 
	}
}

261 
	$Off£tAddToHód
–
GíLökedOff£tLi°
 *
pLi°
, *
ñem
)

264 
	`AssignOff£tLök
–
ñem
, 
	`GëHódPå
–
pLi°
),ÖLi°->
LökOff£t
);

265 i‡–
pLi°
->
Taû
 == 0)

266 
pLi°
->
Taû
 = (
size_t
Ë
ñem
 - (size_t)ÖList;

268 
pLi°
->
Hód
 = (
size_t
Ë
ñem
 - (size_t)ÖList;

269 
	}
}

272 
	$Off£tRemoveFromLi°
–
GíLökedOff£tLi°
 *
pLi°
, *
ñem
)

276 *
iEÀm
, *
œ°EÀm
;

278  
iEÀm
 = 
	`GëHódPå
–
pLi°
), 
œ°EÀm
 = 
NULL
; iElem;

279 
iEÀm
 = 
	`GëOff£tLök
–
pLi°
, iElem))

281 i‡–
iEÀm
 =
ñem
) {

282 i‡–
œ°EÀm
) {

283 
	`AssignOff£tLök
–
œ°EÀm
, 
	`GëOff£tLök
–
pLi°
, 
ñem
),ÖLi°->
LökOff£t
);

285 
iEÀm
 = 
	`GëOff£tLök
–
pLi°
, 
ñem
);

286 
pLi°
->
Hód
 = 
iEÀm
 ? (
size_t
) iElem - (size_t)ÖList : 0;

288 i‡–
	`GëTaûPå
–
pLi°
Ë=
ñem
)

289 
pLi°
->
Taû
 = 
œ°EÀm
 ? (
size_t
)ÜastElem - (size_t)ÖList : 0;

290 
	`AssignOff£tLök
–
ñem
, 
NULL
, 
pLi°
->
LökOff£t
);

293 
œ°EÀm
 = 
iEÀm
;

297 
	}
}

300 
	$Off£tRïœ˚EÀm
–
GíLökedOff£tLi°
 *
pLi°
, *
ñemInLi°
, *
√wEÀm
)

303 *
iEÀm
, *
œ°EÀm
;

305 i‡–
ñemInLi°
 =
NULL
 || 
√wEÀm
 == NULL)

308  
iEÀm
 = 
	`GëHódPå
–
pLi°
), 
œ°EÀm
 = 
NULL
; iElem;

309 
iEÀm
 = 
	`GëOff£tLök
–
pLi°
, iElem))

311 i‡–
iEÀm
 =
ñemInLi°
)

313 
	`AssignOff£tLök
–
√wEÀm
, 
	`GëOff£tLök
–
pLi°
, 
ñemInLi°
),ÖLi°->
LökOff£t
);

314 i‡–
œ°EÀm
)

316 
	`AssignOff£tLök
–
œ°EÀm
, 
√wEÀm
, 
pLi°
->
LökOff£t
);

320 
pLi°
->
Hód
 = (
size_t
Ë
√wEÀm
 - (size_t)ÖList;

322 i‡–
	`GëTaûPå
–
pLi°
Ë=
ñemInLi°
)

323 
pLi°
->
Taû
 = (
size_t
Ë
√wEÀm
 - (size_t)ÖList;

326 
œ°EÀm
 = 
iEÀm
;

330 
	}
}

	@mdns/GenLinkedList.h

35 #i‚de‡
__GíLökedLi°__


36 
	#__GíLökedLi°__


	)

39 
	~<°ddef.h
>

42 
	sGíLökedLi°


44 *
	mHód
,

45 *
	mTaû
;

46 
size_t
 
	mLökOff£t
;

48 
GíLökedLi°
 
	tGíLökedLi°
;

51 
InôLökedLi°
–
GíLökedLi°
 *
pLi°
, 
size_t
 
lökOff£t
);

53 
AddToHód
–
GíLökedLi°
 *
pLi°
, *
ñem
);

54 
AddToTaû
–
GíLökedLi°
 *
pLi°
, *
ñem
);

56 
RemoveFromLi°
–
GíLökedLi°
 *
pLi°
, *
ñem
);

58 
Rïœ˚EÀm
–
GíLökedLi°
 *
pLi°
, *
ñemInLi°
, *
√wEÀm
);

62 
	sGíDoubÀLökedLi°


64 *
	mHód
,

65 *
	mTaû
;

66 
size_t
 
	mFwdLökOff£t
,

67 
	mBackLökOff£t
;

69 
GíDoubÀLökedLi°
 
	tGíDoubÀLökedLi°
;

72 
InôDoubÀLökedLi°
–
GíDoubÀLökedLi°
 *
pLi°
, 
size_t
 
fwdLökOff£t
,

73 
size_t
 
backLökOff£t
);

75 
DLLAddToHód
–
GíDoubÀLökedLi°
 *
pLi°
, *
ñem
);

77 
DLLRemoveFromLi°
–
GíDoubÀLökedLi°
 *
pLi°
, *
ñem
);

84 
	sGíLökedOff£tLi°


86 
size_t
 
	mHód
,

87 
	mTaû
;

88 
size_t
 
	mLökOff£t
;

90 
GíLökedOff£tLi°
 
	tGíLökedOff£tLi°
;

93 
InôLökedOff£tLi°
–
GíLökedOff£tLi°
 *
pLi°
, 
size_t
 
lökOff£t
);

95 *
GëHódPå
–
GíLökedOff£tLi°
 *
pLi°
);

96 *
GëTaûPå
–
GíLökedOff£tLi°
 *
pLi°
);

97 *
GëOff£tLök
–
GíLökedOff£tLi°
 *
pLi°
, *
ñem
);

99 
Off£tAddToHód
–
GíLökedOff£tLi°
 *
pLi°
, *
ñem
);

100 
Off£tAddToTaû
–
GíLökedOff£tLi°
 *
pLi°
, *
ñem
);

102 
Off£tRemoveFromLi°
–
GíLökedOff£tLi°
 *
pLi°
, *
ñem
);

104 
Off£tRïœ˚EÀm
–
GíLökedOff£tLi°
 *
pLi°
, *
ñemInLi°
, *
√wEÀm
);

	@mdns/dns_sd.h

29 #i‚de‡
_DNS_SD_H


30 
	#_DNS_SD_H


	)

32 #ifde‡ 
__˝lu•lus


39 #i‡
deföed
(
_WIN32
Ë&& !deföed(
EFI32
Ë&& !deföed(
EFI64
)

40 
	#DNSSD_API
 
__°dˇŒ


	)

42 
	#DNSSD_API


	)

46 #i‡
deföed
(
__FªeBSD__
) && (__FreeBSD__ < 5)

47 
	~<sys/ty≥s.h
>

50 #ñi‡
deföed
(
__sun__
)

51 
	~<sys/ty≥s.h
>

54 #ñi‡
deföed
(
EFI32
Ë|| deföed(
EFI64
)

55 
UINT8
 
	tuöt8_t
;

56 
INT8
 
	töt8_t
;

57 
UINT16
 
	tuöt16_t
;

58 
INT16
 
	töt16_t
;

59 
UINT32
 
	tuöt32_t
;

60 
INT32
 
	töt32_t
;

63 #ñi‡
deföed
(
_WIN32
)

64 
	~<wödows.h
>

65 
	#_UNUSED


	)

66 
	#bzîo
(
a
, 
b
Ë
	`mem£t
◊, 0, b)

	)

67 #i‚de‡
_MSL_STDINT_H


68 
UINT8
 
	tuöt8_t
;

69 
INT8
 
	töt8_t
;

70 
UINT16
 
	tuöt16_t
;

71 
INT16
 
	töt16_t
;

72 
UINT32
 
	tuöt32_t
;

73 
INT32
 
	töt32_t
;

78 
	~<°döt.h
>

88 
_DNSSîvi˚Ref_t
 *
	tDNSSîvi˚Ref
;

89 
_DNSRec‹dRef_t
 *
	tDNSRec‹dRef
;

94 
kDNSSîvi˚FœgsM‹eComög
 = 0x1,

108 
kDNSSîvi˚FœgsAdd
 = 0x2,

109 
kDNSSîvi˚FœgsDeÁu…
 = 0x4,

117 
kDNSSîvi˚FœgsNoAutoRíame
 = 0x8,

126 
kDNSSîvi˚FœgsSh¨ed
 = 0x10,

127 
kDNSSîvi˚FœgsUnique
 = 0x20,

134 
kDNSSîvi˚FœgsBrow£Domaös
 = 0x40,

135 
kDNSSîvi˚FœgsRegi°øti⁄Domaös
 = 0x80,

141 
kDNSSîvi˚FœgsL⁄gLivedQuîy
 = 0x100,

144 
kDNSSîvi˚FœgsAŒowRemŸeQuîy
 = 0x200,

149 
kDNSSîvi˚FœgsF‹˚Mu…iˇ°
 = 0x400,

154 
kDNSSîvi˚FœgsRëu∫CNAME
 = 0x800

173 
kDNSSîvi˚Cœss_IN
 = 1

178 
kDNSSîvi˚Ty≥_A
 = 1,

179 
kDNSSîvi˚Ty≥_NS
 = 2,

180 
kDNSSîvi˚Ty≥_MD
 = 3,

181 
kDNSSîvi˚Ty≥_MF
 = 4,

182 
kDNSSîvi˚Ty≥_CNAME
 = 5,

183 
kDNSSîvi˚Ty≥_SOA
 = 6,

184 
kDNSSîvi˚Ty≥_MB
 = 7,

185 
kDNSSîvi˚Ty≥_MG
 = 8,

186 
kDNSSîvi˚Ty≥_MR
 = 9,

187 
kDNSSîvi˚Ty≥_NULL
 = 10,

188 
kDNSSîvi˚Ty≥_WKS
 = 11,

189 
kDNSSîvi˚Ty≥_PTR
 = 12,

190 
kDNSSîvi˚Ty≥_HINFO
 = 13,

191 
kDNSSîvi˚Ty≥_MINFO
 = 14,

192 
kDNSSîvi˚Ty≥_MX
 = 15,

193 
kDNSSîvi˚Ty≥_TXT
 = 16,

194 
kDNSSîvi˚Ty≥_RP
 = 17,

195 
kDNSSîvi˚Ty≥_AFSDB
 = 18,

196 
kDNSSîvi˚Ty≥_X25
 = 19,

197 
kDNSSîvi˚Ty≥_ISDN
 = 20,

198 
kDNSSîvi˚Ty≥_RT
 = 21,

199 
kDNSSîvi˚Ty≥_NSAP
 = 22,

200 
kDNSSîvi˚Ty≥_NSAP_PTR
 = 23,

201 
kDNSSîvi˚Ty≥_SIG
 = 24,

202 
kDNSSîvi˚Ty≥_KEY
 = 25,

203 
kDNSSîvi˚Ty≥_PX
 = 26,

204 
kDNSSîvi˚Ty≥_GPOS
 = 27,

205 
kDNSSîvi˚Ty≥_AAAA
 = 28,

206 
kDNSSîvi˚Ty≥_LOC
 = 29,

207 
kDNSSîvi˚Ty≥_NXT
 = 30,

208 
kDNSSîvi˚Ty≥_EID
 = 31,

209 
kDNSSîvi˚Ty≥_NIMLOC
 = 32,

210 
kDNSSîvi˚Ty≥_SRV
 = 33,

211 
kDNSSîvi˚Ty≥_ATMA
 = 34,

212 
kDNSSîvi˚Ty≥_NAPTR
 = 35,

213 
kDNSSîvi˚Ty≥_KX
 = 36,

214 
kDNSSîvi˚Ty≥_CERT
 = 37,

215 
kDNSSîvi˚Ty≥_A6
 = 38,

216 
kDNSSîvi˚Ty≥_DNAME
 = 39,

217 
kDNSSîvi˚Ty≥_SINK
 = 40,

218 
kDNSSîvi˚Ty≥_OPT
 = 41,

219 
kDNSSîvi˚Ty≥_TKEY
 = 249,

220 
kDNSSîvi˚Ty≥_TSIG
 = 250,

221 
kDNSSîvi˚Ty≥_IXFR
 = 251,

222 
kDNSSîvi˚Ty≥_AXFR
 = 252,

223 
kDNSSîvi˚Ty≥_MAILB
 = 253,

224 
kDNSSîvi˚Ty≥_MAILA
 = 254,

225 
kDNSSîvi˚Ty≥_ANY
 = 255

232 
kDNSSîvi˚Eº_NoEº‹
 = 0,

233 
kDNSSîvi˚Eº_Unknown
 = -65537,

234 
kDNSSîvi˚Eº_NoSuchName
 = -65538,

235 
kDNSSîvi˚Eº_NoMem‹y
 = -65539,

236 
kDNSSîvi˚Eº_BadP¨am
 = -65540,

237 
kDNSSîvi˚Eº_BadRe„ªn˚
 = -65541,

238 
kDNSSîvi˚Eº_BadSèã
 = -65542,

239 
kDNSSîvi˚Eº_BadFœgs
 = -65543,

240 
kDNSSîvi˚Eº_Unsuµ‹ãd
 = -65544,

241 
kDNSSîvi˚Eº_NŸInôülized
 = -65545,

242 
kDNSSîvi˚Eº_AÃódyRegi°îed
 = -65547,

243 
kDNSSîvi˚Eº_NameC⁄Êi˘
 = -65548,

244 
kDNSSîvi˚Eº_InvÆid
 = -65549,

245 
kDNSSîvi˚Eº_FúewÆl
 = -65550,

246 
kDNSSîvi˚Eº_Incom∑tibÀ
 = -65551,

247 
kDNSSîvi˚Eº_BadI¡îÁ˚Index
 = -65552,

248 
kDNSSîvi˚Eº_Refu£d
 = -65553,

249 
kDNSSîvi˚Eº_NoSuchRec‹d
 = -65554,

250 
kDNSSîvi˚Eº_NoAuth
 = -65555,

251 
kDNSSîvi˚Eº_NoSuchKey
 = -65556,

252 
kDNSSîvi˚Eº_NATTøvîßl
 = -65557,

253 
kDNSSîvi˚Eº_DoubÀNAT
 = -65558,

254 
kDNSSîvi˚Eº_BadTime
 = -65559

263 
	#kDNSSîvi˚MaxSîvi˚Name
 64

	)

268 
	#kDNSSîvi˚MaxDomaöName
 1005

	)

353 
	#kDNSSîvi˚I¡îÁ˚IndexAny
 0

	)

354 
	#kDNSSîvi˚I¡îÁ˚IndexLoˇlO∆y
 ( (
uöt32_t
Ë-1 )

	)

357 
uöt32_t
 
	tDNSSîvi˚Fœgs
;

358 
öt32_t
 
	tDNSSîvi˚Eº‹Ty≥
;

389 
DNSSD_API
 
DNSSîvi˚RefSockFD
(
DNSSîvi˚Ref
 
sdRef
);

410 
DNSSîvi˚Eº‹Ty≥
 
DNSSD_API
 
DNSSîvi˚Pro˚ssResu…
(
DNSSîvi˚Ref
 
sdRef
);

439 
DNSSD_API
 
DNSSîvi˚RefDóŒoˇã
(
DNSSîvi˚Ref
 
sdRef
);

483 (
DNSSD_API
 *
	tDNSSîvi˚DomaöEnumRïly
)

485 
	tDNSSîvi˚Ref
 
	tsdRef
,

486 
	tDNSSîvi˚Fœgs
 
	tÊags
,

487 
	tuöt32_t
 
	töãrÁ˚Index
,

488 
	tDNSSîvi˚Eº‹Ty≥
 
	tîr‹Code
,

489 c⁄° *
	tª∂yDomaö
,

490 *
	tc⁄ãxt


524 
DNSSîvi˚Eº‹Ty≥
 
DNSSD_API
 
DNSSîvi˚Enumî©eDomaös


526 
DNSSîvi˚Ref
 *
sdRef
,

527 
DNSSîvi˚Fœgs
 
Êags
,

528 
uöt32_t
 
öãrÁ˚Index
,

529 
DNSSîvi˚DomaöEnumRïly
 
ˇŒBack
,

530 *
c⁄ãxt


567 (
DNSSD_API
 *
	tDNSSîvi˚Regi°îRïly
)

569 
	tDNSSîvi˚Ref
 
	tsdRef
,

570 
	tDNSSîvi˚Fœgs
 
	tÊags
,

571 
	tDNSSîvi˚Eº‹Ty≥
 
	tîr‹Code
,

572 c⁄° *
	t«me
,

573 c⁄° *
	tªgty≥
,

574 c⁄° *
	tdomaö
,

575 *
	tc⁄ãxt


652 
DNSSîvi˚Eº‹Ty≥
 
DNSSD_API
 
DNSSîvi˚Regi°î


654 
DNSSîvi˚Ref
 *
sdRef
,

655 
DNSSîvi˚Fœgs
 
Êags
,

656 
uöt32_t
 
öãrÁ˚Index
,

657 c⁄° *
«me
,

658 c⁄° *
ªgty≥
,

659 c⁄° *
domaö
,

660 c⁄° *
ho°
,

661 
uöt16_t
 
p‹t
,

662 
uöt16_t
 
txtLí
,

663 c⁄° *
txtRec‹d
,

664 
DNSSîvi˚Regi°îRïly
 
ˇŒBack
,

665 *
c⁄ãxt


706 
DNSSîvi˚Eº‹Ty≥
 
DNSSD_API
 
DNSSîvi˚AddRec‹d


708 
DNSSîvi˚Ref
 
sdRef
,

709 
DNSRec‹dRef
 *
Rec‹dRef
,

710 
DNSSîvi˚Fœgs
 
Êags
,

711 
uöt16_t
 
ºty≥
,

712 
uöt16_t
 
rdÀn
,

713 c⁄° *
rd©a
,

714 
uöt32_t
 
âl


746 
DNSSîvi˚Eº‹Ty≥
 
DNSSD_API
 
DNSSîvi˚Upd©eRec‹d


748 
DNSSîvi˚Ref
 
sdRef
,

749 
DNSRec‹dRef
 
Rec‹dRef
,

750 
DNSSîvi˚Fœgs
 
Êags
,

751 
uöt16_t
 
rdÀn
,

752 c⁄° *
rd©a
,

753 
uöt32_t
 
âl


778 
DNSSîvi˚Eº‹Ty≥
 
DNSSD_API
 
DNSSîvi˚RemoveRec‹d


780 
DNSSîvi˚Ref
 
sdRef
,

781 
DNSRec‹dRef
 
Rec‹dRef
,

782 
DNSSîvi˚Fœgs
 
Êags


831 (
DNSSD_API
 *
	tDNSSîvi˚Brow£Rïly
)

833 
	tDNSSîvi˚Ref
 
	tsdRef
,

834 
	tDNSSîvi˚Fœgs
 
	tÊags
,

835 
	tuöt32_t
 
	töãrÁ˚Index
,

836 
	tDNSSîvi˚Eº‹Ty≥
 
	tîr‹Code
,

837 c⁄° *
	t£rvi˚Name
,

838 c⁄° *
	tªgty≥
,

839 c⁄° *
	tª∂yDomaö
,

840 *
	tc⁄ãxt


877 
DNSSîvi˚Eº‹Ty≥
 
DNSSD_API
 
DNSSîvi˚Brow£


879 
DNSSîvi˚Ref
 *
sdRef
,

880 
DNSSîvi˚Fœgs
 
Êags
,

881 
uöt32_t
 
öãrÁ˚Index
,

882 c⁄° *
ªgty≥
,

883 c⁄° *
domaö
,

884 
DNSSîvi˚Brow£Rïly
 
ˇŒBack
,

885 *
c⁄ãxt


950 (
DNSSD_API
 *
	tDNSSîvi˚ResﬁveRïly
)

952 
	tDNSSîvi˚Ref
 
	tsdRef
,

953 
	tDNSSîvi˚Fœgs
 
	tÊags
,

954 
	tuöt32_t
 
	töãrÁ˚Index
,

955 
	tDNSSîvi˚Eº‹Ty≥
 
	tîr‹Code
,

956 c⁄° *
	tfuŒ«me
,

957 c⁄° *
	tho°èrgë
,

958 
	tuöt16_t
 
	tp‹t
,

959 
	tuöt16_t
 
	ttxtLí
,

960 c⁄° *
	ttxtRec‹d
,

961 *
	tc⁄ãxt


1003 
DNSSîvi˚Eº‹Ty≥
 
DNSSD_API
 
DNSSîvi˚Resﬁve


1005 
DNSSîvi˚Ref
 *
sdRef
,

1006 
DNSSîvi˚Fœgs
 
Êags
,

1007 
uöt32_t
 
öãrÁ˚Index
,

1008 c⁄° *
«me
,

1009 c⁄° *
ªgty≥
,

1010 c⁄° *
domaö
,

1011 
DNSSîvi˚ResﬁveRïly
 
ˇŒBack
,

1012 *
c⁄ãxt


1039 
DNSSîvi˚Eº‹Ty≥
 
DNSSD_API
 
DNSSîvi˚Cª©eC⁄√˘i⁄
(
DNSSîvi˚Ref
 *
sdRef
);

1069 (
DNSSD_API
 *
	tDNSSîvi˚Regi°îRec‹dRïly
)

1071 
	tDNSSîvi˚Ref
 
	tsdRef
,

1072 
	tDNSRec‹dRef
 
	tRec‹dRef
,

1073 
	tDNSSîvi˚Fœgs
 
	tÊags
,

1074 
	tDNSSîvi˚Eº‹Ty≥
 
	tîr‹Code
,

1075 *
	tc⁄ãxt


1121 
DNSSîvi˚Eº‹Ty≥
 
DNSSD_API
 
DNSSîvi˚Regi°îRec‹d


1123 
DNSSîvi˚Ref
 
sdRef
,

1124 
DNSRec‹dRef
 *
Rec‹dRef
,

1125 
DNSSîvi˚Fœgs
 
Êags
,

1126 
uöt32_t
 
öãrÁ˚Index
,

1127 c⁄° *
fuŒ«me
,

1128 
uöt16_t
 
ºty≥
,

1129 
uöt16_t
 
º˛ass
,

1130 
uöt16_t
 
rdÀn
,

1131 c⁄° *
rd©a
,

1132 
uöt32_t
 
âl
,

1133 
DNSSîvi˚Regi°îRec‹dRïly
 
ˇŒBack
,

1134 *
c⁄ãxt


1175 (
DNSSD_API
 *
	tDNSSîvi˚QuîyRec‹dRïly
)

1177 
	tDNSSîvi˚Ref
 DNSServiceRef,

1178 
	tDNSSîvi˚Fœgs
 
	tÊags
,

1179 
	tuöt32_t
 
	töãrÁ˚Index
,

1180 
	tDNSSîvi˚Eº‹Ty≥
 
	tîr‹Code
,

1181 c⁄° *
	tfuŒ«me
,

1182 
	tuöt16_t
 
	tºty≥
,

1183 
	tuöt16_t
 
	tº˛ass
,

1184 
	tuöt16_t
 
	trdÀn
,

1185 c⁄° *
	trd©a
,

1186 
	tuöt32_t
 
	tâl
,

1187 *
	tc⁄ãxt


1229 
DNSSîvi˚Eº‹Ty≥
 
DNSSD_API
 
DNSSîvi˚QuîyRec‹d


1231 
DNSSîvi˚Ref
 *
sdRef
,

1232 
DNSSîvi˚Fœgs
 
Êags
,

1233 
uöt32_t
 
öãrÁ˚Index
,

1234 c⁄° *
fuŒ«me
,

1235 
uöt16_t
 
ºty≥
,

1236 
uöt16_t
 
º˛ass
,

1237 
DNSSîvi˚QuîyRec‹dRïly
 
ˇŒBack
,

1238 *
c⁄ãxt


1268 
DNSSîvi˚Eº‹Ty≥
 
DNSSD_API
 
DNSSîvi˚Rec⁄fúmRec‹d


1270 
DNSSîvi˚Fœgs
 
Êags
,

1271 
uöt32_t
 
öãrÁ˚Index
,

1272 c⁄° *
fuŒ«me
,

1273 
uöt16_t
 
ºty≥
,

1274 
uöt16_t
 
º˛ass
,

1275 
uöt16_t
 
rdÀn
,

1276 c⁄° *
rd©a


1312 
DNSSD_API
 
DNSSîvi˚C⁄°ru˘FuŒName


1314 *
fuŒName
,

1315 c⁄° *
£rvi˚
,

1316 c⁄° *
ªgty≥
,

1317 c⁄° *
domaö


1348 
	u_TXTRec‹dRef_t
 { 
Priv©eD©a
[16]; *
F‹˚N©uølAlignmít
; } 
	tTXTRec‹dRef
;

1392 
DNSSD_API
 
TXTRec‹dCª©e


1394 
TXTRec‹dRef
 *
txtRec‹d
,

1395 
uöt16_t
 
buf„rLí
,

1396 *
buf„r


1410 
DNSSD_API
 
TXTRec‹dDóŒoˇã


1412 
TXTRec‹dRef
 *
txtRec‹d


1453 
DNSSîvi˚Eº‹Ty≥
 
DNSSD_API
 
TXTRec‹dSëVÆue


1455 
TXTRec‹dRef
 *
txtRec‹d
,

1456 c⁄° *
key
,

1457 
uöt8_t
 
vÆueSize
,

1458 c⁄° *
vÆue


1476 
DNSSîvi˚Eº‹Ty≥
 
DNSSD_API
 
TXTRec‹dRemoveVÆue


1478 
TXTRec‹dRef
 *
txtRec‹d
,

1479 c⁄° *
key


1495 
uöt16_t
 
DNSSD_API
 
TXTRec‹dGëLígth


1497 c⁄° 
TXTRec‹dRef
 *
txtRec‹d


1512 c⁄° * 
DNSSD_API
 
TXTRec‹dGëByãsPå


1514 c⁄° 
TXTRec‹dRef
 *
txtRec‹d


1566 
DNSSD_API
 
TXTRec‹dC⁄èösKey


1568 
uöt16_t
 
txtLí
,

1569 c⁄° *
txtRec‹d
,

1570 c⁄° *
key


1595 c⁄° * 
DNSSD_API
 
TXTRec‹dGëVÆuePå


1597 
uöt16_t
 
txtLí
,

1598 c⁄° *
txtRec‹d
,

1599 c⁄° *
key
,

1600 
uöt8_t
 *
vÆueLí


1617 
uöt16_t
 
DNSSD_API
 
TXTRec‹dGëCou¡


1619 
uöt16_t
 
txtLí
,

1620 c⁄° *
txtRec‹d


1662 
DNSSîvi˚Eº‹Ty≥
 
DNSSD_API
 
TXTRec‹dGëIãmAtIndex


1664 
uöt16_t
 
txtLí
,

1665 c⁄° *
txtRec‹d
,

1666 
uöt16_t
 
ödex
,

1667 
uöt16_t
 
keyBufLí
,

1668 *
key
,

1669 
uöt8_t
 *
vÆueLí
,

1670 c⁄° **
vÆue


1673 #ifde‡
__APPLE_API_PRIVATE


1699 
DNSSîvi˚Eº‹Ty≥
 
DNSSD_API
 
DNSSîvi˚SëDeÁu…DomaöF‹U£r


1701 
DNSSîvi˚Fœgs
 
Êags
,

1702 c⁄° *
domaö


1713 
	sDNS_SD_CompûeTimeAs£πi⁄Checks


1715 
as£π0
[((
_TXTRec‹dRef_t
) == 16) ? 1 : -1];

1718 #ifde‡ 
__˝lu•lus


	@mdns/mDNS.c

1736 
	~"DNSComm⁄.h
"

1737 
	~"uDNS.h
"

1739 #if(
deföed
(
_MSC_VER
))

1743 #¥agm®
w¨nög
(
dißbÀ
:4127)

1750 #¥agm®
w¨nög
(
dißbÀ
:4706)

1754 #i‡
COMPILER_LIKES_PRAGMA_MARK


1755 #¥agm®
m¨k
 -

1756 #¥agm®
m¨k
 - 
Progøm
 
C⁄°™ts


1759 
mDNSexp‹t
 c⁄° 
mDNSIPP‹t
 
	gzîoIPP‹t
 = { { 0 } };

1760 
mDNSexp‹t
 c⁄° 
mDNSv4Addr
 
	gzîov4Addr
 = { { 0 } };

1761 
mDNSexp‹t
 c⁄° 
mDNSv6Addr
 
	gzîov6Addr
 = { { 0 } };

1762 
mDNSexp‹t
 c⁄° 
mDNSEthAddr
 
	gzîoEthAddr
 = { { 0 } };

1763 
mDNSexp‹t
 c⁄° 
mDNSv4Addr
 
	g⁄esIPv4Addr
 = { { 255, 255, 255, 255 } };

1764 
mDNSexp‹t
 c⁄° 
mDNSv6Addr
 
	g⁄esIPv6Addr
 = { { 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 } };

1765 
mDNSexp‹t
 c⁄° 
mDNSAddr
 
	gzîoAddr
 = { 
mDNSAddrTy≥_N⁄e
, {{{ 0 }}} };

1767 
mDNSexp‹t
 c⁄° 
mDNSI¡îÁ˚ID
 
	gmDNSI¡îÁ˚_Any
 = 0;

1768 
mDNSexp‹t
 c⁄° 
mDNSI¡îÁ˚ID
 
	gmDNSI¡îÁ˚_LoˇlO∆y
 = (mDNSInterfaceID)1;

1770 
mDNSloˇl
 c⁄° 
mDNSI¡îÁ˚ID
 
	gmDNSI¡îÁ˚M¨k
 = (mDNSInterfaceID)~0;

1772 
	#Uniˇ°DNSP‹tAsNumbî
 53

	)

1773 
	#NATPMPP‹tAsNumbî
 5351

	)

1774 
	#DNSEXTP‹tAsNumbî
 5352

1775 
	#Mu…iˇ°DNSP‹tAsNumbî
 5353

	)

1776 
	#Lo›backIPCP‹tAsNumbî
 5354

	)

1778 
mDNSexp‹t
 c⁄° 
mDNSIPP‹t
 
	gUniˇ°DNSP‹t
 = { { 
Uniˇ°DNSP‹tAsNumbî
 >> 8, UnicastDNSPortAsNumber & 0xFF } };

1779 
mDNSexp‹t
 c⁄° 
mDNSIPP‹t
 
	gNATPMPP‹t
 = { { 
NATPMPP‹tAsNumbî
 >> 8, NATPMPPortAsNumber & 0xFF } };

1780 
mDNSexp‹t
 c⁄° 
mDNSIPP‹t
 
	gDNSEXTP‹t
 = { { 
DNSEXTP‹tAsNumbî
 >> 8, DNSEXTPortAsNumber & 0xFF } };

1781 
mDNSexp‹t
 c⁄° 
mDNSIPP‹t
 
	gMu…iˇ°DNSP‹t
 = { { 
Mu…iˇ°DNSP‹tAsNumbî
 >> 8, MulticastDNSPortAsNumber & 0xFF } };

1782 
mDNSexp‹t
 c⁄° 
mDNSIPP‹t
 
	gLo›backIPCP‹t
 = { { 
Lo›backIPCP‹tAsNumbî
 >> 8, LoopbackIPCPortAsNumber & 0xFF } };

1784 
mDNSexp‹t
 c⁄° 
mDNSv4Addr
 
	gAŒDNSAdmöGroup
 = { { 239, 255, 255, 251 } };

1785 
mDNSexp‹t
 c⁄° 
mDNSAddr
 
	gAŒDNSLökGroup_v4
 = { 
mDNSAddrTy≥_IPv4
, { { { 224, 0, 0, 251 } } } };

1786 
mDNSexp‹t
 c⁄° 
mDNSAddr
 
	gAŒDNSLökGroup_v6
 = { 
mDNSAddrTy≥_IPv6
, { { { 0xFF,0x02,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFB } } } };

1788 
mDNSexp‹t
 c⁄° 
mDNSO∑que16
 
	gzîoID
 = { { 0, 0 } };

1789 
mDNSexp‹t
 c⁄° 
mDNSO∑que16
 
	gQuîyFœgs
 = { { 
kDNSFœg0_QR_Quîy
 | 
kDNSFœg0_OP_StdQuîy
, 0 } };

1790 
mDNSexp‹t
 c⁄° 
mDNSO∑que16
 
	guQuîyFœgs
 = { { 
kDNSFœg0_QR_Quîy
 | 
kDNSFœg0_OP_StdQuîy
 | 
kDNSFœg0_RD
, 0 } };

1791 
mDNSexp‹t
 c⁄° 
mDNSO∑que16
 
	gRe•⁄£Fœgs
 = { { 
kDNSFœg0_QR_Re•⁄£
 | 
kDNSFœg0_OP_StdQuîy
 | 
kDNSFœg0_AA
, 0 } };

1792 
mDNSexp‹t
 c⁄° 
mDNSO∑que16
 
	gUpd©eReqFœgs
 = { { 
kDNSFœg0_QR_Quîy
 | 
kDNSFœg0_OP_Upd©e
, 0 } };

1793 
mDNSexp‹t
 c⁄° 
mDNSO∑que16
 
	gUpd©eRe•Fœgs
 = { { 
kDNSFœg0_QR_Re•⁄£
 | 
kDNSFœg0_OP_Upd©e
, 0 } };

1796 
	#SmÆlRec‹dLimô
 1024

	)

1798 
	#kMaxUpd©eCªdôs
 10

	)

1799 
	#kUpd©eCªdôRe‰eshI¡îvÆ
 (
mDNSPœtf‹mO√Sec⁄d
 * 6)

	)

1801 
mDNSexp‹t
 c⁄° *c⁄° 
	gmDNS_DomaöTy≥Names
[] =

1810 #ifde‡
UNICAST_DISABLED


1811 
	#uDNS_IsA˘iveQuîy
(
q
, 
u
Ë
mDNSÁl£


	)

1815 #i‡
COMPILER_LIKES_PRAGMA_MARK


1816 #¥agm®
m¨k
 -

1817 #¥agm®
m¨k
 - 
S≥cülized
 
mDNS
 
vîsi⁄
 
of
 
v¢¥ötf


1820 c⁄° 
	smDNS¥ötf_f‹m©


1822 
	mÀ·Ju°ify
 : 1;

1823 
	mf‹˚Sign
 : 1;

1824 
	mzîoPad
 : 1;

1825 
	mhavePªcisi⁄
 : 1;

1826 
	mhSize
 : 1;

1827 
	mlSize
 : 1;

1828 
	mÆtF‹m
;

1829 
	msign
;

1830 
	mfõldWidth
;

1831 
	m¥ecisi⁄
;

1832 } 
	gmDNS¥ötf_f‹m©_deÁu…
 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

1834 
mDNSexp‹t
 
mDNSu32
 
	$mDNS_v¢¥ötf
(*
sbuf„r
, 
mDNSu32
 
buÊí
, c⁄° *
fmt
, 
va_li°
 
¨g
)

1836 
mDNSu32
 
nwrôãn
 = 0;

1837 
c
;

1838 i‡(
buÊí
 == 0) (0);

1839 
buÊí
--;

1840 i‡(
buÊí
 =0Ë
exô
;

1842 
c
 = *
fmt
; c != 0; c = *++fmt)

1844 i‡(
c
 != '%')

1846 *
sbuf„r
++ = ()
c
;

1847 i‡(++
nwrôãn
 >
buÊí
Ë
exô
;

1851 
i
=0, 
j
;

1855 
	#mDNS_VACB_Size
 300

	)

1856 
mDNS_VACB
[
mDNS_VACB_Size
];

1857 
	#mDNS_VACB_Lim
 (&
mDNS_VACB
[
mDNS_VACB_Size
])

	)

1858 
	#mDNS_VACB_Remaö
(
s
Ë((
mDNSu32
)(
mDNS_VACB_Lim
 - s))

	)

1859 *
s
 = 
mDNS_VACB_Lim
, *
digôs
;

1860 
mDNS¥ötf_f‹m©
 
F
 = 
mDNS¥ötf_f‹m©_deÁu…
;

1864 
c
 = *++
fmt
;

1865 i‡(
c
 ='-'Ë
F
.
À·Ju°ify
 = 1;

1866 i‡(
c
 ='+'Ë
F
.
f‹˚Sign
 = 1;

1867 i‡(
c
 =' 'Ë
F
.
sign
 = ' ';

1868 i‡(
c
 ='#'Ë
F
.
ÆtF‹m
++;

1869 i‡(
c
 ='0'Ë
F
.
zîoPad
 = 1;

1873 i‡(
c
 == '*')

1875 
f
 = 
	`va_¨g
(
¨g
, );

1876 i‡(
f
 < 0Ë{ f = -f; 
F
.
À·Ju°ify
 = 1; }

1877 
F
.
fõldWidth
 = ()
f
;

1878 
c
 = *++
fmt
;

1882 ; 
c
 >'0' && c <'9'; c = *++
fmt
)

1883 
F
.
fõldWidth
 = (10 * F.fõldWidthË+ (
c
 - '0');

1886 i‡(
c
 == '.')

1888 i‡((
c
 = *++
fmt
) == '*')

1889 { 
F
.
¥ecisi⁄
 = 
	`va_¨g
(
¨g
, ); 
c
 = *++
fmt
; }

1890 ; 
c
 >'0' && c <'9'; c = *++
fmt
)

1891 
F
.
¥ecisi⁄
 = (10 * F.¥ecisi⁄Ë+ (
c
 - '0');

1892 
F
.
havePªcisi⁄
 = 1;

1895 i‡(
F
.
À·Ju°ify
ËF.
zîoPad
 = 0;

1897 
c⁄v
:

1898 
c
)

1900 
n
;

1901 'h' : 
F
.
hSize
 = 1; 
c
 = *++
fmt
; 
c⁄v
;

1903 'L' : 
F
.
lSize
 = 1; 
c
 = *++
fmt
; 
c⁄v
;

1905 'i' : i‡(
F
.
lSize
Ë
n
 = ()
	`va_¨g
(
¨g
, );

1906 
n
 = ()
	`va_¨g
(
¨g
, );

1907 i‡(
F
.
hSize
Ë
n
 = ()Ç;

1908 i‡((Ë
n
 < 0Ë{Ç = ()-(Í; 
F
.
sign
 = '-'; }

1909 i‡(
F
.
f‹˚Sign
ËF.
sign
 = '+';

1910 
decimÆ
;

1911 'u' : i‡(
F
.
lSize
Ë
n
 = 
	`va_¨g
(
¨g
, );

1912 
n
 = 
	`va_¨g
(
¨g
, );

1913 i‡(
F
.
hSize
Ë
n
 = ()Ç;

1914 
F
.
sign
 = 0;

1915 
decimÆ
;

1916 
decimÆ
: i‡(!
F
.
havePªcisi⁄
)

1918 i‡(
F
.
zîoPad
)

1920 
F
.
¥ecisi⁄
 = F.
fõldWidth
;

1921 i‡(
F
.
sign
Ë--F.
¥ecisi⁄
;

1923 i‡(
F
.
¥ecisi⁄
 < 1) F.precision = 1;

1925 i‡(
F
.
¥ecisi⁄
 > 
mDNS_VACB_Size
 - 1)

1926 
F
.
¥ecisi⁄
 = 
mDNS_VACB_Size
 - 1;

1927 
i
 = 0; 
n
;Ç /10, i++Ë*--
s
 = ()(n % 10 + '0');

1928 ; 
i
 < 
F
.
¥ecisi⁄
; i++Ë*--
s
 = '0';

1929 i‡(
F
.
sign
Ë{ *--
s
 = F.sign; 
i
++; }

1932 'o' : i‡(
F
.
lSize
Ë
n
 = 
	`va_¨g
(
¨g
, );

1933 
n
 = 
	`va_¨g
(
¨g
, );

1934 i‡(
F
.
hSize
Ë
n
 = ()Ç;

1935 i‡(!
F
.
havePªcisi⁄
)

1937 i‡(
F
.
zîoPad
ËF.
¥ecisi⁄
 = F.
fõldWidth
;

1938 i‡(
F
.
¥ecisi⁄
 < 1) F.precision = 1;

1940 i‡(
F
.
¥ecisi⁄
 > 
mDNS_VACB_Size
 - 1)

1941 
F
.
¥ecisi⁄
 = 
mDNS_VACB_Size
 - 1;

1942 
i
 = 0; 
n
;Ç /8, i++Ë*--
s
 = ()(n % 8 + '0');

1943 i‡(
F
.
ÆtF‹m
 && 
i
 && *
s
 != '0') { *--s = '0'; i++; }

1944 ; 
i
 < 
F
.
¥ecisi⁄
; i++Ë*--
s
 = '0';

1948 *
a
 = 
	`va_¨g
(
¨g
, *);

1949 i‡(!
a
Ë{ 
emsg
[] = "<<NULL>>"; 
s
 =Émsg; 
i
 = (emsg)-1; }

1952 
s
 = 
mDNS_VACB
;

1953 i‡(
F
.
ÆtF‹m
)

1955 
mDNSAddr
 *
ù
 = (mDNSAddr*)
a
;

1956 
ù
->
ty≥
)

1958 
mDNSAddrTy≥_IPv4
: 
F
.
¥ecisi⁄
 = 4; 
a
 = (*)&
ù
->ù.
v4
; ;

1959 
mDNSAddrTy≥_IPv6
: 
F
.
¥ecisi⁄
 = 16; 
a
 = (*)&
ù
->ù.
v6
; ;

1960 : 
F
.
¥ecisi⁄
 = 0; ;

1963 
F
.
¥ecisi⁄
)

1965 4: 
i
 = 
	`mDNS_¢¥ötf
(
mDNS_VACB
, (mDNS_VACB), "%d.%d.%d.%d",

1966 
a
[0],á[1],á[2],á[3]); ;

1967 6: 
i
 = 
	`mDNS_¢¥ötf
(
mDNS_VACB
, (mDNS_VACB), "%02X:%02X:%02X:%02X:%02X:%02X",

1968 
a
[0],á[1],á[2],á[3],á[4],á[5]); ;

1969 16: 
i
 = 
	`mDNS_¢¥ötf
(
mDNS_VACB
, (mDNS_VACB),

1971 
a
[0x0],á[0x1],á[0x2],á[0x3],á[0x4],á[0x5],á[0x6],á[0x7],

1972 
a
[0x8],á[0x9],á[0xA],á[0xB],á[0xC],á[0xD],á[0xE],á[0xF]); ;

1973 : 
i
 = 
	`mDNS_¢¥ötf
(
mDNS_VACB
, (mDNS_VACB), "%s", "<< ERROR: Must specify"

1980 'p' : 
F
.
havePªcisi⁄
 = F.
lSize
 = 1;

1981 
F
.
¥ecisi⁄
 = 8;

1982 'X' : 
digôs
 = "0123456789ABCDEF";

1983 
hexadecimÆ
;

1984 'x' : 
digôs
 = "0123456789abcdef";

1985 
hexadecimÆ
:i‡(
F
.
lSize
Ë
n
 = 
	`va_¨g
(
¨g
, );

1986 
n
 = 
	`va_¨g
(
¨g
, );

1987 i‡(
F
.
hSize
Ë
n
 = ()Ç;

1988 i‡(!
F
.
havePªcisi⁄
)

1990 i‡(
F
.
zîoPad
)

1992 
F
.
¥ecisi⁄
 = F.
fõldWidth
;

1993 i‡(
F
.
ÆtF‹m
ËF.
¥ecisi⁄
 -= 2;

1995 i‡(
F
.
¥ecisi⁄
 < 1) F.precision = 1;

1997 i‡(
F
.
¥ecisi⁄
 > 
mDNS_VACB_Size
 - 1)

1998 
F
.
¥ecisi⁄
 = 
mDNS_VACB_Size
 - 1;

1999 
i
 = 0; 
n
;Ç /16, i++Ë*--
s
 = 
digôs
[n % 16];

2000 ; 
i
 < 
F
.
¥ecisi⁄
; i++Ë*--
s
 = '0';

2001 i‡(
F
.
ÆtF‹m
Ë{ *--
s
 = ()
c
; *--†'0'; 
i
 += 2; }

2004 'c' : *--
s
 = ()
	`va_¨g
(
¨g
, ); 
i
 = 1; ;

2006 's' : 
s
 = 
	`va_¨g
(
¨g
, *);

2007 i‡(!
s
Ë{ 
emsg
[] = "<<NULL>>"; s =Émsg; 
i
 = (emsg)-1; }

2008 
F
.
ÆtF‹m
)

2010 0: 
i
=0;

2011 i‡(!
F
.
havePªcisi⁄
)

2012 
s
[
i
]) i++;

2015 (
i
 < 
F
.
¥ecisi⁄
Ë&& 
s
[i]) i++;

2022 
j
 = 
i
;

2024 
i
>0 && (
s
[i-1] & 0xC0) == 0x80) i--;

2027 i‡(
i
>0 && (
s
[i-1] & 0xC0) == 0xC0)

2029 
i
--;

2035 i‡(((
j
-
i
Ë< 7Ë&& (((
s
[i] >> (7-(j-i))) & 0xFF) == 0xFE)) i = j;

2039 1: 
i
 = (Ë*
s
++; ;

2041 *
a
 = (*)
s
;

2042 
s
 = 
mDNS_VACB
;

2043 i‡(*
a
 =0Ë*
s
++ = '.';

2044 *
a
)

2046 i‡(*
a
 > 63)

2047 { 
s
 +
	`mDNS_¢¥ötf
(s, 
	`mDNS_VACB_Remaö
(s), "<<INVALID LABEL LENGTH %u>>", *
a
); ; }

2048 i‡(
s
 + *
a
 >&
mDNS_VACB
[254])

2049 { 
s
 +
	`mDNS_¢¥ötf
(s, 
	`mDNS_VACB_Remaö
(s), "<<NAME TOO LONG>>"); ; }

2050 
s
 +
	`mDNS_¢¥ötf
(s, 
	`mDNS_VACB_Remaö
(s), "%#s.", 
a
);

2051 
a
 += 1 + *a;

2053 
i
 = (
mDNSu32
)(
s
 - 
mDNS_VACB
);

2054 
s
 = 
mDNS_VACB
;

2059 i‡(
F
.
havePªcisi⁄
 && 
i
 > F.
¥ecisi⁄
)

2060 { 
i
 = 
F
.
¥ecisi⁄
; i>0 && (
s
[i] & 0xC0) == 0x80) i--; }

2063 'n' : 
s
 = 
	`va_¨g
(
¨g
, *);

2064 i‡(
F
.
hSize
Ë* (*Ë
s
 = ()
nwrôãn
;

2065 i‡(
F
.
lSize
Ë* (*Ë
s
 = ()
nwrôãn
;

2066 * (*Ë
s
 = ()
nwrôãn
;

2069 : 
s
 = 
mDNS_VACB
;

2070 
i
 = 
	`mDNS_¢¥ötf
(
mDNS_VACB
, (mDNS_VACB), "<<UNKNOWN FORMAT CONVERSION CODE %%%c>>", 
c
);

2072 '%' : *
sbuf„r
++ = ()
c
;

2073 i‡(++
nwrôãn
 >
buÊí
Ë
exô
;

2077 i‡(
i
 < 
F
.
fõldWidth
 && !F.
À·Ju°ify
)

2079 *
sbuf„r
++ = ' ';

2080 i‡(++
nwrôãn
 >
buÊí
Ë
exô
;

2081 } 
i
 < --
F
.
fõldWidth
);

2088 i‡(
i
 > 
buÊí
 - 
nwrôãn
)

2089 { 
i
 = 
buÊí
 - 
nwrôãn
; i>0 && (
s
[i] & 0xC0) == 0x80) i--; }

2090 
j
=0; j<
i
; j++Ë*
sbuf„r
++ = *
s
++;

2091 
nwrôãn
 +
i
;

2092 i‡(
nwrôãn
 >
buÊí
Ë
exô
;

2094 ; 
i
 < 
F
.
fõldWidth
; i++)

2096 *
sbuf„r
++ = ' ';

2097 i‡(++
nwrôãn
 >
buÊí
Ë
exô
;

2101 
exô
:

2102 *
sbuf„r
++ = 0;

2103 (
nwrôãn
);

2104 
	}
}

2106 
mDNSexp‹t
 
mDNSu32
 
	$mDNS_¢¥ötf
(*
sbuf„r
, 
mDNSu32
 
buÊí
, c⁄° *
fmt
, ...)

2108 
mDNSu32
 
Àngth
;

2110 
va_li°
 
±r
;

2111 
	`va_°¨t
(
±r
,
fmt
);

2112 
Àngth
 = 
	`mDNS_v¢¥ötf
(
sbuf„r
, 
buÊí
, 
fmt
, 
±r
);

2113 
	`va_íd
(
±r
);

2115 (
Àngth
);

2116 
	}
}

2119 #i‡
COMPILER_LIKES_PRAGMA_MARK


2120 #¥agm®
m¨k
 -

2121 #¥agm®
m¨k
 - 
GíîÆ
 
Utûôy
 
Fun˘i⁄s


2124 
	#InôülQue°i⁄I¡îvÆ
 (
mDNSPœtf‹mO√Sec⁄d
/2)

	)

2125 
	#A˘iveQue°i⁄
(
Q
Ë((Q)->
ThisQI¡îvÆ
 > 0 && !(Q)->
Du∂iˇãOf
)

	)

2126 
	#TimeToSídThisQue°i⁄
(
Q
,
time
Ë(
	`A˘iveQue°i⁄
(QË&& (timeË- ((Q)->
La°QTime
 + (Q)->
ThisQI¡îvÆ
Ë>0)

	)

2128 
mDNSloˇl
 
	$SëNextQuîyTime
(
mDNS
 *c⁄° 
m
, c⁄° 
DNSQue°i⁄
 *c⁄° 
q
)

2130 i‡(
	`A˘iveQue°i⁄
(
q
))

2131 i‡(
m
->
NextScheduÀdQuîy
 - (
q
->
La°QTime
 + q->
ThisQI¡îvÆ
) > 0)

2132 
m
->
NextScheduÀdQuîy
 = (
q
->
La°QTime
 + q->
ThisQI¡îvÆ
);

2133 
	}
}

2135 
mDNSloˇl
 
CacheGroup
 *
	$CacheGroupF‹Name
(c⁄° 
mDNS
 *c⁄° 
m
, c⁄° 
mDNSu32
 
¶Ÿ
, c⁄° mDNSu32 
«mehash
, c⁄° 
domaö«me
 *c⁄° 
«me
)

2137 
CacheGroup
 *
cg
;

2138 
cg
 = 
m
->
ºˇche_hash
[
¶Ÿ
]; cg; cg=cg->
√xt
)

2139 i‡(
cg
->
«mehash
 =«mehash && 
	`SameDomaöName
(cg->
«me
,Çame))

2141 (
cg
);

2142 
	}
}

2144 
mDNSloˇl
 
CacheGroup
 *
	$CacheGroupF‹Rec‹d
(c⁄° 
mDNS
 *c⁄° 
m
, c⁄° 
mDNSu32
 
¶Ÿ
, c⁄° 
Resour˚Rec‹d
 *c⁄° 
º
)

2146 (
	`CacheGroupF‹Name
(
m
, 
¶Ÿ
, 
º
->
«mehash
,Ñr->
«me
));

2147 
	}
}

2149 
mDNSloˇl
 
mDNSBoﬁ
 
	$AddªssIsLoˇlSub√t
(
mDNS
 *c⁄° 
m
, c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, c⁄° 
mDNSAddr
 *
addr
)

2151 
Nëw‹kI¡îÁ˚Info
 *
ötf
;

2153 i‡(
addr
->
ty≥
 =
mDNSAddrTy≥_IPv4
)

2155 i‡(
addr
->
ù
.
v4
.
b
[0] =169 &&áddr->ù.v4.b[1] =254Ë(
mDNSåue
);

2156 
ötf
 = 
m
->
Ho°I¡îÁ˚s
; i¡f; i¡‡ötf->
√xt
)

2157 i‡(
ötf
->
ù
.
ty≥
 =
addr
->ty≥ && i¡f->
I¡îÁ˚ID
 =I¡îÁ˚ID && i¡f->
Mˇ°TxRx
)

2158 i‡(((
ötf
->
ù
.ù.
v4
.
NŸAnI¡egî
 ^ 
addr
->ù.v4.NŸAnI¡egîË& i¡f->
mask
.ip.v4.NotAnInteger) == 0)

2159 (
mDNSåue
);

2162 i‡(
addr
->
ty≥
 =
mDNSAddrTy≥_IPv6
)

2164 i‡(
addr
->
ù
.
v6
.
b
[0] =0xFE &&áddr->ù.v6.b[1] =0x80Ë(
mDNSåue
);

2165 
ötf
 = 
m
->
Ho°I¡îÁ˚s
; i¡f; i¡‡ötf->
√xt
)

2166 i‡(
ötf
->
ù
.
ty≥
 =
addr
->ty≥ && i¡f->
I¡îÁ˚ID
 =I¡îÁ˚ID && i¡f->
Mˇ°TxRx
)

2167 i‡((((
ötf
->
ù
.ù.
v6
.
l
[0] ^ 
addr
->ù.v6.l[0]Ë& i¡f->
mask
.ip.v6.l[0]) == 0) &&

2168 (((
ötf
->
ù
.ù.
v6
.
l
[1] ^ 
addr
->ù.v6.l[1]Ë& i¡f->
mask
.ip.v6.l[1]) == 0) &&

2169 (((
ötf
->
ù
.ù.
v6
.
l
[2] ^ 
addr
->ù.v6.l[2]Ë& i¡f->
mask
.ip.v6.l[2]) == 0) &&

2170 (((
ötf
->
ù
.ù.
v6
.
l
[3] ^ 
addr
->ù.v6.l[3]Ë& i¡f->
mask
.ip.v6.l[3]) == 0))

2171 (
mDNSåue
);

2174 (
mDNSÁl£
);

2175 
	}
}

2179 
mDNSexp‹t
 
	$mDNS_SëupResour˚Rec‹d
(
AuthRec‹d
 *
º
, 
RD©a
 *
RD©aSt‹age
, 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
,

2180 
mDNSu16
 
ºty≥
, 
mDNSu32
 
âl
, 
mDNSu8
 
Rec‹dTy≥
, 
mDNSRec‹dCÆlback
 
CÆlback
, *
C⁄ãxt
)

2182 
	`mDNSPœtf‹mMemZîo
(&
º
->
uDNS_öfo
, (
uDNS_RegInfo
));

2184 i‡(
âl
 > 0x7FFFFFFFUL / 
mDNSPœtf‹mO√Sec⁄d
)

2185 
âl
 = 0x7FFFFFFFUL / 
mDNSPœtf‹mO√Sec⁄d
;

2186 i‡(
âl
 == 0)

2187 
âl
 = 
	`DeÁu…TTLf‹RRTy≥
(
ºty≥
);

2190 
º
->
ª§ec
.
Rec‹dTy≥
 = RecordType;

2191 
º
->
ª§ec
.
I¡îÁ˚ID
 = InterfaceID;

2192 
º
->
ª§ec
.
«me
 = &º->
«me°‹age
;

2193 
º
->
ª§ec
.
ºty≥
 =Ñrtype;

2194 
º
->
ª§ec
.
º˛ass
 = 
kDNSCœss_IN
;

2195 
º
->
ª§ec
.
º‹igöÆâl
 = 
âl
;

2200 i‡(
RD©aSt‹age
)

2201 
º
->
ª§ec
.
rd©a
 = 
RD©aSt‹age
;

2204 
º
->
ª§ec
.
rd©a
 = &º->
rd©a°‹age
;

2205 
º
->
ª§ec
.
rd©a
->
MaxRDLígth
 = (
RD©aBody
);

2209 
º
->
Addôi⁄Æ1
 = 
mDNSNULL
;

2210 
º
->
Addôi⁄Æ2
 = 
mDNSNULL
;

2211 
º
->
DïídítOn
 = 
mDNSNULL
;

2212 
º
->
RRSë
 = 
mDNSNULL
;

2213 
º
->
Rec‹dCÆlback
 = 
CÆlback
;

2214 
º
->
Rec‹dC⁄ãxt
 = 
C⁄ãxt
;

2216 
º
->
Ho°T¨gë
 = 
mDNSÁl£
;

2217 
º
->
AŒowRemŸeQuîy
 = 
mDNSÁl£
;

2218 
º
->
F‹˚MCa°
 = 
mDNSÁl£
;

2222 
º
->
«me°‹age
.
c
[0] = 0;

2223 
	}
}

2227 
mDNSloˇl
 
	$AnswîLoˇlO∆yQue°i⁄WôhResour˚Rec‹d
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *
q
, 
AuthRec‹d
 *
º
, 
mDNSBoﬁ
 
AddRec‹d
)

2230 i‡(
AddRec‹d
Ë
º
->
LoˇlAnswî
 = 
mDNSåue
;

2231 
m
->
mDNS_ªíå™cy
++;

2232 i‡(
q
->
Que°i⁄CÆlback
)

2233 
q
->
	`Que°i⁄CÆlback
(
m
, q, &
º
->
ª§ec
, 
AddRec‹d
);

2234 
m
->
mDNS_ªíå™cy
--;

2235 
	}
}

2241 
mDNSloˇl
 
	$AnswîLoˇlQue°i⁄s
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *
º
, 
mDNSBoﬁ
 
AddRec‹d
)

2243 i‡(
m
->
CuºítQue°i⁄
Ë
	`LogMsg
("AnswerLocalQuestions ERROR m->CurrentQuestionálready set");

2245 
m
->
CuºítQue°i⁄
 = m->
LoˇlO∆yQue°i⁄s
;

2246 
m
->
CuºítQue°i⁄
 && m->CuºítQue°i⁄ !m->
NewLoˇlO∆yQue°i⁄s
)

2248 
DNSQue°i⁄
 *
q
 = 
m
->
CuºítQue°i⁄
;

2249 
m
->
CuºítQue°i⁄
 = 
q
->
√xt
;

2250 i‡(
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
º
->
ª§ec
, 
q
))

2251 
	`AnswîLoˇlO∆yQue°i⁄WôhResour˚Rec‹d
(
m
, 
q
, 
º
, 
AddRec‹d
);

2255 i‡(
º
->
ª§ec
.
I¡îÁ˚ID
 =
mDNSI¡îÁ˚_LoˇlO∆y
)

2257 
m
->
CuºítQue°i⁄
 = m->
Que°i⁄s
;

2258 
m
->
CuºítQue°i⁄
 && m->CuºítQue°i⁄ !m->
NewQue°i⁄s
)

2260 
DNSQue°i⁄
 *
q
 = 
m
->
CuºítQue°i⁄
;

2261 
m
->
CuºítQue°i⁄
 = 
q
->
√xt
;

2262 i‡(
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
º
->
ª§ec
, 
q
))

2263 
	`AnswîLoˇlO∆yQue°i⁄WôhResour˚Rec‹d
(
m
, 
q
, 
º
, 
AddRec‹d
);

2267 
m
->
CuºítQue°i⁄
 = 
mDNSNULL
;

2268 
	}
}

2271 #i‡
COMPILER_LIKES_PRAGMA_MARK


2272 #¥agm®
m¨k
 -

2273 #¥agm®
m¨k
 - 
Resour˚
 
Rec‹d
 
Utûôy
 
Fun˘i⁄s


2276 
	#RRTy≥IsAddªssTy≥
(
T
Ë((TË=
kDNSTy≥_A
 || (TË=
kDNSTy≥_AAAA
)

	)

2278 
	#Resour˚Rec‹dIsVÆidAnswî
(
RR
Ë–((RR)-> 
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥A˘iveMask
) && \

2279 ((
RR
)->
Addôi⁄Æ1
 =
mDNSNULL
 || ((RR)->Addôi⁄Æ1->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥A˘iveMask
)) && \

2280 ((
RR
)->
Addôi⁄Æ2
 =
mDNSNULL
 || ((RR)->Addôi⁄Æ2->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥A˘iveMask
)) && \

2281 ((
RR
)->
DïídítOn
 =
mDNSNULL
 || ((RR)->DïídítOn->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥A˘iveMask
)Ë)

	)

2283 
	#Resour˚Rec‹dIsVÆidI¡îÁ˚Answî
(
RR
, 
INTID
) \

2284 (
	`Resour˚Rec‹dIsVÆidAnswî
(
RR
) && \

2285 ((
RR
)->
ª§ec
.
I¡îÁ˚ID
 =
mDNSI¡îÁ˚_Any
 || (RR)->ª§ec.I¡îÁ˚ID =(
INTID
)))

	)

2287 
	#DeÁu…ProbeCou¡F‹Ty≥Unique
 ((
mDNSu8
)3)

	)

2288 
	#DeÁu…ProbeCou¡F‹Rec‹dTy≥
(
X
Ë((XË=
kDNSRec‹dTy≥Unique
 ? 
DeÁu…ProbeCou¡F‹Ty≥Unique
 : (
mDNSu8
)0)

	)

2290 
	#InôülA¬oun˚Cou¡
 ((
mDNSu8
)10)

	)

2296 
	#DeÁu…ProbeI¡îvÆF‹Ty≥Unique
 (
mDNSPœtf‹mO√Sec⁄d
/4)

	)

2297 
	#DeÁu…A¬oun˚I¡îvÆF‹Ty≥Sh¨ed
 (
mDNSPœtf‹mO√Sec⁄d
/2)

	)

2298 
	#DeÁu…A¬oun˚I¡îvÆF‹Ty≥Unique
 (
mDNSPœtf‹mO√Sec⁄d
/2)

	)

2300 
	#DeÁu…API¡îvÆF‹Rec‹dTy≥
(
X
Ë((XË& (
kDNSRec‹dTy≥Advis‹y
 | 
kDNSRec‹dTy≥Sh¨ed
 ) ? 
DeÁu…A¬oun˚I¡îvÆF‹Ty≥Sh¨ed
 : \

2301 (
X
Ë& (
kDNSRec‹dTy≥Unique
 ) ? 
DeÁu…ProbeI¡îvÆF‹Ty≥Unique
 : \

2302 (
X
Ë& (
kDNSRec‹dTy≥Vîifõd
 | 
kDNSRec‹dTy≥KnownUnique
Ë? 
DeÁu…A¬oun˚I¡îvÆF‹Ty≥Unique
 : 0)

	)

2304 
	#TimeToA¬oun˚ThisRec‹d
(
RR
,
time
Ë((RR)->
A¬oun˚Cou¡
 && (timeË- ((RR)->
La°APTime
 + (RR)->
ThisAPI¡îvÆ
Ë>0)

	)

2305 
	#TimeToSídThisRec‹d
(
RR
,
time
Ë((
	`TimeToA¬oun˚ThisRec‹d
(RR,timeË|| (RR)->
ImmedAnswî
Ë&& 
	`Resour˚Rec‹dIsVÆidAnswî
(RR))

	)

2306 
	#TicksTTL
(
RR
Ë((
mDNSs32
)(RR)->
ª§ec
.
º‹igöÆâl
 * 
mDNSPœtf‹mO√Sec⁄d
)

	)

2307 
	#RRExpúeTime
(
RR
Ë((RR)->
TimeRcvd
 + 
	`TicksTTL
(RR))

	)

2309 
	#MaxU«nswîedQuîõs
 4

	)

2317 
mDNSloˇl
 
mDNSBoﬁ
 
	$SameResour˚Rec‹dSig«tuª
(c⁄° 
Resour˚Rec‹d
 *c⁄° 
r1
, c⁄° Resour˚Rec‹d *c⁄° 
r2
)

2319 i‡(!
r1
Ë{ 
	`LogMsg
("SameResour˚Rec‹dSig«tuª ERROR:Ñ1 i†NULL"); (
mDNSÁl£
); }

2320 i‡(!
r2
Ë{ 
	`LogMsg
("SameResour˚Rec‹dSig«tuª ERROR:Ñ2 i†NULL"); (
mDNSÁl£
); }

2321 i‡(
r1
->
I¡îÁ˚ID
 &&

2322 
r2
->
I¡îÁ˚ID
 &&

2323 
r1
->
I¡îÁ˚ID
 !
r2
->I¡îÁ˚IDË(
mDNSÁl£
);

2324 (
mDNSBoﬁ
)(

2325 
r1
->
ºty≥
 =
r2
->rrtype &&

2326 
r1
->
º˛ass
 =
r2
->rrclass &&

2327 
r1
->
«mehash
 =
r2
->namehash &&

2328 
	`SameDomaöName
(
r1
->
«me
, 
r2
->name));

2329 
	}
}

2336 
mDNSloˇl
 
mDNSBoﬁ
 
	$PackëRRM©chesSig«tuª
(c⁄° 
CacheRec‹d
 *c⁄° 
pkår
, c⁄° 
AuthRec‹d
 *c⁄° 
authº
)

2338 i‡(!
pkår
Ë{ 
	`LogMsg
("PackëRRM©chesSig«tuª ERROR:Ökå∏i†NULL"); (
mDNSÁl£
); }

2339 i‡(!
authº
Ë{ 
	`LogMsg
("PackëRRM©chesSig«tuª ERROR:áuthº i†NULL"); (
mDNSÁl£
); }

2340 i‡(
pkår
->
ª§ec
.
I¡îÁ˚ID
 &&

2341 
authº
->
ª§ec
.
I¡îÁ˚ID
 &&

2342 
pkår
->
ª§ec
.
I¡îÁ˚ID
 !
authº
->ª§ec.I¡îÁ˚IDË(
mDNSÁl£
);

2343 i‡(!(
authº
->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥UniqueMask
Ë&& 
pkår
->ª§ec.
ºty≥
 !authº->ª§ec.ºty≥Ë(
mDNSÁl£
);

2344 (
mDNSBoﬁ
)(

2345 
pkår
->
ª§ec
.
º˛ass
 =
authº
->resrec.rrclass &&

2346 
pkår
->
ª§ec
.
«mehash
 =
authº
->resrec.namehash &&

2347 
	`SameDomaöName
(
pkår
->
ª§ec
.
«me
, 
authº
->resrec.name));

2348 
	}
}

2352 
mDNSloˇl
 
mDNSBoﬁ
 
	$IdítiˇlResour˚Rec‹d
(c⁄° 
Resour˚Rec‹d
 *c⁄° 
r1
, c⁄° Resour˚Rec‹d *c⁄° 
r2
)

2354 i‡(!
r1
Ë{ 
	`LogMsg
("IdítiˇlResour˚Rec‹d ERROR:Ñ1 i†NULL"); (
mDNSÁl£
); }

2355 i‡(!
r2
Ë{ 
	`LogMsg
("IdítiˇlResour˚Rec‹d ERROR:Ñ2 i†NULL"); (
mDNSÁl£
); }

2356 i‡(
r1
->
ºty≥
 !
r2
->ºty≥ ||Ñ1->
º˛ass
 !r2->º˛as†||Ñ1->
«mehash
 !r2->«mehash || !
	`SameDomaöName
‘1->
«me
,Ñ2->name))

2357 (
mDNSÁl£
);

2358 (
	`SameRD©a
(
r1
, 
r2
));

2359 
	}
}

2368 
mDNSloˇl
 
mDNSBoﬁ
 
	$ShouldSuµªssKnownAnswî
(c⁄° 
CacheRec‹d
 *c⁄° 
ka
, c⁄° 
AuthRec‹d
 *c⁄° 
º
)

2371 i‡(!
	`IdítiˇlResour˚Rec‹d
(&
ka
->
ª§ec
, &
º
->ª§ec)Ë(
mDNSÁl£
);

2382 (
mDNSBoﬁ
)(
ka
->
ª§ec
.
º‹igöÆâl
 >
º
->resrec.rroriginalttl / 2);

2383 
	}
}

2385 
mDNSloˇl
 
	$SëNextA¬oun˚ProbeTime
(
mDNS
 *c⁄° 
m
, c⁄° 
AuthRec‹d
 *c⁄° 
º
)

2387 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥Unique
)

2391 i‡(
m
->
NextScheduÀdProbe
 - (
º
->
La°APTime
 +Ñr->
ThisAPI¡îvÆ
) >= 0)

2392 
m
->
NextScheduÀdProbe
 = (
º
->
La°APTime
 +Ñr->
ThisAPI¡îvÆ
);

2394 i‡(
º
->
A¬oun˚Cou¡
 && 
	`Resour˚Rec‹dIsVÆidAnswî
(rr))

2396 i‡(
m
->
NextScheduÀdRe•⁄£
 - (
º
->
La°APTime
 +Ñr->
ThisAPI¡îvÆ
) >= 0)

2397 
m
->
NextScheduÀdRe•⁄£
 = (
º
->
La°APTime
 +Ñr->
ThisAPI¡îvÆ
);

2399 
	}
}

2401 
mDNSloˇl
 
	$InôülizeLa°APTime
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
)

2411 i‡(
m
->
SuµªssProbes
 =0 || m->SuµªssProbe†- m->
timíow
 < 0)

2413 
m
->
SuµªssProbes
 = 
	`N⁄ZîoTime
(m->
timíow
 + 
DeÁu…ProbeI¡îvÆF‹Ty≥Unique
);

2415 i‡(
m
->
SuµªssProbes
 - m->
NextScheduÀdProbe
 >= 0)

2416 
m
->
SuµªssProbes
 = m->
NextScheduÀdProbe
;

2418 i‡(
m
->
SuµªssProbes
 - m->
NextScheduÀdQuîy
 >= 0)

2419 
m
->
SuµªssProbes
 = m->
NextScheduÀdQuîy
;

2425 
º
->
A¬oun˚U¡û
 = 
m
->
timíow
 + 
	`TicksTTL
(rr);

2426 
º
->
La°APTime
 = 
m
->
SuµªssProbes
 -Ñr->
ThisAPI¡îvÆ
;

2429 
º
->
La°MCTime
 = 
m
->
timíow
;

2430 
º
->
La°MCI¡îÁ˚
 = 
mDNSI¡îÁ˚M¨k
;

2439 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 !
kDNSRec‹dTy≥Unique
)

2440 
º
->
La°APTime
 +
DeÁu…ProbeI¡îvÆF‹Ty≥Unique
 * 
DeÁu…ProbeCou¡F‹Ty≥Unique
 +Ñr->
ThisAPI¡îvÆ
 / 2;

2442 
	`SëNextA¬oun˚ProbeTime
(
m
, 
º
);

2443 
	}
}

2445 
	#HashSlŸ
(
X
Ë(
	`DomaöNameHashVÆue
(XË% 
CACHE_HASH_SLOTS
)

	)

2447 
mDNSloˇl
 
	$SëT¨gëToHo°Name
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
)

2449 
domaö«me
 *
èrgë
 = 
	`GëRRDomaöNameT¨gë
(&
º
->
ª§ec
);

2451 i‡(!
èrgë
Ë
	`debugf
("SëT¨gëToHo°Name: D⁄'àknow howÅÿ£àthêèrgë o‡ºty≥ %d", 
º
->
ª§ec
.
ºty≥
);

2453 i‡(
èrgë
 && 
	`SameDomaöName
—¨gë, &
m
->
Mu…iˇ°Ho°«me
))

2454 
	`debugf
("SëT¨gëToHo°Name: T¨gë o‡%##†i†Æªady %##s", 
º
->
ª§ec
.
«me
->
c
, 
èrgë
->c);

2456 i‡(
èrgë
 && !
	`SameDomaöName
—¨gë, &
m
->
Mu…iˇ°Ho°«me
))

2458 
	`AssignDomaöName
(
èrgë
, &
m
->
Mu…iˇ°Ho°«me
);

2459 
	`SëNewRD©a
(&
º
->
ª§ec
, 
mDNSNULL
, 0);

2464 
º
->
ProbeCou¡
 = 
	`DeÁu…ProbeCou¡F‹Rec‹dTy≥
‘r->
ª§ec
.
Rec‹dTy≥
);

2469 i‡(
º
->
RequúeGoodbye
 &&Ñr->
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥Sh¨ed
)

2470 
	`debugf
("Haveánnounced sharedÑecord %##s (%s)átÜeast once: should have sentá goodbyeÖacket before updating",

2471 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

2473 
º
->
A¬oun˚Cou¡
 = 
InôülA¬oun˚Cou¡
;

2474 
º
->
RequúeGoodbye
 = 
mDNSÁl£
;

2475 
º
->
ThisAPI¡îvÆ
 = 
	`DeÁu…API¡îvÆF‹Rec‹dTy≥
‘r->
ª§ec
.
Rec‹dTy≥
);

2476 
	`InôülizeLa°APTime
(
m
,
º
);

2478 
	}
}

2480 
mDNSloˇl
 
	$AcknowÀdgeRec‹d
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
)

2482 i‡(!
º
->
AcknowÀdged
 &&Ñr->
Rec‹dCÆlback
)

2486 
º
->
AcknowÀdged
 = 
mDNSåue
;

2487 
m
->
mDNS_ªíå™cy
++;

2488 
º
->
	`Rec‹dCÆlback
(
m
,Ñr, 
mSètus_NoEº‹
);

2489 
m
->
mDNS_ªíå™cy
--;

2491 
	}
}

2494 
	#Rec‹dLDT
(
A
,
B
Ë((A)->
ª§ec
.
Rec‹dTy≥
 == (B)->resrec.RecordType || \

2495 ((
A
)->
ª§ec
.
Rec‹dTy≥
 | (
B
)->ª§ec.Rec‹dTy≥Ë=(
kDNSRec‹dTy≥Unique
 | 
kDNSRec‹dTy≥Vîifõd
))

	)

2496 
	#Rec‹dIsLoˇlDu∂iˇã
(
A
,
B
) \

2497 ((
A
)->
ª§ec
.
I¡îÁ˚ID
 =(
B
)->ª§ec.I¡îÁ˚ID && 
	`Rec‹dLDT
((A),(B)Ë&& 
	`IdítiˇlResour˚Rec‹d
(&(A)->ª§ec, &(B)->ª§ec))

	)

2499 
mDNSloˇl
 
mSètus
 
	$mDNS_Regi°î_öã∫Æ
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
)

2501 
domaö«me
 *
èrgë
 = 
	`GëRRDomaöNameT¨gë
(&
º
->
ª§ec
);

2502 
AuthRec‹d
 *
r
;

2503 
AuthRec‹d
 **
p
 = &
m
->
Resour˚Rec‹ds
;

2504 
AuthRec‹d
 **
d
 = &
m
->
Du∂iˇãRec‹ds
;

2506 
	`mDNSPœtf‹mMemZîo
(&
º
->
uDNS_öfo
, (
uDNS_RegInfo
));

2508 i‡((
mDNSs32
)
º
->
ª§ec
.
º‹igöÆâl
 <= 0)

2509 { 
	`LogMsg
("mDNS_Regi°î_öã∫Æ: TTL mu° bê1 - 0x7FFFFFFF %s", 
	`ARDi•œySåög
(
m
, 
º
)); (
mSètus_BadP¨amEº
); }

2511 #i‚de‡
UNICAST_DISABLED


2512 i‡(
º
->
ª§ec
.
I¡îÁ˚ID
 =
mDNSI¡îÁ˚_LoˇlO∆y
 ||Ñr->
F‹˚MCa°
 || 
	`IsLoˇlDomaö
‘r->ª§ec.
«me
))

2513 
º
->
uDNS_öfo
.
id
 = 
zîoID
;

2514  
	`uDNS_Regi°îRec‹d
(
m
, 
º
);

2517 *
p
 && *∞!
º
Ëp=&(*p)->
√xt
;

2518 *
d
 && *d !
º
Ëd=&(*d)->
√xt
;

2519 i‡(*
d
 || *
p
)

2521 
	`LogMsg
("Error! TriedÅoÑegisterá AuthRecord %p %##s (%s)Åhat'sálready inÅheÜist",

2522 
º
,Ñr->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

2523 (
mSètus_AÃódyRegi°îed
);

2526 i‡(
º
->
DïídítOn
)

2528 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥Unique
)

2529 
º
->
ª§ec
.
Rec‹dTy≥
 = 
kDNSRec‹dTy≥Vîifõd
;

2532 
	`LogMsg
("mDNS_Register_internal: ERROR! %##s (%s):Ñr->DependentOn && RecordType != kDNSRecordTypeUnique",

2533 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

2534 (
mSètus_InvÆid
);

2536 i‡(!(
º
->
DïídítOn
->
ª§ec
.
Rec‹dTy≥
 & (
kDNSRec‹dTy≥Unique
 | 
kDNSRec‹dTy≥Vîifõd
)))

2538 
	`LogMsg
("mDNS_Register_internal: ERROR! %##s (%s):Ñr->DependentOn->RecordType badÅype %X",

2539 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
),Ñr->
DïídítOn
->ª§ec.
Rec‹dTy≥
);

2540 (
mSètus_InvÆid
);

2545 i‡(
º
->
ª§ec
.
I¡îÁ˚ID
 &&Ñr->ª§ec.I¡îÁ˚ID !
mDNSI¡îÁ˚_LoˇlO∆y
)

2547 
Nëw‹kI¡îÁ˚Info
 *
ötf
;

2548 
ötf
 = 
m
->
Ho°I¡îÁ˚s
; i¡f; i¡‡ötf->
√xt
)

2549 i‡(
ötf
->
I¡îÁ˚ID
 =
º
->
ª§ec
.InterfaceID) ;

2550 i‡(!
ötf
)

2552 
	`debugf
("mDNS_Regi°î_öã∫Æ: Bogu†I¡îÁ˚ID %∞öÑesour˚Ñec‹d", 
º
->
ª§ec
.
I¡îÁ˚ID
);

2553 (
mSètus_BadRe„ªn˚Eº
);

2557 
º
->
√xt
 = 
mDNSNULL
;

2570 i‡(
º
->
Ho°T¨gë
 && 
èrgë
Ëèrgë->
c
[0] = 0;

2573 
º
->
AcknowÀdged
 = 
mDNSÁl£
;

2574 
º
->
ProbeCou¡
 = 
	`DeÁu…ProbeCou¡F‹Rec‹dTy≥
‘r->
ª§ec
.
Rec‹dTy≥
);

2575 
º
->
A¬oun˚Cou¡
 = 
InôülA¬oun˚Cou¡
;

2576 
º
->
RequúeGoodbye
 = 
mDNSÁl£
;

2577 
º
->
LoˇlAnswî
 = 
mDNSÁl£
;

2578 
º
->
In˛udeInProbe
 = 
mDNSÁl£
;

2579 
º
->
ImmedAnswî
 = 
mDNSNULL
;

2580 
º
->
ImmedUniˇ°
 = 
mDNSÁl£
;

2581 
º
->
ImmedAddôi⁄Æ
 = 
mDNSNULL
;

2582 
º
->
SídRNow
 = 
mDNSNULL
;

2583 
º
->
v4Reque°î
 = 
zîov4Addr
;

2584 
º
->
v6Reque°î
 = 
zîov6Addr
;

2585 
º
->
NextRe•⁄£
 = 
mDNSNULL
;

2586 
º
->
NR_AnswîTo
 = 
mDNSNULL
;

2587 
º
->
NR_Addôi⁄ÆTo
 = 
mDNSNULL
;

2588 
º
->
ThisAPI¡îvÆ
 = 
	`DeÁu…API¡îvÆF‹Rec‹dTy≥
‘r->
ª§ec
.
Rec‹dTy≥
);

2589 i‡(!
º
->
Ho°T¨gë
Ë
	`InôülizeLa°APTime
(
m
,Ñr);

2594 
º
->
NewRD©a
 = 
mDNSNULL
;

2595 
º
->
√wrdÀngth
 = 0;

2596 
º
->
Upd©eCÆlback
 = 
mDNSNULL
;

2597 
º
->
Upd©eCªdôs
 = 
kMaxUpd©eCªdôs
;

2598 
º
->
NextUpd©eCªdô
 = 0;

2599 
º
->
Upd©eBlocked
 = 0;

2608 i‡(
º
->
Ho°T¨gë
)

2609 
	`SëT¨gëToHo°Name
(
m
, 
º
);

2612 
º
->
ª§ec
.
rdÀngth
 = 
	`GëRDLígth
(&º->ª§ec, 
mDNSÁl£
);

2613 
º
->
ª§ec
.
rde°im©e
 = 
	`GëRDLígth
(&º->ª§ec, 
mDNSåue
);

2616 i‡(!
	`VÆid©eDomaöName
(
º
->
ª§ec
.
«me
))

2617 { 
	`LogMsg
("Aâem±Åÿªgi°îÑec‹d wôh invÆidÇame: %s", 
	`ARDi•œySåög
(
m
, 
º
)); (
mSètus_InvÆid
); }

2622 i‡(
º
->
ª§ec
.
ºty≥
 =
kDNSTy≥_TXT
 &&Ñr->ª§ec.
rdÀngth
 =0Ë{Ñr->ª§ec.rdÀngth = 1;Ñr->ª§ec.
rd©a
->
u
.
txt
.
c
[0] = 0; }

2625 i‡(!
	`VÆid©eRD©a
(
º
->
ª§ec
.
ºty≥
,Ñr->ª§ec.
rdÀngth
,Ñr->ª§ec.
rd©a
))

2626 { 
	`LogMsg
("Aâem±Åÿªgi°îÑec‹d wôh invÆidÑd©a: %s", 
	`ARDi•œySåög
(
m
, 
º
)); (
mSètus_InvÆid
); }

2628 
º
->
ª§ec
.
«mehash
 = 
	`DomaöNameHashVÆue
‘r->ª§ec.
«me
);

2629 
º
->
ª§ec
.
rd©ahash
 = 
èrgë
 ? 
	`DomaöNameHashVÆue
—¨gëË: 
	`RD©aHashVÆue
‘r->ª§ec.
rdÀngth
, &º->ª§ec.
rd©a
->
u
);

2631 i‡(
º
->
ª§ec
.
I¡îÁ˚ID
 =
mDNSI¡îÁ˚_LoˇlO∆y
)

2634 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥UniqueMask
)

2636 c⁄° 
AuthRec‹d
 *
s1
 = 
º
->
RRSë
 ?Ñr->RRSet :Ñr;

2637 
r
 = 
m
->
Resour˚Rec‹ds
;Ñ;ÑÙ->
√xt
)

2639 c⁄° 
AuthRec‹d
 *
s2
 = 
r
->
RRSë
 ?Ñ->RRSet :Ñ;

2640 i‡(
s1
 !
s2
 && 
	`SameResour˚Rec‹dSig«tuª
(&
r
->
ª§ec
, &
º
->ª§ecË&& !
	`SameRD©a
(&r->resrec, &rr->resrec))

2643 i‡(
r
)

2645 
	`debugf
("Namêc⁄Êi˘ %∞%##†(%s)", 
º
,Ñr->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

2646 
º
->
ª§ec
.
Rec‹dTy≥
 = 
kDNSRec‹dTy≥Dîegi°îög
;

2647 
º
->
ª§ec
.
º‹igöÆâl
 = 0;

2648 
º
->
ImmedAnswî
 = 
mDNSI¡îÁ˚M¨k
;

2649 
m
->
NextScheduÀdRe•⁄£
 = m->
timíow
;

2655 
r
 = 
m
->
Resour˚Rec‹ds
;Ñ;ÑÙ->
√xt
Ëi‡(
	`Rec‹dIsLoˇlDu∂iˇã
‘, 
º
)) ;

2657 i‡(
r
)

2659 
	`debugf
("AddögÅÿdu∂iˇãÜi° %∞%s", 
º
, 
	`ARDi•œySåög
(
m
,rr));

2660 *
d
 = 
º
;

2665 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥Unique
 && 
r
->ª§ec.Rec‹dTy≥ =
kDNSRec‹dTy≥Vîifõd
)

2666 
º
->
ProbeCou¡
 = 0;

2670 
	`debugf
("AddögÅÿa˘ivêªc‹dÜi° %∞%s", 
º
, 
	`ARDi•œySåög
(
m
,rr));

2671 i‡(!
m
->
NewLoˇlRec‹ds
Ëm->NewLoˇlRec‹d†
º
;

2672 *
p
 = 
º
;

2676 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 !
kDNSRec‹dTy≥Unique
 &&Ñr->ª§ec.Rec‹dTy≥ !
kDNSRec‹dTy≥Dîegi°îög
)

2677 
	`AcknowÀdgeRec‹d
(
m
, 
º
);

2679 (
mSètus_NoEº‹
);

2680 
	}
}

2682 
mDNSloˇl
 
	$Rec‹dProbeFaûuª
(
mDNS
 *c⁄° 
m
, c⁄° 
AuthRec‹d
 *c⁄° 
º
)

2684 
m
->
ProbeFaûTime
 = m->
timíow
;

2685 
m
->
NumFaûedProbes
++;

2693 i‡(
m
->
NumFaûedProbes
 >= 15)

2695 
m
->
SuµªssProbes
 = 
	`N⁄ZîoTime
(m->
timíow
 + 
mDNSPœtf‹mO√Sec⁄d
 * 5);

2696 
	`LogMsg
("ExcessiveÇame conflicts (%lu) for %##s (%s);ÑateÜimiting inÉffect",

2697 
m
->
NumFaûedProbes
, 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

2699 
	}
}

2701 
mDNSloˇl
 
	$Com∂ëeRD©aUpd©e
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
)

2703 
RD©a
 *
OldRD©a
 = 
º
->
ª§ec
.
rd©a
;

2704 
	`SëNewRD©a
(&
º
->
ª§ec
,Ñr->
NewRD©a
,Ñr->
√wrdÀngth
);

2705 
º
->
NewRD©a
 = 
mDNSNULL
;

2706 i‡(
º
->
Upd©eCÆlback
)

2707 
º
->
	`Upd©eCÆlback
(
m
,Ñr, 
OldRD©a
);

2708 
	}
}

2713 íum { 
	mmDNS_Dîeg_n‹mÆ
, 
	mmDNS_Dîeg_c⁄Êi˘
, 
	mmDNS_Dîeg_ª≥©
 } 
	tmDNS_Dîeg_ty≥
;

2717 
mDNSloˇl
 
mSètus
 
	$mDNS_Dîegi°î_öã∫Æ
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
, 
mDNS_Dîeg_ty≥
 
dπ
)

2719 
AuthRec‹d
 *
r2
;

2720 
mDNSu8
 
Rec‹dTy≥
 = 
º
->
ª§ec
.RecordType;

2721 
AuthRec‹d
 **
p
 = &
m
->
Resour˚Rec‹ds
;

2723 #i‚de‡
UNICAST_DISABLED


2724 i‡(!(
º
->
ª§ec
.
I¡îÁ˚ID
 =
mDNSI¡îÁ˚_LoˇlO∆y
 ||Ñr->
F‹˚MCa°
 || 
	`IsLoˇlDomaö
‘r->ª§ec.
«me
)))

2725  
	`uDNS_Dîegi°îRec‹d
(
m
, 
º
);

2728 *
p
 && *∞!
º
Ëp=&(*p)->
√xt
;

2730 i‡(*
p
)

2733 i‡(
dπ
 =
mDNS_Dîeg_c⁄Êi˘
)

2737 
r2
 = 
m
->
Du∂iˇãRec‹ds
;Ñ2;Ñ2Ù2->
√xt
Ëi‡(
	`Rec‹dIsLoˇlDu∂iˇã
‘2, 
º
)Ër2->
ProbeCou¡
 = 0xFF;

2743 
AuthRec‹d
 **
d
 = &
m
->
Du∂iˇãRec‹ds
;

2744 *
d
 && !
	`Rec‹dIsLoˇlDu∂iˇã
(*d, 
º
)Ëd=&(*d)->
√xt
;

2745 i‡(*
d
)

2747 
AuthRec‹d
 *
dup
 = *
d
;

2748 
	`debugf
("DuplicateÑecord %pÅaking over from %p %##s (%s)",

2749 
dup
, 
º
,Ñr->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

2750 *
d
 = 
dup
->
√xt
;

2751 
dup
->
√xt
 = 
º
->next;

2752 
º
->
√xt
 = 
dup
;

2753 
dup
->
ª§ec
.
Rec‹dTy≥
 = 
º
->resrec.RecordType;

2754 
dup
->
ProbeCou¡
 = 
º
->ProbeCount;

2755 
dup
->
A¬oun˚Cou¡
 = 
º
->AnnounceCount;

2756 
dup
->
RequúeGoodbye
 = 
º
->RequireGoodbye;

2757 
dup
->
ImmedAnswî
 = 
º
->ImmedAnswer;

2758 
dup
->
ImmedUniˇ°
 = 
º
->ImmedUnicast;

2759 
dup
->
ImmedAddôi⁄Æ
 = 
º
->ImmedAdditional;

2760 
dup
->
v4Reque°î
 = 
º
->v4Requester;

2761 
dup
->
v6Reque°î
 = 
º
->v6Requester;

2762 
dup
->
ThisAPI¡îvÆ
 = 
º
->ThisAPInterval;

2763 
dup
->
A¬oun˚U¡û
 = 
º
->AnnounceUntil;

2764 
dup
->
La°APTime
 = 
º
->LastAPTime;

2765 
dup
->
La°MCTime
 = 
º
->LastMCTime;

2766 
dup
->
La°MCI¡îÁ˚
 = 
º
->LastMCInterface;

2767 
º
->
RequúeGoodbye
 = 
mDNSÁl£
;

2774 
p
 = &
m
->
Du∂iˇãRec‹ds
;

2775 *
p
 && *∞!
º
Ëp=&(*p)->
√xt
;

2777 i‡(*
p
Ë
º
->
RequúeGoodbye
 = 
mDNSÁl£
;

2778 i‡(*
p
Ë
	`debugf
("DNS_Deregister_internal: Deleting DuplicateRecord %p %##s (%s)",

2779 
º
,Ñr->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

2782 i‡(!*
p
)

2785 i‡(
dπ
 !
mDNS_Dîeg_ª≥©
)

2786 
	`LogMsg
("mDNS_Deregister_internal: Record %p %##s (%s)Çot found inÜist",

2787 
º
,Ñr->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

2788 (
mSètus_BadRe„ªn˚Eº
);

2793 i‡(
Rec‹dTy≥
 =
kDNSRec‹dTy≥Sh¨ed
 && 
º
->
RequúeGoodbye
)

2795 
	`vîbo£debugf
("mDNS_Deregister_internal: Sending deregister for %##s (%s)",

2796 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

2797 
º
->
ª§ec
.
Rec‹dTy≥
 = 
kDNSRec‹dTy≥Dîegi°îög
;

2798 
º
->
ª§ec
.
º‹igöÆâl
 = 0;

2799 
º
->
ImmedAnswî
 = 
mDNSI¡îÁ˚M¨k
;

2800 i‡(
m
->
NextScheduÀdRe•⁄£
 - (m->
timíow
 + 
mDNSPœtf‹mO√Sec⁄d
/10) >= 0)

2801 
m
->
NextScheduÀdRe•⁄£
 = (m->
timíow
 + 
mDNSPœtf‹mO√Sec⁄d
/10);

2805 *
p
 = 
º
->
√xt
;

2807 i‡(
m
->
CuºítRec‹d
 =
º
Ëm->CuºítRec‹d =Ñr->
√xt
;

2808 i‡(
m
->
NewLoˇlRec‹ds
 =
º
Ëm->NewLoˇlRec‹d†º->
√xt
;

2809 
º
->
√xt
 = 
mDNSNULL
;

2811 i‡(
Rec‹dTy≥
 =
kDNSRec‹dTy≥Uƒegi°îed
)

2812 
	`debugf
("mDNS_Deregister_internal: Record %##s (%s)álready marked kDNSRecordTypeUnregistered",

2813 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

2814 i‡(
Rec‹dTy≥
 =
kDNSRec‹dTy≥Dîegi°îög
)

2815 
	`debugf
("mDNS_Deregister_internal: Record %##s (%s)álready marked kDNSRecordTypeDeregistering",

2816 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

2819 
	`vîbo£debugf
("mDNS_Deregister_internal: DeletingÑecord for %##s (%s)",

2820 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

2821 
º
->
ª§ec
.
Rec‹dTy≥
 = 
kDNSRec‹dTy≥Uƒegi°îed
;

2824 i‡((
dπ
 =
mDNS_Dîeg_c⁄Êi˘
 || dπ =
mDNS_Dîeg_ª≥©
Ë&& 
Rec‹dTy≥
 =
kDNSRec‹dTy≥Sh¨ed
)

2825 
	`debugf
("mDNS_Deregister_internal: Cannot haveá conflict oná sharedÑecord! %##s (%s)",

2826 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

2829 i‡(
º
->
NewRD©a
Ë
	`Com∂ëeRD©aUpd©e
(
m
,Ñr);

2831 i‡(
º
->
LoˇlAnswî
Ë
	`AnswîLoˇlQue°i⁄s
(
m
,Ñr, 
mDNSÁl£
);

2837 
m
->
mDNS_ªíå™cy
++;

2838 i‡(
dπ
 !
mDNS_Dîeg_c⁄Êi˘
)

2840 i‡(
º
->
Rec‹dCÆlback
Ëº->
	`Rec‹dCÆlback
(
m
,Ñr, 
mSètus_MemFªe
);

2844 
	`Rec‹dProbeFaûuª
(
m
, 
º
);

2845 i‡(
º
->
Rec‹dCÆlback
Ëº->
	`Rec‹dCÆlback
(
m
,Ñr, 
mSètus_NameC⁄Êi˘
);

2849 
r2
 = 
m
->
Du∂iˇãRec‹ds
;

2850 
r2
)

2852 i‡(
r2
->
ProbeCou¡
 !0xFFËr2 =Ñ2->
√xt
;

2853 { 
	`mDNS_Dîegi°î_öã∫Æ
(
m
, 
r2
, 
mDNS_Dîeg_c⁄Êi˘
);Ñ2 = m->
Du∂iˇãRec‹ds
; }

2856 
m
->
mDNS_ªíå™cy
--;

2858 (
mSètus_NoEº‹
);

2859 
	}
}

2862 #i‡
COMPILER_LIKES_PRAGMA_MARK


2863 #¥agm®
m¨k
 -

2864 #¥agm®
m¨k
 -

2865 #¥agm®
m¨k
 - 
Packë
 
Sídög
 
Fun˘i⁄s


2868 
mDNSloˇl
 
	$AddRec‹dToRe•⁄£Li°
(
AuthRec‹d
 ***
ƒµ
, AuthRec‹d *
º
, AuthRec‹d *
add
)

2870 i‡(
º
->
NextRe•⁄£
 =
mDNSNULL
 && *
ƒµ
 != &rr->NextResponse)

2872 **
ƒµ
 = 
º
;

2876 i‡(
add
 &&ádd->
NR_Addôi⁄ÆTo
)ádd =ádd->NR_AdditionalTo;

2877 
º
->
NR_Addôi⁄ÆTo
 = 
add
;

2878 *
ƒµ
 = &
º
->
NextRe•⁄£
;

2880 
	`debugf
("AddRec‹dToRe•⁄£Li°: %##†(%sËÆªady i¿li°", 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

2881 
	}
}

2883 
mDNSloˇl
 
	$AddAddôi⁄ÆsToRe•⁄£Li°
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *
Re•⁄£Rec‹ds
, AuthRec‹d ***
ƒµ
, c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
)

2885 
AuthRec‹d
 *
º
, *
º2
;

2886 
º
=
Re•⁄£Rec‹ds
;Ñr;ÑrÙr->
NextRe•⁄£
)

2890 i‡(
º
->
Addôi⁄Æ1
 && 
	`Resour˚Rec‹dIsVÆidI¡îÁ˚Answî
‘r->Addôi⁄Æ1, 
I¡îÁ˚ID
))

2891 
	`AddRec‹dToRe•⁄£Li°
(
ƒµ
, 
º
->
Addôi⁄Æ1
,Ñr);

2893 i‡(
º
->
Addôi⁄Æ2
 && 
	`Resour˚Rec‹dIsVÆidI¡îÁ˚Answî
‘r->Addôi⁄Æ2, 
I¡îÁ˚ID
))

2894 
	`AddRec‹dToRe•⁄£Li°
(
ƒµ
, 
º
->
Addôi⁄Æ2
,Ñr);

2897 i‡(
º
->
ª§ec
.
ºty≥
 =
kDNSTy≥_SRV
)

2898 
º2
=
m
->
Resour˚Rec‹ds
;Ñr2;Ñr2Ùr2->
√xt
)

2899 i‡(
	`RRTy≥IsAddªssTy≥
(
º2
->
ª§ec
.
ºty≥
) &&

2900 
	`Resour˚Rec‹dIsVÆidI¡îÁ˚Answî
(
º2
, 
I¡îÁ˚ID
) &&

2901 
º
->
ª§ec
.
rd©ahash
 =
º2
->ª§ec.
«mehash
 &&

2902 
	`SameDomaöName
(&
º
->
ª§ec
.
rd©a
->
u
.
§v
.
èrgë
, 
º2
->ª§ec.
«me
))

2903 
	`AddRec‹dToRe•⁄£Li°
(
ƒµ
, 
º2
, 
º
);

2905 
	}
}

2907 
mDNSloˇl
 
	$SídDñayedUniˇ°Re•⁄£
(
mDNS
 *c⁄° 
m
, c⁄° 
mDNSAddr
 *c⁄° 
de°
, c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
)

2909 
AuthRec‹d
 *
º
;

2910 
AuthRec‹d
 *
Re•⁄£Rec‹ds
 = 
mDNSNULL
;

2911 
AuthRec‹d
 **
ƒp
 = &
Re•⁄£Rec‹ds
;

2914 
º
 = 
m
->
Resour˚Rec‹ds
;Ñr;ÑrÙr->
√xt
)

2917 i‡(
º
->
ImmedAnswî
 =
mDNSI¡îÁ˚M¨k
 ||

2918 
	`mDNSSameIPv4Addªss
(
º
->
v4Reque°î
, 
⁄esIPv4Addr
) ||

2919 
	`mDNSSameIPv6Addªss
(
º
->
v6Reque°î
, 
⁄esIPv6Addr
) )

2920 
º
->
ImmedUniˇ°
 = 
mDNSÁl£
;

2922 i‡(
º
->
ImmedUniˇ°
 &&Ñr->
ImmedAnswî
 =
I¡îÁ˚ID
)

2923 i‡((
de°
->
ty≥
 =
mDNSAddrTy≥_IPv4
 && 
	`mDNSSameIPv4Addªss
(
º
->
v4Reque°î
, de°->
ù
.
v4
)) ||

2924 (
de°
->
ty≥
 =
mDNSAddrTy≥_IPv6
 && 
	`mDNSSameIPv6Addªss
(
º
->
v6Reque°î
, de°->
ù
.
v6
)))

2926 
º
->
ImmedAnswî
 = 
mDNSNULL
;

2927 
º
->
ImmedUniˇ°
 = 
mDNSÁl£
;

2928 
º
->
v4Reque°î
 = 
zîov4Addr
;

2929 
º
->
v6Reque°î
 = 
zîov6Addr
;

2930 i‡(
º
->
NextRe•⁄£
 =
mDNSNULL
 && 
ƒp
 != &rr->NextResponse)

2931 { 
º
->
NR_AnswîTo
 = (
mDNSu8
*)~0; *
ƒp
 =Ñr;ÇΩ = &º->
NextRe•⁄£
; }

2935 
	`AddAddôi⁄ÆsToRe•⁄£Li°
(
m
, 
Re•⁄£Rec‹ds
, &
ƒp
, 
I¡îÁ˚ID
);

2937 
Re•⁄£Rec‹ds
)

2939 
mDNSu8
 *
ª•⁄£±r
 = 
m
->
omsg
.
d©a
;

2940 
mDNSu8
 *
√w±r
;

2941 
	`InôülizeDNSMesßge
(&
m
->
omsg
.
h
, 
zîoID
, 
Re•⁄£Fœgs
);

2944 
Re•⁄£Rec‹ds
 && Re•⁄£Rec‹ds->
NR_AnswîTo
)

2946 
º
 = 
Re•⁄£Rec‹ds
;

2947 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥UniqueMask
)

2948 
º
->
ª§ec
.
º˛ass
 |
kDNSCœss_UniqueRRSë
;

2949 
√w±r
 = 
	`PutResour˚Rec‹d
(&
m
->
omsg
, 
ª•⁄£±r
, &m->omsg.
h
.
numAnswîs
, &
º
->
ª§ec
);

2950 
º
->
ª§ec
.
º˛ass
 &~
kDNSCœss_UniqueRRSë
;

2951 i‡(!
√w±r
 && 
m
->
omsg
.
h
.
numAnswîs
) ;

2952 i‡(
√w±r
Ë
ª•⁄£±r
 =Çewptr;

2953 
Re•⁄£Rec‹ds
 = 
º
->
NextRe•⁄£
;

2954 
º
->
NextRe•⁄£
 = 
mDNSNULL
;

2955 
º
->
NR_AnswîTo
 = 
mDNSNULL
;

2956 
º
->
NR_Addôi⁄ÆTo
 = 
mDNSNULL
;

2957 
º
->
RequúeGoodbye
 = 
mDNSåue
;

2961 
Re•⁄£Rec‹ds
 && !Re•⁄£Rec‹ds->
NR_AnswîTo
)

2963 
º
 = 
Re•⁄£Rec‹ds
;

2964 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥UniqueMask
)

2965 
º
->
ª§ec
.
º˛ass
 |
kDNSCœss_UniqueRRSë
;

2966 
√w±r
 = 
	`PutResour˚Rec‹d
(&
m
->
omsg
, 
ª•⁄£±r
, &m->omsg.
h
.
numAddôi⁄Æs
, &
º
->
ª§ec
);

2967 
º
->
ª§ec
.
º˛ass
 &~
kDNSCœss_UniqueRRSë
;

2969 i‡(
√w±r
Ë
ª•⁄£±r
 =Çewptr;

2970 i‡(
√w±r
 && 
m
->
omsg
.
h
.
numAnswîs
Ë
º
->
RequúeGoodbye
 = 
mDNSåue
;

2971 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥UniqueMask
Ëº->
ImmedAnswî
 = 
mDNSI¡îÁ˚M¨k
;

2972 
Re•⁄£Rec‹ds
 = 
º
->
NextRe•⁄£
;

2973 
º
->
NextRe•⁄£
 = 
mDNSNULL
;

2974 
º
->
NR_AnswîTo
 = 
mDNSNULL
;

2975 
º
->
NR_Addôi⁄ÆTo
 = 
mDNSNULL
;

2978 i‡(
m
->
omsg
.
h
.
numAnswîs
Ë
	`mDNSSídDNSMesßge
(m, &m->omsg, 
ª•⁄£±r
, 
mDNSI¡îÁ˚_Any
, 
de°
, 
Mu…iˇ°DNSP‹t
, -1, 
mDNSNULL
);

2980 
	}
}

2982 
mDNSloˇl
 
	$Com∂ëeDîegi°øti⁄
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *
º
)

2986 
º
->
ª§ec
.
Rec‹dTy≥
 = 
kDNSRec‹dTy≥Sh¨ed
;

2987 
º
->
RequúeGoodbye
 = 
mDNSÁl£
;

2988 
	`mDNS_Dîegi°î_öã∫Æ
(
m
, 
º
, 
mDNS_Dîeg_n‹mÆ
);

2989 
	}
}

2994 
mDNSloˇl
 
	$DisˇrdDîegi°øti⁄s
(
mDNS
 *c⁄° 
m
)

2996 i‡(
m
->
CuºítRec‹d
Ë
	`LogMsg
("DiscardDeregistrations ERROR m->CurrentRecordálready set");

2997 
m
->
CuºítRec‹d
 = m->
Resour˚Rec‹ds
;

2999 
m
->
CuºítRec‹d
)

3001 
AuthRec‹d
 *
º
 = 
m
->
CuºítRec‹d
;

3002 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥Dîegi°îög
)

3003 
	`Com∂ëeDîegi°øti⁄
(
m
, 
º
);

3005 
m
->
CuºítRec‹d
 = 
º
->
√xt
;

3007 
	}
}

3009 
mDNSloˇl
 
	$Gø¡Upd©eCªdô
(
AuthRec‹d
 *
º
)

3011 i‡(++
º
->
Upd©eCªdôs
 >
kMaxUpd©eCªdôs
Ëº->
NextUpd©eCªdô
 = 0;

3012 
º
->
NextUpd©eCªdô
 = 
	`N⁄ZîoTime
‘r->NextUpd©eCªdô + 
kUpd©eCªdôRe‰eshI¡îvÆ
);

3013 
	}
}

3031 
mDNSloˇl
 
	$SídRe•⁄£s
(
mDNS
 *c⁄° 
m
)

3033 
pktcou¡
 = 0;

3034 
AuthRec‹d
 *
º
, *
r2
;

3035 
mDNSs32
 
maxExi°ögA¬oun˚I¡îvÆ
 = 0;

3036 c⁄° 
Nëw‹kI¡îÁ˚Info
 *
ötf
 = 
	`GëFú°A˘iveI¡îÁ˚
(
m
->
Ho°I¡îÁ˚s
);

3038 
m
->
NextScheduÀdRe•⁄£
 = m->
timíow
 + 0x78000000;

3040 
º
 = 
m
->
Resour˚Rec‹ds
;Ñr;ÑrÙr->
√xt
)

3041 i‡(
º
->
ImmedUniˇ°
)

3043 
mDNSAddr
 
v4
 = { 
mDNSAddrTy≥_IPv4
, {{{0}}} };

3044 
mDNSAddr
 
v6
 = { 
mDNSAddrTy≥_IPv6
, {{{0}}} };

3045 
v4
.
ù
.v4 = 
º
->
v4Reque°î
;

3046 
v6
.
ù
.v6 = 
º
->
v6Reque°î
;

3047 i‡(!
	`mDNSIPv4AddªssIsZîo
(
º
->
v4Reque°î
)Ë
	`SídDñayedUniˇ°Re•⁄£
(
m
, &
v4
,Ñr->
ImmedAnswî
);

3048 i‡(!
	`mDNSIPv6AddªssIsZîo
(
º
->
v6Reque°î
)Ë
	`SídDñayedUniˇ°Re•⁄£
(
m
, &
v6
,Ñr->
ImmedAnswî
);

3049 i‡(
º
->
ImmedUniˇ°
)

3051 
	`LogMsg
("SídRe•⁄£s: ERROR:Ñr->ImmedUniˇ° stû»£t: %s", 
	`ARDi•œySåög
(
m
, 
º
));

3052 
º
->
ImmedUniˇ°
 = 
mDNSÁl£
;

3061 
º
 = 
m
->
Resour˚Rec‹ds
;Ñr;ÑrÙr->
√xt
)

3063 
º
->
NextUpd©eCªdô
 && 
m
->
timíow
 -Ñr->NextUpd©eCªdô >0Ë
	`Gø¡Upd©eCªdô
(rr);

3064 i‡(
	`TimeToA¬oun˚ThisRec‹d
(
º
, 
m
->
timíow
Ë&& 
	`Resour˚Rec‹dIsVÆidAnswî
(rr))

3066 
º
->
ImmedAnswî
 = 
mDNSI¡îÁ˚M¨k
;

3067 i‡(
maxExi°ögA¬oun˚I¡îvÆ
 < 
º
->
ThisAPI¡îvÆ
)

3068 
maxExi°ögA¬oun˚I¡îvÆ
 = 
º
->
ThisAPI¡îvÆ
;

3069 i‡(
º
->
Upd©eBlocked
)Ñr->UpdateBlocked = 0;

3075 
º
 = 
m
->
Resour˚Rec‹ds
;Ñr;ÑrÙr->
√xt
)

3076 i‡((
º
->
ª§ec
.
I¡îÁ˚ID
 &&Ñr->
ImmedAnswî
) ||

3077 (
º
->
ThisAPI¡îvÆ
 <
maxExi°ögA¬oun˚I¡îvÆ
 &&

3078 
	`TimeToA¬oun˚ThisRec‹d
(
º
, 
m
->
timíow
 +Ñr->
ThisAPI¡îvÆ
/2) &&

3079 
	`Resour˚Rec‹dIsVÆidAnswî
(
º
)))

3080 
º
->
ImmedAnswî
 = 
mDNSI¡îÁ˚M¨k
;

3086 
º
 = 
m
->
Resour˚Rec‹ds
;Ñr;ÑrÙr->
√xt
)

3087 i‡(
º
->
ImmedAnswî
 &&Ñr->
ª§ec
.
ºty≥
 =
kDNSTy≥_SRV
)

3088 
r2
=
m
->
Resour˚Rec‹ds
;Ñ2;Ñ2Ù2->
√xt
)

3089 i‡(
	`RRTy≥IsAddªssTy≥
(
r2
->
ª§ec
.
ºty≥
) &&

3090 
	`Resour˚Rec‹dIsVÆidAnswî
(
r2
) &&

3091 
º
->
La°MCTime
 - 
r2
->LastMCTime >= 0 &&

3092 
º
->
ª§ec
.
rd©ahash
 =
r2
->ª§ec.
«mehash
 &&

3093 
	`SameDomaöName
(&
º
->
ª§ec
.
rd©a
->
u
.
§v
.
èrgë
, 
r2
->ª§ec.
«me
) &&

3094 (
º
->
ImmedAnswî
 =
mDNSI¡îÁ˚M¨k
 ||Ñr->ImmedAnswî =
r2
->
ª§ec
.
I¡îÁ˚ID
))

3095 
r2
->
ImmedAddôi⁄Æ
 =Ñ2->
ª§ec
.
I¡îÁ˚ID
;

3103 
º
 = 
m
->
Resour˚Rec‹ds
;Ñr;ÑrÙr->
√xt
)

3104 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥UniqueMask
)

3106 i‡(
º
->
ImmedAnswî
)

3108 
r2
 = 
m
->
Resour˚Rec‹ds
;Ñ2;Ñ2Ù2->
√xt
)

3109 i‡(
	`Resour˚Rec‹dIsVÆidAnswî
(
r2
))

3110 i‡(
r2
->
ImmedAnswî
 !
mDNSI¡îÁ˚M¨k
 &&

3111 
r2
->
ImmedAnswî
 !
º
->ImmedAnswî && 
	`SameResour˚Rec‹dSig«tuª
(&r2->
ª§ec
, &rr->resrec))

3112 
r2
->
ImmedAnswî
 = 
º
->ImmedAnswer;

3114 i‡(
º
->
ImmedAddôi⁄Æ
)

3116 
r2
 = 
m
->
Resour˚Rec‹ds
;Ñ2;Ñ2Ù2->
√xt
)

3117 i‡(
	`Resour˚Rec‹dIsVÆidAnswî
(
r2
))

3118 i‡(
r2
->
ImmedAddôi⁄Æ
 !
º
->ImmedAddôi⁄Æ && 
	`SameResour˚Rec‹dSig«tuª
(&r2->
ª§ec
, &rr->resrec))

3119 
r2
->
ImmedAddôi⁄Æ
 = 
º
->ImmedAdditional;

3124 
º
 = 
m
->
Resour˚Rec‹ds
;Ñr;ÑrÙr->
√xt
)

3126 i‡(
º
->
ImmedAnswî
 =
mDNSI¡îÁ˚M¨k
)

3128 
º
->
SídRNow
 = !
ötf
 ? 
mDNSNULL
 : (º->
ª§ec
.
I¡îÁ˚ID
) ?Ñr->resrec.InterfaceID : intf->InterfaceID;

3129 
º
->
ImmedAddôi⁄Æ
 = 
mDNSNULL
;

3130 
º
->
La°MCTime
 = 
m
->
timíow
;

3131 
º
->
La°MCI¡îÁ˚
 =Ñr->
ImmedAnswî
;

3133 i‡(
	`TimeToA¬oun˚ThisRec‹d
(
º
, 
m
->
timíow
 +Ñr->
ThisAPI¡îvÆ
/2))

3135 
º
->
A¬oun˚Cou¡
--;

3136 
º
->
ThisAPI¡îvÆ
 *= 2;

3137 
º
->
La°APTime
 = 
m
->
timíow
;

3138 i‡(
º
->
La°APTime
 +Ñr->
ThisAPI¡îvÆ
 -Ñr->
A¬oun˚U¡û
 >0Ëº->
A¬oun˚Cou¡
 = 0;

3139 
	`debugf
("A¬ouncög %##†(%sË%d", 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
),Ñr->
A¬oun˚Cou¡
);

3142 i‡(
º
->
ImmedAnswî
)

3144 
º
->
SídRNow
 =Ñr->
ImmedAnswî
;

3145 
º
->
ImmedAddôi⁄Æ
 = 
mDNSNULL
;

3146 
º
->
La°MCTime
 = 
m
->
timíow
;

3147 
º
->
La°MCI¡îÁ˚
 =Ñr->
ImmedAnswî
;

3149 
	`SëNextA¬oun˚ProbeTime
(
m
, 
º
);

3157 
ötf
)

3159 
numDîeg
 = 0;

3160 
numA¬oun˚
 = 0;

3161 
numAnswî
 = 0;

3162 
mDNSu8
 *
ª•⁄£±r
 = 
m
->
omsg
.
d©a
;

3163 
mDNSu8
 *
√w±r
;

3164 
	`InôülizeDNSMesßge
(&
m
->
omsg
.
h
, 
zîoID
, 
Re•⁄£Fœgs
);

3174 
º
 = 
m
->
Resour˚Rec‹ds
;Ñr;ÑrÙr->
√xt
)

3175 i‡(
º
->
SídRNow
 =
ötf
->
I¡îÁ˚ID
)

3177 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥Dîegi°îög
)

3179 
√w±r
 = 
	`PutResour˚Rec‹dTTL
(&
m
->
omsg
, 
ª•⁄£±r
, &m->omsg.
h
.
numAnswîs
, &
º
->
ª§ec
, 0);

3180 i‡(!
√w±r
 && 
m
->
omsg
.
h
.
numAnswîs
) ;

3181 
numDîeg
++;

3182 
ª•⁄£±r
 = 
√w±r
;

3184 i‡(
º
->
NewRD©a
 && !
m
->
SÀïSèã
)

3186 
RD©a
 *
OldRD©a
 = 
º
->
ª§ec
.
rd©a
;

3187 
mDNSu16
 
ﬁdrdÀngth
 = 
º
->
ª§ec
.
rdÀngth
;

3189 i‡(
	`Resour˚Rec‹dIsVÆidAnswî
(
º
Ë&&Ñr->
RequúeGoodbye
)

3191 
√w±r
 = 
	`PutResour˚Rec‹dTTL
(&
m
->
omsg
, 
ª•⁄£±r
, &m->omsg.
h
.
numAnswîs
, &
º
->
ª§ec
, 0);

3192 i‡(!
√w±r
 && 
m
->
omsg
.
h
.
numAnswîs
) ;

3193 
numDîeg
++;

3194 
ª•⁄£±r
 = 
√w±r
;

3195 
º
->
RequúeGoodbye
 = 
mDNSÁl£
;

3198 
	`SëNewRD©a
(&
º
->
ª§ec
,Ñr->
NewRD©a
,Ñr->
√wrdÀngth
);

3199 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥UniqueMask
)

3200 
º
->
ª§ec
.
º˛ass
 |
kDNSCœss_UniqueRRSë
;

3201 
√w±r
 = 
	`PutResour˚Rec‹d
(&
m
->
omsg
, 
ª•⁄£±r
, &m->omsg.
h
.
numAnswîs
, &
º
->
ª§ec
);

3202 
º
->
ª§ec
.
º˛ass
 &~
kDNSCœss_UniqueRRSë
;

3203 i‡(
√w±r
Ë{ 
ª•⁄£±r
 =Çew±r; 
º
->
RequúeGoodbye
 = 
mDNSåue
; }

3204 
	`SëNewRD©a
(&
º
->
ª§ec
, 
OldRD©a
, 
ﬁdrdÀngth
);

3208 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥UniqueMask
)

3209 
º
->
ª§ec
.
º˛ass
 |
kDNSCœss_UniqueRRSë
;

3210 
√w±r
 = 
	`PutResour˚Rec‹dTTL
(&
m
->
omsg
, 
ª•⁄£±r
, &m->omsg.
h
.
numAnswîs
, &
º
->
ª§ec
, m->
SÀïSèã
 ? 0 :Ñr->ª§ec.
º‹igöÆâl
);

3211 
º
->
ª§ec
.
º˛ass
 &~
kDNSCœss_UniqueRRSë
;

3212 i‡(!
√w±r
 && 
m
->
omsg
.
h
.
numAnswîs
) ;

3213 
º
->
RequúeGoodbye
 = (
mDNSu8
Ë(!
m
->
SÀïSèã
);

3214 i‡(
º
->
La°APTime
 =
m
->
timíow
Ë
numA¬oun˚
++; 
numAnswî
++;

3215 
ª•⁄£±r
 = 
√w±r
;

3218 i‡(
º
->
ImmedAnswî
 =
mDNSI¡îÁ˚M¨k
 &&Ñr->
ª§ec
.
I¡îÁ˚ID
 =
mDNSI¡îÁ˚_Any
)

3219 
º
->
SídRNow
 = 
	`GëNextA˘iveI¡îÁ˚ID
(
ötf
);

3221 
º
->
SídRNow
 = 
mDNSNULL
;

3225 
√w±r
 = 
ª•⁄£±r
;

3226 
º
 = 
m
->
Resour˚Rec‹ds
;Ñr;ÑrÙr->
√xt
)

3227 i‡(
º
->
ImmedAddôi⁄Æ
 =
ötf
->
I¡îÁ˚ID
)

3228 i‡(
	`Resour˚Rec‹dIsVÆidAnswî
(
º
))

3231 
mDNSBoﬁ
 
SídAddôi⁄Æ
 = (
m
->
omsg
.
h
.
numAnswîs
 > 0);

3236 i‡(!
SídAddôi⁄Æ
 && (
º
->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥UniqueMask
))

3238 c⁄° 
AuthRec‹d
 *
a
;

3239 
a
 = 
m
->
Resour˚Rec‹ds
;á;á˜->
√xt
)

3240 i‡(
a
->
La°MCTime
 =
m
->
timíow
 &&

3241 
a
->
La°MCI¡îÁ˚
 =
ötf
->
I¡îÁ˚ID
 &&

3242 
	`SameResour˚Rec‹dSig«tuª
(&
a
->
ª§ec
, &
º
->ª§ec)Ë{ 
SídAddôi⁄Æ
 = 
mDNSåue
; ; }

3244 i‡(!
SídAddôi⁄Æ
)

3245 
º
->
ImmedAddôi⁄Æ
 = 
mDNSNULL
;

3246 i‡(
√w±r
)

3248 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥UniqueMask
)

3249 
º
->
ª§ec
.
º˛ass
 |
kDNSCœss_UniqueRRSë
;

3250 
√w±r
 = 
	`PutResour˚Rec‹d
(&
m
->
omsg
,Çew±r, &m->omsg.
h
.
numAddôi⁄Æs
, &
º
->
ª§ec
);

3251 
º
->
ª§ec
.
º˛ass
 &~
kDNSCœss_UniqueRRSë
;

3252 i‡(
√w±r
)

3254 
ª•⁄£±r
 = 
√w±r
;

3255 
º
->
ImmedAddôi⁄Æ
 = 
mDNSNULL
;

3256 
º
->
RequúeGoodbye
 = 
mDNSåue
;

3261 
º
->
La°MCTime
 = 
m
->
timíow
;

3262 
º
->
La°MCI¡îÁ˚
 = 
ötf
->
I¡îÁ˚ID
;

3267 i‡(
m
->
omsg
.
h
.
numAnswîs
 > 0 || m->omsg.h.
numAddôi⁄Æs
)

3269 
	`debugf
("SendResponses: Sending %d Deregistration%s, %d Announcement%s, %d Answer%s, %d Additional%s on %p",

3270 
numDîeg
,ÇumDereg == 1 ? "" : "s",

3271 
numA¬oun˚
,ÇumAnnounce == 1 ? "" : "s",

3272 
numAnswî
,ÇumAnswer == 1 ? "" : "s",

3273 
m
->
omsg
.
h
.
numAddôi⁄Æs
, m->omsg.h.numAddôi⁄Æ†=1 ? "" : "s", 
ötf
->
I¡îÁ˚ID
);

3274 i‡(
ötf
->
IPv4AvaûabÀ
Ë
	`mDNSSídDNSMesßge
(
m
, &m->
omsg
, 
ª•⁄£±r
, i¡f->
I¡îÁ˚ID
, &
AŒDNSLökGroup_v4
, 
Mu…iˇ°DNSP‹t
, -1, 
mDNSNULL
);

3275 i‡(
ötf
->
IPv6AvaûabÀ
Ë
	`mDNSSídDNSMesßge
(
m
, &m->
omsg
, 
ª•⁄£±r
, i¡f->
I¡îÁ˚ID
, &
AŒDNSLökGroup_v6
, 
Mu…iˇ°DNSP‹t
, -1, 
mDNSNULL
);

3276 i‡(!
m
->
SuµªssSídög
Ëm->SuµªssSídög = 
	`N⁄ZîoTime
(m->
timíow
 + (
mDNSPœtf‹mO√Sec⁄d
+9)/10);

3277 i‡(++
pktcou¡
 >1000Ë{ 
	`LogMsg
("SendResponsesÉxceededÜoopÜimit %d: giving up",Öktcount); ; }

3282 c⁄° 
Nëw‹kI¡îÁ˚Info
 *
√xt
 = 
	`GëFú°A˘iveI¡îÁ˚
(
ötf
->next);

3283 #i‡
MDNS_DEBUGMSGS
 && 0

3284 c⁄° *c⁄° 
msg
 = 
√xt
 ? "SendResponses: Nothing more on %p; movingÅo %p" : "SendResponses: Nothing more on %p";

3285 
	`debugf
(
msg
, 
ötf
, 
√xt
);

3287 
ötf
 = 
√xt
;

3295 i‡(
m
->
CuºítRec‹d
Ë
	`LogMsg
("SendResponses: ERROR m->CurrentRecordálready set");

3296 
m
->
CuºítRec‹d
 = m->
Resour˚Rec‹ds
;

3297 
m
->
CuºítRec‹d
)

3299 
º
 = 
m
->
CuºítRec‹d
;

3300 
m
->
CuºítRec‹d
 = 
º
->
√xt
;

3302 i‡(
º
->
SídRNow
)

3304 i‡(
º
->
ª§ec
.
I¡îÁ˚ID
 !
mDNSI¡îÁ˚_LoˇlO∆y
)

3305 
	`LogMsg
("SídRe•⁄£s: Nÿa˘ivêöãrÁ˚Åÿ£nd: %s", 
	`ARDi•œySåög
(
m
, 
º
));

3306 
º
->
SídRNow
 = 
mDNSNULL
;

3309 i‡(
º
->
ImmedAnswî
)

3311 i‡(
º
->
NewRD©a
Ë
	`Com∂ëeRD©aUpd©e
(
m
,rr);

3313 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥Dîegi°îög
)

3314 
	`Com∂ëeDîegi°øti⁄
(
m
, 
º
);

3317 
º
->
ImmedAnswî
 = 
mDNSNULL
;

3318 
º
->
ImmedUniˇ°
 = 
mDNSÁl£
;

3319 
º
->
v4Reque°î
 = 
zîov4Addr
;

3320 
º
->
v6Reque°î
 = 
zîov6Addr
;

3324 
	`vîbo£debugf
("SídRe•⁄£s: Nexàö %ldÅicks", 
m
->
NextScheduÀdRe•⁄£
 - m->
timíow
);

3325 
	}
}

3337 
	#CacheCheckGø˚Pîiod
(
RR
) ( \

3338 ((
RR
)->
DñayDñivîy
 ) ? (
mDNSPœtf‹mO√Sec⁄d
/10) : \

3339 ((
RR
)->
CRA˘iveQue°i⁄
 =
mDNSNULL
 ) ? (60 * 
mDNSPœtf‹mO√Sec⁄d
) : \

3340 ((
RR
)->
U«nswîedQuîõs
 < 
MaxU«nswîedQuîõs
Ë? (
	`TicksTTL
(
º
)/50) : \

3341 ((
RR
)->
ª§ec
.
º‹igöÆâl
 > 10 ) ? (
mDNSPœtf‹mO√Sec⁄d
Ë: (mDNSPœtf‹mO√Sec⁄d/10))

	)

3350 
mDNSloˇl
 
	$SëNextCacheCheckTime
(
mDNS
 *c⁄° 
m
, 
CacheRec‹d
 *c⁄° 
º
)

3352 
º
->
NextRequúedQuîy
 = 
	`RRExpúeTime
(rr);

3356 i‡(
º
->
CRA˘iveQue°i⁄
 &&Ñr->
U«nswîedQuîõs
 < 
MaxU«nswîedQuîõs
)

3358 
º
->
NextRequúedQuîy
 -
	`TicksTTL
‘r)/20 * (
MaxU«nswîedQuîõs
 -Ñr->
U«nswîedQuîõs
);

3359 
º
->
NextRequúedQuîy
 +
	`mDNSR™dom
((
mDNSu32
)
	`TicksTTL
(rr)/50);

3360 
	`vîbo£debugf
("SetNextCacheCheckTime: %##s (%s) NextRequiredQuery in %ld sec CacheCheckGracePeriod %dÅicks",

3361 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
),

3362 (
º
->
NextRequúedQuîy
 - 
m
->
timíow
Ë/ 
mDNSPœtf‹mO√Sec⁄d
, 
	`CacheCheckGø˚Pîiod
(rr));

3365 i‡(
m
->
NextCacheCheck
 - (
º
->
NextRequúedQuîy
 + 
	`CacheCheckGø˚Pîiod
(rr)) > 0)

3366 
m
->
NextCacheCheck
 = (
º
->
NextRequúedQuîy
 + 
	`CacheCheckGø˚Pîiod
(rr));

3368 i‡(
º
->
DñayDñivîy
)

3369 i‡(
m
->
NextCacheCheck
 - 
º
->
DñayDñivîy
 > 0)

3370 
m
->
NextCacheCheck
 = 
º
->
DñayDñivîy
;

3371 
	}
}

3373 
	#kMöimumRec⁄fúmTime
 ((
mDNSu32
)
mDNSPœtf‹mO√Sec⁄d
 * 5)

	)

3374 
	#kDeÁu…Rec⁄fúmTimeF‹Wake
 ((
mDNSu32
)
mDNSPœtf‹mO√Sec⁄d
 * 5)

	)

3375 
	#kDeÁu…Rec⁄fúmTimeF‹NoAnswî
 ((
mDNSu32
)
mDNSPœtf‹mO√Sec⁄d
 * 15)

	)

3376 
	#kDeÁu…Rec⁄fúmTimeF‹FœµögI¡îÁ˚
 ((
mDNSu32
)
mDNSPœtf‹mO√Sec⁄d
 * 30)

	)

3378 
mDNSloˇl
 
mSètus
 
	$mDNS_Rec⁄fúm_öã∫Æ
(
mDNS
 *c⁄° 
m
, 
CacheRec‹d
 *c⁄° 
º
, 
mDNSu32
 
öãrvÆ
)

3380 i‡(
öãrvÆ
 < 
kMöimumRec⁄fúmTime
)

3381 
öãrvÆ
 = 
kMöimumRec⁄fúmTime
;

3382 i‡(
öãrvÆ
 > 0x10000000)

3383 
öãrvÆ
 = 0x10000000;

3386 i‡(
	`RRExpúeTime
(
º
Ë- 
m
->
timíow
 > (
mDNSs32
)((
öãrvÆ
 * 4) / 3))

3391 i‡(!
m
->
R™domRec⁄fúmDñay
Ëm->R™domRec⁄fúmDñay = 1 + 
	`mDNSR™dom
(0x3FFFFFFF);

3392 
öãrvÆ
 +
	`mDNSR™domFromFixedSìd
(
m
->
R™domRec⁄fúmDñay
, interval/3);

3393 
º
->
TimeRcvd
 = 
m
->
timíow
 - (
mDNSs32
)
öãrvÆ
 * 3;

3394 
º
->
ª§ec
.
º‹igöÆâl
 = (
öãrvÆ
 * 4 + 
mDNSPœtf‹mO√Sec⁄d
 - 1) / mDNSPlatformOneSecond;

3395 
	`SëNextCacheCheckTime
(
m
, 
º
);

3397 
	`debugf
("mDNS_Rec⁄fúm_öã∫Æ:%6ldÅick†tÿgÿf‹ %s", 
	`RRExpúeTime
(
º
Ë- 
m
->
timíow
, 
	`CRDi•œySåög
(m,Ñr));

3398 (
mSètus_NoEº‹
);

3399 
	}
}

3401 
	#MaxQue°i⁄I¡îvÆ
 (3600 * 
mDNSPœtf‹mO√Sec⁄d
)

	)

3406 
mDNSloˇl
 
mDNSBoﬁ
 
	$BuûdQue°i⁄
(
mDNS
 *c⁄° 
m
, 
DNSMesßge
 *
quîy
, 
mDNSu8
 **
quîy±r
, 
DNSQue°i⁄
 *
q
,

3407 
CacheRec‹d
 ***
kÆi°±Ωå
, 
mDNSu32
 *
™swîf‹eˇ°
)

3409 
mDNSBoﬁ
 
uˇ°
 = (
q
->
L¨geAnswîs
 || q->
Reque°Uniˇ°
Ë&& 
m
->
C™Re˚iveUniˇ°On5353
;

3410 
mDNSu16
 
ucbô
 = (mDNSu16)(
uˇ°
 ? 
kDNSQCœss_Uniˇ°Re•⁄£
 : 0);

3411 c⁄° 
mDNSu8
 *c⁄° 
limô
 = 
quîy
->
d©a
 + 
N‹mÆMaxDNSMesßgeD©a
;

3412 
mDNSu8
 *
√w±r
 = 
	`putQue°i⁄
(
quîy
, *
quîy±r
, 
limô
, &
q
->
q«me
, q->
qty≥
, (
mDNSu16
)(q->
q˛ass
 | 
ucbô
));

3413 i‡(!
√w±r
)

3415 
	`debugf
("BuûdQue°i⁄: Nÿm‹ê•a˚ i¿thi†∑ckë f‹ que°i⁄ %##s", 
q
->
q«me
.
c
);

3416 (
mDNSÁl£
);

3418 i‡(
√w±r
 + *
™swîf‹eˇ°
 >
limô
)

3420 
	`vîbo£debugf
("BuildQuestion: Retracting question %##sÇew forecastÅotal %d",

3421 
q
->
q«me
.
c
, 
√w±r
 + *
™swîf‹eˇ°
 - 
quîy
->
d©a
);

3422 
quîy
->
h
.
numQue°i⁄s
--;

3423 (
mDNSÁl£
);

3427 
mDNSu32
 
f‹eˇ°
 = *
™swîf‹eˇ°
;

3428 c⁄° 
mDNSu32
 
¶Ÿ
 = 
	`HashSlŸ
(&
q
->
q«me
);

3429 
CacheGroup
 *
cg
 = 
	`CacheGroupF‹Name
(
m
, 
¶Ÿ
, 
q
->
q«mehash
, &q->
q«me
);

3430 
CacheRec‹d
 *
º
;

3431 
CacheRec‹d
 **
ka
 = *
kÆi°±Ωå
;

3433 
º
 = 
cg
 ? cg->
membîs
 : 
mDNSNULL
;Ñr;ÑrÙr->
√xt
)

3434 i‡(
º
->
ª§ec
.
I¡îÁ˚ID
 =
q
->
SídQNow
 &&

3435 
º
->
NextInKALi°
 =
mDNSNULL
 && 
ka
 != &rr->NextInKAList &&

3436 
º
->
ª§ec
.
rdÀngth
 <
SmÆlRec‹dLimô
 &&

3437 
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
º
->
ª§ec
, 
q
) &&

3438 
º
->
TimeRcvd
 + 
	`TicksTTL
‘r)/2 - 
m
->
timíow
 >

3439 
mDNSPœtf‹mO√Sec⁄d
)

3441 *
ka
 = 
º
;

3442 
ka
 = &
º
->
NextInKALi°
;

3444 
f‹eˇ°
 +12 + 
º
->
ª§ec
.
rde°im©e
;

3447 i‡(
quîy
->
h
.
numQue°i⁄s
 > 1 && 
√w±r
 + 
f‹eˇ°
 >
limô
)

3449 
	`debugf
("BuildQuestion: Retracting question %##s (%s)Çew forecastÅotal %d",

3450 
q
->
q«me
.
c
, 
	`DNSTy≥Name
(q->
qty≥
), 
√w±r
 + 
f‹eˇ°
 - 
quîy
->
d©a
);

3451 
quîy
->
h
.
numQue°i⁄s
--;

3452 
ka
 = *
kÆi°±Ωå
;

3453 *
ka
Ë{ 
CacheRec‹d
 *
º
 = *ka; *k®
mDNSNULL
; k®&º->
NextInKALi°
; }

3454 (
mDNSÁl£
);

3468 i‡(
q
->
UniqueAnswîs
 || 
√w±r
 + 
f‹eˇ°
 >
limô
)

3469 i‡(
q
->
ThisQI¡îvÆ
 =
InôülQue°i⁄I¡îvÆ
 * 8 || q->ThisQInterval == InitialQuestionInterval * 32)

3471 
quîy
->
h
.
numQue°i⁄s
--;

3472 
ka
 = *
kÆi°±Ωå
;

3473 *
ka
Ë{ 
CacheRec‹d
 *
º
 = *ka; *k®
mDNSNULL
; k®&º->
NextInKALi°
; }

3474 (
mDNSåue
);

3478 *
quîy±r
 = 
√w±r
;

3479 *
™swîf‹eˇ°
 = 
f‹eˇ°
;

3480 *
kÆi°±Ωå
 = 
ka
;

3481 i‡(
uˇ°
Ë
m
->
Ex≥˘Uniˇ°Re•⁄£
 = m->
timíow
;

3483 
º
 = 
cg
 ? cg->
membîs
 : 
mDNSNULL
;Ñr;ÑrÙr->
√xt
)

3484 i‡(
º
->
ª§ec
.
I¡îÁ˚ID
 =
q
->
SídQNow
 &&

3485 
º
->
NextInKALi°
 =
mDNSNULL
 && 
ka
 != &rr->NextInKAList &&

3486 
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
º
->
ª§ec
, 
q
))

3488 
º
->
U«nswîedQuîõs
++;

3489 
º
->
La°U«nswîedTime
 = 
m
->
timíow
;

3490 
	`SëNextCacheCheckTime
(
m
, 
º
);

3493 (
mDNSåue
);

3495 
	}
}

3497 
mDNSloˇl
 
	$Rec⁄fúmA¡e˚díts
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *
q
)

3499 
mDNSu32
 
¶Ÿ
;

3500 
CacheGroup
 *
cg
;

3501 
CacheRec‹d
 *
º
;

3502 
domaö«me
 *
èrgë
;

3503 
	`FORALL_CACHERECORDS
(
¶Ÿ
, 
cg
, 
º
)

3504 i‡((
èrgë
 = 
	`GëRRDomaöNameT¨gë
(&
º
->
ª§ec
)Ë&&Ñr->ª§ec.
rd©ahash
 =
q
->
q«mehash
 && 
	`SameDomaöName
—¨gë, &q->
q«me
))

3505 
	`mDNS_Rec⁄fúm_öã∫Æ
(
m
, 
º
, 
kDeÁu…Rec⁄fúmTimeF‹NoAnswî
);

3506 
	}
}

3509 
mDNSloˇl
 
	$ExpúeDupSuµªssInfo
(
DupSuµªssInfo
 
ds
[
DupSuµªssInfoSize
], 
mDNSs32
 
time
)

3511 
i
;

3512 
i
=0; i<
DupSuµªssInfoSize
; i++Ëi‡(
ds
[i].
Time
 - 
time
 < 0Ëds[i].
I¡îÁ˚ID
 = 
mDNSNULL
;

3513 
	}
}

3515 
mDNSloˇl
 
	$ExpúeDupSuµªssInfoOnI¡îÁ˚
(
DupSuµªssInfo
 
ds
[
DupSuµªssInfoSize
], 
mDNSs32
 
time
, 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
)

3517 
i
;

3518 
i
=0; i<
DupSuµªssInfoSize
; i++Ëi‡(
ds
[i].
I¡îÁ˚ID
 =I¡îÁ˚ID && ds[i].
Time
 - 
time
 < 0Ëds[i].I¡îÁ˚ID = 
mDNSNULL
;

3519 
	}
}

3521 
mDNSloˇl
 
mDNSBoﬁ
 
	$SuµªssOnThisI¡îÁ˚
(c⁄° 
DupSuµªssInfo
 
ds
[
DupSuµªssInfoSize
], c⁄° 
Nëw‹kI¡îÁ˚Info
 * c⁄° 
ötf
)

3523 
i
;

3524 
mDNSBoﬁ
 
v4
 = !
ötf
->
IPv4AvaûabÀ
;

3525 
mDNSBoﬁ
 
v6
 = !
ötf
->
IPv6AvaûabÀ
;

3526 
i
=0; i<
DupSuµªssInfoSize
; i++)

3527 i‡(
ds
[
i
].
I¡îÁ˚ID
 =
ötf
->InterfaceID)

3529 i‡(
ds
[
i
].
Ty≥
 =
mDNSAddrTy≥_IPv4
Ë
v4
 = 
mDNSåue
;

3530 i‡(
ds
[
i
].
Ty≥
 =
mDNSAddrTy≥_IPv6
Ë
v6
 = 
mDNSåue
;

3531 i‡(
v4
 && 
v6
Ë(
mDNSåue
);

3533 (
mDNSÁl£
);

3534 
	}
}

3536 
mDNSloˇl
 
	$Rec‹dDupSuµªssInfo
(
DupSuµªssInfo
 
ds
[
DupSuµªssInfoSize
], 
mDNSs32
 
Time
, 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, mDNSs32 
Ty≥
)

3538 
i
, 
j
;

3541 
i
=0; i<
DupSuµªssInfoSize
; i++Ëi‡(
ds
[i].
I¡îÁ˚ID
 =I¡îÁ˚ID && ds[i].
Ty≥
 == Type) ;

3544 i‡(
i
 >
DupSuµªssInfoSize
)

3546 
i
 = 0;

3547 
j
=1; j<
DupSuµªssInfoSize
 && 
ds
[
i
].
I¡îÁ˚ID
; j++)

3548 i‡(!
ds
[
j
].
I¡îÁ˚ID
 || ds[j].
Time
 - ds[
i
].Time < 0)

3549 
i
 = 
j
;

3553 
ds
[
i
].
Time
 = Time;

3554 
ds
[
i
].
I¡îÁ˚ID
 = InterfaceID;

3555 
ds
[
i
].
Ty≥
 = Type;

3557 (
i
);

3558 
	}
}

3560 
mDNSloˇl
 
mDNSBoﬁ
 
	$Ac˚ÀøãThisQuîy
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *
q
)

3563 i‡(
	`TimeToSídThisQue°i⁄
(
q
, 
m
->
timíow
 + q->
ThisQI¡îvÆ
/10))

3564 (
mDNSåue
);

3567 i‡(
	`TimeToSídThisQue°i⁄
(
q
, 
m
->
timíow
 + q->
ThisQI¡îvÆ
/2))

3570 
mDNSu32
 
f‹eˇ°
 = (mDNSu32)
	`DomaöNameLígth
(&
q
->
q«me
) + 4;

3571 c⁄° 
mDNSu32
 
¶Ÿ
 = 
	`HashSlŸ
(&
q
->
q«me
);

3572 
CacheGroup
 *
cg
 = 
	`CacheGroupF‹Name
(
m
, 
¶Ÿ
, 
q
->
q«mehash
, &q->
q«me
);

3573 
CacheRec‹d
 *
º
;

3574 
º
 = 
cg
 ? cg->
membîs
 : 
mDNSNULL
;Ñr;ÑrÙr->
√xt
)

3575 i‡(
º
->
ª§ec
.
rdÀngth
 <
SmÆlRec‹dLimô
 &&

3576 
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
º
->
ª§ec
, 
q
) &&

3577 
º
->
TimeRcvd
 + 
	`TicksTTL
‘r)/2 - 
m
->
timíow
 >= 0 &&

3578 
º
->
NextRequúedQuîy
 - (
m
->
timíow
 + 
q
->
ThisQI¡îvÆ
) > 0)

3581 
f‹eˇ°
 +12 + 
º
->
ª§ec
.
rde°im©e
;

3582 i‡(
f‹eˇ°
 >512Ë(
mDNSÁl£
);

3584 (
mDNSåue
);

3587 (
mDNSÁl£
);

3588 
	}
}

3602 
mDNSloˇl
 
	$SídQuîõs
(
mDNS
 *c⁄° 
m
)

3604 
mDNSu32
 
¶Ÿ
;

3605 
CacheGroup
 *
cg
;

3606 
CacheRec‹d
 *
¸
;

3607 
AuthRec‹d
 *
¨
;

3608 
pktcou¡
 = 0;

3609 
DNSQue°i⁄
 *
q
;

3611 
mDNSs32
 
maxExi°ögQue°i⁄I¡îvÆ
 = 0;

3612 c⁄° 
Nëw‹kI¡îÁ˚Info
 *
ötf
 = 
	`GëFú°A˘iveI¡îÁ˚
(
m
->
Ho°I¡îÁ˚s
);

3613 
CacheRec‹d
 *
KnownAnswîLi°
 = 
mDNSNULL
;

3616 i‡(
m
->
timíow
 - m->
NextScheduÀdQuîy
 >= 0)

3618 
CacheRec‹d
 *
º
;

3619 
m
->
NextScheduÀdQuîy
 = m->
timíow
 + 0x78000000;

3623 
	`FORALL_CACHERECORDS
(
¶Ÿ
, 
cg
, 
º
)

3624 i‡(
º
->
CRA˘iveQue°i⁄
 &&Ñr->
U«nswîedQuîõs
 < 
MaxU«nswîedQuîõs
)

3625 i‡(
m
->
timíow
 + 
	`TicksTTL
(
º
)/50 -Ñr->
NextRequúedQuîy
 >= 0)

3627 
q
 = 
º
->
CRA˘iveQue°i⁄
;

3628 
	`ExpúeDupSuµªssInfoOnI¡îÁ˚
(
q
->
DupSuµªss
, 
m
->
timíow
 - 
	`TicksTTL
(
º
)/20,Ñr->
ª§ec
.
I¡îÁ˚ID
);

3629 i‡(
q
->
T¨gë
.
ty≥
Ëq->
SídQNow
 = 
mDNSI¡îÁ˚M¨k
;

3630 i‡(
q
->
SídQNow
 =
mDNSNULL
Ëq->SídQNow = 
º
->
ª§ec
.
I¡îÁ˚ID
;

3631 i‡(
q
->
SídQNow
 !
º
->
ª§ec
.
I¡îÁ˚ID
Ëq->SídQNow = 
mDNSI¡îÁ˚M¨k
;

3635 
q
 = 
m
->
Que°i⁄s
; q; q=q->
√xt
)

3636 i‡(
q
->
T¨gë
.
ty≥
 && (q->
SídQNow
 || 
	`TimeToSídThisQue°i⁄
(q, 
m
->
timíow
)))

3638 
mDNSu8
 *
q±r
 = 
m
->
omsg
.
d©a
;

3639 c⁄° 
mDNSu8
 *c⁄° 
limô
 = 
m
->
omsg
.
d©a
 + (m->omsg.data);

3640 
	`InôülizeDNSMesßge
(&
m
->
omsg
.
h
, 
q
->
T¨gëQID
, 
QuîyFœgs
);

3641 
q±r
 = 
	`putQue°i⁄
(&
m
->
omsg
, q±r, 
limô
, &
q
->
q«me
, q->
qty≥
, q->
q˛ass
);

3642 
	`mDNSSídDNSMesßge
(
m
, &m->
omsg
, 
q±r
, 
mDNSI¡îÁ˚_Any
, &
q
->
T¨gë
, q->
T¨gëP‹t
, -1, 
mDNSNULL
);

3643 
q
->
ThisQI¡îvÆ
 *= 2;

3644 i‡(
q
->
ThisQI¡îvÆ
 > 
MaxQue°i⁄I¡îvÆ
)

3645 
q
->
ThisQI¡îvÆ
 = 
MaxQue°i⁄I¡îvÆ
;

3646 
q
->
La°QTime
 = 
m
->
timíow
;

3647 
q
->
La°QTxTime
 = 
m
->
timíow
;

3648 
q
->
Re˚¡AnswîPkts
 = 0;

3649 
q
->
SídQNow
 = 
mDNSNULL
;

3650 
m
->
Ex≥˘Uniˇ°Re•⁄£
 = m->
timíow
;

3654 
q
 = 
m
->
Que°i⁄s
; q; q=q->
√xt
)

3655 i‡(!
q
->
T¨gë
.
ty≥
 && 
	`TimeToSídThisQue°i⁄
(q, 
m
->
timíow
))

3657 
q
->
SídQNow
 = 
mDNSI¡îÁ˚M¨k
;

3658 i‡(
maxExi°ögQue°i⁄I¡îvÆ
 < 
q
->
ThisQI¡îvÆ
)

3659 
maxExi°ögQue°i⁄I¡îvÆ
 = 
q
->
ThisQI¡îvÆ
;

3665 
q
 = 
m
->
Que°i⁄s
; q; q=q->
√xt
)

3667 i‡(
q
->
SídQNow
 ||

3668 (!
q
->
T¨gë
.
ty≥
 && 
	`A˘iveQue°i⁄
(qË&& q->
ThisQI¡îvÆ
 <
maxExi°ögQue°i⁄I¡îvÆ
 && 
	`Ac˚ÀøãThisQuîy
(
m
,q)))

3673 i‡(
m
->
timíow
 - (
q
->
La°QTime
 + q->
ThisQI¡îvÆ
/2) >= 0)

3675 
q
->
SídQNow
 = 
mDNSI¡îÁ˚M¨k
;

3676 
q
->
ThisQI¡îvÆ
 *= 2;

3677 i‡(
q
->
ThisQI¡îvÆ
 > 
MaxQue°i⁄I¡îvÆ
)

3678 
q
->
ThisQI¡îvÆ
 = 
MaxQue°i⁄I¡îvÆ
;

3679 i‡(
q
->
CuºítAnswîs
 =0 && q->
ThisQI¡îvÆ
 =
InôülQue°i⁄I¡îvÆ
 * 8)

3681 
	`debugf
("SendQueries: Zero currentánswers for %##s (%s); willÑeconfirmántecedents",

3682 
q
->
q«me
.
c
, 
	`DNSTy≥Name
(q->
qty≥
));

3683 
	`Rec⁄fúmA¡e˚díts
(
m
, 
q
);

3688 
q
->
SídOnAŒ
 = (q->
SídQNow
 =
mDNSI¡îÁ˚M¨k
);

3689 i‡(
q
->
SídOnAŒ
)

3691 
q
->
SídQNow
 = !
ötf
 ? 
mDNSNULL
 : (q->
I¡îÁ˚ID
) ? q->InterfaceID : intf->InterfaceID;

3692 
q
->
La°QTime
 = 
m
->
timíow
;

3697 
	`ExpúeDupSuµªssInfo
(
q
->
DupSuµªss
, 
m
->
timíow
 - q->
ThisQI¡îvÆ
/2);

3699 
q
->
La°QTxTime
 = 
m
->
timíow
;

3700 
q
->
Re˚¡AnswîPkts
 = 0;

3701 i‡(
q
->
Reque°Uniˇ°
) q->RequestUnicast--;

3704 
	`SëNextQuîyTime
(
m
,
q
);

3709 i‡(
m
->
timíow
 - m->
NextScheduÀdProbe
 >= 0)

3711 
m
->
NextScheduÀdProbe
 = m->
timíow
 + 0x78000000;

3713 i‡(
m
->
CuºítRec‹d
Ë
	`LogMsg
("SendQueries: ERROR m->CurrentRecordálready set");

3714 
m
->
CuºítRec‹d
 = m->
Resour˚Rec‹ds
;

3715 
m
->
CuºítRec‹d
)

3717 
AuthRec‹d
 *
º
 = 
m
->
CuºítRec‹d
;

3718 
m
->
CuºítRec‹d
 = 
º
->
√xt
;

3719 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥Unique
)

3722 i‡(
m
->
timíow
 - (
º
->
La°APTime
 +Ñr->
ThisAPI¡îvÆ
) < 0)

3724 
	`SëNextA¬oun˚ProbeTime
(
m
, 
º
);

3727 i‡(
º
->
ProbeCou¡
)

3730 
º
->
SídRNow
 = !
ötf
 ? 
mDNSNULL
 : (º->
ª§ec
.
I¡îÁ˚ID
) ?Ñr->resrec.InterfaceID : intf->InterfaceID;

3731 
º
->
La°APTime
 = 
m
->
timíow
;

3732 
º
->
ProbeCou¡
--;

3733 
	`SëNextA¬oun˚ProbeTime
(
m
, 
º
);

3739 
AuthRec‹d
 *
r2
;

3740 
º
->
ª§ec
.
Rec‹dTy≥
 = 
kDNSRec‹dTy≥Vîifõd
;

3741 
º
->
ThisAPI¡îvÆ
 = 
DeÁu…A¬oun˚I¡îvÆF‹Ty≥Unique
;

3742 
º
->
La°APTime
 = 
m
->
timíow
 - 
DeÁu…A¬oun˚I¡îvÆF‹Ty≥Unique
;

3743 
	`SëNextA¬oun˚ProbeTime
(
m
, 
º
);

3745 
r2
 = 
m
->
Du∂iˇãRec‹ds
;Ñ2;Ñ2Ù2->
√xt
)

3746 i‡(
r2
->
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥Unique
 && 
	`Rec‹dIsLoˇlDu∂iˇã
‘2, 
º
))

3747 
r2
->
ProbeCou¡
 = 0;

3748 
	`AcknowÀdgeRec‹d
(
m
, 
º
);

3752 
m
->
CuºítRec‹d
 = m->
Du∂iˇãRec‹ds
;

3753 
m
->
CuºítRec‹d
)

3755 
AuthRec‹d
 *
º
 = 
m
->
CuºítRec‹d
;

3756 
m
->
CuºítRec‹d
 = 
º
->
√xt
;

3757 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥Unique
 &&Ñr->
ProbeCou¡
 == 0)

3758 
	`AcknowÀdgeRec‹d
(
m
, 
º
);

3764 
ötf
)

3766 
AuthRec‹d
 *
º
;

3767 
mDNSu8
 *
quîy±r
 = 
m
->
omsg
.
d©a
;

3768 
	`InôülizeDNSMesßge
(&
m
->
omsg
.
h
, 
zîoID
, 
QuîyFœgs
);

3769 i‡(
KnownAnswîLi°
Ë
	`vîbo£debugf
("SendQueries: KnownAnswerList set... Will continue fromÖreviousÖacket");

3770 i‡(!
KnownAnswîLi°
)

3773 
CacheRec‹d
 **
kÆi°±r
 = &
KnownAnswîLi°
;

3774 
mDNSu32
 
™swîf‹eˇ°
 = 0;

3777 
q
 = 
m
->
Que°i⁄s
; q; q=q->
√xt
)

3778 i‡(
q
->
SídQNow
 =
ötf
->
I¡îÁ˚ID
)

3780 
	`debugf
("SendQueries: %s question for %##s (%s)át %d forecastÅotal %d",

3781 
	`SuµªssOnThisI¡îÁ˚
(
q
->
DupSuµªss
, 
ötf
) ? "Suppressing" : "Putting ",

3782 
q
->
q«me
.
c
, 
	`DNSTy≥Name
(q->
qty≥
), 
quîy±r
 - 
m
->
omsg
.
d©a
, quîy±∏+ 
™swîf‹eˇ°
 - m->omsg.data);

3784 i‡(
	`SuµªssOnThisI¡îÁ˚
(
q
->
DupSuµªss
, 
ötf
) ||

3785 
	`BuûdQue°i⁄
(
m
, &m->
omsg
, &
quîy±r
, 
q
, &
kÆi°±r
, &
™swîf‹eˇ°
))

3786 
q
->
SídQNow
 = (q->
I¡îÁ˚ID
 || !q->
SídOnAŒ
Ë? 
mDNSNULL
 : 
	`GëNextA˘iveI¡îÁ˚ID
(
ötf
);

3790 
º
 = 
m
->
Resour˚Rec‹ds
;Ñr;ÑrÙr->
√xt
)

3791 i‡(
º
->
SídRNow
 =
ötf
->
I¡îÁ˚ID
)

3793 
mDNSBoﬁ
 
uˇ°
 = (
º
->
ProbeCou¡
 >
DeÁu…ProbeCou¡F‹Ty≥Unique
-1Ë&& 
m
->
C™Re˚iveUniˇ°On5353
;

3794 
mDNSu16
 
ucbô
 = (mDNSu16)(
uˇ°
 ? 
kDNSQCœss_Uniˇ°Re•⁄£
 : 0);

3795 c⁄° 
mDNSu8
 *c⁄° 
limô
 = 
m
->
omsg
.
d©a
 + ((m->omsg.
h
.
numQue°i⁄s
Ë? 
N‹mÆMaxDNSMesßgeD©a
 : 
AbsﬁuãMaxDNSMesßgeD©a
);

3796 
mDNSu8
 *
√w±r
 = 
	`putQue°i⁄
(&
m
->
omsg
, 
quîy±r
, 
limô
, 
º
->
ª§ec
.
«me
, 
kDNSQTy≥_ANY
, (
mDNSu16
)‘r->ª§ec.
º˛ass
 | 
ucbô
));

3798 
mDNSu32
 
f‹eˇ°
 = 
™swîf‹eˇ°
 + 12 + 
º
->
ª§ec
.
rde°im©e
;

3799 i‡(
√w±r
 &&Çew±∏+ 
f‹eˇ°
 < 
limô
)

3801 
quîy±r
 = 
√w±r
;

3802 
™swîf‹eˇ°
 = 
f‹eˇ°
;

3803 
º
->
SídRNow
 = (º->
ª§ec
.
I¡îÁ˚ID
Ë? 
mDNSNULL
 : 
	`GëNextA˘iveI¡îÁ˚ID
(
ötf
);

3804 
º
->
In˛udeInProbe
 = 
mDNSåue
;

3805 
	`vîbo£debugf
("SendQueries: Put Question %##s (%s)Örobecount %d",

3806 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
),Ñr->
ProbeCou¡
);

3810 
	`vîbo£debugf
("SendQueries: Retracting Question %##s (%s)",

3811 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

3812 
m
->
omsg
.
h
.
numQue°i⁄s
--;

3818 
KnownAnswîLi°
)

3820 
CacheRec‹d
 *
º
 = 
KnownAnswîLi°
;

3821 
mDNSu32
 
SecsSö˚Rcvd
 = ((mDNSu32)(
m
->
timíow
 - 
º
->
TimeRcvd
)Ë/ 
mDNSPœtf‹mO√Sec⁄d
;

3822 
mDNSu8
 *
√w±r
 = 
	`PutResour˚Rec‹dTTL
(&
m
->
omsg
, 
quîy±r
, &m->omsg.
h
.
numAnswîs
, &
º
->
ª§ec
,Ñr->ª§ec.
º‹igöÆâl
 - 
SecsSö˚Rcvd
);

3823 i‡(
√w±r
)

3825 
	`vîbo£debugf
("SendQueries: Put %##s (%s)át %d - %d",

3826 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
), 
quîy±r
 - 
m
->
omsg
.
d©a
, 
√w±r
 - m->omsg.data);

3827 
quîy±r
 = 
√w±r
;

3828 
KnownAnswîLi°
 = 
º
->
NextInKALi°
;

3829 
º
->
NextInKALi°
 = 
mDNSNULL
;

3835 i‡(
m
->
omsg
.
h
.
numQue°i⁄s
 > 1)

3836 
	`LogMsg
("SídQuîõs: Puà%dánswîs; Nÿm‹ê•a˚ f‹ know¿™swîs", 
m
->
omsg
.
h
.
numAnswîs
);

3837 
m
->
omsg
.
h
.
Êags
.
b
[0] |
kDNSFœg0_TC
;

3842 
º
 = 
m
->
Resour˚Rec‹ds
;Ñr;ÑrÙr->
√xt
)

3843 i‡(
º
->
In˛udeInProbe
)

3845 
mDNSu8
 *
√w±r
 = 
	`PutResour˚Rec‹d
(&
m
->
omsg
, 
quîy±r
, &m->omsg.
h
.
numAuth‹ôõs
, &
º
->
ª§ec
);

3846 
º
->
In˛udeInProbe
 = 
mDNSÁl£
;

3847 i‡(
√w±r
Ë
quîy±r
 =Çewptr;

3848 
	`LogMsg
("SendQueries: How did we failÅo have space forÅhe UpdateÑecord %##s (%s)?",

3849 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

3852 i‡(
quîy±r
 > 
m
->
omsg
.
d©a
)

3854 i‡((
m
->
omsg
.
h
.
Êags
.
b
[0] & 
kDNSFœg0_TC
Ë&& m->omsg.h.
numQue°i⁄s
 > 1)

3855 
	`LogMsg
("SídQuîõs: ShouldÇŸ havêm‹êth™ o√ que°i⁄ (%dËöáÅrunˇãdÖackë", 
m
->
omsg
.
h
.
numQue°i⁄s
);

3856 
	`debugf
("SendQueries: Sending %d Question%s %d Answer%s %d Update%s on %p",

3857 
m
->
omsg
.
h
.
numQue°i⁄s
, m->omsg.h.numQuestions == 1 ? "" : "s",

3858 
m
->
omsg
.
h
.
numAnswîs
, m->omsg.h.numAnswers == 1 ? "" : "s",

3859 
m
->
omsg
.
h
.
numAuth‹ôõs
, m->omsg.h.numAuth‹ôõ†=1 ? "" : "s", 
ötf
->
I¡îÁ˚ID
);

3860 i‡(
ötf
->
IPv4AvaûabÀ
Ë
	`mDNSSídDNSMesßge
(
m
, &m->
omsg
, 
quîy±r
, i¡f->
I¡îÁ˚ID
, &
AŒDNSLökGroup_v4
, 
Mu…iˇ°DNSP‹t
, -1, 
mDNSNULL
);

3861 i‡(
ötf
->
IPv6AvaûabÀ
Ë
	`mDNSSídDNSMesßge
(
m
, &m->
omsg
, 
quîy±r
, i¡f->
I¡îÁ˚ID
, &
AŒDNSLökGroup_v6
, 
Mu…iˇ°DNSP‹t
, -1, 
mDNSNULL
);

3862 i‡(!
m
->
SuµªssSídög
Ëm->SuµªssSídög = 
	`N⁄ZîoTime
(m->
timíow
 + (
mDNSPœtf‹mO√Sec⁄d
+9)/10);

3863 i‡(++
pktcou¡
 >= 1000)

3864 { 
	`LogMsg
("SídQuîõ†ex˚ededÜo›Üimô %d: givög up", 
pktcou¡
); ; }

3870 c⁄° 
Nëw‹kI¡îÁ˚Info
 *
√xt
 = 
	`GëFú°A˘iveI¡îÁ˚
(
ötf
->next);

3871 #i‡
MDNS_DEBUGMSGS
 && 0

3872 c⁄° *c⁄° 
msg
 = 
√xt
 ? "SendQueries: Nothing more on %p; movingÅo %p" : "SendQueries: Nothing more on %p";

3873 
	`debugf
(
msg
, 
ötf
, 
√xt
);

3875 
ötf
 = 
√xt
;

3882 
¨
 = 
m
->
Resour˚Rec‹ds
;ár;ár˜r->
√xt
)

3883 i‡(
¨
->
SídRNow
)

3885 i‡(
¨
->
ª§ec
.
I¡îÁ˚ID
 !
mDNSI¡îÁ˚_LoˇlO∆y
)

3886 
	`LogMsg
("SídQuîõs: Nÿa˘ivêöãrÁ˚Åÿ£nd: %s", 
	`ARDi•œySåög
(
m
, 
¨
));

3887 
¨
->
SídRNow
 = 
mDNSNULL
;

3895 
	`FORALL_CACHERECORDS
(
¶Ÿ
, 
cg
, 
¸
)

3896 i‡(
¸
->
CRA˘iveQue°i⁄
 && cr->
U«nswîedQuîõs
 < 
MaxU«nswîedQuîõs
 && 
m
->
timíow
 - cr->
NextRequúedQuîy
 >= 0)

3898 
¸
->
U«nswîedQuîõs
++;

3899 
¸
->
CRA˘iveQue°i⁄
->
SídQNow
 = 
mDNSNULL
;

3900 
	`SëNextCacheCheckTime
(
m
, 
¸
);

3906 
q
 = 
m
->
Que°i⁄s
; q; q=q->
√xt
)

3907 i‡(
q
->
SídQNow
)

3909 
	`LogMsg
("SídQuîõs: Nÿa˘ivêöãrÁ˚Åÿ£nd: %##†%s", 
q
->
q«me
.
c
, 
	`DNSTy≥Name
(q->
qty≥
));

3910 
q
->
SídQNow
 = 
mDNSNULL
;

3912 
	}
}

3915 #i‡
COMPILER_LIKES_PRAGMA_MARK


3916 #¥agm®
m¨k
 -

3917 #¥agm®
m¨k
 - 
RR
 
Li°
 
M™agemít
 & 
Task
 Management

3922 
mDNSloˇl
 
	$AnswîQue°i⁄WôhResour˚Rec‹d
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *
q
, 
CacheRec‹d
 *
º
, 
mDNSBoﬁ
 
AddRec‹d
)

3924 
	`vîbo£debugf
("AnswerQuestionWithResourceRecord:%4lu %s TTL%6lu %##s (%s)",

3925 
q
->
CuºítAnswîs
, 
AddRec‹d
 ? "Add" : "Rmv", 
º
->
ª§ec
.
º‹igöÆâl
,Ñr->ª§ec.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

3931 
º
->
La°U£d
 = 
m
->
timíow
;

3932 i‡(
	`A˘iveQue°i⁄
(
q
Ë&& 
º
->
CRA˘iveQue°i⁄
 != q)

3934 i‡(!
º
->
CRA˘iveQue°i⁄
Ë
m
->
ºˇche_a˘ive
++;

3935 
º
->
CRA˘iveQue°i⁄
 = 
q
;

3936 
	`SëNextCacheCheckTime
(
m
, 
º
);

3944 i‡((
AddRec‹d
 =2 && !
q
->
Reque°Uniˇ°
) ||

3945 (
AddRec‹d
 =1 && (
q
->
Ex≥˘Unique
 || (
º
->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥PackëUniqueMask
))))

3946 i‡(
	`A˘iveQue°i⁄
(
q
))

3948 
q
->
La°QTime
 = 
m
->
timíow
;

3949 
q
->
La°QTxTime
 = 
m
->
timíow
;

3950 
q
->
Re˚¡AnswîPkts
 = 0;

3951 
q
->
ThisQI¡îvÆ
 = 
MaxQue°i⁄I¡îvÆ
;

3952 
q
->
Reque°Uniˇ°
 = 
mDNSÁl£
;

3955 i‡(
º
->
DñayDñivîy
) ;

3957 
m
->
mDNS_ªíå™cy
++;

3958 i‡(
q
->
Que°i⁄CÆlback
)

3959 
q
->
	`Que°i⁄CÆlback
(
m
, q, &
º
->
ª§ec
, 
AddRec‹d
);

3960 
m
->
mDNS_ªíå™cy
--;

3966 
	}
}

3968 
mDNSloˇl
 
	$CacheRec‹dDe„ºedAdd
(
mDNS
 *c⁄° 
m
, 
CacheRec‹d
 *
º
)

3970 
º
->
DñayDñivîy
 = 0;

3971 i‡(
m
->
CuºítQue°i⁄
Ë
	`LogMsg
("CacheRecordDeferredAdd ERROR m->CurrentQuestionálready set");

3972 
m
->
CuºítQue°i⁄
 = m->
Que°i⁄s
;

3973 
m
->
CuºítQue°i⁄
 && m->CuºítQue°i⁄ !m->
NewQue°i⁄s
)

3975 
DNSQue°i⁄
 *
q
 = 
m
->
CuºítQue°i⁄
;

3976 
m
->
CuºítQue°i⁄
 = 
q
->
√xt
;

3977 i‡(
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
º
->
ª§ec
, 
q
))

3978 
	`AnswîQue°i⁄WôhResour˚Rec‹d
(
m
, 
q
, 
º
, 
mDNSåue
);

3980 
m
->
CuºítQue°i⁄
 = 
mDNSNULL
;

3981 
	}
}

3983 
mDNSloˇl
 
mDNSs32
 
	$CheckF‹So⁄ToExpúeRec‹ds
(
mDNS
 *c⁄° 
m
, c⁄° 
domaö«me
 *c⁄° 
«me
, c⁄° 
mDNSu32
 
«mehash
, c⁄° mDNSu32 
¶Ÿ
)

3985 c⁄° 
mDNSs32
 
thªshhﬁd
 = 
m
->
timíow
 + 
mDNSPœtf‹mO√Sec⁄d
;

3986 c⁄° 
mDNSs32
 
°¨t
 = 
m
->
timíow
 - 0x10000000;

3987 
mDNSs32
 
dñay
 = 
°¨t
;

3988 
CacheGroup
 *
cg
 = 
	`CacheGroupF‹Name
(
m
, 
¶Ÿ
, 
«mehash
, 
«me
);

3989 
CacheRec‹d
 *
º
;

3990 
º
 = 
cg
 ? cg->
membîs
 : 
mDNSNULL
;Ñr;ÑrÙr->
√xt
)

3991 i‡(
º
->
ª§ec
.
«mehash
 =«mehash && 
	`SameDomaöName
‘r->ª§ec.
«me
,Çame))

3992 i‡(
thªshhﬁd
 - 
	`RRExpúeTime
(
º
) >= 0)

3993 i‡(
dñay
 - 
	`RRExpúeTime
(
º
) < 0)

3994 
dñay
 = 
	`RRExpúeTime
(
º
);

3995 i‡(
dñay
 - 
°¨t
 > 0Ë(
	`N⁄ZîoTime
(delay));

3997 
	}
}

4007 
mDNSloˇl
 
	$CacheRec‹dAdd
(
mDNS
 *c⁄° 
m
, 
CacheRec‹d
 *
º
)

4009 i‡(
m
->
CuºítQue°i⁄
Ë
	`LogMsg
("CacheRecordAdd ERROR m->CurrentQuestionálready set");

4010 
m
->
CuºítQue°i⁄
 = m->
Que°i⁄s
;

4011 
m
->
CuºítQue°i⁄
 && m->CuºítQue°i⁄ !m->
NewQue°i⁄s
)

4013 
DNSQue°i⁄
 *
q
 = 
m
->
CuºítQue°i⁄
;

4014 
m
->
CuºítQue°i⁄
 = 
q
->
√xt
;

4015 i‡(
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
º
->
ª§ec
, 
q
))

4023 i‡(
q
->
La°AnswîPktNum
 !
m
->
PktNum
)

4025 
q
->
La°AnswîPktNum
 = 
m
->
PktNum
;

4026 i‡(
	`A˘iveQue°i⁄
(
q
Ë&& ++q->
Re˚¡AnswîPkts
 >= 10 &&

4027 
q
->
ThisQI¡îvÆ
 > 
InôülQue°i⁄I¡îvÆ
*32 && 
m
->
timíow
 - q->
La°QTxTime
 < 
mDNSPœtf‹mO√Sec⁄d
)

4029 
	`LogMsg
("CacheRecordAdd: %##s (%s) got immediateánswer burst;ÑestartingÉxponential backoff sequence",

4030 
q
->
q«me
.
c
, 
	`DNSTy≥Name
(q->
qty≥
));

4031 
q
->
La°QTime
 = 
m
->
timíow
 - 
InôülQue°i⁄I¡îvÆ
 + (
mDNSs32
)
	`mDNSR™dom
((
mDNSu32
)
mDNSPœtf‹mO√Sec⁄d
*4);

4032 
q
->
ThisQI¡îvÆ
 = 
InôülQue°i⁄I¡îvÆ
;

4033 
	`SëNextQuîyTime
(
m
,
q
);

4036 
	`vîbo£debugf
("CacheRecordAdd %p %##s (%s) %lu",

4037 
º
,Ñr->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
),Ñr->ª§ec.
º‹igöÆâl
);

4038 
q
->
CuºítAnswîs
++;

4039 i‡(
º
->
ª§ec
.
rdÀngth
 > 
SmÆlRec‹dLimô
Ë
q
->
L¨geAnswîs
++;

4040 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥PackëUniqueMask
Ë
q
->
UniqueAnswîs
++;

4041 i‡(
q
->
CuºítAnswîs
 > 4000)

4043 
msgcou¡
 = 0;

4044 i‡(
msgcou¡
++ < 10)

4045 
	`LogMsg
("CacheRecordAdd: %##s (%s) has %dánswers; sheddingÑecordsÅoÑesist DOSáttack",

4046 
q
->
q«me
.
c
, 
	`DNSTy≥Name
(q->
qty≥
), q->
CuºítAnswîs
);

4047 
º
->
ª§ec
.
º‹igöÆâl
 = 1;

4048 
º
->
U«nswîedQuîõs
 = 
MaxU«nswîedQuîõs
;

4050 
	`AnswîQue°i⁄WôhResour˚Rec‹d
(
m
, 
q
, 
º
, 
mDNSåue
);

4054 
m
->
CuºítQue°i⁄
 = 
mDNSNULL
;

4055 
	`SëNextCacheCheckTime
(
m
, 
º
);

4056 
	}
}

4068 
mDNSloˇl
 
	$NoCacheAnswî
(
mDNS
 *c⁄° 
m
, 
CacheRec‹d
 *
º
)

4070 
	`LogMsg
("Nÿˇchê•a˚: DñivîögÇ⁄-ˇchedÑesu… f‹ %##s", 
m
->
ªc
.
r
.
ª§ec
.
«me
->
c
);

4071 i‡(
m
->
CuºítQue°i⁄
Ë
	`LogMsg
("NoCacheAnswer ERROR m->CurrentQuestionálready set");

4072 
m
->
CuºítQue°i⁄
 = m->
Que°i⁄s
;

4073 
m
->
CuºítQue°i⁄
)

4075 
DNSQue°i⁄
 *
q
 = 
m
->
CuºítQue°i⁄
;

4076 
m
->
CuºítQue°i⁄
 = 
q
->
√xt
;

4077 i‡(
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
º
->
ª§ec
, 
q
))

4078 
	`AnswîQue°i⁄WôhResour˚Rec‹d
(
m
, 
q
, 
º
, 2);

4081 
m
->
CuºítQue°i⁄
 = 
mDNSNULL
;

4082 
	}
}

4092 
mDNSloˇl
 
	$CacheRec‹dRmv
(
mDNS
 *c⁄° 
m
, 
CacheRec‹d
 *
º
)

4094 i‡(
m
->
CuºítQue°i⁄
Ë
	`LogMsg
("CacheRecordRmv ERROR m->CurrentQuestionálready set");

4095 
m
->
CuºítQue°i⁄
 = m->
Que°i⁄s
;

4096 
m
->
CuºítQue°i⁄
 && m->CuºítQue°i⁄ !m->
NewQue°i⁄s
)

4098 
DNSQue°i⁄
 *
q
 = 
m
->
CuºítQue°i⁄
;

4099 
m
->
CuºítQue°i⁄
 = 
q
->
√xt
;

4100 i‡(
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
º
->
ª§ec
, 
q
))

4102 
	`vîbo£debugf
("CacheRec‹dRmv %∞%s", 
º
, 
	`CRDi•œySåög
(
m
,Ñr));

4103 i‡(
q
->
CuºítAnswîs
 == 0)

4104 
	`LogMsg
("CacheRecordRmv ERROR: How can CurrentAnswersálready be zero for %p %##s (%s)?",

4105 
q
, q->
q«me
.
c
, 
	`DNSTy≥Name
(q->
qty≥
));

4108 
q
->
CuºítAnswîs
--;

4109 i‡(
º
->
ª§ec
.
rdÀngth
 > 
SmÆlRec‹dLimô
Ë
q
->
L¨geAnswîs
--;

4110 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥PackëUniqueMask
Ë
q
->
UniqueAnswîs
--;

4112 i‡(
q
->
CuºítAnswîs
 == 0)

4114 
	`debugf
("CacheRecordRmv: Zero currentánswers for %##s (%s); willÑeconfirmántecedents",

4115 
q
->
q«me
.
c
, 
	`DNSTy≥Name
(q->
qty≥
));

4116 
	`Rec⁄fúmA¡e˚díts
(
m
, 
q
);

4118 
q
->
FœµögI¡îÁ˚
 = 
mDNSNULL
;

4119 
	`AnswîQue°i⁄WôhResour˚Rec‹d
(
m
, 
q
, 
º
, 
mDNSÁl£
);

4123 
m
->
CuºítQue°i⁄
 = 
mDNSNULL
;

4124 
	}
}

4126 
mDNSloˇl
 
	$Rñó£CacheE¡ôy
(
mDNS
 *c⁄° 
m
, 
CacheE¡ôy
 *
e
)

4128 #i‡
MACOSX_MDNS_MALLOC_DEBUGGING
 >= 1

4129 
i
;

4130 
i
=0; i<(*
e
); i++) ((*)e)[i] = 0xFF;

4132 
e
->
√xt
 = 
m
->
ºˇche_‰ì
;

4133 
m
->
ºˇche_‰ì
 = 
e
;

4134 
m
->
ºˇche_tŸÆu£d
--;

4135 
	}
}

4137 
mDNSloˇl
 
	$Rñó£CacheGroup
(
mDNS
 *c⁄° 
m
, 
CacheGroup
 **
˝
)

4139 
CacheE¡ôy
 *
e
 = (CacheE¡ôy *)(*
˝
);

4141 i‡((*
˝
)->
ºˇche_èû
 !&(*˝)->
membîs
)

4142 
	`LogMsg
("ERROR: (*cp)->members == mDNSNULL but (*cp)->rrcache_tail != &(*cp)->members)");

4145 i‡((*
˝
)->
«me
 !(
domaö«me
*)((*˝)->
«me°‹age
)Ë
	`mDNSPœtf‹mMemFªe
((*cp)->name);

4146 (*
˝
)->
«me
 = 
mDNSNULL
;

4147 *
˝
 = (*˝)->
√xt
;

4148 
	`Rñó£CacheE¡ôy
(
m
, 
e
);

4149 
	}
}

4151 
mDNSloˇl
 
	$Rñó£CacheRec‹d
(
mDNS
 *c⁄° 
m
, 
CacheRec‹d
 *
r
)

4153 i‡(
r
->
ª§ec
.
rd©a
 &&Ñ->ª§ec.rd©®!(
RD©a
*)&r->
rd©a°‹age
Ë
	`mDNSPœtf‹mMemFªe
(r->resrec.rdata);

4154 
r
->
ª§ec
.
rd©a
 = 
mDNSNULL
;

4155 
	`Rñó£CacheE¡ôy
(
m
, (
CacheE¡ôy
 *)
r
);

4156 
	}
}

4161 
mDNSloˇl
 
	$CheckCacheExpú©i⁄
(
mDNS
 *c⁄° 
m
, 
CacheGroup
 *
cg
)

4163 
CacheRec‹d
 **
Ω
 = &
cg
->
membîs
;

4165 i‡(
m
->
lock_ºˇche
Ë{ 
	`LogMsg
("CheckCacheExpiration ERROR! CacheálreadyÜocked!"); ; }

4166 
m
->
lock_ºˇche
 = 1;

4168 *
Ω
)

4170 
CacheRec‹d
 *c⁄° 
º
 = *
Ω
;

4171 
mDNSs32
 
evít
 = 
	`RRExpúeTime
(
º
);

4172 i‡(
m
->
timíow
 - 
evít
 >= 0)

4174 *
Ω
 = 
º
->
√xt
;

4175 
	`vîbo£debugf
("CheckCacheExpú©i⁄: Dñëög %s", 
	`CRDi•œySåög
(
m
, 
º
));

4176 i‡(
º
->
CRA˘iveQue°i⁄
)

4178 
	`CacheRec‹dRmv
(
m
, 
º
);

4179 
m
->
ºˇche_a˘ive
--;

4181 
	`Rñó£CacheRec‹d
(
m
, 
º
);

4185 i‡(
º
->
DñayDñivîy
 &&Ñr->DñayDñivîy - 
m
->
timíow
 > 0)

4186 
evít
 = 
º
->
DñayDñivîy
;

4189 i‡(
º
->
DñayDñivîy
Ë
	`CacheRec‹dDe„ºedAdd
(
m
,Ñr);

4190 i‡(
º
->
CRA˘iveQue°i⁄
 &&Ñr->
U«nswîedQuîõs
 < 
MaxU«nswîedQuîõs
)

4192 i‡(
m
->
timíow
 - 
º
->
NextRequúedQuîy
 < 0)

4193 
evít
 = 
º
->
NextRequúedQuîy
;

4198 
m
->
NextScheduÀdQuîy
 = m->
timíow
;

4201 
evít
 = 
m
->
timíow
 + 0x3FFFFFFF;

4205 
	`vîbo£debugf
("CheckCacheExpiration:%6d %5d %s",

4206 (
evít
-
m
->
timíow
Ë/ 
mDNSPœtf‹mO√Sec⁄d
, 
	`CacheCheckGø˚Pîiod
(
º
), 
	`CRDi•œySåög
(m,Ñr));

4207 i‡(
m
->
NextCacheCheck
 - (
evít
 + 
	`CacheCheckGø˚Pîiod
(
º
)) > 0)

4208 
m
->
NextCacheCheck
 = (
evít
 + 
	`CacheCheckGø˚Pîiod
(
º
));

4209 
Ω
 = &
º
->
√xt
;

4212 i‡(
cg
->
ºˇche_èû
 !
Ω
Ë
	`vîbo£debugf
("CheckCacheExpiration: Updating CacheGroupÅail from %pÅo %p", cg->rrcache_tail,Ñp);

4213 
cg
->
ºˇche_èû
 = 
Ω
;

4214 
m
->
lock_ºˇche
 = 0;

4215 
	}
}

4217 
mDNSloˇl
 
	$AnswîNewQue°i⁄
(
mDNS
 *c⁄° 
m
)

4219 
mDNSBoﬁ
 
ShouldQuîyImmedüãly
 = 
mDNSåue
;

4220 
CacheRec‹d
 *
º
;

4221 
DNSQue°i⁄
 *
q
 = 
m
->
NewQue°i⁄s
;

4222 c⁄° 
mDNSu32
 
¶Ÿ
 = 
	`HashSlŸ
(&
q
->
q«me
);

4223 
CacheGroup
 *
cg
 = 
	`CacheGroupF‹Name
(
m
, 
¶Ÿ
, 
q
->
q«mehash
, &q->
q«me
);

4225 
	`vîbo£debugf
("AnswîNewQue°i⁄: Answîög %##†(%s)", 
q
->
q«me
.
c
, 
	`DNSTy≥Name
(q->
qty≥
));

4227 i‡(
cg
Ë
	`CheckCacheExpú©i⁄
(
m
, cg);

4228 
m
->
NewQue°i⁄s
 = 
q
->
√xt
;

4230 i‡(
m
->
lock_ºˇche
Ë
	`LogMsg
("AnswerNewQuestion ERROR! CacheálreadyÜocked!");

4235 
m
->
lock_ºˇche
 = 1;

4236 i‡(
m
->
CuºítQue°i⁄
Ë
	`LogMsg
("AnswerNewQuestion ERROR m->CurrentQuestionálready set");

4237 
m
->
CuºítQue°i⁄
 = 
q
;

4239 i‡(
q
->
I¡îÁ˚ID
 =
mDNSI¡îÁ˚_Any
)

4241 i‡(
m
->
CuºítRec‹d
Ë
	`LogMsg
("AnswerNewLocalOnlyQuestion ERROR m->CurrentRecordálready set");

4242 
m
->
CuºítRec‹d
 = m->
Resour˚Rec‹ds
;

4243 
m
->
CuºítRec‹d
 && m->CuºítRec‹d !m->
NewLoˇlRec‹ds
)

4245 
AuthRec‹d
 *
º
 = 
m
->
CuºítRec‹d
;

4246 
m
->
CuºítRec‹d
 = 
º
->
√xt
;

4247 i‡(
º
->
ª§ec
.
I¡îÁ˚ID
 =
mDNSI¡îÁ˚_LoˇlO∆y
)

4248 i‡(
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
º
->
ª§ec
, 
q
))

4250 
	`AnswîLoˇlO∆yQue°i⁄WôhResour˚Rec‹d
(
m
, 
q
, 
º
, 
mDNSåue
);

4252 i‡(
m
->
CuºítQue°i⁄
 !
q
) ;

4255 
m
->
CuºítRec‹d
 = 
mDNSNULL
;

4258 
º
 = 
cg
 ? cg->
membîs
 : 
mDNSNULL
;Ñr;ÑrÙr->
√xt
)

4259 i‡(
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
º
->
ª§ec
, 
q
))

4262 
mDNSu32
 
SecsSö˚Rcvd
 = ((mDNSu32)(
m
->
timíow
 - 
º
->
TimeRcvd
)Ë/ 
mDNSPœtf‹mO√Sec⁄d
;

4263 i‡(
º
->
ª§ec
.
º‹igöÆâl
 <
SecsSö˚Rcvd
)

4265 
	`LogMsg
("AnswerNewQuestion: How isÑr->resrec.rroriginalttl %lu <= SecsSinceRcvd %lu for %##s (%s)",

4266 
º
->
ª§ec
.
º‹igöÆâl
, 
SecsSö˚Rcvd
,Ñr->ª§ec.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

4272 i‡((
º
->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥PackëUniqueMask
Ë|| (
q
->
Ex≥˘Unique
))

4273 
ShouldQuîyImmedüãly
 = 
mDNSÁl£
;

4274 
q
->
CuºítAnswîs
++;

4275 i‡(
º
->
ª§ec
.
rdÀngth
 > 
SmÆlRec‹dLimô
Ë
q
->
L¨geAnswîs
++;

4276 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥PackëUniqueMask
Ë
q
->
UniqueAnswîs
++;

4277 
	`AnswîQue°i⁄WôhResour˚Rec‹d
(
m
, 
q
, 
º
, 
mDNSåue
);

4279 i‡(
m
->
CuºítQue°i⁄
 !
q
) ;

4281 i‡(
	`RRTy≥IsAddªssTy≥
(
º
->
ª§ec
.
ºty≥
Ë&& RRTy≥IsAddªssTy≥(
q
->
qty≥
))

4282 i‡(
º
->
ª§ec
.
«mehash
 =
q
->
q«mehash
 && 
	`SameDomaöName
‘r->ª§ec.
«me
, &q->
q«me
))

4283 
ShouldQuîyImmedüãly
 = 
mDNSÁl£
;

4285 i‡(
ShouldQuîyImmedüãly
 && 
m
->
CuºítQue°i⁄
 =
q
)

4287 
q
->
ThisQI¡îvÆ
 = 
InôülQue°i⁄I¡îvÆ
;

4288 
q
->
La°QTime
 = 
m
->
timíow
 - q->
ThisQI¡îvÆ
;

4289 
m
->
NextScheduÀdQuîy
 = m->
timíow
;

4291 
m
->
CuºítQue°i⁄
 = 
mDNSNULL
;

4292 
m
->
lock_ºˇche
 = 0;

4293 
	}
}

4297 
mDNSloˇl
 
	$AnswîNewLoˇlO∆yQue°i⁄
(
mDNS
 *c⁄° 
m
)

4299 
DNSQue°i⁄
 *
q
 = 
m
->
NewLoˇlO∆yQue°i⁄s
;

4300 
m
->
NewLoˇlO∆yQue°i⁄s
 = 
q
->
√xt
;

4302 
	`debugf
("AnswîNewLoˇlO∆yQue°i⁄: Answîög %##†(%s)", 
q
->
q«me
.
c
, 
	`DNSTy≥Name
(q->
qty≥
));

4304 i‡(
m
->
CuºítQue°i⁄
Ë
	`LogMsg
("AnswerNewLocalOnlyQuestion ERROR m->CurrentQuestionálready set");

4305 
m
->
CuºítQue°i⁄
 = 
q
;

4307 i‡(
m
->
CuºítRec‹d
Ë
	`LogMsg
("AnswerNewLocalOnlyQuestion ERROR m->CurrentRecordálready set");

4308 
m
->
CuºítRec‹d
 = m->
Resour˚Rec‹ds
;

4309 
m
->
CuºítRec‹d
 && m->CuºítRec‹d !m->
NewLoˇlRec‹ds
)

4311 
AuthRec‹d
 *
º
 = 
m
->
CuºítRec‹d
;

4312 
m
->
CuºítRec‹d
 = 
º
->
√xt
;

4313 i‡(
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
º
->
ª§ec
, 
q
))

4315 
	`AnswîLoˇlO∆yQue°i⁄WôhResour˚Rec‹d
(
m
, 
q
, 
º
, 
mDNSåue
);

4317 i‡(
m
->
CuºítQue°i⁄
 !
q
) ;

4321 
m
->
CuºítQue°i⁄
 = 
mDNSNULL
;

4322 
m
->
CuºítRec‹d
 = 
mDNSNULL
;

4323 
	}
}

4325 
mDNSloˇl
 
CacheE¡ôy
 *
	$GëCacheE¡ôy
(
mDNS
 *c⁄° 
m
, c⁄° 
CacheGroup
 *c⁄° 
Pª£rveCG
)

4327 
CacheE¡ôy
 *
e
 = 
mDNSNULL
;

4329 i‡(
m
->
lock_ºˇche
Ë{ 
	`LogMsg
("GëFªeCacheRR ERROR! CachêÆªadyÜocked!"); (
mDNSNULL
); }

4330 
m
->
lock_ºˇche
 = 1;

4333 i‡(!
m
->
ºˇche_‰ì
 && m->
MaöCÆlback
)

4335 i‡(
m
->
ºˇche_tŸÆu£d
 !m->
ºˇche_size
)

4336 
	`LogMsg
("GetFreeCacheRR: count mismatch: m->rrcache_totalused %lu != m->rrcache_size %lu",

4337 
m
->
ºˇche_tŸÆu£d
, m->
ºˇche_size
);

4343 i‡(
m
->
ºˇche_size
 >512 && m->ºˇche_sizê/ 32 > m->
ºˇche_a˘ive
)

4344 
	`debugf
("Possible denial-of-serviceáttack inÖrogress: m->rrcache_size %lu; m->rrcache_active %lu",

4345 
m
->
ºˇche_size
, m->
ºˇche_a˘ive
);

4348 
m
->
mDNS_ªíå™cy
++;

4349 
m
->
	`MaöCÆlback
(m, 
mSètus_GrowCache
);

4350 
m
->
mDNS_ªíå™cy
--;

4356 i‡(!
m
->
ºˇche_‰ì
)

4358 #i‡
MDNS_DEBUGMSGS


4359 
mDNSu32
 
ﬁdtŸÆu£d
 = 
m
->
ºˇche_tŸÆu£d
;

4361 
mDNSu32
 
¶Ÿ
;

4362 
¶Ÿ
 = 0; slŸ < 
CACHE_HASH_SLOTS
; slot++)

4364 
CacheGroup
 **
˝
 = &
m
->
ºˇche_hash
[
¶Ÿ
];

4365 *
˝
)

4367 
CacheRec‹d
 **
Ω
 = &(*
˝
)->
membîs
;

4368 *
Ω
)

4372 i‡((*
Ω
)->
CRA˘iveQue°i⁄
 || (*Ω)->
NextInCFLi°
)

4373 
Ω
=&(*Ω)->
√xt
;

4376 
CacheRec‹d
 *
º
 = *
Ω
;

4377 *
Ω
 = (*Ω)->
√xt
;

4378 
	`Rñó£CacheRec‹d
(
m
, 
º
);

4381 i‡((*
˝
)->
ºˇche_èû
 !
Ω
)

4382 
	`vîbo£debugf
("GëFªeCacheRR: Upd©ögÑrˇche_èû[%lu] from %∞tÿ%p", 
¶Ÿ
, (*
˝
)->
ºˇche_èû
, 
Ω
);

4383 (*
˝
)->
ºˇche_èû
 = 
Ω
;

4384 i‡((*
˝
)->
membîs
 || (*˝)==
Pª£rveCG
Ë˝=&(*˝)->
√xt
;

4385 
	`Rñó£CacheGroup
(
m
, 
˝
);

4388 #i‡
MDNS_DEBUGMSGS


4389 
	`debugf
("CÀ¨ unu£dÑec‹ds; m->ºˇche_tŸÆu£d wa†%lu;Çow %lu", 
ﬁdtŸÆu£d
, 
m
->
ºˇche_tŸÆu£d
);

4393 i‡(
m
->
ºˇche_‰ì
)

4395 
e
 = 
m
->
ºˇche_‰ì
;

4396 
m
->
ºˇche_‰ì
 = 
e
->
√xt
;

4397 i‡(++
m
->
ºˇche_tŸÆu£d
 >m->
ºˇche_ªp‹t
)

4399 
	`debugf
("RR Cachênow usög %ld obje˘s", 
m
->
ºˇche_tŸÆu£d
);

4400 i‡(
m
->
ºˇche_ªp‹t
 < 100) m->rrcache_report += 10;

4401 
m
->
ºˇche_ªp‹t
 += 100;

4403 
	`mDNSPœtf‹mMemZîo
(
e
, (*e));

4406 
m
->
lock_ºˇche
 = 0;

4408 (
e
);

4409 
	}
}

4411 
mDNSloˇl
 
CacheRec‹d
 *
	$GëCacheRec‹d
(
mDNS
 *c⁄° 
m
, 
CacheGroup
 *
cg
, 
mDNSu16
 
RDLígth
)

4413 
CacheRec‹d
 *
r
 = (CacheRec‹d *)
	`GëCacheE¡ôy
(
m
, 
cg
);

4414 i‡(
r
)

4416 
r
->
ª§ec
.
rd©a
 = (
RD©a
*)&r->
rd©a°‹age
;

4417 i‡(
RDLígth
 > 
I∆öeCacheRDSize
)

4419 
r
->
ª§ec
.
rd©a
 = (
RD©a
*)
	`mDNSPœtf‹mMemAŒoˇã
(
sizeofRD©aHódî
 + 
RDLígth
);

4420 i‡(
r
->
ª§ec
.
rd©a
Ër->ª§ec.rd©a->
MaxRDLígth
 =Ñ->ª§ec.
rdÀngth
 = 
RDLígth
;

4421 { 
	`Rñó£CacheE¡ôy
(
m
, (
CacheE¡ôy
*)
r
);Ñ = 
mDNSNULL
; }

4424 (
r
);

4425 
	}
}

4427 
mDNSloˇl
 
CacheGroup
 *
	$GëCacheGroup
(
mDNS
 *c⁄° 
m
, c⁄° 
mDNSu32
 
¶Ÿ
, c⁄° 
Resour˚Rec‹d
 *c⁄° 
º
)

4429 
mDNSu16
 
«mñí
 = 
	`DomaöNameLígth
(
º
->
«me
);

4430 
CacheGroup
 *
cg
 = (CacheGroup*)
	`GëCacheE¡ôy
(
m
, 
mDNSNULL
);

4431 i‡(!
cg
Ë{ 
	`LogMsg
("GëCacheGroup: FaûedÅÿÆloˇã mem‹y f‹ %##s", 
º
->
«me
->
c
); (
mDNSNULL
); }

4432 
cg
->
√xt
 = 
m
->
ºˇche_hash
[
¶Ÿ
];

4433 
cg
->
«mehash
 = 
º
->namehash;

4434 
cg
->
membîs
 = 
mDNSNULL
;

4435 
cg
->
ºˇche_èû
 = &cg->
membîs
;

4436 
cg
->
«me
 = (
domaö«me
*)cg->
«me°‹age
;

4439 i‡(
«mñí
 > 
I∆öeCacheGroupNameSize
Ë
cg
->
«me
 = 
	`mDNSPœtf‹mMemAŒoˇã
(namelen);

4440 i‡(!
cg
->
«me
)

4442 
	`LogMsg
("GëCacheGroup: FaûedÅÿÆloˇãÇamê°‹agêf‹ %##s", 
º
->
«me
->
c
);

4443 
	`Rñó£CacheE¡ôy
(
m
, (
CacheE¡ôy
*)
cg
);

4444 (
mDNSNULL
);

4446 
	`AssignDomaöName
(
cg
->
«me
, 
º
->name);

4448 i‡(
	`CacheGroupF‹Rec‹d
(
m
, 
¶Ÿ
, 
º
)Ë
	`LogMsg
("GëCacheGroup: AÃódy havêCacheGrou∞f‹ %##s",Ñr->
«me
->
c
);

4449 
m
->
ºˇche_hash
[
¶Ÿ
] = 
cg
;

4450 i‡(
	`CacheGroupF‹Rec‹d
(
m
, 
¶Ÿ
, 
º
Ë!
cg
Ë
	`LogMsg
("GëCacheGroup: NŸ födög CacheGrou∞f‹ %##s",Ñr->
«me
->
c
);

4452 (
cg
);

4453 
	}
}

4455 
mDNSloˇl
 
	$PurgeCacheResour˚Rec‹d
(
mDNS
 *c⁄° 
m
, 
CacheRec‹d
 *
º
)

4462 
º
->
TimeRcvd
 = 
m
->
timíow
 - 
mDNSPœtf‹mO√Sec⁄d
 * 60;

4463 
º
->
U«nswîedQuîõs
 = 
MaxU«nswîedQuîõs
;

4464 
º
->
ª§ec
.
º‹igöÆâl
 = 0;

4465 
	`SëNextCacheCheckTime
(
m
, 
º
);

4466 
	}
}

4468 
mDNSexp‹t
 
mDNSs32
 
	$mDNS_TimeNow
(c⁄° 
mDNS
 *c⁄° 
m
)

4470 
mDNSs32
 
time
;

4471 
	`mDNSPœtf‹mLock
(
m
);

4472 i‡(
m
->
mDNS_busy
)

4474 
	`LogMsg
("mDNS_TimeNow called while holding mDNSÜock. This is incorrect. CodeÖrotected byÜock should just use m->timenow.");

4475 i‡(!
m
->
timíow
Ë
	`LogMsg
("mDNS_TimeNow: m->mDNS_busy i†%ld buàm->timíowÇŸ së", m->
mDNS_busy
);

4478 i‡(
m
->
timíow
Ë
time
 = m->timenow;

4479 
time
 = 
	`mDNS_TimeNow_NoLock
(
m
);

4480 
	`mDNSPœtf‹mU∆ock
(
m
);

4481 (
time
);

4482 
	}
}

4484 
mDNSexp‹t
 
mDNSs32
 
	$mDNS_Execuã
(
mDNS
 *c⁄° 
m
)

4486 
	`mDNS_Lock
(
m
);

4488 i‡(
m
->
timíow
 - m->
NextScheduÀdEvít
 >= 0)

4490 
i
;

4492 
	`vîbo£debugf
("mDNS_Execute");

4493 i‡(
m
->
CuºítQue°i⁄
Ë
	`LogMsg
("mDNS_Execute: ERROR! m->CurrentQuestionálready set");

4496 i‡(
m
->
SuµªssProbes
 && m->
timíow
 - m->SuppressProbes >= 0) m->SuppressProbes = 0;

4499 i‡(
m
->
NumFaûedProbes
 && m->
timíow
 - m->
ProbeFaûTime
 >
mDNSPœtf‹mO√Sec⁄d
 * 10) m->NumFailedProbes = 0;

4502 i‡(
m
->
ºˇche_size
 && m->
timíow
 - m->
NextCacheCheck
 >= 0)

4504 
mDNSu32
 
¶Ÿ
;

4505 
m
->
NextCacheCheck
 = m->
timíow
 + 0x3FFFFFFF;

4506 
¶Ÿ
 = 0; slŸ < 
CACHE_HASH_SLOTS
; slot++)

4508 
CacheGroup
 **
˝
 = &
m
->
ºˇche_hash
[
¶Ÿ
];

4509 *
˝
)

4511 
	`CheckCacheExpú©i⁄
(
m
, *
˝
);

4512 i‡((*
˝
)->
membîs
Ë˝=&(*˝)->
√xt
;

4513 
	`Rñó£CacheGroup
(
m
, 
˝
);

4516 
	`LogO≥øti⁄
("Cachêchecked. Nexàö %ldÅicks", 
m
->
NextCacheCheck
 - m->
timíow
);

4520 
i
=0; 
m
->
NewQue°i⁄s
 && i<1000; i++)

4522 i‡(
m
->
NewQue°i⁄s
->
DñayAnswîög
 && m->
timíow
 - m->NewQuestions->DelayAnswering < 0) ;

4523 
	`AnswîNewQue°i⁄
(
m
);

4525 i‡(
i
 >1000Ë
	`LogMsg
("mDNS_Execute: AnswerNewQuestionÉxceededÜoopÜimit");

4527 
i
=0; 
m
->
NewLoˇlO∆yQue°i⁄s
 && i<1000; i++Ë
	`AnswîNewLoˇlO∆yQue°i⁄
(m);

4528 i‡(
i
 >1000Ë
	`LogMsg
("mDNS_Execute: AnswerNewLocalOnlyQuestionÉxceededÜoopÜimit");

4530 
i
=0; i<1000 && 
m
->
NewLoˇlRec‹ds
 && 
	`LoˇlRec‹dRódy
(m->NewLocalRecords); i++)

4532 
AuthRec‹d
 *
º
 = 
m
->
NewLoˇlRec‹ds
;

4533 
m
->
NewLoˇlRec‹ds
 = m->NewLoˇlRec‹ds->
√xt
;

4534 
	`AnswîLoˇlQue°i⁄s
(
m
, 
º
, 
mDNSåue
);

4536 i‡(
i
 >1000Ë
	`LogMsg
("mDNS_Execute: AnswerForNewLocalRecordsÉxceededÜoopÜimit");

4539 i‡(
m
->
mDNSPœtf‹mSètus
 !
mSètus_NoEº‹
 || m->
SÀïSèã
Ë
	`DisˇrdDîegi°øti⁄s
(m);

4540 i‡(
m
->
SuµªssSídög
 =0 || m->
timíow
 - m->SuppressSending >= 0)

4548 
m
->
SuµªssSídög
 = 0;

4551 i‡(
m
->
timíow
 - m->
NextScheduÀdQuîy
 >0 || m->timíow - m->
NextScheduÀdProbe
 >0Ë
	`SídQuîõs
(m);

4552 i‡(
m
->
timíow
 - m->
NextScheduÀdQuîy
 >= 0)

4554 
	`LogMsg
("mDNS_Execute: SendQueries didn't sendáll its queries; willÅryágain in one second");

4555 
m
->
NextScheduÀdQuîy
 = m->
timíow
 + 
mDNSPœtf‹mO√Sec⁄d
;

4557 i‡(
m
->
timíow
 - m->
NextScheduÀdProbe
 >= 0)

4559 
	`LogMsg
("mDNS_Execute: SendQueries didn't sendáll itsÖrobes; willÅryágain in one second");

4560 
m
->
NextScheduÀdProbe
 = m->
timíow
 + 
mDNSPœtf‹mO√Sec⁄d
;

4564 i‡(
m
->
timíow
 - m->
NextScheduÀdRe•⁄£
 >0Ë
	`SídRe•⁄£s
(m);

4565 i‡(
m
->
timíow
 - m->
NextScheduÀdRe•⁄£
 >= 0)

4567 
	`LogMsg
("mDNS_Execute: SendResponses didn't sendáll itsÑesponses; willÅryágain in one second");

4568 
m
->
NextScheduÀdRe•⁄£
 = m->
timíow
 + 
mDNSPœtf‹mO√Sec⁄d
;

4573 
m
->
R™domQuîyDñay
 = 0;

4574 
m
->
R™domRec⁄fúmDñay
 = 0;

4597 #i‚de‡
UNICAST_DISABLED


4598 
	`uDNS_Execuã
(
m
);

4600 
	`mDNS_U∆ock
(
m
);

4601 (
m
->
NextScheduÀdEvít
);

4602 
	}
}

4615 
mDNSexp‹t
 
	$mDNSC‹eMachöeSÀï
(
mDNS
 *c⁄° 
m
, 
mDNSBoﬁ
 
¶ìp°©e
)

4617 
AuthRec‹d
 *
º
;

4619 
	`mDNS_Lock
(
m
);

4621 
m
->
SÀïSèã
 = 
¶ìp°©e
;

4622 
	`LogO≥øti⁄
("%†© %ld", 
¶ìp°©e
 ? "SÀïög" : "Wakög", 
m
->
timíow
);

4624 i‡(
¶ìp°©e
)

4626 #i‚de‡
UNICAST_DISABLED


4627 
	`uDNS_SÀï
(
m
);

4630 
º
 = 
m
->
Resour˚Rec‹ds
;Ñr;ÑrÙr->
√xt
)

4631 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥Sh¨ed
 &&Ñr->
RequúeGoodbye
)

4632 
º
->
ImmedAnswî
 = 
mDNSI¡îÁ˚M¨k
;

4633 
	`SídRe•⁄£s
(
m
);

4637 
DNSQue°i⁄
 *
q
;

4638 
mDNSu32
 
¶Ÿ
;

4639 
CacheGroup
 *
cg
;

4640 
CacheRec‹d
 *
¸
;

4642 #i‚de‡
UNICAST_DISABLED


4643 
	`uDNS_Wake
(
m
);

4646 
q
 = 
m
->
Que°i⁄s
; q; q=q->
√xt
)

4647 i‡(
	`A˘iveQue°i⁄
(
q
))

4649 
q
->
ThisQI¡îvÆ
 = 
InôülQue°i⁄I¡îvÆ
;

4650 
q
->
Reque°Uniˇ°
 = 2;

4651 
q
->
La°QTime
 = 
m
->
timíow
 - q->
ThisQI¡îvÆ
;

4652 
q
->
Re˚¡AnswîPkts
 = 0;

4653 
	`ExpúeDupSuµªssInfo
(
q
->
DupSuµªss
, 
m
->
timíow
);

4654 
m
->
NextScheduÀdQuîy
 = m->
timíow
;

4658 
m
->
NextCacheCheck
 = m->
timíow
;

4659 
	`FORALL_CACHERECORDS
(
¶Ÿ
, 
cg
, 
¸
)

4660 
	`mDNS_Rec⁄fúm_öã∫Æ
(
m
, 
¸
, 
kDeÁu…Rec⁄fúmTimeF‹Wake
);

4663 
º
 = 
m
->
Resour˚Rec‹ds
;Ñr;ÑrÙr->
√xt
)

4665 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥Vîifõd
 && !º->
DïídítOn
Ëº->ª§ec.Rec‹dTy≥ = 
kDNSRec‹dTy≥Unique
;

4666 
º
->
ProbeCou¡
 = 
	`DeÁu…ProbeCou¡F‹Rec‹dTy≥
‘r->
ª§ec
.
Rec‹dTy≥
);

4667 
º
->
A¬oun˚Cou¡
 = 
InôülA¬oun˚Cou¡
;

4668 
º
->
ThisAPI¡îvÆ
 = 
	`DeÁu…API¡îvÆF‹Rec‹dTy≥
‘r->
ª§ec
.
Rec‹dTy≥
);

4669 
	`InôülizeLa°APTime
(
m
, 
º
);

4673 
	`mDNS_U∆ock
(
m
);

4674 
	}
}

4677 #i‡
COMPILER_LIKES_PRAGMA_MARK


4678 #¥agm®
m¨k
 -

4679 #¥agm®
m¨k
 - 
Packë
 
Re˚±i⁄
 
Fun˘i⁄s


4682 
	#Mu°SídRec‹d
(
RR
Ë((RR)->
NR_AnswîTo
 || (RR)->
NR_Addôi⁄ÆTo
)

	)

4684 
mDNSloˇl
 
mDNSu8
 *
	$Gíî©eUniˇ°Re•⁄£
(c⁄° 
DNSMesßge
 *c⁄° 
quîy
, c⁄° 
mDNSu8
 *c⁄° 
íd
,

4685 c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, 
mDNSBoﬁ
 
LegacyQuîy
, 
DNSMesßge
 *c⁄° 
ª•⁄£
, 
AuthRec‹d
 *
Re•⁄£Rec‹ds
)

4687 
mDNSu8
 *
ª•⁄£±r
 = 
ª•⁄£
->
d©a
;

4688 c⁄° 
mDNSu8
 *c⁄° 
limô
 = 
ª•⁄£
->
d©a
 + (response->data);

4689 c⁄° 
mDNSu8
 *
±r
 = 
quîy
->
d©a
;

4690 
AuthRec‹d
 *
º
;

4691 
mDNSu32
 
maxâl
 = 0x70000000;

4692 
i
;

4695 
	`InôülizeDNSMesßge
(&
ª•⁄£
->
h
, 
quîy
->h.
id
, 
Re•⁄£Fœgs
);

4700 i‡(
LegacyQuîy
)

4702 
maxâl
 = 10;

4703 
i
=0; i<
quîy
->
h
.
numQue°i⁄s
; i++)

4705 
DNSQue°i⁄
 
q
;

4706 
±r
 = 
	`gëQue°i⁄
(
quîy
,Öå, 
íd
, 
I¡îÁ˚ID
, &
q
);

4707 i‡(!
±r
Ë(
mDNSNULL
);

4709 
º
=
Re•⁄£Rec‹ds
;Ñr;ÑrÙr->
NextRe•⁄£
)

4711 i‡(
º
->
NR_AnswîTo
 =
±r
)

4713 
ª•⁄£±r
 = 
	`putQue°i⁄
(
ª•⁄£
,Ñe•⁄£±r, 
limô
, &
q
.
q«me
, q.
qty≥
, q.
q˛ass
);

4714 i‡(!
ª•⁄£±r
Ë{ 
	`debugf
("Gíî©eUniˇ°Re•⁄£: R™ ouào‡•a˚ f‹ que°i⁄s!"); (
mDNSNULL
); }

4720 i‡(
ª•⁄£
->
h
.
numQue°i⁄s
 =0Ë{ 
	`LogMsg
("Gíî©eUniˇ°Re•⁄£: ERROR! WhyÇÿque°i⁄s?"); (
mDNSNULL
); }

4726 
º
=
Re•⁄£Rec‹ds
;Ñr;ÑrÙr->
NextRe•⁄£
)

4727 i‡(
º
->
NR_AnswîTo
)

4729 
mDNSu8
 *
p
 = 
	`PutResour˚Rec‹dC≠≥dTTL
(
ª•⁄£
, 
ª•⁄£±r
, &ª•⁄£->
h
.
numAnswîs
, &
º
->
ª§ec
, 
maxâl
);

4730 i‡(
p
Ë
ª•⁄£±r
 =Ö;

4731 { 
	`debugf
("Gíî©eUniˇ°Re•⁄£: R™ ouào‡•a˚ f‹ánswîs!"); 
ª•⁄£
->
h
.
Êags
.
b
[0] |
kDNSFœg0_TC
; }

4737 
º
=
Re•⁄£Rec‹ds
;Ñr;ÑrÙr->
NextRe•⁄£
)

4738 i‡(
º
->
NR_Addôi⁄ÆTo
 && !º->
NR_AnswîTo
)

4740 
mDNSu8
 *
p
 = 
	`PutResour˚Rec‹dC≠≥dTTL
(
ª•⁄£
, 
ª•⁄£±r
, &ª•⁄£->
h
.
numAddôi⁄Æs
, &
º
->
ª§ec
, 
maxâl
);

4741 i‡(
p
Ë
ª•⁄£±r
 =Ö;

4742 
	`debugf
("GenerateUnicastResponse: No more space forádditionals");

4745 (
ª•⁄£±r
);

4746 
	}
}

4753 
mDNSloˇl
 
	$Com∑ªRD©a
(
AuthRec‹d
 *
our
, 
CacheRec‹d
 *
pkt
)

4755 
mDNSu8
 
ourd©a
[256], *
ouΩå
 = ourd©a, *
ouªnd
;

4756 
mDNSu8
 
pktd©a
[256], *
pkçå
 =Öktd©a, *
pkãnd
;

4757 i‡(!
our
Ë{ 
	`LogMsg
("CompareRData ERROR: our is NULL"); (+1); }

4758 i‡(!
pkt
Ë{ 
	`LogMsg
("CompareRData ERROR:Ökt is NULL"); (+1); }

4760 
ouªnd
 = 
	`putRD©a
(
mDNSNULL
, 
ourd©a
, ourd©®+ (ourd©a), &
our
->
ª§ec
);

4761 
pkãnd
 = 
	`putRD©a
(
mDNSNULL
, 
pktd©a
,Öktd©®+ ’ktd©a), &
pkt
->
ª§ec
);

4762 
ouΩå
 < 
ouªnd
 && 
pkçå
 < 
pkãnd
 && *ourptr == *pktptr) { ourptr++;Öktptr++; }

4763 i‡(
ouΩå
 >
ouªnd
 && 
pkçå
 >
pkãnd
) (0);

4765 i‡(
ouΩå
 >
ouªnd
) (-1);

4766 i‡(
pkçå
 >
pkãnd
) (+1);

4767 i‡(*
pkçå
 > *
ouΩå
) (-1);

4768 i‡(*
pkçå
 < *
ouΩå
) (+1);

4770 
	`LogMsg
("CompareRData ERROR: Invalid state");

4772 
	}
}

4783 
mDNSloˇl
 
mDNSBoﬁ
 
	$M©chDïídítOn
(c⁄° 
mDNS
 *c⁄° 
m
, c⁄° 
CacheRec‹d
 *c⁄° 
pkår
, c⁄° 
AuthRec‹d
 *c⁄° 
ma°î
)

4785 c⁄° 
AuthRec‹d
 *
r1
;

4786 
r1
 = 
m
->
Resour˚Rec‹ds
;Ñ1;Ñ1Ù1->
√xt
)

4788 i‡(
	`IdítiˇlResour˚Rec‹d
(&
r1
->
ª§ec
, &
pkår
->resrec))

4790 c⁄° 
AuthRec‹d
 *
r2
 = 
r1
;

4791 
r2
->
DïídítOn
)Ñ2 =Ñ2->DependentOn;

4792 i‡(
r2
 =
ma°î
Ë(
mDNSåue
);

4795 
r1
 = 
m
->
Du∂iˇãRec‹ds
;Ñ1;Ñ1Ù1->
√xt
)

4797 i‡(
	`IdítiˇlResour˚Rec‹d
(&
r1
->
ª§ec
, &
pkår
->resrec))

4799 c⁄° 
AuthRec‹d
 *
r2
 = 
r1
;

4800 
r2
->
DïídítOn
)Ñ2 =Ñ2->DependentOn;

4801 i‡(
r2
 =
ma°î
Ë(
mDNSåue
);

4804 (
mDNSÁl£
);

4805 
	}
}

4811 
mDNSloˇl
 c⁄° 
AuthRec‹d
 *
	$FödRRSë
(c⁄° 
mDNS
 *c⁄° 
m
, c⁄° 
CacheRec‹d
 *c⁄° 
pkår
)

4813 c⁄° 
AuthRec‹d
 *
º
;

4814 
º
 = 
m
->
Resour˚Rec‹ds
;Ñr;ÑrÙr->
√xt
)

4816 i‡(
	`IdítiˇlResour˚Rec‹d
(&
º
->
ª§ec
, &
pkår
->resrec))

4818 
º
->
RRSë
 &&Ñr !=Ñr->RRSet)Ñr =Ñr->RRSet;

4819 (
º
);

4822 (
mDNSNULL
);

4823 
	}
}

4834 
mDNSloˇl
 
mDNSBoﬁ
 
	$PackëRRC⁄Êi˘
(c⁄° 
mDNS
 *c⁄° 
m
, c⁄° 
AuthRec‹d
 *c⁄° 
our
, c⁄° 
CacheRec‹d
 *c⁄° 
pkår
)

4836 c⁄° 
AuthRec‹d
 *
our£t
 = 
our
->
RRSë
 ? our->RRSet : our;

4839 i‡(!(
our
->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥UniqueMask
)Ë(
mDNSÁl£
);

4842 i‡(
our
->
DïídítOn
 || 
	`M©chDïídítOn
(
m
, 
pkår
, our)Ë(
mDNSÁl£
);

4845 i‡(
	`FödRRSë
(
m
, 
pkår
Ë=
our£t
Ë(
mDNSÁl£
);

4848 (
mDNSåue
);

4849 
	}
}

4854 
mDNSloˇl
 
	$ResﬁveSimu…™eousProbe
(
mDNS
 *c⁄° 
m
, c⁄° 
DNSMesßge
 *c⁄° 
quîy
, c⁄° 
mDNSu8
 *c⁄° 
íd
,

4855 
DNSQue°i⁄
 *
q
, 
AuthRec‹d
 *
our
)

4857 
i
;

4858 c⁄° 
mDNSu8
 *
±r
 = 
	`LoˇãAuth‹ôõs
(
quîy
, 
íd
);

4859 
mDNSBoﬁ
 
FoundUpd©e
 = 
mDNSÁl£
;

4861 
i
 = 0; i < 
quîy
->
h
.
numAuth‹ôõs
; i++)

4863 
±r
 = 
	`GëL¨geResour˚Rec‹d
(
m
, 
quîy
,Öå, 
íd
, 
q
->
I¡îÁ˚ID
, 
kDNSRec‹dTy≥PackëAuth
, &m->
ªc
);

4864 i‡(!
±r
) ;

4865 i‡(
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
m
->
ªc
.
r
.
ª§ec
, 
q
))

4867 
FoundUpd©e
 = 
mDNSåue
;

4868 i‡(
	`PackëRRC⁄Êi˘
(
m
, 
our
, &m->
ªc
.
r
))

4870 
ªsu…
 = ()
our
->
ª§ec
.
º˛ass
 - ()
m
->
ªc
.
r
.resrec.rrclass;

4871 i‡(!
ªsu…
Ëªsu… = ()
our
->
ª§ec
.
ºty≥
 - ()
m
->
ªc
.
r
.resrec.rrtype;

4872 i‡(!
ªsu…
Ëªsu… = 
	`Com∑ªRD©a
(
our
, &
m
->
ªc
.
r
);

4873 i‡(
ªsu…
 > 0)

4874 
	`debugf
("ResﬁveSimu…™eousProbe: %##†(%s): Wêw⁄", 
our
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
(our->ª§ec.
ºty≥
));

4875 i‡(
ªsu…
 < 0)

4877 
	`debugf
("ResﬁveSimu…™eousProbe: %##†(%s): Wêlo°", 
our
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
(our->ª§ec.
ºty≥
));

4878 
	`mDNS_Dîegi°î_öã∫Æ
(
m
, 
our
, 
mDNS_Dîeg_c⁄Êi˘
);

4879 
exô
;

4883 
m
->
ªc
.
r
.
ª§ec
.
Rec‹dTy≥
 = 0;

4885 i‡(!
FoundUpd©e
)

4886 
	`debugf
("ResﬁveSimu…™eousProbe: %##†(%s): NÿUpd©êRec‹d found", 
our
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
(our->ª§ec.
ºty≥
));

4887 
exô
:

4888 
m
->
ªc
.
r
.
ª§ec
.
Rec‹dTy≥
 = 0;

4889 
	}
}

4891 
mDNSloˇl
 
CacheRec‹d
 *
	$FödIdítiˇlRec‹dInCache
(c⁄° 
mDNS
 *c⁄° 
m
, 
Resour˚Rec‹d
 *
pkår
)

4893 
mDNSu32
 
¶Ÿ
 = 
	`HashSlŸ
(
pkår
->
«me
);

4894 
CacheGroup
 *
cg
 = 
	`CacheGroupF‹Rec‹d
(
m
, 
¶Ÿ
, 
pkår
);

4895 
CacheRec‹d
 *
º
;

4896 
º
 = 
cg
 ? cg->
membîs
 : 
mDNSNULL
;Ñr;ÑrÙr->
√xt
)

4897 i‡(
pkår
->
I¡îÁ˚ID
 =
º
->
ª§ec
.I¡îÁ˚ID && 
	`IdítiˇlResour˚Rec‹d
(pktrr, &rr->resrec)) ;

4898 (
º
);

4899 
	}
}

4902 
mDNSloˇl
 
mDNSu8
 *
	$Pro˚ssQuîy
(
mDNS
 *c⁄° 
m
, c⁄° 
DNSMesßge
 *c⁄° 
quîy
, c⁄° 
mDNSu8
 *c⁄° 
íd
,

4903 c⁄° 
mDNSAddr
 *
§ˇddr
, c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, 
mDNSBoﬁ
 
LegacyQuîy
, mDNSBoﬁ 
QuîyWasMu…iˇ°
,

4904 
mDNSBoﬁ
 
QuîyWasLoˇlUniˇ°
, 
DNSMesßge
 *c⁄° 
ª•⁄£
)

4906 
mDNSBoﬁ
 
FromLoˇlSub√t
 = 
	`AddªssIsLoˇlSub√t
(
m
, 
I¡îÁ˚ID
, 
§ˇddr
);

4907 
AuthRec‹d
 *
Re•⁄£Rec‹ds
 = 
mDNSNULL
;

4908 
AuthRec‹d
 **
ƒp
 = &
Re•⁄£Rec‹ds
;

4909 
CacheRec‹d
 *
Ex≥˘edAnswîs
 = 
mDNSNULL
;

4910 
CacheRec‹d
 **
óp
 = &
Ex≥˘edAnswîs
;

4911 
DNSQue°i⁄
 *
DupQue°i⁄s
 = 
mDNSNULL
;

4912 
DNSQue°i⁄
 **
dqp
 = &
DupQue°i⁄s
;

4913 
mDNSs32
 
dñayª•⁄£
 = 0;

4914 
mDNSBoﬁ
 
SídLegacyRe•⁄£
 = 
mDNSÁl£
;

4915 c⁄° 
mDNSu8
 *
±r
 = 
quîy
->
d©a
;

4916 
mDNSu8
 *
ª•⁄£±r
 = 
mDNSNULL
;

4917 
AuthRec‹d
 *
º
;

4918 
i
;

4923 
i
=0; i<
quîy
->
h
.
numQue°i⁄s
; i++)

4925 
mDNSBoﬁ
 
Que°i⁄NìdsMu…iˇ°Re•⁄£
;

4926 
NumAnswîsF‹ThisQue°i⁄
 = 0;

4927 
DNSQue°i⁄
 
pktq
, *
q
;

4928 
±r
 = 
	`gëQue°i⁄
(
quîy
,Öå, 
íd
, 
I¡îÁ˚ID
, &
pktq
);

4929 i‡(!
±r
Ë
exô
;

4940 
Que°i⁄NìdsMu…iˇ°Re•⁄£
 = 
QuîyWasMu…iˇ°
 && !
LegacyQuîy
 && !(
pktq
.
q˛ass
 & 
kDNSQCœss_Uniˇ°Re•⁄£
);

4942 
pktq
.
q˛ass
 &~
kDNSQCœss_Uniˇ°Re•⁄£
;

4949 i‡(
m
->
CuºítRec‹d
Ë
	`LogMsg
("ProcessQuery ERROR m->CurrentRecordálready set");

4950 
m
->
CuºítRec‹d
 = m->
Resour˚Rec‹ds
;

4951 
m
->
CuºítRec‹d
)

4953 
º
 = 
m
->
CuºítRec‹d
;

4954 
m
->
CuºítRec‹d
 = 
º
->
√xt
;

4955 i‡(
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
º
->
ª§ec
, &
pktq
Ë&& (
QuîyWasMu…iˇ°
 || 
QuîyWasLoˇlUniˇ°
 ||Ñr->
AŒowRemŸeQuîy
))

4957 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥Unique
)

4958 
	`ResﬁveSimu…™eousProbe
(
m
, 
quîy
, 
íd
, &
pktq
, 
º
);

4959 i‡(
	`Resour˚Rec‹dIsVÆidAnswî
(
º
))

4961 
NumAnswîsF‹ThisQue°i⁄
++;

4969 i‡(
Que°i⁄NìdsMu…iˇ°Re•⁄£
 || (!
FromLoˇlSub√t
 && 
QuîyWasMu…iˇ°
 && !
LegacyQuîy
))

4974 i‡(
m
->
timíow
 - (
º
->
La°MCTime
 + 
mDNSPœtf‹mO√Sec⁄d
) >= 0 ||

4975 (
º
->
La°MCI¡îÁ˚
 !
mDNSI¡îÁ˚M¨k
 &&Ñr->La°MCI¡îÁ˚ !
I¡îÁ˚ID
))

4976 
º
->
NR_AnswîTo
 = (
mDNSu8
*)~0;

4978 i‡(!
º
->
NR_AnswîTo
Ëº->NR_AnswîTÿ
LegacyQuîy
 ? 
±r
 : (
mDNSu8
*)~1;

4985 i‡(
NumAnswîsF‹ThisQue°i⁄
 =0Ë
dñayª•⁄£
 = 
mDNSPœtf‹mO√Sec⁄d
;

4990 i‡(
Que°i⁄NìdsMu…iˇ°Re•⁄£
)

4992 c⁄° 
mDNSu32
 
¶Ÿ
 = 
	`HashSlŸ
(&
pktq
.
q«me
);

4993 
CacheGroup
 *
cg
 = 
	`CacheGroupF‹Name
(
m
, 
¶Ÿ
, 
pktq
.
q«mehash
, &pktq.
q«me
);

4994 
CacheRec‹d
 *
º
;

4998 
º
 = 
cg
 ? cg->
membîs
 : 
mDNSNULL
;Ñr;ÑrÙr->
√xt
)

4999 i‡(
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
º
->
ª§ec
, &
pktq
Ë&&Ñr->ª§ec.
rdÀngth
 <
SmÆlRec‹dLimô
)

5000 i‡(!
º
->
NextInKALi°
 && 
óp
 != &rr->NextInKAList)

5002 *
óp
 = 
º
;

5003 
óp
 = &
º
->
NextInKALi°
;

5004 i‡(
º
->
MPU«nswîedQ
 =0 || 
m
->
timíow
 -Ñr->
MPLa°U«nswîedQT
 >
mDNSPœtf‹mO√Sec⁄d
)

5009 
º
->
MPU«nswîedQ
++;

5010 
º
->
MPLa°U«nswîedQT
 = 
m
->
timíow
;

5011 
º
->
MPEx≥˘ögKA
 = 
mDNSåue
;

5019 i‡(!(
quîy
->
h
.
Êags
.
b
[0] & 
kDNSFœg0_TC
))

5020 
q
 = 
m
->
Que°i⁄s
; q; q=q->
√xt
)

5021 i‡(!
q
->
T¨gë
.
ty≥
 && 
	`A˘iveQue°i⁄
(qË&& 
m
->
timíow
 - q->
La°QTxTime
 > 
mDNSPœtf‹mO√Sec⁄d
 / 4)

5022 i‡(!
q
->
I¡îÁ˚ID
 || q->InterfaceID == InterfaceID)

5023 i‡(
q
->
NextInDQLi°
 =
mDNSNULL
 && 
dqp
 != &q->NextInDQList)

5024 i‡(
q
->
qty≥
 =
pktq
.qtype &&

5025 
q
->
q˛ass
 =
pktq
.qclass &&

5026 
q
->
q«mehash
 =
pktq
.q«mehash && 
	`SameDomaöName
(&q->
q«me
, &pktq.qname))

5027 { *
dqp
 = 
q
; dq∞&q->
NextInDQLi°
; }

5034 
º
 = 
m
->
Resour˚Rec‹ds
;Ñr;ÑrÙr->
√xt
)

5035 i‡(
º
->
NR_AnswîTo
)

5036 
	`AddRec‹dToRe•⁄£Li°
(&
ƒp
, 
º
, 
mDNSNULL
);

5041 
	`AddAddôi⁄ÆsToRe•⁄£Li°
(
m
, 
Re•⁄£Rec‹ds
, &
ƒp
, 
I¡îÁ˚ID
);

5046 
i
=0; i<
quîy
->
h
.
numAnswîs
; i++)

5049 
AuthRec‹d
 *
º
;

5050 
CacheRec‹d
 *
ourˇchîr
;

5051 
±r
 = 
	`GëL¨geResour˚Rec‹d
(
m
, 
quîy
,Öå, 
íd
, 
I¡îÁ˚ID
, 
kDNSRec‹dTy≥PackëAns
, &m->
ªc
);

5052 i‡(!
±r
Ë
exô
;

5055 
º
=
Re•⁄£Rec‹ds
;Ñr;ÑrÙr->
NextRe•⁄£
)

5056 i‡(
	`Mu°SídRec‹d
(
º
Ë&& 
	`ShouldSuµªssKnownAnswî
(&
m
->
ªc
.
r
,Ñr))

5057 { 
º
->
NR_AnswîTo
 = 
mDNSNULL
;Ñr->
NR_Addôi⁄ÆTo
 = mDNSNULL; }

5060 
º
=
m
->
Resour˚Rec‹ds
;Ñr;ÑrÙr->
√xt
)

5063 i‡(
º
->
ImmedAnswî
 =
I¡îÁ˚ID
 && 
	`ShouldSuµªssKnownAnswî
(&
m
->
ªc
.
r
,Ñr))

5065 i‡(
§ˇddr
->
ty≥
 =
mDNSAddrTy≥_IPv4
)

5067 i‡(
	`mDNSSameIPv4Addªss
(
º
->
v4Reque°î
, 
§ˇddr
->
ù
.
v4
)Ëº->v4Reque°î = 
zîov4Addr
;

5069 i‡(
§ˇddr
->
ty≥
 =
mDNSAddrTy≥_IPv6
)

5071 i‡(
	`mDNSSameIPv6Addªss
(
º
->
v6Reque°î
, 
§ˇddr
->
ù
.
v6
)Ëº->v6Reque°î = 
zîov6Addr
;

5073 i‡(
	`mDNSIPv4AddªssIsZîo
(
º
->
v4Reque°î
Ë&& 
	`mDNSIPv6AddªssIsZîo
‘r->
v6Reque°î
))

5075 
º
->
ImmedAnswî
 = 
mDNSNULL
;

5076 
º
->
ImmedUniˇ°
 = 
mDNSÁl£
;

5077 #i‡
MDNS_LOG_ANSWER_SUPPRESSION_TIMES


5078 
	`LogMsg
("Suµªs£dá·î%4d: %s", 
m
->
timíow
 - 
º
->
ImmedAnswîM¨kTime
, 
	`ARDi•œySåög
(m,Ñr));

5086 
ourˇchîr
 = 
	`FödIdítiˇlRec‹dInCache
(
m
, &m->
ªc
.
r
.
ª§ec
);

5087 i‡(
ourˇchîr
 && ourˇchîr->
MPEx≥˘ögKA
 && 
m
->
timíow
 - ourˇchîr->
MPLa°U«nswîedQT
 < 
mDNSPœtf‹mO√Sec⁄d
)

5089 
ourˇchîr
->
MPU«nswîedKA
++;

5090 
ourˇchîr
->
MPEx≥˘ögKA
 = 
mDNSÁl£
;

5096 
óp
 = &
Ex≥˘edAnswîs
;

5097 *
óp
)

5099 
CacheRec‹d
 *
º
 = *
óp
;

5100 i‡(
º
->
ª§ec
.
I¡îÁ˚ID
 =I¡îÁ˚ID && 
	`IdítiˇlResour˚Rec‹d
(&
m
->
ªc
.
r
.resrec, &rr->resrec))

5101 { *
óp
 = 
º
->
NextInKALi°
;Ñr->NextInKALi° = 
mDNSNULL
; }

5102 
óp
 = &
º
->
NextInKALi°
;

5106 i‡(!
ourˇchîr
)

5108 
dqp
 = &
DupQue°i⁄s
;

5109 *
dqp
)

5111 
DNSQue°i⁄
 *
q
 = *
dqp
;

5112 i‡(
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
m
->
ªc
.
r
.
ª§ec
, 
q
))

5113 { *
dqp
 = 
q
->
NextInDQLi°
; q->NextInDQLi° = 
mDNSNULL
; }

5114 
dqp
 = &
q
->
NextInDQLi°
;

5117 
m
->
ªc
.
r
.
ª§ec
.
Rec‹dTy≥
 = 0;

5123 
º
=
Re•⁄£Rec‹ds
;Ñr;ÑrÙr->
NextRe•⁄£
)

5124 i‡(
º
->
NR_Addôi⁄ÆTo
 && !
	`Mu°SídRec‹d
(rr->NR_AdditionalTo))

5125 { 
º
->
NR_AnswîTo
 = 
mDNSNULL
;Ñr->
NR_Addôi⁄ÆTo
 = mDNSNULL; }

5130 
º
=
Re•⁄£Rec‹ds
;Ñr;ÑrÙr->
NextRe•⁄£
)

5132 i‡(
º
->
NR_AnswîTo
)

5134 
mDNSBoﬁ
 
SídMu…iˇ°Re•⁄£
 = 
mDNSÁl£
;

5135 
mDNSBoﬁ
 
SídUniˇ°Re•⁄£
 = 
mDNSÁl£
;

5138 i‡(
m
->
timíow
 - (
º
->
La°MCTime
 + 
	`TicksTTL
(rr)/4) >= 0)

5140 
SídMu…iˇ°Re•⁄£
 = 
mDNSåue
;

5144 i‡(
º
->
NR_AnswîTo
 =(
mDNSu8
*)~1)Ñr->NR_AnswerTo = (mDNSu8*)~0;

5148 i‡(
º
->
NR_AnswîTo
 =(
mDNSu8
*)~0Ë
SídMu…iˇ°Re•⁄£
 = 
mDNSåue
;

5149 i‡(
º
->
NR_AnswîTo
 =(
mDNSu8
*)~1Ë
SídUniˇ°Re•⁄£
 = 
mDNSåue
;

5150 i‡(
º
->
NR_AnswîTo
Ë
SídLegacyRe•⁄£
 = 
mDNSåue
;

5152 i‡(
SídMu…iˇ°Re•⁄£
 || 
SídUniˇ°Re•⁄£
)

5154 #i‡
MDNS_LOG_ANSWER_SUPPRESSION_TIMES


5155 
º
->
ImmedAnswîM¨kTime
 = 
m
->
timíow
;

5157 
m
->
NextScheduÀdRe•⁄£
 = m->
timíow
;

5159 i‡(
º
->
ImmedAnswî
 &&Ñr->ImmedAnswî !
I¡îÁ˚ID
)

5160 
º
->
ImmedAnswî
 = 
mDNSI¡îÁ˚M¨k
;

5163 
º
->
ImmedAnswî
 = 
I¡îÁ˚ID
;

5164 i‡(
SídUniˇ°Re•⁄£
Ë
º
->
ImmedUniˇ°
 = 
mDNSåue
;

5165 i‡(
§ˇddr
->
ty≥
 =
mDNSAddrTy≥_IPv4
)

5167 i‡(
	`mDNSIPv4AddªssIsZîo
(
º
->
v4Reque°î
)Ëº->v4Reque°î = 
§ˇddr
->
ù
.
v4
;

5168 i‡(!
	`mDNSSameIPv4Addªss
(
º
->
v4Reque°î
, 
§ˇddr
->
ù
.
v4
)Ëº->v4Reque°î = 
⁄esIPv4Addr
;

5170 i‡(
§ˇddr
->
ty≥
 =
mDNSAddrTy≥_IPv6
)

5172 i‡(
	`mDNSIPv6AddªssIsZîo
(
º
->
v6Reque°î
)Ëº->v6Reque°î = 
§ˇddr
->
ù
.
v6
;

5173 i‡(!
	`mDNSSameIPv6Addªss
(
º
->
v6Reque°î
, 
§ˇddr
->
ù
.
v6
)Ëº->v6Reque°î = 
⁄esIPv6Addr
;

5181 i‡(
quîy
->
h
.
Êags
.
b
[0] & 
kDNSFœg0_TC
Ë
dñayª•⁄£
 = 
mDNSPœtf‹mO√Sec⁄d
 * 20;

5182 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥Sh¨ed
Ë
dñayª•⁄£
 = 
mDNSPœtf‹mO√Sec⁄d
;

5184 i‡(
º
->
NR_Addôi⁄ÆTo
 &&Ñr->NR_Addôi⁄ÆTo->
NR_AnswîTo
 =(
mDNSu8
*)~0)

5189 
º
->
ImmedAddôi⁄Æ
 = 
I¡îÁ˚ID
;

5198 i‡(
dñayª•⁄£
 && (!
m
->
SuµªssSídög
 || (m->SuµªssSídög - m->
timíow
) < (delayresponse + 49) / 50))

5200 #i‡
MDNS_LOG_ANSWER_SUPPRESSION_TIMES


5201 
mDNSs32
 
ﬁdss
 = 
m
->
SuµªssSídög
;

5202 i‡(
ﬁdss
 && 
dñayª•⁄£
)

5203 
	`LogMsg
("CuºíàSuµªssSídög dñay%5ld;Ñequúe%5ld", 
m
->
SuµªssSídög
 - m->
timíow
, (
dñayª•⁄£
 + 49) / 50);

5218 
m
->
SuµªssSídög
 = m->
timíow
 + (
dñayª•⁄£
 + (
mDNSs32
)
	`mDNSR™dom
((
mDNSu32
)
mDNSPœtf‹mO√Sec⁄d
*5) + 49) / 50;

5219 i‡(
m
->
SuµªssSídög
 == 0) m->SuppressSending = 1;

5220 #i‡
MDNS_LOG_ANSWER_SUPPRESSION_TIMES


5221 i‡(
ﬁdss
 && 
dñayª•⁄£
)

5222 
	`LogMsg
("Së SuµªssSídögÅÿ %5ld", 
m
->
SuµªssSídög
 - m->
timíow
);

5229 i‡(
SídLegacyRe•⁄£
)

5230 
ª•⁄£±r
 = 
	`Gíî©eUniˇ°Re•⁄£
(
quîy
, 
íd
, 
I¡îÁ˚ID
, 
LegacyQuîy
, 
ª•⁄£
, 
Re•⁄£Rec‹ds
);

5232 
exô
:

5233 
m
->
ªc
.
r
.
ª§ec
.
Rec‹dTy≥
 = 0;

5238 
Re•⁄£Rec‹ds
)

5240 
º
 = 
Re•⁄£Rec‹ds
;

5241 
Re•⁄£Rec‹ds
 = 
º
->
NextRe•⁄£
;

5242 
º
->
NextRe•⁄£
 = 
mDNSNULL
;

5243 
º
->
NR_AnswîTo
 = 
mDNSNULL
;

5244 
º
->
NR_Addôi⁄ÆTo
 = 
mDNSNULL
;

5247 
Ex≥˘edAnswîs
)

5249 
CacheRec‹d
 *
º
;

5250 
º
 = 
Ex≥˘edAnswîs
;

5251 
Ex≥˘edAnswîs
 = 
º
->
NextInKALi°
;

5252 
º
->
NextInKALi°
 = 
mDNSNULL
;

5256 i‡(!(
quîy
->
h
.
Êags
.
b
[0] & 
kDNSFœg0_TC
))

5257 i‡(
º
->
U«nswîedQuîõs
 =0 || 
m
->
timíow
 -Ñr->
La°U«nswîedTime
 >
mDNSPœtf‹mO√Sec⁄d
)

5259 
º
->
U«nswîedQuîõs
++;

5260 
º
->
La°U«nswîedTime
 = 
m
->
timíow
;

5261 i‡(
º
->
U«nswîedQuîõs
 > 1)

5262 
	`debugf
("ProcessQuery: (!TC) UAQ %lu MPQ %lu MPKA %lu %s",

5263 
º
->
U«nswîedQuîõs
,Ñr->
MPU«nswîedQ
,Ñr->
MPU«nswîedKA
, 
	`CRDi•œySåög
(
m
,Ñr));

5264 
	`SëNextCacheCheckTime
(
m
, 
º
);

5269 i‡(
º
->
U«nswîedQuîõs
 >
MaxU«nswîedQuîõs
)

5272 i‡(
	`RRExpúeTime
(
º
Ë- 
m
->
timíow
 > 4 * 
mDNSPœtf‹mO√Sec⁄d
)

5273 
	`debugf
("ProcessQuery: (Max) UAQ %lu MPQ %lu MPKA %lu mDNS_Reconfirm() for %s",

5274 
º
->
U«nswîedQuîõs
,Ñr->
MPU«nswîedQ
,Ñr->
MPU«nswîedKA
, 
	`CRDi•œySåög
(
m
,Ñr));

5275 
	`mDNS_Rec⁄fúm_öã∫Æ
(
m
, 
º
, 
kDeÁu…Rec⁄fúmTimeF‹NoAnswî
);

5280 i‡(
º
->
MPU«nswîedQ
 * 4 >Ñr->
MPU«nswîedKA
 * 5 + 8)

5288 
mDNSu32
 
ªmaö
 = (mDNSu32)(
	`RRExpúeTime
(
º
Ë- 
m
->
timíow
) / 4;

5289 i‡(
ªmaö
 > 240 * (
mDNSu32
)
mDNSPœtf‹mO√Sec⁄d
)

5290 
ªmaö
 = 240 * (
mDNSu32
)
mDNSPœtf‹mO√Sec⁄d
;

5293 i‡(
	`RRExpúeTime
(
º
Ë- 
m
->
timíow
 > 4 * 
mDNSPœtf‹mO√Sec⁄d
)

5294 
	`debugf
("ProcessQuery: (MPQ) UAQ %lu MPQ %lu MPKA %lu mDNS_Reconfirm() for %s",

5295 
º
->
U«nswîedQuîõs
,Ñr->
MPU«nswîedQ
,Ñr->
MPU«nswîedKA
, 
	`CRDi•œySåög
(
m
,Ñr));

5297 i‡(
ªmaö
 <60 * (
mDNSu32
)
mDNSPœtf‹mO√Sec⁄d
)

5298 
º
->
U«nswîedQuîõs
++;

5299 
º
->
MPU«nswîedQ
 = 0;

5300 
º
->
MPU«nswîedKA
 = 0;

5301 
º
->
MPEx≥˘ögKA
 = 
mDNSÁl£
;

5303 i‡(
ªmaö
 < 
kDeÁu…Rec⁄fúmTimeF‹NoAnswî
)

5304 
ªmaö
 = 
kDeÁu…Rec⁄fúmTimeF‹NoAnswî
;

5305 
	`mDNS_Rec⁄fúm_öã∫Æ
(
m
, 
º
, 
ªmaö
);

5309 
DupQue°i⁄s
)

5311 
i
;

5312 
DNSQue°i⁄
 *
q
 = 
DupQue°i⁄s
;

5313 
DupQue°i⁄s
 = 
q
->
NextInDQLi°
;

5314 
q
->
NextInDQLi°
 = 
mDNSNULL
;

5315 
i
 = 
	`Rec‹dDupSuµªssInfo
(
q
->
DupSuµªss
, 
m
->
timíow
, 
I¡îÁ˚ID
, 
§ˇddr
->
ty≥
);

5316 
	`debugf
("Pro˚ssQuîy: Rec‹ded DSI f‹ %##†(%sË⁄ %p/%†%d", 
q
->
q«me
.
c
, 
	`DNSTy≥Name
(q->
qty≥
), 
I¡îÁ˚ID
,

5317 
§ˇddr
->
ty≥
 =
mDNSAddrTy≥_IPv4
 ? "v4" : "v6", 
i
);

5320 (
ª•⁄£±r
);

5321 
	}
}

5323 
mDNSloˇl
 
	$mDNSC‹eRe˚iveQuîy
(
mDNS
 *c⁄° 
m
, c⁄° 
DNSMesßge
 *c⁄° 
msg
, c⁄° 
mDNSu8
 *c⁄° 
íd
,

5324 c⁄° 
mDNSAddr
 *
§ˇddr
, c⁄° 
mDNSIPP‹t
 
§˝‹t
, c⁄° mDNSAdd∏*
d°addr
, mDNSIPP‹à
d°p‹t
,

5325 c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
)

5327 
mDNSu8
 *
ª•⁄£íd
 = 
mDNSNULL
;

5328 
mDNSBoﬁ
 
QuîyWasLoˇlUniˇ°
 = !
	`mDNSAddrIsDNSMu…iˇ°
(
d°addr
Ë&& 
	`AddªssIsLoˇlSub√t
(
m
, 
I¡îÁ˚ID
, 
§ˇddr
);

5330 i‡(!
I¡îÁ˚ID
 && 
	`mDNSAddrIsDNSMu…iˇ°
(
d°addr
))

5332 
	`LogMsg
("Ignoring Query from %#-15a:%-5dÅo %#-15a:%-5d on 0x%p with "

5334 
§ˇddr
, 
	`mDNSVÆ16
(
§˝‹t
), 
d°addr
, mDNSVÆ16(
d°p‹t
), 
I¡îÁ˚ID
,

5335 
msg
->
h
.
numQue°i⁄s
, msg->h.numQuestions == 1 ? ", " : "s,",

5336 
msg
->
h
.
numAnswîs
, msg->h.numAnswers == 1 ? ", " : "s,",

5337 
msg
->
h
.
numAuth‹ôõs
, msg->h.numAuthorities == 1 ? "y, " : "ies,",

5338 
msg
->
h
.
numAddôi⁄Æs
, msg->h.numAdditionals == 1 ? "" : "s");

5342 
	`vîbo£debugf
("Received Query from %#-15a:%-5dÅo %#-15a:%-5d on 0x%p with "

5344 
§ˇddr
, 
	`mDNSVÆ16
(
§˝‹t
), 
d°addr
, mDNSVÆ16(
d°p‹t
), 
I¡îÁ˚ID
,

5345 
msg
->
h
.
numQue°i⁄s
, msg->h.numQuestions == 1 ? ", " : "s,",

5346 
msg
->
h
.
numAnswîs
, msg->h.numAnswers == 1 ? ", " : "s,",

5347 
msg
->
h
.
numAuth‹ôõs
, msg->h.numAuthorities == 1 ? "y, " : "ies,",

5348 
msg
->
h
.
numAddôi⁄Æs
, msg->h.numAdditionals == 1 ? "" : "s");

5350 
ª•⁄£íd
 = 
	`Pro˚ssQuîy
(
m
, 
msg
, 
íd
, 
§ˇddr
, 
I¡îÁ˚ID
,

5351 (
§˝‹t
.
NŸAnI¡egî
 !
Mu…iˇ°DNSP‹t
.NŸAnI¡egî), 
	`mDNSAddrIsDNSMu…iˇ°
(
d°addr
), 
QuîyWasLoˇlUniˇ°
, &
m
->
omsg
);

5353 i‡(
ª•⁄£íd
)

5355 
	`debugf
("Unicast Response: %d Question%s, %d Answer%s, %d Additional%sÅo %#-15a:%d on %p/%ld",

5356 
m
->
omsg
.
h
.
numQue°i⁄s
, m->omsg.h.numQuestions == 1 ? "" : "s",

5357 
m
->
omsg
.
h
.
numAnswîs
, m->omsg.h.numAnswers == 1 ? "" : "s",

5358 
m
->
omsg
.
h
.
numAddôi⁄Æs
, m->omsg.h.numAdditionals == 1 ? "" : "s",

5359 
§ˇddr
, 
	`mDNSVÆ16
(
§˝‹t
), 
I¡îÁ˚ID
, srˇddr->
ty≥
);

5360 
	`mDNSSídDNSMesßge
(
m
, &m->
omsg
, 
ª•⁄£íd
, 
I¡îÁ˚ID
, 
§ˇddr
, 
§˝‹t
, -1, 
mDNSNULL
);

5362 
	}
}

5367 
mDNSloˇl
 
	$mDNSC‹eRe˚iveRe•⁄£
(
mDNS
 *c⁄° 
m
,

5368 c⁄° 
DNSMesßge
 *c⁄° 
ª•⁄£
, c⁄° 
mDNSu8
 *
íd
,

5369 c⁄° 
mDNSAddr
 *
§ˇddr
, c⁄° 
mDNSIPP‹t
 
§˝‹t
, c⁄° mDNSAdd∏*
d°addr
, mDNSIPP‹à
d°p‹t
,

5370 c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
)

5372 
i
;

5375 c⁄° 
mDNSu8
 *
±r
 = 
	`LoˇãAnswîs
(
ª•⁄£
, 
íd
);

5380 
CacheRec‹d
 *
CacheFlushRec‹ds
 = (CacheRecord*)1;

5381 
CacheRec‹d
 **
cÂ
 = &
CacheFlushRec‹ds
;

5386 
tŸÆªc‹ds
 = 
ª•⁄£
->
h
.
numAnswîs
 +Ñe•⁄£->h.
numAuth‹ôõs
 +Ñe•⁄£->h.
numAddôi⁄Æs
;

5388 ()
§ˇddr
;

5389 ()
§˝‹t
;

5390 ()
d°p‹t
;

5392 
	`vîbo£debugf
("Received Response from %#-15aáddressedÅo %#-15a on %p with "

5394 
§ˇddr
, 
d°addr
, 
I¡îÁ˚ID
,

5395 
ª•⁄£
->
h
.
numQue°i⁄s
,Ñesponse->h.numQuestions == 1 ? ", " : "s,",

5396 
ª•⁄£
->
h
.
numAnswîs
,Ñesponse->h.numAnswers == 1 ? ", " : "s,",

5397 
ª•⁄£
->
h
.
numAuth‹ôõs
,Ñesponse->h.numAuthorities == 1 ? "y, " : "ies,",

5398 
ª•⁄£
->
h
.
numAddôi⁄Æs
,Ñesponse->h.numAdditionals == 1 ? "" : "s");

5401 i‡(!
	`mDNSAddrIsDNSMu…iˇ°
(
d°addr
))

5403 i‡(!
	`AddªssIsLoˇlSub√t
(
m
, 
I¡îÁ˚ID
, 
§ˇddr
Ë|| (
mDNSu32
)(m->
timíow
 - m->
Ex≥˘Uniˇ°Re•⁄£
Ë> (mDNSu32)(
mDNSPœtf‹mO√Sec⁄d
*2))

5407 i‡(
ª•⁄£
->
h
.
id
.
NŸAnI¡egî
 !0 || 
§˝‹t
.NŸAnI¡egî !
Mu…iˇ°DNSP‹t
.NotAnInteger)

5411 
i
 = 0; i < 
tŸÆªc‹ds
 && 
±r
 &&Öå < 
íd
; i++)

5413 c⁄° 
mDNSu8
 
Rec‹dTy≥
 = (mDNSu8)((
i
 < 
ª•⁄£
->
h
.
numAnswîs
Ë? 
kDNSRec‹dTy≥PackëAns
 : 
kDNSRec‹dTy≥PackëAdd
);

5414 
±r
 = 
	`GëL¨geResour˚Rec‹d
(
m
, 
ª•⁄£
,Öå, 
íd
, 
I¡îÁ˚ID
, 
Rec‹dTy≥
, &m->
ªc
);

5415 i‡(!
±r
Ë
exô
;

5418 i‡(
m
->
CuºítRec‹d
Ë
	`LogMsg
("mDNSCoreReceiveResponse ERROR m->CurrentRecordálready set");

5419 
m
->
CuºítRec‹d
 = m->
Resour˚Rec‹ds
;

5420 
m
->
CuºítRec‹d
)

5422 
AuthRec‹d
 *
º
 = 
m
->
CuºítRec‹d
;

5423 
m
->
CuºítRec‹d
 = 
º
->
√xt
;

5424 i‡(
	`PackëRRM©chesSig«tuª
(&
m
->
ªc
.
r
, 
º
))

5427 i‡(
m
->
ªc
.
r
.
ª§ec
.
ºty≥
 =
º
->ª§ec.ºty≥ && 
	`SameRD©a
(&m->rec.r.resrec, &rr->resrec))

5430 i‡(
m
->
ªc
.
r
.
ª§ec
.
º‹igöÆâl
 >
º
->ª§ec.º‹igöÆâl/2 || m->
SÀïSèã
)

5433 i‡(
º
->
ImmedAnswî
 =
I¡îÁ˚ID
Ë{Ñr->ImmedAnswî = 
mDNSNULL
;Ñr->
ImmedUniˇ°
 = 
mDNSÁl£
; }

5437 i‡(
º
->
ImmedAnswî
 =
mDNSNULL
Ë{Ñr->ImmedAnswî = 
I¡îÁ˚ID
; 
m
->
NextScheduÀdRe•⁄£
 = m->
timíow
; }

5438 i‡(
º
->
ImmedAnswî
 !
I¡îÁ˚ID
Ë{Ñr->ImmedAnswî = 
mDNSI¡îÁ˚M¨k
; 
m
->
NextScheduÀdRe•⁄£
 = m->
timíow
; }

5442 i‡(
m
->
ªc
.
r
.
ª§ec
.
º‹igöÆâl
 > 0 && 
	`PackëRRC⁄Êi˘
(m, 
º
, &m->rec.r))

5444 
	`debugf
("mDNSC‹eRe˚iveRe•⁄£: Ou∏Rec‹d: %08lX %s", 
º
-> 
ª§ec
.
rd©ahash
, 
	`ARDi•œySåög
(
m
,Ñr));

5445 
	`debugf
("mDNSC‹eRe˚iveRe•⁄£: PkàRec‹d: %08lX %s", 
m
->
ªc
.
r
.
ª§ec
.
rd©ahash
, 
	`CRDi•œySåög
(m, &m->rec.r));

5449 
º
->
DïídítOn
)Ñr =Ñr->DependentOn;

5452 i‡(
º
->
ProbeCou¡
 <
DeÁu…ProbeCou¡F‹Ty≥Unique
)

5455 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥Vîifõd
)

5457 
	`debugf
("mDNSC‹eRe˚iveRe•⁄£: Re£tögÅÿProbög: %##†(%s)", 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

5458 
º
->
ª§ec
.
Rec‹dTy≥
 = 
kDNSRec‹dTy≥Unique
;

5459 
º
->
ProbeCou¡
 = 
DeÁu…ProbeCou¡F‹Ty≥Unique
 + 1;

5460 
º
->
ThisAPI¡îvÆ
 = 
	`DeÁu…API¡îvÆF‹Rec‹dTy≥
(
kDNSRec‹dTy≥Unique
);

5461 
	`InôülizeLa°APTime
(
m
, 
º
);

5462 
	`Rec‹dProbeFaûuª
(
m
, 
º
);

5465 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥Unique
)

5467 
	`debugf
("mDNSC‹eRe˚iveRe•⁄£: Wû»ª«mê%##†(%s)", 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

5468 
	`mDNS_Dîegi°î_öã∫Æ
(
m
, 
º
, 
mDNS_Dîeg_c⁄Êi˘
);

5474 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥KnownUnique
)

5476 
	`debugf
("mDNSCoreReceiveResponse: Unexpected conflict on %##s (%s) -- discarding ourÑecord",

5477 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

5478 
	`mDNS_Dîegi°î_öã∫Æ
(
m
, 
º
, 
mDNS_Dîeg_c⁄Êi˘
);

5481 
	`debugf
("mDNSCoreReceiveResponse: UnexpectedÑecordÅype %X %##s (%s)",

5482 
º
->
ª§ec
.
Rec‹dTy≥
,Ñr->ª§ec.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
));

5489 i‡(
m
->
ªc
.
r
.
ª§ec
.
ºty≥
 =
º
->resrec.rrtype)

5490 i‡((
m
->
ªc
.
r
.
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥PackëUniqueMask
Ë&& m->
timíow
 - 
º
->
La°MCTime
 > 
mDNSPœtf‹mO√Sec⁄d
/2)

5491 { 
º
->
ImmedAnswî
 = 
mDNSI¡îÁ˚M¨k
; 
m
->
NextScheduÀdRe•⁄£
 = m->
timíow
; }

5496 i‡(
m
->
ºˇche_size
)

5498 c⁄° 
mDNSu32
 
¶Ÿ
 = 
	`HashSlŸ
(
m
->
ªc
.
r
.
ª§ec
.
«me
);

5499 
CacheGroup
 *
cg
 = 
	`CacheGroupF‹Rec‹d
(
m
, 
¶Ÿ
, &m->
ªc
.
r
.
ª§ec
);

5500 
CacheRec‹d
 *
º
;

5502 
º
 = 
cg
 ? cg->
membîs
 : 
mDNSNULL
;Ñr;ÑrÙr->
√xt
)

5505 i‡(
º
->
ª§ec
.
I¡îÁ˚ID
 =I¡îÁ˚ID && 
	`IdítiˇlResour˚Rec‹d
(&
m
->
ªc
.
r
.resrec, &rr->resrec))

5507 i‡(
m
->
ªc
.
r
.
ª§ec
.
rdÀngth
 > 
I∆öeCacheRDSize
)

5508 
	`vîbo£debugf
("FoundÑecord size %5d interface %pálready in cache: %s",

5509 
m
->
ªc
.
r
.
ª§ec
.
rdÀngth
, 
I¡îÁ˚ID
, 
	`CRDi•œySåög
(m, &m->rec.r));

5510 
º
->
TimeRcvd
 = 
m
->
timíow
;

5512 i‡(
m
->
ªc
.
r
.
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥PackëUniqueMask
)

5515 i‡(
º
->
NextInCFLi°
 =
mDNSNULL
 && 
cÂ
 != &rr->NextInCFList)

5516 { *
cÂ
 = 
º
; cÂ = &º->
NextInCFLi°
; *cÂ = (
CacheRec‹d
*)1; }

5519 i‡(!(
º
->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥PackëUniqueMask
))

5521 
DNSQue°i⁄
 *
q
;

5522 
q
 = 
m
->
Que°i⁄s
; q; q=q->
√xt
Ëi‡(
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
º
->
ª§ec
, q)Ëq->
UniqueAnswîs
++;

5523 
º
->
ª§ec
.
Rec‹dTy≥
 = 
m
->
ªc
.
r
.resrec.RecordType;

5527 i‡(!
	`mDNSPœtf‹mMemSame
(
m
->
ªc
.
r
.
ª§ec
.
rd©a
->
u
.
d©a
, 
º
->ª§ec.rd©a->u.d©a, m->ªc.r.ª§ec.
rdÀngth
))

5532 
º
->
ª§ec
.
º‹igöÆâl
 = 0;

5533 
º
->
U«nswîedQuîõs
 = 
MaxU«nswîedQuîõs
;

5534 
	`SëNextCacheCheckTime
(
m
, 
º
);

5537 i‡(
m
->
ªc
.
r
.
ª§ec
.
º‹igöÆâl
 > 0)

5539 
º
->
ª§ec
.
º‹igöÆâl
 = 
m
->
ªc
.
r
.resrec.rroriginalttl;

5540 
º
->
U«nswîedQuîõs
 = 0;

5541 
º
->
MPU«nswîedQ
 = 0;

5542 
º
->
MPU«nswîedKA
 = 0;

5543 
º
->
MPEx≥˘ögKA
 = 
mDNSÁl£
;

5544 
	`SëNextCacheCheckTime
(
m
, 
º
);

5554 
º
->
ª§ec
.
º‹igöÆâl
 = 1;

5555 
º
->
U«nswîedQuîõs
 = 
MaxU«nswîedQuîõs
;

5556 
	`SëNextCacheCheckTime
(
m
, 
º
);

5564 i‡(!
º
 && 
m
->
ªc
.
r
.
ª§ec
.
º‹igöÆâl
 > 0)

5567 i‡(!
cg
Ëcg = 
	`GëCacheGroup
(
m
, 
¶Ÿ
, &m->
ªc
.
r
.
ª§ec
);

5568 i‡(
cg
Ë
º
 = 
	`GëCacheRec‹d
(
m
, cg, m->
ªc
.
r
.
ª§ec
.
rdÀngth
);

5569 i‡(!
º
Ë
	`NoCacheAnswî
(
m
, &m->
ªc
.
r
);

5572 
RD©a
 *
ßvïå
 = 
º
->
ª§ec
.
rd©a
;

5573 *
º
 = 
m
->
ªc
.
r
;

5574 
º
->
ª§ec
.
rd©a
 = 
ßvïå
;

5575 
º
->
ª§ec
.
«me
 = 
cg
->name;

5576 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥PackëUniqueMask
)

5577 { *
cÂ
 = 
º
; cÂ = &º->
NextInCFLi°
; *cÂ = (
CacheRec‹d
*)1; }

5579 i‡(
º
->
ª§ec
.
rd©a
 !(
RD©a
*)&º->
rd©a°‹age
 && !(
m
->
ªc
.
r
.ª§ec.
rdÀngth
 > 
I∆öeCacheRDSize
))

5580 
	`LogMsg
("º->ª§ec.rd©®!&º->rd©a°‹agêbuàÀngth <I∆öeCacheRDSizê%##s", 
m
->
ªc
.
r
.
ª§ec
.
«me
->
c
);

5581 i‡(
m
->
ªc
.
r
.
ª§ec
.
rdÀngth
 > 
I∆öeCacheRDSize
)

5582 
	`mDNSPœtf‹mMemC›y
(
m
->
ªc
.
r
.
ª§ec
.
rd©a
, 
º
->ª§ec.rd©a, 
sizeofRD©aHódî
 + m->ªc.r.ª§ec.
rdÀngth
);

5583 
º
->
√xt
 = 
mDNSNULL
;

5584 *(
cg
->
ºˇche_èû
Ë
º
;

5585 
cg
->
ºˇche_èû
 = &(
º
->
√xt
);

5586 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 & 
kDNSRec‹dTy≥PackëUniqueMask
)

5587 
º
->
DñayDñivîy
 = 
m
->
timíow
 + 
mDNSPœtf‹mO√Sec⁄d
;

5589 
º
->
DñayDñivîy
 = 
	`CheckF‹So⁄ToExpúeRec‹ds
(
m
,Ñr->
ª§ec
.
«me
,Ñr->ª§ec.
«mehash
, 
¶Ÿ
);

5590 
	`CacheRec‹dAdd
(
m
, 
º
);

5594 
m
->
ªc
.
r
.
ª§ec
.
Rec‹dTy≥
 = 0;

5597 
exô
:

5598 
m
->
ªc
.
r
.
ª§ec
.
Rec‹dTy≥
 = 0;

5602 
CacheFlushRec‹ds
 !(
CacheRec‹d
*)1)

5604 
CacheRec‹d
 *
r1
 = 
CacheFlushRec‹ds
, *
r2
;

5605 c⁄° 
mDNSu32
 
¶Ÿ
 = 
	`HashSlŸ
(
r1
->
ª§ec
.
«me
);

5606 
CacheGroup
 *
cg
 = 
	`CacheGroupF‹Rec‹d
(
m
, 
¶Ÿ
, &
r1
->
ª§ec
);

5607 
CacheFlushRec‹ds
 = CacheFlushRec‹ds->
NextInCFLi°
;

5608 
r1
->
NextInCFLi°
 = 
mDNSNULL
;

5609 
r2
 = 
cg
 ? cg->
membîs
 : 
mDNSNULL
;Ñ2;Ñ2Ù2->
√xt
)

5610 i‡(
	`SameResour˚Rec‹dSig«tuª
(&
r1
->
ª§ec
, &
r2
->resrec))

5615 i‡(
r2
->
ª§ec
.
º‹igöÆâl
 > 1 && 
m
->
timíow
 -Ñ2->
TimeRcvd
 < 
mDNSPœtf‹mO√Sec⁄d
)

5617 i‡(
r2
->
ª§ec
.
º‹igöÆâl
 !
r1
->resrec.rroriginalttl)

5618 
	`LogMsg
("Correcting TTL from %4dÅo %4d for %s",

5619 
r2
->
ª§ec
.
º‹igöÆâl
, 
r1
->ª§ec.º‹igöÆâl, 
	`CRDi•œySåög
(
m
,Ñ2));

5620 
r2
->
ª§ec
.
º‹igöÆâl
 = 
r1
->resrec.rroriginalttl;

5621 
r2
->
TimeRcvd
 = 
m
->
timíow
;

5625 
	`vîbo£debugf
("CachêÊush %∞X %∞%s", 
r1
, 
r2
, 
	`CRDi•œySåög
(
m
,Ñ2));

5637 
r2
->
ª§ec
.
º‹igöÆâl
 = 1;

5638 
r2
->
TimeRcvd
 = 
m
->
timíow
;

5639 
r2
->
U«nswîedQuîõs
 = 
MaxU«nswîedQuîõs
;

5641 
	`SëNextCacheCheckTime
(
m
, 
r2
);

5643 i‡(
r1
->
DñayDñivîy
)

5646 
r1
->
DñayDñivîy
 = 
	`CheckF‹So⁄ToExpúeRec‹ds
(
m
,Ñ1->
ª§ec
.
«me
,Ñ1->ª§ec.
«mehash
, 
¶Ÿ
);

5647 i‡(!
r1
->
DñayDñivîy
Ë
	`CacheRec‹dDe„ºedAdd
(
m
,Ñ1);

5650 
	}
}

5652 
mDNSexp‹t
 
	$mDNSC‹eRe˚ive
(
mDNS
 *c⁄° 
m
, *c⁄° 
pkt
, c⁄° 
mDNSu8
 *c⁄° 
íd
,

5653 c⁄° 
mDNSAddr
 *c⁄° 
§ˇddr
, c⁄° 
mDNSIPP‹t
 
§˝‹t
, c⁄° mDNSAdd∏*c⁄° 
d°addr
, c⁄° mDNSIPP‹à
d°p‹t
,

5654 c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
)

5656 
DNSMesßge
 *
msg
 = (DNSMesßgê*)
pkt
;

5657 c⁄° 
mDNSu8
 
StdQ
 = 
kDNSFœg0_QR_Quîy
 | 
kDNSFœg0_OP_StdQuîy
;

5658 c⁄° 
mDNSu8
 
StdR
 = 
kDNSFœg0_QR_Re•⁄£
 | 
kDNSFœg0_OP_StdQuîy
;

5659 
mDNSu8
 
QR_OP
;

5660 
mDNSu8
 *
±r
 = 
mDNSNULL
;

5661 c⁄° 
mDNSu8
 
Upd©eR
 = 
kDNSFœg0_QR_Re•⁄£
 | 
kDNSFœg0_OP_Upd©e
;

5663 #i‚de‡
UNICAST_DISABLED


5664 i‡(
§˝‹t
.
NŸAnI¡egî
 =
NATPMPP‹t
.NotAnInteger)

5666 
	`mDNS_Lock
(
m
);

5667 
	`uDNS_Re˚iveNATM≠
(
m
, 
pkt
, (
mDNSu16
)(
íd
 - (
mDNSu8
 *)pkt));

5668 
	`mDNS_U∆ock
(
m
);

5672 i‡(()(
íd
 - (
mDNSu8
 *)
pkt
Ë< (
DNSMesßgeHódî
)Ë{ 
	`LogMsg
("DNS MessageÅoo short"); ; }

5673 
QR_OP
 = (
mDNSu8
)(
msg
->
h
.
Êags
.
b
[0] & 
kDNSFœg0_QROP_Mask
);

5675 
±r
 = (
mDNSu8
 *)&
msg
->
h
.
numQue°i⁄s
;

5676 
msg
->
h
.
numQue°i⁄s
 = (
mDNSu16
)((mDNSu16)
±r
[0] << 8 |Ötr[1]);

5677 
msg
->
h
.
numAnswîs
 = (
mDNSu16
)((mDNSu16)
±r
[2] << 8 |Ötr[3]);

5678 
msg
->
h
.
numAuth‹ôõs
 = (
mDNSu16
)((mDNSu16)
±r
[4] << 8 |Ötr[5]);

5679 
msg
->
h
.
numAddôi⁄Æs
 = (
mDNSu16
)((mDNSu16)
±r
[6] << 8 |Ötr[7]);

5681 i‡(!
m
Ë{ 
	`LogMsg
("mDNSCoreReceive ERROR m is NULL"); ; }

5685 i‡(!
	`mDNSAddªssIsVÆid
(
§ˇddr
)Ë{ 
	`debugf
("mDNSCoreReceive ignoringÖacket from %#a", srcaddr); ; }

5687 
	`mDNS_Lock
(
m
);

5688 
m
->
PktNum
++;

5689 #i‚de‡
UNICAST_DISABLED


5690 i‡(!
	`mDNSAddªssIsAŒDNSLökGroup
(
d°addr
Ë&& (
QR_OP
 =
StdR
 || QR_OP =
Upd©eR
))

5691 
	`uDNS_Re˚iveMsg
(
m
, 
msg
, 
íd
, 
§ˇddr
, 
§˝‹t
, 
d°addr
, 
d°p‹t
, 
I¡îÁ˚ID
);

5694 i‡(
QR_OP
 =
StdQ
Ë
	`mDNSC‹eRe˚iveQuîy
 (
m
, 
msg
, 
íd
, 
§ˇddr
, 
§˝‹t
, 
d°addr
, 
d°p‹t
, 
I¡îÁ˚ID
);

5695 i‡(
QR_OP
 =
StdR
Ë
	`mDNSC‹eRe˚iveRe•⁄£
(
m
, 
msg
, 
íd
, 
§ˇddr
, 
§˝‹t
, 
d°addr
, 
d°p‹t
, 
I¡îÁ˚ID
);

5696 i‡(
QR_OP
 !
Upd©eR
)

5697 
	`LogMsg
("Unknown DNSÖacketÅype %02X%02X from %#-15a:%-5dÅo %#-15a:%-5d on %p (ignored)",

5698 
msg
->
h
.
Êags
.
b
[0], msg->h.Êags.b[1], 
§ˇddr
, 
	`mDNSVÆ16
(
§˝‹t
), 
d°addr
, mDNSVÆ16(
d°p‹t
), 
I¡îÁ˚ID
);

5705 
	`mDNS_U∆ock
(
m
);

5706 
	}
}

5709 #i‡
COMPILER_LIKES_PRAGMA_MARK


5710 #¥agm®
m¨k
 -

5711 #¥agm®
m¨k
 -

5712 #¥agm®
m¨k
 - 
Sórchî
 
Fun˘i⁄s


5715 
	#SameQT¨gë
(
A
,
B
Ë(
	`mDNSSameAddªss
(&(A)->
T¨gë
, &(B)->T¨gëË&& (A)->
T¨gëP‹t
.
NŸAnI¡egî
 =(B)->T¨gëP‹t.NŸAnI¡egî)

	)

5717 
mDNSloˇl
 
DNSQue°i⁄
 *
	$FödDu∂iˇãQue°i⁄
(c⁄° 
mDNS
 *c⁄° 
m
, c⁄° 
DNSQue°i⁄
 *c⁄° 
que°i⁄
)

5719 
DNSQue°i⁄
 *
q
;

5724 
q
 = 
m
->
Que°i⁄s
; q && q !
que°i⁄
; q=q->
√xt
)

5725 i‡(
q
->
I¡îÁ˚ID
 =
que°i⁄
->InterfaceID &&

5726 
	`SameQT¨gë
(
q
, 
que°i⁄
) &&

5727 
q
->
qty≥
 =
que°i⁄
->qtype &&

5728 
q
->
q˛ass
 =
que°i⁄
->qclass &&

5729 
q
->
q«mehash
 =
que°i⁄
->qnamehash &&

5730 
	`SameDomaöName
(&
q
->
q«me
, &
que°i⁄
->qname))

5731 (
q
);

5732 (
mDNSNULL
);

5733 
	}
}

5737 
mDNSloˇl
 
	$Upd©eQue°i⁄Du∂iˇãs
(
mDNS
 *c⁄° 
m
, c⁄° 
DNSQue°i⁄
 *c⁄° 
que°i⁄
)

5739 
DNSQue°i⁄
 *
q
;

5740 
q
 = 
m
->
Que°i⁄s
; q; q=q->
√xt
)

5741 i‡(
q
->
Du∂iˇãOf
 =
que°i⁄
)

5743 
q
->
ThisQI¡îvÆ
 = 
que°i⁄
->ThisQInterval;

5744 
q
->
Reque°Uniˇ°
 = 
que°i⁄
->RequestUnicast;

5745 
q
->
La°QTime
 = 
que°i⁄
->LastQTime;

5746 
q
->
Re˚¡AnswîPkts
 = 0;

5747 
q
->
Du∂iˇãOf
 = 
	`FödDu∂iˇãQue°i⁄
(
m
, q);

5748 
q
->
La°QTxTime
 = 
que°i⁄
->LastQTxTime;

5749 
	`SëNextQuîyTime
(
m
,
q
);

5751 
	}
}

5753 
	#VÆidQue°i⁄T¨gë
(
Q
Ë(((Q)->
T¨gë
.
ty≥
 =
mDNSAddrTy≥_IPv4
 || (Q)->T¨gë.ty≥ =
mDNSAddrTy≥_IPv6
) && \

5754 ((
Q
)->
T¨gëP‹t
.
NŸAnI¡egî
 =
Uniˇ°DNSP‹t
.NŸAnI¡egî || (Q)->T¨gëP‹t.NŸAnI¡egî =
Mu…iˇ°DNSP‹t
.NŸAnI¡egî))

	)

5756 
mDNSloˇl
 
mSètus
 
	$mDNS_SèπQuîy_öã∫Æ
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *c⁄° 
que°i⁄
)

5758 i‡(
que°i⁄
->
T¨gë
.
ty≥
 && !
	`VÆidQue°i⁄T¨gë
(question))

5760 
	`LogMsg
("Warning! Target.type = %ldÖort = %u (Client forgotÅo initialize before calling mDNS_StartQuery?)",

5761 
que°i⁄
->
T¨gë
.
ty≥
, 
	`mDNSVÆ16
(que°i⁄->
T¨gëP‹t
));

5762 
que°i⁄
->
T¨gë
.
ty≥
 = 
mDNSAddrTy≥_N⁄e
;

5765 i‡(!
que°i⁄
->
T¨gë
.
ty≥
)

5767 
que°i⁄
->
T¨gëP‹t
 = 
zîoIPP‹t
;

5768 
que°i⁄
->
T¨gëQID
 = 
zîoID
;

5771 #i‚de‡
UNICAST_DISABLED


5774 i‡(
que°i⁄
->
I¡îÁ˚ID
 =
mDNSI¡îÁ˚_LoˇlO∆y
 || que°i⁄->
F‹˚MCa°
 || 
	`IsLoˇlDomaö
(&que°i⁄->
q«me
))

5775 
que°i⁄
->
uDNS_öfo
.
id
 = 
zîoID
;

5776  
	`uDNS_SèπQuîy
(
m
, 
que°i⁄
);

5778 
que°i⁄
->
uDNS_öfo
.
id
 = 
zîoID
;

5783 i‡(
m
->
ºˇche_size
 == 0)

5784 (
mSètus_NoCache
);

5787 
i
;

5789 
DNSQue°i⁄
 **
q
 = &
m
->
Que°i⁄s
;

5790 i‡(
que°i⁄
->
I¡îÁ˚ID
 =
mDNSI¡îÁ˚_LoˇlO∆y
Ë
q
 = &
m
->
LoˇlO∆yQue°i⁄s
;

5791 *
q
 && *q !
que°i⁄
Ëq=&(*q)->
√xt
;

5793 i‡(*
q
)

5795 
	`LogMsg
("Error! TriedÅoáddá question %##s (%s)Åhat'sálready inÅheáctiveÜist",

5796 
que°i⁄
->
q«me
.
c
, 
	`DNSTy≥Name
(que°i⁄->
qty≥
));

5797 (
mSètus_AÃódyRegi°îed
);

5801 i‡(
que°i⁄
->
I¡îÁ˚ID
 && que°i⁄->I¡îÁ˚ID !
mDNSI¡îÁ˚_LoˇlO∆y
)

5803 
Nëw‹kI¡îÁ˚Info
 *
ötf
;

5804 
ötf
 = 
m
->
Ho°I¡îÁ˚s
; i¡f; i¡‡ötf->
√xt
)

5805 i‡(
ötf
->
I¡îÁ˚ID
 =
que°i⁄
->InterfaceID) ;

5806 i‡(!
ötf
)

5807 
	`LogMsg
("Note: InterfaceID %p for question %##sÇot currently found ináctive interfaceÜist",

5808 
que°i⁄
->
I¡îÁ˚ID
, que°i⁄->
q«me
.
c
);

5811 i‡(!
	`VÆid©eDomaöName
(&
que°i⁄
->
q«me
))

5813 
	`LogMsg
("Aâem±Åÿ°¨àquîy wôh invÆid q«mê%##†(%s)", 
que°i⁄
->
q«me
.
c
, 
	`DNSTy≥Name
(que°i⁄->
qty≥
));

5814 (
mSètus_InvÆid
);

5821 i‡(!
m
->
R™domQuîyDñay
Ëm->R™domQuîyDñay = 1 + (
mDNSs32
)
	`mDNSR™dom
((
mDNSu32
)
InôülQue°i⁄I¡îvÆ
);

5823 
que°i⁄
->
√xt
 = 
mDNSNULL
;

5824 
que°i⁄
->
q«mehash
 = 
	`DomaöNameHashVÆue
(&que°i⁄->
q«me
);

5825 
que°i⁄
->
DñayAnswîög
 = 
	`CheckF‹So⁄ToExpúeRec‹ds
(
m
, &que°i⁄->
q«me
, que°i⁄->
q«mehash
, 
	`HashSlŸ
(&question->qname));

5826 
que°i⁄
->
ThisQI¡îvÆ
 = 
InôülQue°i⁄I¡îvÆ
 * 2;

5827 
que°i⁄
->
Reque°Uniˇ°
 = 2;

5828 
que°i⁄
->
La°QTime
 = 
m
->
timíow
 - m->
R™domQuîyDñay
;

5829 
que°i⁄
->
La°AnswîPktNum
 = 
m
->
PktNum
;

5830 
que°i⁄
->
Re˚¡AnswîPkts
 = 0;

5831 
que°i⁄
->
CuºítAnswîs
 = 0;

5832 
que°i⁄
->
L¨geAnswîs
 = 0;

5833 
que°i⁄
->
UniqueAnswîs
 = 0;

5834 
que°i⁄
->
FœµögI¡îÁ˚
 = 
mDNSNULL
;

5835 
que°i⁄
->
Du∂iˇãOf
 = 
	`FödDu∂iˇãQue°i⁄
(
m
, question);

5836 
que°i⁄
->
NextInDQLi°
 = 
mDNSNULL
;

5837 
i
=0; i<
DupSuµªssInfoSize
; i++)

5838 
que°i⁄
->
DupSuµªss
[
i
].
I¡îÁ˚ID
 = 
mDNSNULL
;

5840 
que°i⁄
->
SídQNow
 = 
mDNSNULL
;

5841 
que°i⁄
->
SídOnAŒ
 = 
mDNSÁl£
;

5842 
que°i⁄
->
La°QTxTime
 = 
m
->
timíow
;

5844 i‡(!
que°i⁄
->
Du∂iˇãOf
)

5845 
	`vîbo£debugf
("mDNS_StartQuery_internal: Question %##s (%s) %p %d (%p) started",

5846 
que°i⁄
->
q«me
.
c
, 
	`DNSTy≥Name
(que°i⁄->
qty≥
), que°i⁄->
I¡îÁ˚ID
,

5847 
que°i⁄
->
La°QTime
 + que°i⁄->
ThisQI¡îvÆ
 - 
m
->
timíow
, question);

5849 
	`vîbo£debugf
("mDNS_StartQuery_internal: Question %##s (%s) %p %d (%p) duplicate of (%p)",

5850 
que°i⁄
->
q«me
.
c
, 
	`DNSTy≥Name
(que°i⁄->
qty≥
), que°i⁄->
I¡îÁ˚ID
,

5851 
que°i⁄
->
La°QTime
 + que°i⁄->
ThisQI¡îvÆ
 - 
m
->
timíow
, que°i⁄, que°i⁄->
Du∂iˇãOf
);

5853 *
q
 = 
que°i⁄
;

5854 i‡(
que°i⁄
->
I¡îÁ˚ID
 =
mDNSI¡îÁ˚_LoˇlO∆y
)

5856 i‡(!
m
->
NewLoˇlO∆yQue°i⁄s
Ëm->NewLoˇlO∆yQue°i⁄†
que°i⁄
;

5860 i‡(!
m
->
NewQue°i⁄s
Ëm->NewQue°i⁄†
que°i⁄
;

5861 
	`SëNextQuîyTime
(
m
,
que°i⁄
);

5864 (
mSètus_NoEº‹
);

5866 
	}
}

5868 
mDNSloˇl
 
mSètus
 
	$mDNS_St›Quîy_öã∫Æ
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *c⁄° 
que°i⁄
)

5870 c⁄° 
mDNSu32
 
¶Ÿ
 = 
	`HashSlŸ
(&
que°i⁄
->
q«me
);

5871 
CacheGroup
 *
cg
 = 
	`CacheGroupF‹Name
(
m
, 
¶Ÿ
, 
que°i⁄
->
q«mehash
, &que°i⁄->
q«me
);

5872 
CacheRec‹d
 *
º
;

5873 
DNSQue°i⁄
 **
q
 = &
m
->
Que°i⁄s
;

5875 i‡(
	`uDNS_IsA˘iveQuîy
(
que°i⁄
, &
m
->
uDNS_öfo
)Ë 
	`uDNS_St›Quîy
(m, question);

5877 i‡(
que°i⁄
->
I¡îÁ˚ID
 =
mDNSI¡îÁ˚_LoˇlO∆y
Ë
q
 = &
m
->
LoˇlO∆yQue°i⁄s
;

5878 *
q
 && *q !
que°i⁄
Ëq=&(*q)->
√xt
;

5879 i‡(*
q
Ë*q = (*q)->
√xt
;

5882 i‡(
que°i⁄
->
ThisQI¡îvÆ
 >= 0)

5883 
	`LogMsg
("mDNS_StopQuery_internal: Question %##s (%s)Çot found ináctiveÜist",

5884 
que°i⁄
->
q«me
.
c
, 
	`DNSTy≥Name
(que°i⁄->
qty≥
));

5885 (
mSètus_BadRe„ªn˚Eº
);

5889 
	`Upd©eQue°i⁄Du∂iˇãs
(
m
, 
que°i⁄
);

5891 
que°i⁄
->
ThisQI¡îvÆ
 = -1;

5895 
º
 = 
cg
 ? cg->
membîs
 : 
mDNSNULL
;Ñr;ÑrÙr->
√xt
)

5897 i‡(
º
->
CRA˘iveQue°i⁄
 =
que°i⁄
)

5899 
DNSQue°i⁄
 *
q
;

5900 
q
 = 
m
->
Que°i⁄s
; q; q=q->
√xt
)

5901 i‡(
	`A˘iveQue°i⁄
(
q
Ë&& 
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
º
->
ª§ec
, q))

5903 
	`vîbo£debugf
("mDNS_StopQuery_internal: Cache RR %##s (%s) setting CRActiveQuestionÅo %p",

5904 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
), 
q
);

5905 
º
->
CRA˘iveQue°i⁄
 = 
q
;

5906 i‡(!
q
Ë
m
->
ºˇche_a˘ive
--;

5912 i‡(
m
->
CuºítQue°i⁄
 =
que°i⁄
)

5914 
	`debugf
("mDNS_StopQuery_internal: Just deletedÅhe currentlyáctive question: %##s (%s)",

5915 
que°i⁄
->
q«me
.
c
, 
	`DNSTy≥Name
(que°i⁄->
qty≥
));

5916 
m
->
CuºítQue°i⁄
 = 
que°i⁄
->
√xt
;

5919 i‡(
m
->
NewQue°i⁄s
 =
que°i⁄
)

5921 
	`debugf
("mDNS_StopQuery_internal: Just deletedáÇew questionÅhat wasn'tÉvenánswered yet: %##s (%s)",

5922 
que°i⁄
->
q«me
.
c
, 
	`DNSTy≥Name
(que°i⁄->
qty≥
));

5923 
m
->
NewQue°i⁄s
 = 
que°i⁄
->
√xt
;

5926 i‡(
m
->
NewLoˇlO∆yQue°i⁄s
 =
que°i⁄
Ëm->NewLoˇlO∆yQue°i⁄†que°i⁄->
√xt
;

5929 
que°i⁄
->
√xt
 = 
mDNSNULL
;

5930 (
mSètus_NoEº‹
);

5931 
	}
}

5933 
mDNSexp‹t
 
mSètus
 
	$mDNS_SèπQuîy
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *c⁄° 
que°i⁄
)

5935 
mSètus
 
°©us
;

5936 
	`mDNS_Lock
(
m
);

5937 
°©us
 = 
	`mDNS_SèπQuîy_öã∫Æ
(
m
, 
que°i⁄
);

5938 
	`mDNS_U∆ock
(
m
);

5939 (
°©us
);

5940 
	}
}

5942 
mDNSexp‹t
 
mSètus
 
	$mDNS_St›Quîy
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *c⁄° 
que°i⁄
)

5944 
mSètus
 
°©us
;

5945 
	`mDNS_Lock
(
m
);

5946 
°©us
 = 
	`mDNS_St›Quîy_öã∫Æ
(
m
, 
que°i⁄
);

5947 
	`mDNS_U∆ock
(
m
);

5948 (
°©us
);

5949 
	}
}

5951 
mDNSexp‹t
 
mSètus
 
	$mDNS_Rec⁄fúm
(
mDNS
 *c⁄° 
m
, 
CacheRec‹d
 *c⁄° 
º
)

5953 
mSètus
 
°©us
;

5954 
	`mDNS_Lock
(
m
);

5955 
°©us
 = 
	`mDNS_Rec⁄fúm_öã∫Æ
(
m
, 
º
, 
kDeÁu…Rec⁄fúmTimeF‹NoAnswî
);

5956 
	`mDNS_U∆ock
(
m
);

5957 (
°©us
);

5958 
	}
}

5960 
mDNSexp‹t
 
mSètus
 
	$mDNS_Rec⁄fúmByVÆue
(
mDNS
 *c⁄° 
m
, 
Resour˚Rec‹d
 *c⁄° 
º
)

5962 
mSètus
 
°©us
 = 
mSètus_BadRe„ªn˚Eº
;

5963 
CacheRec‹d
 *
¸
;

5964 
	`mDNS_Lock
(
m
);

5965 
¸
 = 
	`FödIdítiˇlRec‹dInCache
(
m
, 
º
);

5966 i‡(
¸
Ë
°©us
 = 
	`mDNS_Rec⁄fúm_öã∫Æ
(
m
, cr, 
kDeÁu…Rec⁄fúmTimeF‹NoAnswî
);

5967 
	`mDNS_U∆ock
(
m
);

5968 (
°©us
);

5969 
	}
}

5971 
mDNSexp‹t
 
mSètus
 
	$mDNS_SèπBrow£
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *c⁄° 
que°i⁄
,

5972 c⁄° 
domaö«me
 *c⁄° 
§v
, c⁄° domaö«mê*c⁄° 
domaö
,

5973 c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, 
mDNSBoﬁ
 
F‹˚MCa°
, 
mDNSQue°i⁄CÆlback
 *
CÆlback
, *
C⁄ãxt
)

5975 
que°i⁄
->
I¡îÁ˚ID
 = InterfaceID;

5976 
que°i⁄
->
T¨gë
 = 
zîoAddr
;

5977 
que°i⁄
->
qty≥
 = 
kDNSTy≥_PTR
;

5978 
que°i⁄
->
q˛ass
 = 
kDNSCœss_IN
;

5979 
que°i⁄
->
L⁄gLived
 = 
mDNSÁl£
;

5980 
que°i⁄
->
Ex≥˘Unique
 = 
mDNSÁl£
;

5981 
que°i⁄
->
F‹˚MCa°
 = ForceMCast;

5982 
que°i⁄
->
Que°i⁄CÆlback
 = 
CÆlback
;

5983 
que°i⁄
->
Que°i⁄C⁄ãxt
 = 
C⁄ãxt
;

5984 i‡(!
	`C⁄°ru˘Sîvi˚Name
(&
que°i⁄
->
q«me
, 
mDNSNULL
, 
§v
, 
domaö
)Ë(
mSètus_BadP¨amEº
);

5986 #i‚de‡
UNICAST_DISABLED


5987 i‡(
que°i⁄
->
I¡îÁ˚ID
 =
mDNSI¡îÁ˚_LoˇlO∆y
 || que°i⁄->
F‹˚MCa°
 || 
	`IsLoˇlDomaö
(&que°i⁄->
q«me
))

5989 
que°i⁄
->
L⁄gLived
 = 
mDNSÁl£
;

5990 
que°i⁄
->
uDNS_öfo
.
id
 = 
zîoID
;

5991 (
	`mDNS_SèπQuîy
(
m
, 
que°i⁄
));

5995 
mSètus
 
°©us
;

5997 
	`mDNS_Lock
(
m
);

5998 
que°i⁄
->
L⁄gLived
 = 
mDNSåue
;

5999 
°©us
 = 
	`uDNS_SèπQuîy
(
m
, 
que°i⁄
);

6000 
	`mDNS_U∆ock
(
m
);

6001 (
°©us
);

6004 (
	`mDNS_SèπQuîy
(
m
, 
que°i⁄
));

6006 
	}
}

6008 
mDNSloˇl
 
mDNSBoﬁ
 
	$MachöeHasA˘iveIPv6
(
mDNS
 *c⁄° 
m
)

6010 
Nëw‹kI¡îÁ˚Info
 *
ötf
;

6011 
ötf
 = 
m
->
Ho°I¡îÁ˚s
; i¡f; i¡‡ötf->
√xt
)

6012 i‡(
ötf
->
ù
.
ty≥
 =
mDNSAddrTy≥_IPv6
Ë(
mDNSåue
);

6013 (
mDNSÁl£
);

6014 
	}
}

6016 
mDNSloˇl
 
	$FoundSîvi˚InfoSRV
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *
que°i⁄
, c⁄° 
Resour˚Rec‹d
 *c⁄° 
™swî
, 
mDNSBoﬁ
 
AddRec‹d
)

6018 
Sîvi˚InfoQuîy
 *
quîy
 = (Sîvi˚InfoQuîy *)
que°i⁄
->
Que°i⁄C⁄ãxt
;

6019 
mDNSBoﬁ
 
P‹tCh™ged
 = (mDNSBoﬁ)(
quîy
->
öfo
->
p‹t
.
NŸAnI¡egî
 !
™swî
->
rd©a
->
u
.
§v
.port.NotAnInteger);

6020 i‡(!
AddRec‹d
) ;

6021 i‡(
™swî
->
ºty≥
 !
kDNSTy≥_SRV
) ;

6023 
quîy
->
öfo
->
p‹t
 = 
™swî
->
rd©a
->
u
.
§v
.port;

6026 i‡(!
quîy
->
GŸSRV
)

6028 
quîy
->
GŸSRV
 = 
mDNSåue
;

6029 
quîy
->
qAv4
.
I¡îÁ˚ID
 = 
™swî
->InterfaceID;

6030 
	`AssignDomaöName
(&
quîy
->
qAv4
.
q«me
, &
™swî
->
rd©a
->
u
.
§v
.
èrgë
);

6031 
quîy
->
qAv6
.
I¡îÁ˚ID
 = 
™swî
->InterfaceID;

6032 
	`AssignDomaöName
(&
quîy
->
qAv6
.
q«me
, &
™swî
->
rd©a
->
u
.
§v
.
èrgë
);

6033 
	`mDNS_SèπQuîy
(
m
, &
quîy
->
qAv4
);

6035 i‡(
	`MachöeHasA˘iveIPv6
(
m
)Ë
	`mDNS_SèπQuîy
(m, &
quîy
->
qAv6
);

6038 i‡((
quîy
->
qAv4
.
I¡îÁ˚ID
 !quîy->
qSRV
.I¡îÁ˚ID && quîy->qAv4.I¡îÁ˚ID !
™swî
->InterfaceID) ||

6039 !
	`SameDomaöName
(&
quîy
->
qAv4
.
q«me
, &
™swî
->
rd©a
->
u
.
§v
.
èrgë
))

6041 
	`mDNS_St›Quîy
(
m
, &
quîy
->
qAv4
);

6042 i‡(
quîy
->
qAv6
.
ThisQI¡îvÆ
 >0Ë
	`mDNS_St›Quîy
(
m
, &query->qAv6);

6043 i‡(
	`SameDomaöName
(&
quîy
->
qAv4
.
q«me
, &
™swî
->
rd©a
->
u
.
§v
.
èrgë
Ë&& !
P‹tCh™ged
)

6050 
quîy
->
qAv4
.
I¡îÁ˚ID
 = quîy->
qSRV
.InterfaceID;

6051 
quîy
->
qAv6
.
I¡îÁ˚ID
 = quîy->
qSRV
.InterfaceID;

6055 
quîy
->
qAv4
.
I¡îÁ˚ID
 = 
™swî
->InterfaceID;

6056 
	`AssignDomaöName
(&
quîy
->
qAv4
.
q«me
, &
™swî
->
rd©a
->
u
.
§v
.
èrgë
);

6057 
quîy
->
qAv6
.
I¡îÁ˚ID
 = 
™swî
->InterfaceID;

6058 
	`AssignDomaöName
(&
quîy
->
qAv6
.
q«me
, &
™swî
->
rd©a
->
u
.
§v
.
èrgë
);

6060 
	`debugf
("FoundSîvi˚InfoSRV: Re°¨tögáddªs†quîõ†f‹ %##s", 
quîy
->
qAv4
.
q«me
.
c
);

6061 
	`mDNS_SèπQuîy
(
m
, &
quîy
->
qAv4
);

6063 i‡(
	`MachöeHasA˘iveIPv6
(
m
)Ë
	`mDNS_SèπQuîy
(m, &
quîy
->
qAv6
);

6065 i‡(
quîy
->
Sîvi˚InfoQuîyCÆlback
 && quîy->
GŸADD
 && quîy->
GŸTXT
 && 
P‹tCh™ged
)

6067 i‡(++
quîy
->
Answîs
 >= 100)

6068 
	`debugf
("**** WARNING **** Have given %luánswers for %##s (SRV) %##s %u",

6069 
quîy
->
Answîs
, quîy->
qSRV
.
q«me
.
c
, 
™swî
->
rd©a
->
u
.
§v
.
èrgë
.c,

6070 
	`mDNSVÆ16
(
™swî
->
rd©a
->
u
.
§v
.
p‹t
));

6071 
quîy
->
	`Sîvi˚InfoQuîyCÆlback
(
m
, query);

6075 
	}
}

6077 
mDNSloˇl
 
	$FoundSîvi˚InfoTXT
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *
que°i⁄
, c⁄° 
Resour˚Rec‹d
 *c⁄° 
™swî
, 
mDNSBoﬁ
 
AddRec‹d
)

6079 
Sîvi˚InfoQuîy
 *
quîy
 = (Sîvi˚InfoQuîy *)
que°i⁄
->
Que°i⁄C⁄ãxt
;

6080 i‡(!
AddRec‹d
) ;

6081 i‡(
™swî
->
ºty≥
 !
kDNSTy≥_TXT
) ;

6082 i‡(
™swî
->
rdÀngth
 > (
quîy
->
öfo
->
TXTöfo
)) ;

6084 
quîy
->
GŸTXT
 = 
mDNSåue
;

6085 
quîy
->
öfo
->
TXTÀn
 = 
™swî
->
rdÀngth
;

6086 
quîy
->
öfo
->
TXTöfo
[0] = 0;

6087 
	`mDNSPœtf‹mMemC›y
(
™swî
->
rd©a
->
u
.
txt
.
c
, 
quîy
->
öfo
->
TXTöfo
,ánswî->
rdÀngth
);

6089 
	`vîbo£debugf
("FoundSîvi˚InfoTXT: %##†GŸADD=%d", 
quîy
->
öfo
->
«me
.
c
, quîy->
GŸADD
);

6093 i‡(
quîy
->
Sîvi˚InfoQuîyCÆlback
 && quîy->
GŸADD
)

6095 i‡(++
quîy
->
Answîs
 >= 100)

6096 
	`debugf
("**** WARNING **** have given %luánswers for %##s (TXT) %#s...",

6097 
quîy
->
Answîs
, quîy->
qSRV
.
q«me
.
c
, 
™swî
->
rd©a
->
u
.
txt
.c);

6098 
quîy
->
	`Sîvi˚InfoQuîyCÆlback
(
m
, query);

6100 
	}
}

6102 
mDNSloˇl
 
	$FoundSîvi˚Info
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *
que°i⁄
, c⁄° 
Resour˚Rec‹d
 *c⁄° 
™swî
, 
mDNSBoﬁ
 
AddRec‹d
)

6104 
Sîvi˚InfoQuîy
 *
quîy
 = (Sîvi˚InfoQuîy *)
que°i⁄
->
Que°i⁄C⁄ãxt
;

6106 i‡(!
AddRec‹d
) ;

6108 i‡(
™swî
->
ºty≥
 =
kDNSTy≥_A
)

6110 
quîy
->
öfo
->
ù
.
ty≥
 = 
mDNSAddrTy≥_IPv4
;

6111 
quîy
->
öfo
->
ù
.ù.
v4
 = 
™swî
->
rd©a
->
u
.
ùv4
;

6113 i‡(
™swî
->
ºty≥
 =
kDNSTy≥_AAAA
)

6115 
quîy
->
öfo
->
ù
.
ty≥
 = 
mDNSAddrTy≥_IPv6
;

6116 
quîy
->
öfo
->
ù
.ù.
v6
 = 
™swî
->
rd©a
->
u
.
ùv6
;

6120 
	`debugf
("FoundSîvi˚Info:ánswî %##†ty≥ %d (%sËu√x≥˘ed", 
™swî
->
«me
->
c
,ánswî->
ºty≥
, 
	`DNSTy≥Name
(answer->rrtype));

6124 
quîy
->
GŸADD
 = 
mDNSåue
;

6125 
quîy
->
öfo
->
I¡îÁ˚ID
 = 
™swî
->InterfaceID;

6127 
	`vîbo£debugf
("FoundSîvi˚Infÿv%ld: %##†GŸTXT=%d", 
quîy
->
öfo
->
ù
.
ty≥
, quîy->öfo->
«me
.
c
, quîy->
GŸTXT
);

6131 i‡(
quîy
->
Sîvi˚InfoQuîyCÆlback
 && quîy->
GŸTXT
)

6133 i‡(++
quîy
->
Answîs
 >= 100)

6134 
	`debugf
(
™swî
->
ºty≥
 =
kDNSTy≥_A
 ?

6137 
quîy
->
Answîs
, quîy->
qSRV
.
q«me
.
c
, &
™swî
->
rd©a
->
u
.
d©a
);

6138 
quîy
->
	`Sîvi˚InfoQuîyCÆlback
(
m
, query);

6140 
	}
}

6146 
mDNSexp‹t
 
mSètus
 
	$mDNS_SèπResﬁveSîvi˚
(
mDNS
 *c⁄° 
m
,

6147 
Sîvi˚InfoQuîy
 *
quîy
, 
Sîvi˚Info
 *
öfo
, 
mDNSSîvi˚InfoQuîyCÆlback
 *
CÆlback
, *
C⁄ãxt
)

6149 
mSètus
 
°©us
;

6150 
	`mDNS_Lock
(
m
);

6152 
quîy
->
qSRV
.
ThisQI¡îvÆ
 = -1;

6153 
quîy
->
qSRV
.
I¡îÁ˚ID
 = 
öfo
->InterfaceID;

6154 
quîy
->
qSRV
.
T¨gë
 = 
zîoAddr
;

6155 
	`AssignDomaöName
(&
quîy
->
qSRV
.
q«me
, &
öfo
->
«me
);

6156 
quîy
->
qSRV
.
qty≥
 = 
kDNSTy≥_SRV
;

6157 
quîy
->
qSRV
.
q˛ass
 = 
kDNSCœss_IN
;

6158 
quîy
->
qSRV
.
L⁄gLived
 = 
mDNSÁl£
;

6159 
quîy
->
qSRV
.
Ex≥˘Unique
 = 
mDNSåue
;

6160 
quîy
->
qSRV
.
F‹˚MCa°
 = 
mDNSÁl£
;

6161 
quîy
->
qSRV
.
Que°i⁄CÆlback
 = 
FoundSîvi˚InfoSRV
;

6162 
quîy
->
qSRV
.
Que°i⁄C⁄ãxt
 = query;

6164 
quîy
->
qTXT
.
ThisQI¡îvÆ
 = -1;

6165 
quîy
->
qTXT
.
I¡îÁ˚ID
 = 
öfo
->InterfaceID;

6166 
quîy
->
qTXT
.
T¨gë
 = 
zîoAddr
;

6167 
	`AssignDomaöName
(&
quîy
->
qTXT
.
q«me
, &
öfo
->
«me
);

6168 
quîy
->
qTXT
.
qty≥
 = 
kDNSTy≥_TXT
;

6169 
quîy
->
qTXT
.
q˛ass
 = 
kDNSCœss_IN
;

6170 
quîy
->
qTXT
.
L⁄gLived
 = 
mDNSÁl£
;

6171 
quîy
->
qTXT
.
Ex≥˘Unique
 = 
mDNSåue
;

6172 
quîy
->
qTXT
.
F‹˚MCa°
 = 
mDNSÁl£
;

6173 
quîy
->
qTXT
.
Que°i⁄CÆlback
 = 
FoundSîvi˚InfoTXT
;

6174 
quîy
->
qTXT
.
Que°i⁄C⁄ãxt
 = query;

6176 
quîy
->
qAv4
.
ThisQI¡îvÆ
 = -1;

6177 
quîy
->
qAv4
.
I¡îÁ˚ID
 = 
öfo
->InterfaceID;

6178 
quîy
->
qAv4
.
T¨gë
 = 
zîoAddr
;

6179 
quîy
->
qAv4
.
q«me
.
c
[0] = 0;

6180 
quîy
->
qAv4
.
qty≥
 = 
kDNSTy≥_A
;

6181 
quîy
->
qAv4
.
q˛ass
 = 
kDNSCœss_IN
;

6182 
quîy
->
qAv4
.
L⁄gLived
 = 
mDNSÁl£
;

6183 
quîy
->
qAv4
.
Ex≥˘Unique
 = 
mDNSåue
;

6184 
quîy
->
qAv4
.
F‹˚MCa°
 = 
mDNSÁl£
;

6185 
quîy
->
qAv4
.
Que°i⁄CÆlback
 = 
FoundSîvi˚Info
;

6186 
quîy
->
qAv4
.
Que°i⁄C⁄ãxt
 = query;

6188 
quîy
->
qAv6
.
ThisQI¡îvÆ
 = -1;

6189 
quîy
->
qAv6
.
I¡îÁ˚ID
 = 
öfo
->InterfaceID;

6190 
quîy
->
qAv6
.
T¨gë
 = 
zîoAddr
;

6191 
quîy
->
qAv6
.
q«me
.
c
[0] = 0;

6192 
quîy
->
qAv6
.
qty≥
 = 
kDNSTy≥_AAAA
;

6193 
quîy
->
qAv6
.
q˛ass
 = 
kDNSCœss_IN
;

6194 
quîy
->
qAv6
.
L⁄gLived
 = 
mDNSÁl£
;

6195 
quîy
->
qAv6
.
Ex≥˘Unique
 = 
mDNSåue
;

6196 
quîy
->
qAv6
.
F‹˚MCa°
 = 
mDNSÁl£
;

6197 
quîy
->
qAv6
.
Que°i⁄CÆlback
 = 
FoundSîvi˚Info
;

6198 
quîy
->
qAv6
.
Que°i⁄C⁄ãxt
 = query;

6200 
quîy
->
GŸSRV
 = 
mDNSÁl£
;

6201 
quîy
->
GŸTXT
 = 
mDNSÁl£
;

6202 
quîy
->
GŸADD
 = 
mDNSÁl£
;

6203 
quîy
->
Answîs
 = 0;

6205 
quîy
->
öfo
 = info;

6206 
quîy
->
Sîvi˚InfoQuîyCÆlback
 = 
CÆlback
;

6207 
quîy
->
Sîvi˚InfoQuîyC⁄ãxt
 = 
C⁄ãxt
;

6211 
öfo
->
ù
 = 
zîoAddr
;

6212 
öfo
->
p‹t
 = 
zîoIPP‹t
;

6213 
öfo
->
TXTÀn
 = 0;

6216 
°©us
 = 
	`mDNS_SèπQuîy_öã∫Æ
(
m
, &
quîy
->
qSRV
);

6217 i‡(
°©us
 =
mSètus_NoEº‹
Ë°©u†
	`mDNS_SèπQuîy_öã∫Æ
(
m
, &
quîy
->
qTXT
);

6218 i‡(
°©us
 !
mSètus_NoEº‹
Ë
	`mDNS_St›ResﬁveSîvi˚
(
m
, 
quîy
);

6220 
	`mDNS_U∆ock
(
m
);

6221 (
°©us
);

6222 
	}
}

6224 
mDNSexp‹t
 
	$mDNS_St›ResﬁveSîvi˚
 (
mDNS
 *c⁄° 
m
, 
Sîvi˚InfoQuîy
 *
q
)

6226 
	`mDNS_Lock
(
m
);

6228 i‡(
q
->
qSRV
.
ThisQI¡îvÆ
 >0 || 
	`uDNS_IsA˘iveQuîy
(&q->qSRV, &
m
->
uDNS_öfo
)Ë
	`mDNS_St›Quîy_öã∫Æ
(m, &q->qSRV);

6229 i‡(
q
->
qTXT
.
ThisQI¡îvÆ
 >0 || 
	`uDNS_IsA˘iveQuîy
(&q->qTXT, &
m
->
uDNS_öfo
)Ë
	`mDNS_St›Quîy_öã∫Æ
(m, &q->qTXT);

6230 i‡(
q
->
qAv4
.
ThisQI¡îvÆ
 >0 || 
	`uDNS_IsA˘iveQuîy
(&q->qAv4, &
m
->
uDNS_öfo
)Ë
	`mDNS_St›Quîy_öã∫Æ
(m, &q->qAv4);

6231 i‡(
q
->
qAv6
.
ThisQI¡îvÆ
 >0 || 
	`uDNS_IsA˘iveQuîy
(&q->qAv6, &
m
->
uDNS_öfo
)Ë
	`mDNS_St›Quîy_öã∫Æ
(m, &q->qAv6);

6232 
	`mDNS_U∆ock
(
m
);

6233 
	}
}

6235 
mDNSexp‹t
 
mSètus
 
	$mDNS_GëDomaös
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *c⁄° 
que°i⁄
, 
mDNS_DomaöTy≥
 
DomaöTy≥
, c⁄° 
domaö«me
 *
dom
,

6236 c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, 
mDNSQue°i⁄CÆlback
 *
CÆlback
, *
C⁄ãxt
)

6238 
que°i⁄
->
I¡îÁ˚ID
 = InterfaceID;

6239 
que°i⁄
->
T¨gë
 = 
zîoAddr
;

6240 
que°i⁄
->
qty≥
 = 
kDNSTy≥_PTR
;

6241 
que°i⁄
->
q˛ass
 = 
kDNSCœss_IN
;

6242 
que°i⁄
->
L⁄gLived
 = 
mDNSÁl£
;

6243 
que°i⁄
->
Ex≥˘Unique
 = 
mDNSÁl£
;

6244 
que°i⁄
->
F‹˚MCa°
 = 
mDNSÁl£
;

6245 
que°i⁄
->
Que°i⁄CÆlback
 = 
CÆlback
;

6246 
que°i⁄
->
Que°i⁄C⁄ãxt
 = 
C⁄ãxt
;

6247 i‡(
DomaöTy≥
 > 
mDNS_DomaöTy≥Max
Ë(
mSètus_BadP¨amEº
);

6248 i‡(!
	`MakeDomaöNameFromDNSNameSåög
(&
que°i⁄
->
q«me
, 
mDNS_DomaöTy≥Names
[
DomaöTy≥
])Ë(
mSètus_BadP¨amEº
);

6249 i‡(!
dom
Ëdom = &
loˇldomaö
;

6250 i‡(!
	`AµídDomaöName
(&
que°i⁄
->
q«me
, 
dom
)Ë(
mSètus_BadP¨amEº
);

6251 (
	`mDNS_SèπQuîy
(
m
, 
que°i⁄
));

6252 
	}
}

6255 #i‡
COMPILER_LIKES_PRAGMA_MARK


6256 #¥agm®
m¨k
 -

6257 #¥agm®
m¨k
 - 
Re•⁄dî
 
Fun˘i⁄s


6260 
mDNSexp‹t
 
mSètus
 
	$mDNS_Regi°î
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
)

6262 
mSètus
 
°©us
;

6263 
	`mDNS_Lock
(
m
);

6264 
°©us
 = 
	`mDNS_Regi°î_öã∫Æ
(
m
, 
º
);

6265 
	`mDNS_U∆ock
(
m
);

6266 (
°©us
);

6267 
	}
}

6269 
mDNSexp‹t
 
mSètus
 
	$mDNS_Upd©e
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
, 
mDNSu32
 
√wâl
,

6270 c⁄° 
mDNSu16
 
√wrdÀngth
, 
RD©a
 *c⁄° 
√wrd©a
, 
mDNSRec‹dUpd©eCÆlback
 *
CÆlback
)

6272 #i‚de‡
UNICAST_DISABLED


6273 
mDNSBoﬁ
 
uniˇ°
 = !(
º
->
ª§ec
.
I¡îÁ˚ID
 =
mDNSI¡îÁ˚_LoˇlO∆y
 || 
	`IsLoˇlDomaö
‘r->ª§ec.
«me
));

6275 
mDNSBoﬁ
 
uniˇ°
 = 
mDNSÁl£
;

6278 i‡(!
	`VÆid©eRD©a
(
º
->
ª§ec
.
ºty≥
, 
√wrdÀngth
, 
√wrd©a
))

6280 
	`LogMsg
("Aâem±Åÿupd©êªc‹d wôh invÆidÑd©a: %s", 
	`GëRRDi•œySåög_rdb
(&
º
->
ª§ec
, &
√wrd©a
->
u
, 
m
->
MsgBuf„r
));

6281 (
mSètus_InvÆid
);

6284 
	`mDNS_Lock
(
m
);

6287 i‡(
√wâl
 =0Ë√wâ»
º
->
ª§ec
.
º‹igöÆâl
;

6291 i‡(!
uniˇ°
 && 
º
->
NewRD©a
)

6293 
RD©a
 *
n
 = 
º
->
NewRD©a
;

6294 
º
->
NewRD©a
 = 
mDNSNULL
;

6295 i‡(
º
->
Upd©eCÆlback
)

6296 
º
->
	`Upd©eCÆlback
(
m
,Ñr, 
n
);

6299 
º
->
NewRD©a
 = 
√wrd©a
;

6300 
º
->
√wrdÀngth
 =Çewrdlength;

6301 
º
->
Upd©eCÆlback
 = 
CÆlback
;

6303 i‡(
uniˇ°
Ë{ 
mSètus
 
°©us
 = 
	`uDNS_Upd©eRec‹d
(
m
, 
º
); 
	`mDNS_U∆ock
(m); (status); }

6305 i‡(
º
->
ª§ec
.
º‹igöÆâl
 =
√wâl
 &&

6306 
º
->
ª§ec
.
rdÀngth
 =
√wrdÀngth
 && 
	`mDNSPœtf‹mMemSame
‘r->ª§ec.
rd©a
->
u
.
d©a
, 
√wrd©a
->u.data,Çewrdlength))

6307 
	`Com∂ëeRD©aUpd©e
(
m
, 
º
);

6310 
domaöœbñ
 
«me
;

6311 
domaö«me
 
ty≥
, 
domaö
;

6312 
	`Dec⁄°ru˘Sîvi˚Name
(
º
->
ª§ec
.
«me
, &«me, &
ty≥
, &
domaö
);

6313 
º
->
A¬oun˚Cou¡
 = 
InôülA¬oun˚Cou¡
;

6319 i‡(
	`SameDomaöLabñ
(
ty≥
.
c
, (
mDNSu8
*)"\x6_ich©")Ë
º
->
A¬oun˚Cou¡
 = 1;

6320 
º
->
ThisAPI¡îvÆ
 = 
	`DeÁu…API¡îvÆF‹Rec‹dTy≥
‘r->
ª§ec
.
Rec‹dTy≥
);

6321 
	`InôülizeLa°APTime
(
m
, 
º
);

6322 
º
->
NextUpd©eCªdô
 && 
m
->
timíow
 -Ñr->NextUpd©eCªdô >0Ë
	`Gø¡Upd©eCªdô
(rr);

6323 i‡(!
º
->
Upd©eBlocked
 &&Ñr->
Upd©eCªdôs
)Ñr->UpdateCredits--;

6324 i‡(!
º
->
NextUpd©eCªdô
Ëº->NextUpd©eCªdô = 
	`N⁄ZîoTime
(
m
->
timíow
 + 
kUpd©eCªdôRe‰eshI¡îvÆ
);

6325 i‡(
º
->
A¬oun˚Cou¡
 >Ñr->
Upd©eCªdôs
 + 1Ëº->A¬oun˚Cou¡ = (
mDNSu8
)(rr->UpdateCredits + 1);

6326 i‡(
º
->
Upd©eCªdôs
 <= 5)

6328 
mDNSu32
 
dñay
 = 6 - 
º
->
Upd©eCªdôs
;

6329 i‡(!
º
->
Upd©eBlocked
Ëº->Upd©eBlocked = 
	`N⁄ZîoTime
(
m
->
timíow
 + (
mDNSs32
)
dñay
 * 
mDNSPœtf‹mO√Sec⁄d
);

6330 
º
->
ThisAPI¡îvÆ
 *= 4;

6331 
º
->
La°APTime
 =Ñr->
Upd©eBlocked
 -Ñr->
ThisAPI¡îvÆ
;

6332 
	`LogMsg
("Excessive updateÑate for %##s; delayingánnouncement by %ld second%s",

6333 
º
->
ª§ec
.
«me
->
c
, 
dñay
, delay > 1 ? "s" : "");

6335 
º
->
ª§ec
.
º‹igöÆâl
 = 
√wâl
;

6338 
	`mDNS_U∆ock
(
m
);

6339 (
mSètus_NoEº‹
);

6340 
	}
}

6345 
mDNSexp‹t
 
mSètus
 
	$mDNS_Dîegi°î
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
)

6347 
mSètus
 
°©us
;

6348 
	`mDNS_Lock
(
m
);

6349 
°©us
 = 
	`mDNS_Dîegi°î_öã∫Æ
(
m
, 
º
, 
mDNS_Dîeg_n‹mÆ
);

6350 
	`mDNS_U∆ock
(
m
);

6351 (
°©us
);

6352 
	}
}

6354 
mDNSexp‹t
 
mDNS_Ho°NameCÆlback
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
, 
mSètus
 
ªsu…
);

6356 
mDNSloˇl
 
Nëw‹kI¡îÁ˚Info
 *
	$FödFú°Advîti£dI¡îÁ˚
(
mDNS
 *c⁄° 
m
)

6358 
Nëw‹kI¡îÁ˚Info
 *
ötf
;

6359 
ötf
 = 
m
->
Ho°I¡îÁ˚s
; i¡f; i¡‡ötf->
√xt
)

6360 i‡(
ötf
->
Advîti£
) ;

6361 (
ötf
);

6362 
	}
}

6364 
mDNSloˇl
 
	$Advîti£I¡îÁ˚
(
mDNS
 *c⁄° 
m
, 
Nëw‹kI¡îÁ˚Info
 *
£t
)

6366 
buf„r
[256];

6367 
Nëw‹kI¡îÁ˚Info
 *
¥im¨y
 = 
	`FödFú°Advîti£dI¡îÁ˚
(
m
);

6368 i‡(!
¥im¨y
Ë¥im¨y = 
£t
;

6371 
	`mDNS_SëupResour˚Rec‹d
(&
£t
->
RR_A
, 
mDNSNULL
, së->
I¡îÁ˚ID
, 
kDNSTy≥_A
, 
kHo°NameTTL
, 
kDNSRec‹dTy≥Unique
, 
mDNS_Ho°NameCÆlback
, set);

6372 
	`mDNS_SëupResour˚Rec‹d
(&
£t
->
RR_PTR
, 
mDNSNULL
, së->
I¡îÁ˚ID
, 
kDNSTy≥_PTR
, 
kHo°NameTTL
, 
kDNSRec‹dTy≥KnownUnique
, mDNSNULL, mDNSNULL);

6373 
	`mDNS_SëupResour˚Rec‹d
(&
£t
->
RR_HINFO
, 
mDNSNULL
, së->
I¡îÁ˚ID
, 
kDNSTy≥_HINFO
, 
kHo°NameTTL
, 
kDNSRec‹dTy≥Unique
, mDNSNULL, mDNSNULL);

6375 #i‡
ANSWER_REMOTE_HOSTNAME_QUERIES


6376 
£t
->
RR_A
 .
AŒowRemŸeQuîy
 = 
mDNSåue
;

6377 
£t
->
RR_PTR
 .
AŒowRemŸeQuîy
 = 
mDNSåue
;

6378 
£t
->
RR_HINFO
.
AŒowRemŸeQuîy
 = 
mDNSåue
;

6382 
	`AssignDomaöName
(
£t
->
RR_A
.
ª§ec
.
«me
, &
m
->
Mu…iˇ°Ho°«me
);

6383 i‡(
£t
->
ù
.
ty≥
 =
mDNSAddrTy≥_IPv4
)

6385 
£t
->
RR_A
.
ª§ec
.
ºty≥
 = 
kDNSTy≥_A
;

6386 
£t
->
RR_A
.
ª§ec
.
rd©a
->
u
.
ùv4
 = së->
ù
.ù.
v4
;

6388 
	`mDNS_¢¥ötf
(
buf„r
, (buffer), "%d.%d.%d.%d.in-addr.arpa.",

6389 
£t
->
ù
.ù.
v4
.
b
[3], set->ip.ip.v4.b[2], set->ip.ip.v4.b[1], set->ip.ip.v4.b[0]);

6391 i‡(
£t
->
ù
.
ty≥
 =
mDNSAddrTy≥_IPv6
)

6393 
i
;

6394 
£t
->
RR_A
.
ª§ec
.
ºty≥
 = 
kDNSTy≥_AAAA
;

6395 
£t
->
RR_A
.
ª§ec
.
rd©a
->
u
.
ùv6
 = së->
ù
.ù.
v6
;

6396 
i
 = 0; i < 16; i++)

6398 c⁄° 
hexVÆues
[] = "0123456789ABCDEF";

6399 
buf„r
[
i
 * 4 ] = 
hexVÆues
[
£t
->
ù
.ù.
v6
.
b
[15 - i] & 0x0F];

6400 
buf„r
[
i
 * 4 + 1] = '.';

6401 
buf„r
[
i
 * 4 + 2] = 
hexVÆues
[
£t
->
ù
.ù.
v6
.
b
[15 - i] >> 4];

6402 
buf„r
[
i
 * 4 + 3] = '.';

6404 
	`mDNS_¢¥ötf
(&
buf„r
[64], (buffer)-64, "ip6.arpa.");

6407 
	`MakeDomaöNameFromDNSNameSåög
(
£t
->
RR_PTR
.
ª§ec
.
«me
, 
buf„r
);

6408 
£t
->
RR_PTR
.
Ho°T¨gë
 = 
mDNSåue
;

6409 
£t
->
RR_PTR
.
F‹˚MCa°
 = 
mDNSåue
;

6411 
£t
->
RR_A
.
RRSë
 = &
¥im¨y
->RR_A;

6413 
	`mDNS_Regi°î_öã∫Æ
(
m
, &
£t
->
RR_A
);

6414 
	`mDNS_Regi°î_öã∫Æ
(
m
, &
£t
->
RR_PTR
);

6416 i‡(
m
->
HIH¨dw¨e
.
c
[0] > 0 && m->
HISo·w¨e
.c[0] > 0 && m->HIHardware.c[0] + m->HISoftware.c[0] <= 254)

6418 
mDNSu8
 *
p
 = 
£t
->
RR_HINFO
.
ª§ec
.
rd©a
->
u
.
d©a
;

6419 
	`AssignDomaöName
(
£t
->
RR_HINFO
.
ª§ec
.
«me
, &
m
->
Mu…iˇ°Ho°«me
);

6420 
£t
->
RR_HINFO
.
DïídítOn
 = &£t->
RR_A
;

6421 
	`mDNSPœtf‹mMemC›y
(&
m
->
HIH¨dw¨e
, 
p
, 1 + (
mDNSu32
)m->HIH¨dw¨e.
c
[0]);

6422 
p
 += 1 + ()p[0];

6423 
	`mDNSPœtf‹mMemC›y
(&
m
->
HISo·w¨e
, 
p
, 1 + (
mDNSu32
)m->HISo·w¨e.
c
[0]);

6424 
	`mDNS_Regi°î_öã∫Æ
(
m
, &
£t
->
RR_HINFO
);

6428 
	`debugf
("Not creating HINFOÑecord:Ölatform supportÜayerÖrovidedÇo information");

6429 
£t
->
RR_HINFO
.
ª§ec
.
Rec‹dTy≥
 = 
kDNSRec‹dTy≥Uƒegi°îed
;

6431 
	}
}

6433 
mDNSloˇl
 
	$Dódvîti£I¡îÁ˚
(
mDNS
 *c⁄° 
m
, 
Nëw‹kI¡îÁ˚Info
 *
£t
)

6435 
Nëw‹kI¡îÁ˚Info
 *
ötf
;

6438 
Nëw‹kI¡îÁ˚Info
 *
¥im¨y
 = 
	`FödFú°Advîti£dI¡îÁ˚
(
m
);

6439 
AuthRec‹d
 *
A
 = 
¥im¨y
 ? &¥im¨y->
RR_A
 : 
mDNSNULL
;

6440 
ötf
 = 
m
->
Ho°I¡îÁ˚s
; i¡f; i¡‡ötf->
√xt
)

6441 i‡(
ötf
->
RR_A
.
RRSë
 =&
£t
->RR_A)

6442 
ötf
->
RR_A
.
RRSë
 = 
A
;

6449 i‡(
£t
->
RR_A
. 
ª§ec
.
Rec‹dTy≥
Ë
	`mDNS_Dîegi°î_öã∫Æ
(
m
, &£t->RR_A, 
mDNS_Dîeg_n‹mÆ
);

6450 i‡(
£t
->
RR_PTR
. 
ª§ec
.
Rec‹dTy≥
Ë
	`mDNS_Dîegi°î_öã∫Æ
(
m
, &£t->RR_PTR, 
mDNS_Dîeg_n‹mÆ
);

6451 i‡(
£t
->
RR_HINFO
.
ª§ec
.
Rec‹dTy≥
Ë
	`mDNS_Dîegi°î_öã∫Æ
(
m
, &£t->RR_HINFO, 
mDNS_Dîeg_n‹mÆ
);

6452 
	}
}

6454 
mDNSexp‹t
 
	$mDNS_SëFQDN
(
mDNS
 *c⁄° 
m
)

6456 
domaö«me
 
√wm«me
;

6457 
Nëw‹kI¡îÁ˚Info
 *
ötf
;

6458 
AuthRec‹d
 *
º
;

6459 
√wm«me
.
c
[0] = 0;

6461 i‡(!
	`AµídDomaöLabñ
(&
√wm«me
, &
m
->
ho°œbñ
)Ë{ 
	`LogMsg
("ERROR: mDNS_SetFQDN: Cannot create MulticastHostname"); ; }

6462 i‡(!
	`AµídLôîÆLabñSåög
(&
√wm«me
, "loˇl")Ë{ 
	`LogMsg
("ERROR: mDNS_SetFQDN: Cannot create MulticastHostname"); ; }

6463 i‡(
	`SameDomaöName
(&
m
->
Mu…iˇ°Ho°«me
, &
√wm«me
)Ë{ 
	`LogMsg
("mDNS_SetFQDN - hostname unchanged"); ; }

6465 
	`mDNS_Lock
(
m
);

6466 
	`AssignDomaöName
(&
m
->
Mu…iˇ°Ho°«me
, &
√wm«me
);

6469 
ötf
 = 
m
->
Ho°I¡îÁ˚s
; i¡f; i¡‡ötf->
√xt
)

6470 i‡(
ötf
->
Advîti£
Ë
	`Dódvîti£I¡îÁ˚
(
m
, intf);

6473 
ötf
 = 
m
->
Ho°I¡îÁ˚s
; i¡f; i¡‡ötf->
√xt
)

6474 i‡(
ötf
->
Advîti£
Ë
	`Advîti£I¡îÁ˚
(
m
, intf);

6478 
º
 = 
m
->
Resour˚Rec‹ds
;Ñr;ÑrÙr->
√xt
Ëi‡‘r->
Ho°T¨gë
Ë
	`SëT¨gëToHo°Name
(m,Ñr);

6479 
º
 = 
m
->
Du∂iˇãRec‹ds
;Ñr;ÑrÙr->
√xt
Ëi‡‘r->
Ho°T¨gë
Ë
	`SëT¨gëToHo°Name
(m,Ñr);

6481 
	`mDNS_U∆ock
(
m
);

6482 
	}
}

6484 
mDNSexp‹t
 
	$mDNS_Ho°NameCÆlback
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
, 
mSètus
 
ªsu…
)

6486 ()
º
;

6488 #i‡
MDNS_DEBUGMSGS


6490 *
msg
 = "UnknownÑesult";

6491 i‡(
ªsu…
 =
mSètus_NoEº‹
Ë
msg
 = "NameÑegistered";

6492 i‡(
ªsu…
 =
mSètus_NameC⁄Êi˘
Ë
msg
 = "Name conflict";

6493 
	`debugf
("mDNS_Ho°NameCÆlback: %##†(%sË%†(%ld)", 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
), 
msg
, 
ªsu…
);

6497 i‡(
ªsu…
 =
mSètus_NoEº‹
)

6500 i‡(
m
->
MaöCÆlback
)

6502 
m
->
mDNS_ªíå™cy
++;

6503 
m
->
	`MaöCÆlback
(m, 
ªsu…
);

6504 
m
->
mDNS_ªíå™cy
--;

6507 i‡(
ªsu…
 =
mSètus_NameC⁄Êi˘
)

6509 
domaöœbñ
 
ﬁdœbñ
 = 
m
->
ho°œbñ
;

6512 i‡(
m
->
MaöCÆlback
)

6514 
m
->
mDNS_ªíå™cy
++;

6515 
m
->
	`MaöCÆlback
(m, 
mSètus_NameC⁄Êi˘
);

6516 
m
->
mDNS_ªíå™cy
--;

6520 i‡(
	`SameDomaöLabñ
(
m
->
ho°œbñ
.
c
, 
ﬁdœbñ
.c))

6521 
	`In¸emítLabñSuffix
(&
m
->
ho°œbñ
, 
mDNSÁl£
);

6525 
	`mDNS_SëFQDN
(
m
);

6526 
	`LogMsg
("Loˇ»Ho°«mê%#s.loˇ»Æªady i¿u£; wû»åy %#s.loˇ»ö°ód", 
ﬁdœbñ
.
c
, 
m
->
ho°œbñ
.c);

6528 i‡(
ªsu…
 =
mSètus_MemFªe
)

6532 
	`debugf
("mDNS_HostNameCallback: MemFree (ignored)");

6535 
	`LogMsg
("mDNS_Ho°NameCÆlback: Unknow¿îr‹ %ld f‹Ñegi°øti⁄ o‡ªc‹d %s", 
ªsu…
, 
º
->
ª§ec
.
«me
->
c
);

6536 
	}
}

6538 
mDNSloˇl
 
	$Upd©eI¡îÁ˚PrŸocﬁs
(
mDNS
 *c⁄° 
m
, 
Nëw‹kI¡îÁ˚Info
 *
a˘ive
)

6540 
Nëw‹kI¡îÁ˚Info
 *
ötf
;

6541 
a˘ive
->
IPv4AvaûabÀ
 = 
mDNSÁl£
;

6542 
a˘ive
->
IPv6AvaûabÀ
 = 
mDNSÁl£
;

6543 
ötf
 = 
m
->
Ho°I¡îÁ˚s
; i¡f; i¡‡ötf->
√xt
)

6544 i‡(
ötf
->
I¡îÁ˚ID
 =
a˘ive
->InterfaceID)

6546 i‡(
ötf
->
ù
.
ty≥
 =
mDNSAddrTy≥_IPv4
 && i¡f->
Mˇ°TxRx
Ë
a˘ive
->
IPv4AvaûabÀ
 = 
mDNSåue
;

6547 i‡(
ötf
->
ù
.
ty≥
 =
mDNSAddrTy≥_IPv6
 && i¡f->
Mˇ°TxRx
Ë
a˘ive
->
IPv6AvaûabÀ
 = 
mDNSåue
;

6549 
	}
}

6551 
mDNSexp‹t
 
mSètus
 
	$mDNS_Regi°îI¡îÁ˚
(
mDNS
 *c⁄° 
m
, 
Nëw‹kI¡îÁ˚Info
 *
£t
, 
mDNSBoﬁ
 
Ê≠pög
)

6553 
mDNSBoﬁ
 
Fú°OfTy≥
 = 
mDNSåue
;

6554 
Nëw‹kI¡îÁ˚Info
 **
p
 = &
m
->
Ho°I¡îÁ˚s
;

6556 i‡(!
£t
->
I¡îÁ˚ID
)

6557 { 
	`LogMsg
("Eº‹! TrõdÅÿªgi°îá Nëw‹kI¡îÁ˚Infÿ%#®wôh zîÿI¡îÁ˚ID", &
£t
->
ù
); (
mSètus_InvÆid
); }

6559 i‡(!
	`mDNSAddªssIsVÆidN⁄Zîo
(&
£t
->
mask
))

6560 { 
	`LogMsg
("Eº‹! TrõdÅÿªgi°îá Nëw‹kI¡îÁ˚Infÿ%#®wôh invÆid mask %#a", &
£t
->
ù
, &£t->
mask
); (
mSètus_InvÆid
); }

6562 
	`mDNS_Lock
(
m
);

6565 
£t
->
I¡îÁ˚A˘ive
 = 
mDNSåue
;

6566 
£t
->
IPv4AvaûabÀ
 = (£t->
ù
.
ty≥
 =
mDNSAddrTy≥_IPv4
 && së->
Mˇ°TxRx
);

6567 
£t
->
IPv6AvaûabÀ
 = (£t->
ù
.
ty≥
 =
mDNSAddrTy≥_IPv6
 && së->
Mˇ°TxRx
);

6570 *
p
)

6572 i‡(*
p
 =
£t
)

6574 
	`LogMsg
("Error! TriedÅoÑegisterá NetworkInterfaceInfoÅhat'sálready inÅheÜist");

6575 
	`mDNS_U∆ock
(
m
);

6576 (
mSètus_AÃódyRegi°îed
);

6579 i‡((*
p
)->
I¡îÁ˚ID
 =
£t
->InterfaceID)

6582 
£t
->
I¡îÁ˚A˘ive
 = 
mDNSÁl£
;

6583 i‡(
£t
->
ù
.
ty≥
 =(*
p
)->ù.ty≥Ë
Fú°OfTy≥
 = 
mDNSÁl£
;

6584 i‡(
£t
->
ù
.
ty≥
 =
mDNSAddrTy≥_IPv4
 && së->
Mˇ°TxRx
Ë(*
p
)->
IPv4AvaûabÀ
 = 
mDNSåue
;

6585 i‡(
£t
->
ù
.
ty≥
 =
mDNSAddrTy≥_IPv6
 && së->
Mˇ°TxRx
Ë(*
p
)->
IPv6AvaûabÀ
 = 
mDNSåue
;

6588 
p
=&(*p)->
√xt
;

6591 
£t
->
√xt
 = 
mDNSNULL
;

6592 *
p
 = 
£t
;

6594 i‡(
£t
->
Advîti£
)

6595 
	`Advîti£I¡îÁ˚
(
m
, 
£t
);

6597 
	`LogO≥øti⁄
("mDNS_Regi°îI¡îÁ˚: I¡îÁ˚ID %∞%†(%#aË%s", 
£t
->
I¡îÁ˚ID
, së->
i‚ame
, &£t->
ù
,

6598 
£t
->
I¡îÁ˚A˘ive
 ?

6606 i‡(
£t
->
Mˇ°TxRx
 && ((
m
->
KnownBugs
 & 
mDNS_KnownBug_Ph™tomI¡îÁ˚s
Ë|| 
Fú°OfTy≥
 || së->
I¡îÁ˚A˘ive
))

6608 
DNSQue°i⁄
 *
q
;

6609 
AuthRec‹d
 *
º
;

6611 
mDNSs32
 
dñay
 = 
Ê≠pög
 ? 
mDNSPœtf‹mO√Sec⁄d
 * 5 : 0;

6612 
mDNSu8
 
™noun˚
 = 
Ê≠pög
 ? (mDNSu8)1 : 
InôülA¬oun˚Cou¡
;

6618 i‡(!
m
->
SuµªssSídög
Ëm->SuµªssSídög = m->
timíow
 + (
mDNSs32
)
	`mDNSR™dom
((
mDNSu32
)
InôülQue°i⁄I¡îvÆ
);

6620 i‡(
Ê≠pög
)

6622 
	`LogMsg
("NŸe: Fªquíàå™sôi⁄†f‹ i¡îÁ˚ %†(%#a);Çëw‹kÅøffi¯ªdu˘i⁄ mósuª†öÉf„˘", 
£t
->
i‚ame
, &£t->
ù
);

6623 i‡(!
m
->
SuµªssProbes
 ||

6624 
m
->
SuµªssProbes
 - (m->
timíow
 + 
dñay
) < 0)

6625 
m
->
SuµªssProbes
 = (m->
timíow
 + 
dñay
);

6628 
q
 = 
m
->
Que°i⁄s
; q; q=q->
√xt
)

6629 i‡(!
q
->
I¡îÁ˚ID
 || q->I¡îÁ˚ID =
£t
->InterfaceID)

6631 
mDNSs32
 
öôül
 = (
Ê≠pög
 && 
q
->
FœµögI¡îÁ˚
 !
£t
->
I¡îÁ˚ID
Ë? 
InôülQue°i⁄I¡îvÆ
 * 8 : InitialQuestionInterval;

6632 
mDNSs32
 
qdñay
 = (
Ê≠pög
 && 
q
->
FœµögI¡îÁ˚
 !
£t
->
I¡îÁ˚ID
Ë? 
mDNSPœtf‹mO√Sec⁄d
 * 5 : 0;

6633 i‡(
Ê≠pög
 && 
q
->
FœµögI¡îÁ˚
 =
£t
->
I¡îÁ˚ID
)

6634 
	`LogO≥øti⁄
("Nÿˇchêªc‹d†f‹ %##†(%sËexpúed;Çÿ√ed f‹ immedüã que°i⁄", 
q
->
q«me
.
c
, 
	`DNSTy≥Name
(q->
qty≥
));

6636 i‡(!
q
->
ThisQI¡îvÆ
 || q->ThisQI¡îvÆ > 
öôül
)

6638 
q
->
ThisQI¡îvÆ
 = 
öôül
;

6639 
q
->
Reque°Uniˇ°
 = 2;

6641 i‡(
q
->
La°QTime
 - (
m
->
timíow
 - q->
ThisQI¡îvÆ
 + 
qdñay
) > 0)

6642 
q
->
La°QTime
 = (
m
->
timíow
 - q->
ThisQI¡îvÆ
 + 
qdñay
);

6643 
q
->
Re˚¡AnswîPkts
 = 0;

6644 
	`SëNextQuîyTime
(
m
,
q
);

6649 
º
 = 
m
->
Resour˚Rec‹ds
;Ñr;ÑrÙr->
√xt
)

6650 i‡(!
º
->
ª§ec
.
I¡îÁ˚ID
 ||Ñr->ª§ec.I¡îÁ˚ID =
£t
->InterfaceID)

6652 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥Vîifõd
 && !º->
DïídítOn
Ëº->ª§ec.Rec‹dTy≥ = 
kDNSRec‹dTy≥Unique
;

6653 
º
->
ProbeCou¡
 = 
	`DeÁu…ProbeCou¡F‹Rec‹dTy≥
‘r->
ª§ec
.
Rec‹dTy≥
);

6654 i‡(
º
->
A¬oun˚Cou¡
 < 
™noun˚
)Ñr->AnnounceCount =ánnounce;

6655 
º
->
ThisAPI¡îvÆ
 = 
	`DeÁu…API¡îvÆF‹Rec‹dTy≥
‘r->
ª§ec
.
Rec‹dTy≥
);

6656 
	`InôülizeLa°APTime
(
m
, 
º
);

6660 
	`mDNS_U∆ock
(
m
);

6661 (
mSètus_NoEº‹
);

6662 
	}
}

6667 
mDNSexp‹t
 
	$mDNS_Dîegi°îI¡îÁ˚
(
mDNS
 *c⁄° 
m
, 
Nëw‹kI¡îÁ˚Info
 *
£t
, 
mDNSBoﬁ
 
Ê≠pög
)

6669 
Nëw‹kI¡îÁ˚Info
 **
p
 = &
m
->
Ho°I¡îÁ˚s
;

6671 
mDNSBoﬁ
 
ªvÆid©e
 = 
mDNSÁl£
;

6675 i‡(
m
->
KnownBugs
 & 
mDNS_KnownBug_Ph™tomI¡îÁ˚s
Ë
ªvÆid©e
 = 
mDNSåue
;

6677 
	`mDNS_Lock
(
m
);

6680 *
p
 && *∞!
£t
Ëp=&(*p)->
√xt
;

6681 i‡(!*
p
Ë{ 
	`debugf
("mDNS_Dîegi°îI¡îÁ˚: Nëw‹kI¡îÁ˚InfÿnŸ found i¿li°"); 
	`mDNS_U∆ock
(
m
); ; }

6684 *
p
 = (*p)->
√xt
;

6685 
£t
->
√xt
 = 
mDNSNULL
;

6687 i‡(!
£t
->
I¡îÁ˚A˘ive
)

6690 
Nëw‹kI¡îÁ˚Info
 *
ötf
;

6691 
ötf
 = 
m
->
Ho°I¡îÁ˚s
; i¡f; i¡‡ötf->
√xt
)

6692 i‡(
ötf
->
I¡îÁ˚A˘ive
 && i¡f->
I¡îÁ˚ID
 =
£t
->InterfaceID)

6693 
	`Upd©eI¡îÁ˚PrŸocﬁs
(
m
, 
ötf
);

6697 
Nëw‹kI¡îÁ˚Info
 *
ötf
;

6698 
ötf
 = 
m
->
Ho°I¡îÁ˚s
; i¡f; i¡‡ötf->
√xt
)

6699 i‡(
ötf
->
I¡îÁ˚ID
 =
£t
->InterfaceID)

6701 i‡(
ötf
)

6703 
	`LogO≥øti⁄
("mDNS_DeregisterInterface: AnotherÑepresentative of InterfaceID %p %s (%#a)Éxists;"

6704 " makög iàa˘ive", 
£t
->
I¡îÁ˚ID
, së->
i‚ame
, &£t->
ù
);

6705 
ötf
->
I¡îÁ˚A˘ive
 = 
mDNSåue
;

6706 
	`Upd©eI¡îÁ˚PrŸocﬁs
(
m
, 
ötf
);

6710 
ötf
 = 
m
->
Ho°I¡îÁ˚s
; i¡f; i¡‡ötf->
√xt
)

6711 i‡(
ötf
->
I¡îÁ˚ID
 =
£t
->I¡îÁ˚ID && i¡f->
ù
.
ty≥
 == set->ip.type)

6713 i‡(!
ötf
Ë
ªvÆid©e
 = 
mDNSåue
;

6717 
mDNSu32
 
¶Ÿ
;

6718 
CacheGroup
 *
cg
;

6719 
CacheRec‹d
 *
º
;

6720 
DNSQue°i⁄
 *
q
;

6721 
	`LogO≥øti⁄
("mDNS_DeregisterInterface: LastÑepresentative of InterfaceID %p %s (%#a) deregistered;"

6722 " m¨kög que°i⁄†ëc. d‹m™t", 
£t
->
I¡îÁ˚ID
, së->
i‚ame
, &£t->
ù
);

6724 i‡(
Ê≠pög
)

6725 
	`LogMsg
("Note: FrequentÅransitions for interface %s (%#a);ÇetworkÅrafficÑeduction measures inÉffect",

6726 
£t
->
i‚ame
, &£t->
ù
);

6730 
q
 = 
m
->
Que°i⁄s
; q; q=q->
√xt
)

6732 i‡(
q
->
I¡îÁ˚ID
 =
£t
->I¡îÁ˚IDËq->
ThisQI¡îvÆ
 = 0;

6733 i‡(!
q
->
I¡îÁ˚ID
 || q->I¡îÁ˚ID =
£t
->InterfaceID)

6734 
q
->
FœµögI¡îÁ˚
 = 
£t
->
I¡îÁ˚ID
;

6738 
ªvÆid©e
 = 
mDNSÁl£
;

6739 
	`FORALL_CACHERECORDS
(
¶Ÿ
, 
cg
, 
º
)

6740 i‡(
º
->
ª§ec
.
I¡îÁ˚ID
 =
£t
->InterfaceID)

6744 i‡(!
Ê≠pög
Ë
	`PurgeCacheResour˚Rec‹d
(
m
, 
º
);

6745 
	`mDNS_Rec⁄fúm_öã∫Æ
(
m
, 
º
, 
kDeÁu…Rec⁄fúmTimeF‹FœµögI¡îÁ˚
);

6751 i‡(
£t
->
Advîti£
Ë
	`Dódvîti£I¡îÁ˚
(
m
, set);

6757 i‡(
ªvÆid©e
 && !
m
->
mDNS_shutdown
)

6759 
mDNSu32
 
¶Ÿ
;

6760 
CacheGroup
 *
cg
;

6761 
CacheRec‹d
 *
º
;

6762 
m
->
NextCacheCheck
 = m->
timíow
;

6763 
	`FORALL_CACHERECORDS
(
¶Ÿ
, 
cg
, 
º
)

6764 i‡(
º
->
ª§ec
.
I¡îÁ˚ID
 =
£t
->InterfaceID)

6765 
	`mDNS_Rec⁄fúm_öã∫Æ
(
m
, 
º
, 
kDeÁu…Rec⁄fúmTimeF‹FœµögI¡îÁ˚
);

6768 
	`mDNS_U∆ock
(
m
);

6769 
	}
}

6771 
mDNSloˇl
 
	$Sîvi˚CÆlback
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
, 
mSètus
 
ªsu…
)

6773 
Sîvi˚Rec‹dSë
 *
§
 = (Sîvi˚Rec‹dSë *)
º
->
Rec‹dC⁄ãxt
;

6774 ()
m
;

6776 #i‡
MDNS_DEBUGMSGS


6778 *
msg
 = "UnknownÑesult";

6779 i‡(
ªsu…
 =
mSètus_NoEº‹
Ë
msg
 = "Name Registered";

6780 i‡(
ªsu…
 =
mSètus_NameC⁄Êi˘
Ë
msg
 = "Name Conflict";

6781 i‡(
ªsu…
 =
mSètus_MemFªe
Ë
msg
 = "Memory Free";

6782 
	`debugf
("Sîvi˚CÆlback: %##†(%sË%†(%ld)", 
º
->
ª§ec
.
«me
->
c
, 
	`DNSTy≥Name
‘r->ª§ec.
ºty≥
), 
msg
, 
ªsu…
);

6787 i‡(
ªsu…
 =
mSètus_NoEº‹
 && 
º
 !&
§
->
RR_SRV
) ;

6790 i‡(
ªsu…
 =
mSètus_NameC⁄Êi˘
)

6792 
§
->
C⁄Êi˘
 = 
mDNSåue
;

6793 
	`mDNS_Dîegi°îSîvi˚
(
m
, 
§
);

6797 i‡(
ªsu…
 =
mSètus_MemFªe
)

6801 
mDNSu32
 
i
;

6802 i‡(
§
->
RR_PTR
.
ª§ec
.
Rec‹dTy≥
 !
kDNSRec‹dTy≥Uƒegi°îed
) ;

6803 
i
=0; i<
§
->
NumSubTy≥s
; i++Ëi‡(§->
SubTy≥s
[i].
ª§ec
.
Rec‹dTy≥
 !
kDNSRec‹dTy≥Uƒegi°îed
) ;

6807 i‡(
§
->
C⁄Êi˘
Ë
ªsu…
 = 
mSètus_NameC⁄Êi˘
;

6812 i‡(
§
->
Sîvi˚CÆlback
)

6813 
§
->
	`Sîvi˚CÆlback
(
m
, sr, 
ªsu…
);

6814 
	}
}

6816 
mDNSloˇl
 
	$NSSCÆlback
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
, 
mSètus
 
ªsu…
)

6818 
Sîvi˚Rec‹dSë
 *
§
 = (Sîvi˚Rec‹dSë *)
º
->
Rec‹dC⁄ãxt
;

6819 i‡(
§
->
Sîvi˚CÆlback
)

6820 
§
->
	`Sîvi˚CÆlback
(
m
, sr, 
ªsu…
);

6821 
	}
}

6831 
mDNSexp‹t
 
mSètus
 
	$mDNS_Regi°îSîvi˚
(
mDNS
 *c⁄° 
m
, 
Sîvi˚Rec‹dSë
 *
§
,

6832 c⁄° 
domaöœbñ
 *c⁄° 
«me
, c⁄° 
domaö«me
 *c⁄° 
ty≥
, c⁄° domaö«mê*c⁄° 
domaö
,

6833 c⁄° 
domaö«me
 *c⁄° 
ho°
, 
mDNSIPP‹t
 
p‹t
, c⁄° 
mDNSu8
 
txtöfo
[], 
mDNSu16
 
txéí
,

6834 
AuthRec‹d
 *
SubTy≥s
, 
mDNSu32
 
NumSubTy≥s
,

6835 c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, 
mDNSSîvi˚CÆlback
 
CÆlback
, *
C⁄ãxt
)

6837 
mSètus
 
îr
;

6838 
mDNSu32
 
i
;

6840 
§
->
Sîvi˚CÆlback
 = 
CÆlback
;

6841 
§
->
Sîvi˚C⁄ãxt
 = 
C⁄ãxt
;

6842 
§
->
Exåas
 = 
mDNSNULL
;

6843 
§
->
NumSubTy≥s
 = NumSubTypes;

6844 
§
->
SubTy≥s
 = SubTypes;

6845 
§
->
C⁄Êi˘
 = 
mDNSÁl£
;

6846 i‡(
ho°
 && ho°->
c
[0]Ë
§
->
Ho°
 = *host;

6847 
§
->
Ho°
.
c
[0] = 0;

6850 i‡(!
p‹t
.
NŸAnI¡egî
)

6851 (
	`mDNS_Regi°îNoSuchSîvi˚
(
m
, &
§
->
RR_SRV
, 
«me
, 
ty≥
, 
domaö
, 
mDNSNULL
, 
mDNSI¡îÁ˚_Any
, 
NSSCÆlback
, sr));

6854 
	`mDNS_SëupResour˚Rec‹d
(&
§
->
RR_ADV
, 
mDNSNULL
, 
I¡îÁ˚ID
, 
kDNSTy≥_PTR
, 
kSènd¨dTTL
, 
kDNSRec‹dTy≥Advis‹y
, 
Sîvi˚CÆlback
, sr);

6855 
	`mDNS_SëupResour˚Rec‹d
(&
§
->
RR_PTR
, 
mDNSNULL
, 
I¡îÁ˚ID
, 
kDNSTy≥_PTR
, 
kSènd¨dTTL
, 
kDNSRec‹dTy≥Sh¨ed
, 
Sîvi˚CÆlback
, sr);

6856 
	`mDNS_SëupResour˚Rec‹d
(&
§
->
RR_SRV
, 
mDNSNULL
, 
I¡îÁ˚ID
, 
kDNSTy≥_SRV
, 
kHo°NameTTL
, 
kDNSRec‹dTy≥Unique
, 
Sîvi˚CÆlback
, sr);

6857 
	`mDNS_SëupResour˚Rec‹d
(&
§
->
RR_TXT
, 
mDNSNULL
, 
I¡îÁ˚ID
, 
kDNSTy≥_TXT
, 
kSènd¨dTTL
, 
kDNSRec‹dTy≥Unique
, 
Sîvi˚CÆlback
, sr);

6861 i‡(
§
->
RR_TXT
.
ª§ec
.
rd©a
->
MaxRDLígth
 < 
txéí
)

6862 
§
->
RR_TXT
.
ª§ec
.
rd©a
->
MaxRDLígth
 = 
txéí
;

6867 i‡(
	`C⁄°ru˘Sîvi˚Name
(
§
->
RR_ADV
.
ª§ec
.
«me
, (
domaöœbñ
*)"\x09_£rvi˚s", (
domaö«me
*)"\x07_dns-sd\x04_udp", 
domaö
Ë=
mDNSNULL
)

6868 (
mSètus_BadP¨amEº
);

6869 i‡(
	`C⁄°ru˘Sîvi˚Name
(
§
->
RR_PTR
.
ª§ec
.
«me
, 
mDNSNULL
, 
ty≥
, 
domaö
Ë=mDNSNULLË(
mSètus_BadP¨amEº
);

6870 i‡(
	`C⁄°ru˘Sîvi˚Name
(
§
->
RR_SRV
.
ª§ec
.
«me
,Çame, 
ty≥
, 
domaö
Ë=
mDNSNULL
Ë(
mSètus_BadP¨amEº
);

6871 
	`AssignDomaöName
(
§
->
RR_TXT
.
ª§ec
.
«me
, sr->
RR_SRV
.resrec.name);

6874 
	`AssignDomaöName
(&
§
->
RR_ADV
.
ª§ec
.
rd©a
->
u
.
«me
, sr->
RR_PTR
.resrec.name);

6878 
	`AssignDomaöName
(&
§
->
RR_PTR
.
ª§ec
.
rd©a
->
u
.
«me
, sr->
RR_SRV
.resrec.name);

6879 
§
->
RR_PTR
.
Addôi⁄Æ1
 = &§->
RR_SRV
;

6880 
§
->
RR_PTR
.
Addôi⁄Æ2
 = &§->
RR_TXT
;

6885 
i
=0; i<
NumSubTy≥s
; i++)

6887 
domaö«me
 
°
;

6888 
	`AssignDomaöName
(&
°
, 
§
->
SubTy≥s
[
i
].
ª§ec
.
«me
);

6889 
°
.
c
[1+st.c[0]] = 0;

6890 
	`AµídDomaöName
(&
°
, 
ty≥
);

6891 
	`mDNS_SëupResour˚Rec‹d
(&
§
->
SubTy≥s
[
i
], 
mDNSNULL
, 
I¡îÁ˚ID
, 
kDNSTy≥_PTR
, 
kSènd¨dTTL
, 
kDNSRec‹dTy≥Sh¨ed
, 
Sîvi˚CÆlback
, sr);

6892 i‡(
	`C⁄°ru˘Sîvi˚Name
(
§
->
SubTy≥s
[
i
].
ª§ec
.
«me
, 
mDNSNULL
, &
°
, 
domaö
Ë=mDNSNULLË(
mSètus_BadP¨amEº
);

6893 
	`AssignDomaöName
(&
§
->
SubTy≥s
[
i
].
ª§ec
.
rd©a
->
u
.
«me
, sr->
RR_SRV
.resrec.name);

6894 
§
->
SubTy≥s
[
i
].
Addôi⁄Æ1
 = &§->
RR_SRV
;

6895 
§
->
SubTy≥s
[
i
].
Addôi⁄Æ2
 = &§->
RR_TXT
;

6899 
§
->
RR_SRV
.
ª§ec
.
rd©a
->
u
.
§v
.
¥i‹ôy
 = 0;

6900 
§
->
RR_SRV
.
ª§ec
.
rd©a
->
u
.
§v
.
weight
 = 0;

6901 
§
->
RR_SRV
.
ª§ec
.
rd©a
->
u
.
§v
.
p‹t
 =Öort;

6904 i‡(
§
->
Ho°
.
c
[0]Ë
	`AssignDomaöName
(&§->
RR_SRV
.
ª§ec
.
rd©a
->
u
.
§v
.
èrgë
, &sr->Host);

6905 { 
§
->
RR_SRV
.
Ho°T¨gë
 = 
mDNSåue
; sr->RR_SRV.
ª§ec
.
rd©a
->
u
.
§v
.
èrgë
.
c
[0] = '\0'; }

6909 i‡(
txtöfo
 =
mDNSNULL
Ë
§
->
RR_TXT
.
ª§ec
.
rdÀngth
 = 0;

6910 i‡(
txtöfo
 !
§
->
RR_TXT
.
ª§ec
.
rd©a
->
u
.
txt
.
c
)

6912 
§
->
RR_TXT
.
ª§ec
.
rdÀngth
 = 
txéí
;

6913 i‡(
§
->
RR_TXT
.
ª§ec
.
rdÀngth
 > sr->RR_TXT.ª§ec.
rd©a
->
MaxRDLígth
Ë(
mSètus_BadP¨amEº
);

6914 
	`mDNSPœtf‹mMemC›y
(
txtöfo
, 
§
->
RR_TXT
.
ª§ec
.
rd©a
->
u
.
txt
.
c
, 
txéí
);

6916 
§
->
RR_TXT
.
DïídítOn
 = &§->
RR_SRV
;

6918 #i‚de‡
UNICAST_DISABLED


6921 i‡(!(
I¡îÁ˚ID
 =
mDNSI¡îÁ˚_LoˇlO∆y
 || 
	`IsLoˇlDomaö
(
§
->
RR_SRV
.
ª§ec
.
«me
)))

6923 
mSètus
 
°©us
;

6924 
	`mDNS_Lock
(
m
);

6929 i‡(!
§
->
RR_TXT
.
ª§ec
.
rdÀngth
Ë{ sr->RR_TXT.ª§ec.rdÀngth = 1; sr->RR_TXT.ª§ec.
rd©a
->
u
.
txt
.
c
[0] = 0; }

6930 
°©us
 = 
	`uDNS_Regi°îSîvi˚
(
m
, 
§
);

6931 
	`mDNS_U∆ock
(
m
);

6932 (
°©us
);

6935 
	`mDNS_Lock
(
m
);

6936 
îr
 = 
	`mDNS_Regi°î_öã∫Æ
(
m
, &
§
->
RR_SRV
);

6937 i‡(!
îr
Ëî∏
	`mDNS_Regi°î_öã∫Æ
(
m
, &
§
->
RR_TXT
);

6943 i‡(!
îr
Ëî∏
	`mDNS_Regi°î_öã∫Æ
(
m
, &
§
->
RR_ADV
);

6944 
i
=0; i<
NumSubTy≥s
; i++Ëi‡(!
îr
Ëî∏
	`mDNS_Regi°î_öã∫Æ
(
m
, &
§
->
SubTy≥s
[i]);

6945 i‡(!
îr
Ëî∏
	`mDNS_Regi°î_öã∫Æ
(
m
, &
§
->
RR_PTR
);

6947 
	`mDNS_U∆ock
(
m
);

6949 i‡(
îr
Ë
	`mDNS_Dîegi°îSîvi˚
(
m
, 
§
);

6950 (
îr
);

6951 
	}
}

6953 
mDNSexp‹t
 
mSètus
 
	$mDNS_AddRec‹dToSîvi˚
(
mDNS
 *c⁄° 
m
, 
Sîvi˚Rec‹dSë
 *
§
,

6954 
ExåaResour˚Rec‹d
 *
exåa
, 
RD©a
 *
rd©a
, 
mDNSu32
 
âl
)

6956 
ExåaResour˚Rec‹d
 **
e
;

6957 
mSètus
 
°©us
;

6959 
exåa
->
√xt
 = 
mDNSNULL
;

6960 
	`mDNS_SëupResour˚Rec‹d
(&
exåa
->
r
, 
rd©a
, 
§
->
RR_PTR
.
ª§ec
.
I¡îÁ˚ID
,

6961 
exåa
->
r
.
ª§ec
.
ºty≥
, 
âl
, 
kDNSRec‹dTy≥Unique
, 
Sîvi˚CÆlback
, 
§
);

6962 
	`AssignDomaöName
(
exåa
->
r
.
ª§ec
.
«me
, 
§
->
RR_SRV
.resrec.name);

6964 #i‚de‡
UNICAST_DISABLED


6965 i‡(!(
§
->
RR_SRV
.
ª§ec
.
I¡îÁ˚ID
 =
mDNSI¡îÁ˚_LoˇlO∆y
 || 
	`IsLoˇlDomaö
(§->RR_SRV.ª§ec.
«me
)))

6967 
	`mDNS_Lock
(
m
);

6972 i‡(
exåa
->
r
.
ª§ec
.
ºty≥
 =
kDNSTy≥_TXT
 &&Éxåa->r.ª§ec.
rdÀngth
 == 0)

6973 { 
exåa
->
r
.
ª§ec
.
rdÀngth
 = 1;Éxåa->r.ª§ec.
rd©a
->
u
.
txt
.
c
[0] = 0; }

6974 
°©us
 = 
	`uDNS_AddRec‹dToSîvi˚
(
m
, 
§
, 
exåa
);

6975 
	`mDNS_U∆ock
(
m
);

6976  
°©us
;

6980 
	`mDNS_Lock
(
m
);

6981 
e
 = &
§
->
Exåas
;

6982 *
e
Ëê&(*e)->
√xt
;

6984 i‡(
âl
 =0Ëâ»
kSènd¨dTTL
;

6986 
exåa
->
r
.
DïídítOn
 = &
§
->
RR_SRV
;

6988 
	`debugf
("mDNS_AddRec‹dToSîvi˚áddögÑec‹dÅÿ%##s", 
exåa
->
r
.
ª§ec
.
«me
->
c
);

6990 
°©us
 = 
	`mDNS_Regi°î_öã∫Æ
(
m
, &
exåa
->
r
);

6991 i‡(
°©us
 =
mSètus_NoEº‹
Ë*
e
 = 
exåa
;

6992 
	`mDNS_U∆ock
(
m
);

6993 (
°©us
);

6994 
	}
}

6996 
mDNSexp‹t
 
mSètus
 
	$mDNS_RemoveRec‹dFromSîvi˚
(
mDNS
 *c⁄° 
m
, 
Sîvi˚Rec‹dSë
 *
§
, 
ExåaResour˚Rec‹d
 *
exåa
,

6997 
mDNSRec‹dCÆlback
 
MemFªeCÆlback
, *
C⁄ãxt
)

6999 
ExåaResour˚Rec‹d
 **
e
;

7000 
mSètus
 
°©us
;

7002 
	`mDNS_Lock
(
m
);

7003 
e
 = &
§
->
Exåas
;

7004 *
e
 && *ê!
exåa
Ëê&(*e)->
√xt
;

7005 i‡(!*
e
)

7007 
	`debugf
("mDNS_RemoveRec‹dFromSîvi˚ faûedÅÿªmovêªc‹d from %##s", 
exåa
->
r
.
ª§ec
.
«me
->
c
);

7008 
°©us
 = 
mSètus_BadRe„ªn˚Eº
;

7012 
	`debugf
("mDNS_RemoveRec‹dFromSîvi˚ÑemovögÑec‹d from %##s", 
exåa
->
r
.
ª§ec
.
«me
->
c
);

7013 
exåa
->
r
.
Rec‹dCÆlback
 = 
MemFªeCÆlback
;

7014 
exåa
->
r
.
Rec‹dC⁄ãxt
 = 
C⁄ãxt
;

7015 *
e
 = (*e)->
√xt
;

7016 #i‚de‡
UNICAST_DISABLED


7017 i‡(!(
§
->
RR_SRV
.
ª§ec
.
I¡îÁ˚ID
 =
mDNSI¡îÁ˚_LoˇlO∆y
 || 
	`IsLoˇlDomaö
(§->RR_SRV.ª§ec.
«me
)))

7018 
°©us
 = 
	`uDNS_Dîegi°îRec‹d
(
m
, &
exåa
->
r
);

7021 
°©us
 = 
	`mDNS_Dîegi°î_öã∫Æ
(
m
, &
exåa
->
r
, 
mDNS_Dîeg_n‹mÆ
);

7023 
	`mDNS_U∆ock
(
m
);

7024 (
°©us
);

7025 
	}
}

7027 
mDNSexp‹t
 
mSètus
 
	$mDNS_RíameAndRîegi°îSîvi˚
(
mDNS
 *c⁄° 
m
, 
Sîvi˚Rec‹dSë
 *c⁄° 
§
, c⁄° 
domaöœbñ
 *
√w«me
)

7031 
domaöœbñ
 
«me1
, 
«me2
;

7032 
domaö«me
 
ty≥
, 
domaö
;

7033 
domaö«me
 *
ho°
 = 
mDNSNULL
;

7034 
ExåaResour˚Rec‹d
 *
exåas
 = 
§
->
Exåas
;

7035 
mSètus
 
îr
;

7037 
	`Dec⁄°ru˘Sîvi˚Name
(
§
->
RR_SRV
.
ª§ec
.
«me
, &
«me1
, &
ty≥
, &
domaö
);

7038 i‡(!
√w«me
)

7040 
«me2
 = 
«me1
;

7041 
	`In¸emítLabñSuffix
(&
«me2
, 
mDNSåue
);

7042 
√w«me
 = &
«me2
;

7045 i‡(
	`SameDomaöName
(&
domaö
, &
loˇldomaö
))

7046 
	`LogMsg
("%##†£rvi˚Ñíamed from \"%#s\"Åÿ\"%#s\"", 
ty≥
.
c
, 
«me1
.c, 
√w«me
->c);

7047 
	`LogMsg
("%##†£rvi˚ (domaö %##sËª«med from \"%#s\"Åÿ\"%#s\"",
ty≥
.
c
, 
domaö
.c, 
«me1
.c, 
√w«me
->c);

7049 i‡(
§
->
RR_SRV
.
Ho°T¨gë
 =
mDNSÁl£
 && sr->
Ho°
.
c
[0]Ë
ho°
 = &sr->Host;

7051 
îr
 = 
	`mDNS_Regi°îSîvi˚
(
m
, 
§
, 
√w«me
, &
ty≥
, &
domaö
,

7052 
ho°
, 
§
->
RR_SRV
.
ª§ec
.
rd©a
->
u
.
§v
.
p‹t
, sr->
RR_TXT
.ª§ec.rd©a->u.
txt
.
c
, sr->RR_TXT.ª§ec.
rdÀngth
,

7053 
§
->
SubTy≥s
, sr->
NumSubTy≥s
,

7054 
§
->
RR_PTR
.
ª§ec
.
I¡îÁ˚ID
, sr->
Sîvi˚CÆlback
, sr->
Sîvi˚C⁄ãxt
);

7059 !
îr
 && 
exåas
)

7061 
ExåaResour˚Rec‹d
 *
e
 = 
exåas
;

7062 
exåas
 =Éxåas->
√xt
;

7063 
îr
 = 
	`mDNS_AddRec‹dToSîvi˚
(
m
, 
§
, 
e
,É->
r
.
ª§ec
.
rd©a
,É->r.ª§ec.
º‹igöÆâl
);

7066 (
îr
);

7067 
	}
}

7072 
mDNSexp‹t
 
mSètus
 
	$mDNS_Dîegi°îSîvi˚
(
mDNS
 *c⁄° 
m
, 
Sîvi˚Rec‹dSë
 *
§
)

7075 i‡(!
§
->
RR_SRV
.
ª§ec
.
rd©a
->
u
.
§v
.
p‹t
.
NŸAnI¡egî
Ë(
	`mDNS_Dîegi°îNoSuchSîvi˚
(
m
, &sr->RR_SRV));

7077 #i‚de‡
UNICAST_DISABLED


7078 i‡(!(
§
->
RR_SRV
.
ª§ec
.
I¡îÁ˚ID
 =
mDNSI¡îÁ˚_LoˇlO∆y
 || 
	`IsLoˇlDomaö
(§->RR_SRV.ª§ec.
«me
)))

7080 
mSètus
 
°©us
;

7081 
	`mDNS_Lock
(
m
);

7082 
°©us
 = 
	`uDNS_Dîegi°îSîvi˚
(
m
, 
§
);

7083 
	`mDNS_U∆ock
(
m
);

7084 (
°©us
);

7087 i‡(
§
->
RR_PTR
.
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥Uƒegi°îed
)

7089 
	`debugf
("Sîvi˚ së f‹ %##†Æªady dîegi°îed", 
§
->
RR_SRV
.
ª§ec
.
«me
->
c
);

7090 (
mSètus_BadRe„ªn˚Eº
);

7092 i‡(
§
->
RR_PTR
.
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥Dîegi°îög
)

7094 
	`debugf
("Sîvi˚ së f‹ %##†Æªady i¿thê¥o˚s†o‡dîegi°îög", 
§
->
RR_SRV
.
ª§ec
.
«me
->
c
);

7095 (
mSètus_NoEº‹
);

7099 
mDNSu32
 
i
;

7100 
mSètus
 
°©us
;

7101 
ExåaResour˚Rec‹d
 *
e
;

7102 
	`mDNS_Lock
(
m
);

7103 
e
 = 
§
->
Exåas
;

7107 
	`mDNS_Dîegi°î_öã∫Æ
(
m
, &
§
->
RR_SRV
, 
mDNS_Dîeg_ª≥©
);

7108 
	`mDNS_Dîegi°î_öã∫Æ
(
m
, &
§
->
RR_TXT
, 
mDNS_Dîeg_ª≥©
);

7110 
	`mDNS_Dîegi°î_öã∫Æ
(
m
, &
§
->
RR_ADV
, 
mDNS_Dîeg_n‹mÆ
);

7114 
e
)

7116 
	`mDNS_Dîegi°î_öã∫Æ
(
m
, &
e
->
r
, 
mDNS_Dîeg_ª≥©
);

7117 
e
 =É->
√xt
;

7120 
i
=0; i<
§
->
NumSubTy≥s
; i++)

7121 
	`mDNS_Dîegi°î_öã∫Æ
(
m
, &
§
->
SubTy≥s
[
i
], 
mDNS_Dîeg_n‹mÆ
);

7128 
°©us
 = 
	`mDNS_Dîegi°î_öã∫Æ
(
m
, &
§
->
RR_PTR
, 
mDNS_Dîeg_n‹mÆ
);

7129 
	`mDNS_U∆ock
(
m
);

7130 (
°©us
);

7132 
	}
}

7140 
mDNSexp‹t
 
mSètus
 
	$mDNS_Regi°îNoSuchSîvi˚
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
,

7141 c⁄° 
domaöœbñ
 *c⁄° 
«me
, c⁄° 
domaö«me
 *c⁄° 
ty≥
, c⁄° domaö«mê*c⁄° 
domaö
,

7142 c⁄° 
domaö«me
 *c⁄° 
ho°
,

7143 c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, 
mDNSRec‹dCÆlback
 
CÆlback
, *
C⁄ãxt
)

7145 
	`mDNS_SëupResour˚Rec‹d
(
º
, 
mDNSNULL
, 
I¡îÁ˚ID
, 
kDNSTy≥_SRV
, 
kHo°NameTTL
, 
kDNSRec‹dTy≥Unique
, 
CÆlback
, 
C⁄ãxt
);

7146 i‡(
	`C⁄°ru˘Sîvi˚Name
(
º
->
ª§ec
.
«me
,Çame, 
ty≥
, 
domaö
Ë=
mDNSNULL
Ë(
mSètus_BadP¨amEº
);

7147 
º
->
ª§ec
.
rd©a
->
u
.
§v
.
¥i‹ôy
 = 0;

7148 
º
->
ª§ec
.
rd©a
->
u
.
§v
.
weight
 = 0;

7149 
º
->
ª§ec
.
rd©a
->
u
.
§v
.
p‹t
 = 
zîoIPP‹t
;

7150 i‡(
ho°
 && ho°->
c
[0]Ë
	`AssignDomaöName
(&
º
->
ª§ec
.
rd©a
->
u
.
§v
.
èrgë
, host);

7151 
º
->
Ho°T¨gë
 = 
mDNSåue
;

7152 (
	`mDNS_Regi°î
(
m
, 
º
));

7153 
	}
}

7155 
mDNSexp‹t
 
mSètus
 
	$mDNS_Advîti£Domaös
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *
º
,

7156 
mDNS_DomaöTy≥
 
DomaöTy≥
, c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, *
dom«me
)

7158 
	`mDNS_SëupResour˚Rec‹d
(
º
, 
mDNSNULL
, 
I¡îÁ˚ID
, 
kDNSTy≥_PTR
, 
kSènd¨dTTL
, 
kDNSRec‹dTy≥Sh¨ed
, mDNSNULL, mDNSNULL);

7159 i‡(!
	`MakeDomaöNameFromDNSNameSåög
(
º
->
ª§ec
.
«me
, 
mDNS_DomaöTy≥Names
[
DomaöTy≥
])Ë(
mSètus_BadP¨amEº
);

7160 i‡(!
	`MakeDomaöNameFromDNSNameSåög
(&
º
->
ª§ec
.
rd©a
->
u
.
«me
, 
dom«me
)Ë(
mSètus_BadP¨amEº
);

7161 (
	`mDNS_Regi°î
(
m
, 
º
));

7162 
	}
}

7165 #i‡
COMPILER_LIKES_PRAGMA_MARK


7166 #¥agm®
m¨k
 -

7167 #¥agm®
m¨k
 -

7168 #¥agm®
m¨k
 - 
Sèπup
 
™d
 
Shutdown


7171 
mDNSloˇl
 
	$mDNS_GrowCache_öã∫Æ
(
mDNS
 *c⁄° 
m
, 
CacheE¡ôy
 *
°‹age
, 
mDNSu32
 
numªc‹ds
)

7173 i‡(
°‹age
 && 
numªc‹ds
)

7175 
mDNSu32
 
i
;

7176 
	`debugf
("Addög cachê°‹agêf‹ %d m‹êªc‹d†(%d byãs)", 
numªc‹ds
,Çumªc‹ds*(
CacheE¡ôy
));

7177 
i
=0; i<
numªc‹ds
; i++Ë
°‹age
[i].
√xt
 = &storage[i+1];

7178 
°‹age
[
numªc‹ds
-1].
√xt
 = 
m
->
ºˇche_‰ì
;

7179 
m
->
ºˇche_‰ì
 = 
°‹age
;

7180 
m
->
ºˇche_size
 +
numªc‹ds
;

7182 
	}
}

7184 
mDNSexp‹t
 
	$mDNS_GrowCache
(
mDNS
 *c⁄° 
m
, 
CacheE¡ôy
 *
°‹age
, 
mDNSu32
 
numªc‹ds
)

7186 
	`mDNS_Lock
(
m
);

7187 
	`mDNS_GrowCache_öã∫Æ
(
m
, 
°‹age
, 
numªc‹ds
);

7188 
	`mDNS_U∆ock
(
m
);

7189 
	}
}

7191 
mDNSexp‹t
 
mSètus
 
	$mDNS_Inô
(
mDNS
 *c⁄° 
m
, 
mDNS_Pœtf‹mSuµ‹t
 *c⁄° 
p
,

7192 
CacheE¡ôy
 *
ºˇche°‹age
, 
mDNSu32
 
ºˇchesize
,

7193 
mDNSBoﬁ
 
Advîti£LoˇlAddªs£s
, 
mDNSCÆlback
 *
CÆlback
, *
C⁄ãxt
)

7195 
mDNSu32
 
¶Ÿ
;

7196 
mDNSs32
 
timíow
;

7197 
mSètus
 
ªsu…
;

7199 i‡(!
ºˇche°‹age
Ë
ºˇchesize
 = 0;

7201 
m
->
p
 =Ö;

7202 
m
->
KnownBugs
 = 0;

7203 
m
->
C™Re˚iveUniˇ°On5353
 = 
mDNSÁl£
;

7204 
m
->
Advîti£LoˇlAddªs£s
 = AdvertiseLocalAddresses;

7205 
m
->
mDNSPœtf‹mSètus
 = 
mSètus_Waôög
;

7206 
m
->
Uniˇ°P‹t4
 = 
zîoIPP‹t
;

7207 
m
->
Uniˇ°P‹t6
 = 
zîoIPP‹t
;

7208 
m
->
MaöCÆlback
 = 
CÆlback
;

7209 
m
->
MaöC⁄ãxt
 = 
C⁄ãxt
;

7210 
m
->
ªc
.
r
.
ª§ec
.
Rec‹dTy≥
 = 0;

7213 
m
->
mDNS_busy
 = 0;

7214 
m
->
mDNS_ªíå™cy
 = 0;

7215 
m
->
mDNS_shutdown
 = 
mDNSÁl£
;

7216 
m
->
lock_ºˇche
 = 0;

7217 
m
->
lock_Que°i⁄s
 = 0;

7218 
m
->
lock_Rec‹ds
 = 0;

7221 
ªsu…
 = 
	`mDNSPœtf‹mTimeInô
();

7222 i‡(
ªsu…
 !
mSètus_NoEº‹
) (result);

7223 
m
->
timíow_adju°
 = (
mDNSs32
)
	`mDNSR™dom
(0xFFFFFFFF);

7224 
timíow
 = 
	`mDNS_TimeNow_NoLock
(
m
);

7226 
m
->
timíow
 = 0;

7227 
m
->
timíow_œ°
 = 
timíow
;

7228 
m
->
NextScheduÀdEvít
 = 
timíow
;

7229 
m
->
SuµªssSídög
 = 
timíow
;

7230 
m
->
NextCacheCheck
 = 
timíow
 + 0x78000000;

7231 
m
->
NextScheduÀdQuîy
 = 
timíow
 + 0x78000000;

7232 
m
->
NextScheduÀdProbe
 = 
timíow
 + 0x78000000;

7233 
m
->
NextScheduÀdRe•⁄£
 = 
timíow
 + 0x78000000;

7234 
m
->
Ex≥˘Uniˇ°Re•⁄£
 = 
timíow
 + 0x78000000;

7235 
m
->
R™domQuîyDñay
 = 0;

7236 
m
->
R™domRec⁄fúmDñay
 = 0;

7237 
m
->
PktNum
 = 0;

7238 
m
->
SídDîegi°øti⁄s
 = 
mDNSÁl£
;

7239 
m
->
SídImmedüãAnswîs
 = 
mDNSÁl£
;

7240 
m
->
SÀïSèã
 = 
mDNSÁl£
;

7243 
m
->
Que°i⁄s
 = 
mDNSNULL
;

7244 
m
->
NewQue°i⁄s
 = 
mDNSNULL
;

7245 
m
->
CuºítQue°i⁄
 = 
mDNSNULL
;

7246 
m
->
LoˇlO∆yQue°i⁄s
 = 
mDNSNULL
;

7247 
m
->
NewLoˇlO∆yQue°i⁄s
 = 
mDNSNULL
;

7248 
m
->
ºˇche_size
 = 0;

7249 
m
->
ºˇche_tŸÆu£d
 = 0;

7250 
m
->
ºˇche_a˘ive
 = 0;

7251 
m
->
ºˇche_ªp‹t
 = 10;

7252 
m
->
ºˇche_‰ì
 = 
mDNSNULL
;

7254 
¶Ÿ
 = 0; slŸ < 
CACHE_HASH_SLOTS
; slŸ++Ë
m
->
ºˇche_hash
[¶Ÿ] = 
mDNSNULL
;

7256 
	`mDNS_GrowCache_öã∫Æ
(
m
, 
ºˇche°‹age
, 
ºˇchesize
);

7259 
m
->
ho°œbñ
.
c
[0] = 0;

7260 
m
->
ni˚œbñ
.
c
[0] = 0;

7261 
m
->
Mu…iˇ°Ho°«me
.
c
[0] = 0;

7262 
m
->
HIH¨dw¨e
.
c
[0] = 0;

7263 
m
->
HISo·w¨e
.
c
[0] = 0;

7264 
m
->
Resour˚Rec‹ds
 = 
mDNSNULL
;

7265 
m
->
Du∂iˇãRec‹ds
 = 
mDNSNULL
;

7266 
m
->
NewLoˇlRec‹ds
 = 
mDNSNULL
;

7267 
m
->
CuºítRec‹d
 = 
mDNSNULL
;

7268 
m
->
Ho°I¡îÁ˚s
 = 
mDNSNULL
;

7269 
m
->
ProbeFaûTime
 = 0;

7270 
m
->
NumFaûedProbes
 = 0;

7271 
m
->
SuµªssProbes
 = 0;

7273 #i‚de‡
UNICAST_DISABLED


7274 
	`uDNS_Inô
(
m
);

7275 
m
->
SuµªssStdP‹t53Quîõs
 = 0;

7277 
ªsu…
 = 
	`mDNSPœtf‹mInô
(
m
);

7279 (
ªsu…
);

7280 
	}
}

7282 
mDNSexp‹t
 
	$mDNSC‹eInôCom∂ëe
(
mDNS
 *c⁄° 
m
, 
mSètus
 
ªsu…
)

7284 
m
->
mDNSPœtf‹mSètus
 = 
ªsu…
;

7285 i‡(
m
->
MaöCÆlback
)

7287 
	`mDNS_Lock
(
m
);

7288 
m
->
mDNS_ªíå™cy
++;

7289 
m
->
	`MaöCÆlback
(m, 
mSètus_NoEº‹
);

7290 
m
->
mDNS_ªíå™cy
--;

7291 
	`mDNS_U∆ock
(
m
);

7293 
	}
}

7295 
mDNSexp‹t
 
	$mDNS_Clo£
(
mDNS
 *c⁄° 
m
)

7297 
mDNSu32
 
ºˇche_a˘ive
 = 0;

7298 
mDNSu32
 
ºˇche_tŸÆu£d
 = 0;

7299 
mDNSu32
 
¶Ÿ
;

7300 
Nëw‹kI¡îÁ˚Info
 *
ötf
;

7301 
	`mDNS_Lock
(
m
);

7303 
m
->
mDNS_shutdown
 = 
mDNSåue
;

7305 #i‚de‡
UNICAST_DISABLED


7306 
	`uDNS_Clo£
(
m
);

7308 
ºˇche_tŸÆu£d
 = 
m
->rrcache_totalused;

7309 
¶Ÿ
 = 0; slŸ < 
CACHE_HASH_SLOTS
; slot++)

7311 
m
->
ºˇche_hash
[
¶Ÿ
])

7313 
CacheGroup
 *
cg
 = 
m
->
ºˇche_hash
[
¶Ÿ
];

7314 
cg
->
membîs
)

7316 
CacheRec‹d
 *
º
 = 
cg
->
membîs
;

7317 
cg
->
membîs
 = cg->membîs->
√xt
;

7318 i‡(
º
->
CRA˘iveQue°i⁄
Ë
ºˇche_a˘ive
++;

7319 
	`Rñó£CacheRec‹d
(
m
, 
º
);

7321 
cg
->
ºˇche_èû
 = &cg->
membîs
;

7322 
	`Rñó£CacheGroup
(
m
, &m->
ºˇche_hash
[
¶Ÿ
]);

7325 
	`debugf
("mDNS_Clo£: RR Cachêwa†usög %ldÑec‹ds, %luá˘ive", 
ºˇche_tŸÆu£d
, 
ºˇche_a˘ive
);

7326 i‡(
ºˇche_a˘ive
 !
m
->rrcache_active)

7327 
	`LogMsg
("*** ERROR ***Ñrˇche_a˘ivê%lu !m->ºˇche_a˘ivê%lu", 
ºˇche_a˘ive
, 
m
->rrcache_active);

7329 
ötf
 = 
m
->
Ho°I¡îÁ˚s
; i¡f; i¡‡ötf->
√xt
)

7330 i‡(
ötf
->
Advîti£
)

7331 
	`Dódvîti£I¡îÁ˚
(
m
, 
ötf
);

7334 i‡(
m
->
CuºítRec‹d
Ë
	`LogMsg
("mDNS_Close ERROR m->CurrentRecordálready set");

7335 
m
->
CuºítRec‹d
 = m->
Resour˚Rec‹ds
;

7336 
m
->
CuºítRec‹d
)

7338 
AuthRec‹d
 *
º
 = 
m
->
CuºítRec‹d
;

7339 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 !
kDNSRec‹dTy≥Dîegi°îög
)

7341 
	`debugf
("mDNS_Clo£: Rec‹dÅy≥ %X stû»ö Resour˚Rec‹d†li° %##s", 
º
->
ª§ec
.
Rec‹dTy≥
,Ñr->ª§ec.
«me
->
c
);

7342 
	`mDNS_Dîegi°î_öã∫Æ
(
m
, 
º
, 
mDNS_Dîeg_n‹mÆ
);

7345 
m
->
CuºítRec‹d
 = 
º
->
√xt
;

7348 i‡(
m
->
Resour˚Rec‹ds
Ë
	`debugf
("mDNS_Close: Sending finalÖackets for deregisteringÑecords");

7349 
	`debugf
("mDNS_Close: No deregisteringÑecordsÑemain");

7352 i‡(
m
->
mDNSPœtf‹mSètus
 !
mSètus_NoEº‹
Ë
	`DisˇrdDîegi°øti⁄s
(m);

7353 i‡(
m
->
Resour˚Rec‹ds
Ë
	`SídRe•⁄£s
(m);

7354 i‡(
m
->
Resour˚Rec‹ds
Ë
	`LogMsg
("mDNS_Clo£ faûedÅÿ£nd goodbyêf‹: %s", 
	`ARDi•œySåög
(m, m->ResourceRecords));

7356 
	`mDNS_U∆ock
(
m
);

7357 
	`debugf
("mDNS_Close: mDNSPlatformClose");

7358 
	`mDNSPœtf‹mClo£
(
m
);

7359 
	`debugf
("mDNS_Close: done");

7360 
	}
}

	@mdns/mDNSDebug.c

4 #ifde‡
HAVE_CONFIG_H


5 
	~"c⁄fig.h
"

8 
	~<°dio.h
>

9 
	~<°d¨g.h
>

10 
	~<°rög.h
>

12 
	~"îr.h
"

14 
	$LogMsg
(c⁄° *
f‹m©
, ...) {

15 
buf„r
[512];

16 
va_li°
 
±r
;

17 
	`va_°¨t
(
±r
,
f‹m©
);

18 
	`mem£t
(
buf„r
,0,(buffer));

19 
	`v¢¥ötf
((*)
buf„r
, (buf„r), 
f‹m©
, 
±r
);

20 
	`va_íd
(
±r
);

21 
	`DPRINTF
(
E_WARN
,
L_REND
,"%s\n",
buf„r
);

22 
	}
}

	@mdns/mDNSDebug.h

85 #i‚de‡
__mDNSDebug_h


86 
	#__mDNSDebug_h


	)

104 
	#MDNS_CHECK_PRINTF_STYLE_FUNCTIONS
 0

	)

105 #i‡
MDNS_CHECK_PRINTF_STYLE_FUNCTIONS


106 
	#IS_A_PRINTF_STYLE_FUNCTION
(
F
,
A
Ë
	`__©åibuã__
 ((
	`f‹m©
(
¥ötf
,F,A)))

	)

108 
	#IS_A_PRINTF_STYLE_FUNCTION
(
F
,
A
)

	)

111 #ifdef 
__˝lu•lus


115 #i‡
MDNS_DEBUGMSGS


116 
	#debugf
 
debugf_


	)

117 
	$debugf_
(c⁄° *
f‹m©
, ...Ë
	`IS_A_PRINTF_STYLE_FUNCTION
(1,2);

119 #i‡(
	`deföed
(
__GNUC__
))

120 
	#debugf
–
ARGS
... ) (()0)

	)

121 #ñi‡(
	`deföed
(
__MWERKS__
))

122 
	#debugf
–... )

	)

124 
	#debugf
 1 ? (()0Ë: ()

	)

128 #i‡
MDNS_DEBUGMSGS
 > 1

129 
	#vîbo£debugf
 
vîbo£debugf_


	)

130 
	`vîbo£debugf_
(c⁄° *
f‹m©
, ...Ë
	`IS_A_PRINTF_STYLE_FUNCTION
(1,2);

132 #i‡(
	`deföed
(
__GNUC__
))

133 
	#vîbo£debugf
–
ARGS
... ) (()0)

	)

134 #ñi‡(
	`deföed
(
__MWERKS__
))

135 
	#vîbo£debugf
–... )

	)

137 
	#vîbo£debugf
 1 ? (()0Ë: ()

	)

142 
mDNS_DebugMode
;

143 
	`LogMsg
(c⁄° *
f‹m©
, ...Ë
	`IS_A_PRINTF_STYLE_FUNCTION
(1,2);

144 
	`LogMsgIdít
(c⁄° *
idít
, c⁄° *
f‹m©
, ...Ë
	`IS_A_PRINTF_STYLE_FUNCTION
(2,3);

145 
	`LogMsgNoIdít
(c⁄° *
f‹m©
, ...Ë
	`IS_A_PRINTF_STYLE_FUNCTION
(1,2);

148 
	#ANSWER_REMOTE_HOSTNAME_QUERIES
 0

	)

152 
	#MACOSX_MDNS_MALLOC_DEBUGGING
 0

	)

154 #i‡
MACOSX_MDNS_MALLOC_DEBUGGING
 >= 1

155 *
	`mÆlocL
(*
msg
, 
size
);

156 
	`‰ìL
(*
msg
, *
x
);

157 
	`LogMemC‹ru±i⁄
(c⁄° *
f‹m©
, ...);

158 
	`uds_vÆid©ñi°s
();

160 
	#mÆlocL
(
X
,
Y
Ë
	`mÆloc
(Y)

	)

161 
	#‰ìL
(
X
,
Y
Ë
	`‰ì
(Y)

	)

164 #i‡
MACOSX_MDNS_MALLOC_DEBUGGING
 >= 2

165 
	#LogMÆloc
 
LogMsg


	)

167 #i‡(
	`deföed
–
__GNUC__
 ))

168 
	#LogMÆloc
(
ARGS
...Ë(()0)

	)

169 #ñi‡(
	`deföed
–
__MWERKS__
 ))

170 
	#LogMÆloc
–... )

	)

172 
	#LogMÆloc
 1 ? (()0Ë: ()

	)

176 
	#LogAŒO≥øti⁄s
 0

	)

178 #i‡
LogAŒO≥øti⁄s


179 
	#LogO≥øti⁄
 
LogMsg


	)

181 
	#LogO≥øti⁄
 
debugf


	)

184 
	#F‹˚AÀπs
 0

	)

186 #ifdef 
__˝lu•lus


187 
	}
}

	@mdns/mDNSEmbeddedAPI.h

1025 #i‚de‡
__mDNSClõ¡API_h


1026 
	#__mDNSClõ¡API_h


	)

1028 #i‡
deföed
(
EFI32
Ë|| deföed(
EFI64
)

1030 
	~"Tüno.h
"

1031 
	#va_li°
 
VA_LIST


	)

1032 
	#va_°¨t
(
a
, 
b
Ë
	`VA_START
◊, b)

	)

1033 
	#va_íd
(
a
Ë
	`VA_END
◊)

	)

1034 
	#va_¨g
(
a
, 
b
Ë
	`VA_ARG
◊, b)

	)

1036 
	~<°d¨g.h
>

1039 
	~"mDNSDebug.h
"

1041 #ifde‡
__˝lu•lus


1049 #i‚de‡
mDNSloˇl


1050 
	#mDNSloˇl
 

	)

1056 #i‚de‡
mDNSexp‹t


1057 
	#mDNSexp‹t


	)

1080 #i‚de‡
∑cked°ru˘


1081 #i‡((
__GNUC__
 > 2Ë|| ((__GNUC__ =2Ë&& (
__GNUC_MINOR__
 >= 9)))

1082 
	#∑cked°ru˘
 
	`__©åibuã__
((
__∑cked__
))

	)

1083 
	#∑ckeduni⁄
 
	`__©åibuã__
((
__∑cked__
))

	)

1085 
	#∑cked°ru˘
 

	)

1086 
	#∑ckeduni⁄
 

	)

1092 #¥agm®
m¨k
 - 
DNS
 
Resour˚
 
Rec‹d
 
˛ass
 
™d
 
ty≥
 
c⁄°™ts


1097 
kDNSCœss_IN
 = 1,

1098 
kDNSCœss_CS
 = 2,

1099 
kDNSCœss_CH
 = 3,

1100 
kDNSCœss_HS
 = 4,

1101 
kDNSCœss_NONE
 = 254,

1103 
kDNSCœss_Mask
 = 0x7FFF,

1104 
kDNSCœss_UniqueRRSë
 = 0x8000,

1106 
kDNSQCœss_ANY
 = 255,

1107 
kDNSQCœss_Uniˇ°Re•⁄£
 = 0x8000

1108 } 
	tDNS_CœssVÆues
;

1112 
kDNSTy≥_A
 = 1,

1113 
kDNSTy≥_NS
,

1114 
kDNSTy≥_MD
,

1115 
kDNSTy≥_MF
,

1116 
kDNSTy≥_CNAME
,

1117 
kDNSTy≥_SOA
,

1118 
kDNSTy≥_MB
,

1119 
kDNSTy≥_MG
,

1120 
kDNSTy≥_MR
,

1121 
kDNSTy≥_NULL
,

1122 
kDNSTy≥_WKS
,

1123 
kDNSTy≥_PTR
,

1124 
kDNSTy≥_HINFO
,

1125 
kDNSTy≥_MINFO
,

1126 
kDNSTy≥_MX
,

1127 
kDNSTy≥_TXT
,

1129 
kDNSTy≥_AAAA
 = 28,

1130 
kDNSTy≥_SRV
 = 33,

1131 
kDNSTy≥_OPT
 = 41,

1132 
kDNSTy≥_TSIG
 = 250,

1134 
kDNSQTy≥_ANY
 = 255

1135 } 
	tDNS_Ty≥VÆues
;

1139 #¥agm®
m¨k
 - 
Sim∂e
 
ty≥s


1144 
	tmDNSBoﬁ
;

1145 sig√d 
	tmDNSs8
;

1146 
	tmDNSu8
;

1147 sig√d 
	tmDNSs16
;

1148 
	tmDNSu16
;

1158 #i‡
deföed
(
_ILP64
Ë|| deföed(
__ILP64__
)

1159 sig√d 
	töt32
 
	tmDNSs32
;

1160 
	töt32
 
	tmDNSu32
;

1161 #ñi‡
deföed
(
_LP64
Ë|| deföed(
__LP64__
)

1162 sig√d 
	tmDNSs32
;

1163 
	tmDNSu32
;

1165 sig√d 
	tmDNSs32
;

1166 
	tmDNSu32
;

1174 
	smDNSI¡îÁ˚ID_dummy°ru˘
 { *
dummy
; } *
	tmDNSI¡îÁ˚ID
;

1183 
∑ckeduni⁄
 { 
mDNSu8
 
b
[ 2]; 
mDNSu16
 
NŸAnI¡egî
; } 
	tmDNSO∑que16
;

1184 
∑ckeduni⁄
 { 
mDNSu8
 
b
[ 4]; 
mDNSu32
 
NŸAnI¡egî
; } 
	tmDNSO∑que32
;

1185 
∑ckeduni⁄
 { 
mDNSu8
 
b
[ 6]; 
mDNSu16
 
w
[3]; 
mDNSu32
 
l
[1]; } 
	tmDNSO∑que48
;

1186 
∑ckeduni⁄
 { 
mDNSu8
 
b
[16]; 
mDNSu16
 
w
[8]; 
mDNSu32
 
l
[4]; } 
	tmDNSO∑que128
;

1188 
mDNSO∑que16
 
	tmDNSIPP‹t
;

1189 
mDNSO∑que32
 
	tmDNSv4Addr
;

1190 
mDNSO∑que128
 
	tmDNSv6Addr
;

1191 
mDNSO∑que48
 
	tmDNSEthAddr
;

1195 
mDNSAddrTy≥_N⁄e
 = 0,

1196 
mDNSAddrTy≥_IPv4
 = 4,

1197 
mDNSAddrTy≥_IPv6
 = 6,

1198 
mDNSAddrTy≥_Unknown
 = ~0

1203 
mDNSs32
 
ty≥
;

1204 uni⁄ { 
mDNSv6Addr
 
v6
; 
mDNSv4Addr
 
v4
; } 
ù
;

1205 } 
	tmDNSAddr
;

1207 íum { 
mDNSÁl£
 = 0, 
mDNSåue
 = 1 };

1209 
	#mDNSNULL
 0L

	)

1213 
mSètus_Waôög
 = 1,

1214 
mSètus_NoEº‹
 = 0,

1221 
mSètus_UnknownEº
 = -65537,

1222 
mSètus_NoSuchNameEº
 = -65538,

1223 
mSètus_NoMem‹yEº
 = -65539,

1224 
mSètus_BadP¨amEº
 = -65540,

1225 
mSètus_BadRe„ªn˚Eº
 = -65541,

1226 
mSètus_BadSèãEº
 = -65542,

1227 
mSètus_BadFœgsEº
 = -65543,

1228 
mSètus_Unsuµ‹ãdEº
 = -65544,

1229 
mSètus_NŸInôülizedEº
 = -65545,

1230 
mSètus_NoCache
 = -65546,

1231 
mSètus_AÃódyRegi°îed
 = -65547,

1232 
mSètus_NameC⁄Êi˘
 = -65548,

1233 
mSètus_InvÆid
 = -65549,

1234 
mSètus_FúewÆl
 = -65550,

1235 
mSètus_Incom∑tibÀ
 = -65551,

1236 
mSètus_BadI¡îÁ˚Eº
 = -65552,

1237 
mSètus_Refu£d
 = -65553,

1238 
mSètus_NoSuchRec‹d
 = -65554,

1239 
mSètus_NoAuth
 = -65555,

1240 
mSètus_NoSuchKey
 = -65556,

1241 
mSètus_NATTøvîßl
 = -65557,

1242 
mSètus_DoubÀNAT
 = -65558,

1243 
mSètus_BadTime
 = -65559,

1244 
mSètus_BadSig
 = -65560,

1245 
mSètus_BadKey
 = -65561,

1246 
mSètus_Tønsõ¡Eº
 = -65562,

1250 
mSètus_C⁄nPídög
 = -65787,

1251 
mSètus_C⁄nFaûed
 = -65788,

1252 
mSètus_C⁄nE°ablished
 = -65789,

1255 
mSètus_GrowCache
 = -65790,

1256 
mSètus_C⁄figCh™ged
 = -65791,

1257 
mSètus_MemFªe
 = -65792

1262 
mDNSs32
 
	tmSètus
;

1265 
	#MAX_DOMAIN_LABEL
 63

	)

1266 °ru˘ { 
mDNSu8
 
c
[ 64]; } 
	tdomaöœbñ
;

1269 
	#MAX_DOMAIN_NAME
 255

	)

1270 °ru˘ { 
mDNSu8
 
c
[256]; } 
	tdomaö«me
;

1272 °ru˘ { 
mDNSu8
 
c
[256]; } 
	tUTF8°r255
;

1286 
	#MAX_ESCAPED_DOMAIN_LABEL
 254

	)

1287 
	#MAX_ESCAPED_DOMAIN_NAME
 1005

	)

1297 
	#kSènd¨dTTL
 (3600UL * 100 / 80)

	)

1298 
	#kHo°NameTTL
 120UL

	)

1299 
	#kWideAªaTTL
 3

	)

1301 
	#DeÁu…TTLf‹RRTy≥
(
X
Ë(((XË=
kDNSTy≥_A
 || (XË=
kDNSTy≥_AAAA
 || (XË=
kDNSTy≥_SRV
Ë? 
kHo°NameTTL
 : 
kSènd¨dTTL
)

	)

1305 #¥agm®
m¨k
 - 
DNS
 
Mesßge
 
°ru˘uªs


1308 
	#mDNS_numZ⁄es
 
numQue°i⁄s


	)

1309 
	#mDNS_numPªªqs
 
numAnswîs


	)

1310 
	#mDNS_numUpd©es
 
numAuth‹ôõs


	)

1312 
∑cked°ru˘


1314 
mDNSO∑que16
 
id
;

1315 
mDNSO∑que16
 
Êags
;

1316 
mDNSu16
 
numQue°i⁄s
;

1317 
mDNSu16
 
numAnswîs
;

1318 
mDNSu16
 
numAuth‹ôõs
;

1319 
mDNSu16
 
numAddôi⁄Æs
;

1320 } 
	tDNSMesßgeHódî
;

1325 
	#AbsﬁuãMaxDNSMesßgeD©a
 8940

	)

1326 
	#N‹mÆMaxDNSMesßgeD©a
 1440

	)

1327 
∑cked°ru˘


1329 
DNSMesßgeHódî
 
h
;

1330 
mDNSu8
 
d©a
[
AbsﬁuãMaxDNSMesßgeD©a
];

1331 } 
	tDNSMesßge
;

1335 #¥agm®
m¨k
 - 
Resour˚
 
Rec‹d
 
°ru˘uªs


1393 
kDNSRec‹dTy≥Uƒegi°îed
 = 0x00,

1394 
kDNSRec‹dTy≥Dîegi°îög
 = 0x01,

1396 
kDNSRec‹dTy≥Unique
 = 0x02,

1398 
kDNSRec‹dTy≥Advis‹y
 = 0x04,

1399 
kDNSRec‹dTy≥Sh¨ed
 = 0x08,

1401 
kDNSRec‹dTy≥Vîifõd
 = 0x10,

1402 
kDNSRec‹dTy≥KnownUnique
 = 0x20,

1404 
kDNSRec‹dTy≥UniqueMask
 = (
kDNSRec‹dTy≥Unique
 | 
kDNSRec‹dTy≥Vîifõd
 | 
kDNSRec‹dTy≥KnownUnique
),

1405 
kDNSRec‹dTy≥A˘iveMask
 = (
kDNSRec‹dTy≥Advis‹y
 | 
kDNSRec‹dTy≥Sh¨ed
 | 
kDNSRec‹dTy≥Vîifõd
 | 
kDNSRec‹dTy≥KnownUnique
),

1407 
kDNSRec‹dTy≥PackëAdd
 = 0x80,

1408 
kDNSRec‹dTy≥PackëAddUnique
 = 0x90,

1409 
kDNSRec‹dTy≥PackëAuth
 = 0xA0,

1410 
kDNSRec‹dTy≥PackëAuthUnique
 = 0xB0,

1411 
kDNSRec‹dTy≥PackëAns
 = 0xC0,

1412 
kDNSRec‹dTy≥PackëAnsUnique
 = 0xD0,

1414 
kDNSRec‹dTy≥PackëAnsMask
 = 0x40,

1415 
kDNSRec‹dTy≥PackëUniqueMask
 = 0x10

1418 
∑cked°ru˘
 { 
mDNSu16
 
¥i‹ôy
; mDNSu16 
weight
; 
mDNSIPP‹t
 
p‹t
; 
domaö«me
 
èrgë
; } 
	trd©aSRV
;

1419 
∑cked°ru˘
 { 
mDNSu16
 
¥e„ªn˚
; 
domaö«me
 
exch™ge
; } 
	trd©aMX
;

1420 
∑cked°ru˘


1422 
domaö«me
 
m«me
;

1423 
domaö«me
 
∫ame
;

1424 
mDNSs32
 
£rül
;

1425 
mDNSu32
 
ª‰esh
;

1426 
mDNSu32
 
ªåy
;

1427 
mDNSu32
 
expúe
;

1428 
mDNSu32
 
mö
;

1429 } 
	trd©aSOA
;

1431 
∑cked°ru˘


1433 
mDNSu16
 
vîs
;

1434 
mDNSu16
 
ŒqOp
;

1435 
mDNSu16
 
îr
;

1436 
mDNSu8
 
id
[8];

1437 
mDNSu32
 
Àa£
;

1438 } 
	tLLQO±D©a
;

1440 
	#LLQ_OPTLEN
 ((3 * (
mDNSu16
)Ë+ 8 + (
mDNSu32
))

	)

1446 
∑cked°ru˘


1448 
mDNSu16
 
›t
;

1449 
mDNSu16
 
›éí
;

1450 uni⁄ { 
LLQO±D©a
 
Œq
; 
mDNSu32
 
Àa£
; } 
O±D©a
;

1451 } 
	trd©aO±
;

1455 
	#Sènd¨dAuthRDSize
 264

	)

1456 
	#MaximumRDSize
 8192

	)

1470 
	#I∆öeCacheRDSize
 68

	)

1472 
	#I∆öeCacheGroupNameSize
 144

	)

1476 
mDNSu8
 
d©a
[
Sènd¨dAuthRDSize
];

1477 
mDNSv4Addr
 
ùv4
;

1478 
mDNSv6Addr
 
ùv6
;

1479 
domaö«me
 
«me
;

1480 
UTF8°r255
 
txt
;

1481 
rd©aSRV
 
§v
;

1482 
rd©aMX
 
mx
;

1483 
rd©aSOA
 
sﬂ
;

1484 
rd©aO±
 
›t
;

1485 } 
	tRD©aBody
;

1489 
mDNSu16
 
MaxRDLígth
;

1490 
RD©aBody
 
u
;

1491 } 
	tRD©a
;

1492 
	#sizeofRD©aHódî
 ((
RD©a
Ë- (
RD©aBody
))

	)

1494 
AuthRec‹d_°ru˘
 
	tAuthRec‹d
;

1495 
CacheRec‹d_°ru˘
 
	tCacheRec‹d
;

1496 
CacheGroup_°ru˘
 
	tCacheGroup
;

1497 
DNSQue°i⁄_°ru˘
 
	tDNSQue°i⁄
;

1498 
mDNS_°ru˘
 
	tmDNS
;

1499 
mDNS_Pœtf‹mSuµ‹t_°ru˘
 
	tmDNS_Pœtf‹mSuµ‹t
;

1500 
NATTøvîßlInfo_°ru˘
 
	tNATTøvîßlInfo
;

1503 
	tmDNSRec‹dCÆlback
(
	tmDNS
 *c⁄° 
	tm
, 
	tAuthRec‹d
 *c⁄° 
	tº
, 
	tmSètus
 
	tªsu…
);

1509 
	tmDNSRec‹dUpd©eCÆlback
(
	tmDNS
 *c⁄° 
	tm
, 
	tAuthRec‹d
 *c⁄° 
	tº
, 
	tRD©a
 *
	tOldRD©a
);

1513 
mDNSu8
 
Rec‹dTy≥
;

1514 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
;

1518 
domaö«me
 *
«me
;

1519 
mDNSu16
 
ºty≥
;

1520 
mDNSu16
 
º˛ass
;

1521 
mDNSu32
 
º‹igöÆâl
;

1522 
mDNSu16
 
rdÀngth
;

1523 
mDNSu16
 
rde°im©e
;

1524 
mDNSu32
 
«mehash
;

1525 
mDNSu32
 
rd©ahash
;

1531 
RD©a
 *
rd©a
;

1532 } 
	tResour˚Rec‹d
;

1537 
ªgSèã_FëchögZ⁄eD©a
 = 1,

1538 
ªgSèã_Pídög
 = 2,

1539 
ªgSèã_Regi°îed
 = 3,

1540 
ªgSèã_DîegPídög
 = 4,

1541 
ªgSèã_DîegDe„ºed
 = 5,

1542 
ªgSèã_C™˚Œed
 = 6,

1543 
ªgSèã_Uƒegi°îed
 = 8,

1544 
ªgSèã_Re‰esh
 = 9,

1545 
ªgSèã_NATM≠
 = 10,

1546 
ªgSèã_Upd©ePídög
 = 11,

1547 
ªgSèã_NoT¨gë
 = 12,

1548 
ªgSèã_ExåaQueued
 = 13,

1549 
ªgSèã_NATEº‹
 = 14

1550 } 
	tªgSèã_t
;

1556 
ªgSèã_t
 
°©e
;

1557 
mDNSBoﬁ
 
Àa£
;

1558 
mDNSs32
 
expúe
;

1559 
mDNSBoﬁ
 
Te°F‹SñfC⁄Êi˘
;

1562 
mDNSO∑que16
 
id
;

1565 
domaö«me
 
z⁄e
;

1566 
mDNSAddr
 
ns
;

1567 
mDNSIPP‹t
 
p‹t
;

1570 
NATTøvîßlInfo
 *
NATöfo
;

1573 
mDNSBoﬁ
 
Clõ¡CÆlbackDe„ºed
;

1574 
mSètus
 
De„ºedSètus
;

1575 
mDNSBoﬁ
 
SRVUpd©eDe„ºed
;

1576 
mDNSBoﬁ
 
SRVCh™ged
;

1579 
RD©a
 *
OrigRD©a
; 
mDNSu16
 
OrigRDLí
;

1580 
RD©a
 *
InFlightRD©a
; 
mDNSu16
 
InFlightRDLí
;

1581 
RD©a
 *
QueuedRD©a
; 
mDNSu16
 
QueuedRDLí
;

1583 
mDNSRec‹dUpd©eCÆlback
 *
Upd©eRDCÆlback
;

1584 } 
	tuDNS_RegInfo
;

1586 
	sAuthRec‹d_°ru˘


1593 
AuthRec‹d
 *
√xt
;

1595 
Resour˚Rec‹d
 
ª§ec
;

1596 
uDNS_RegInfo
 
uDNS_öfo
;

1599 
AuthRec‹d
 *
Addôi⁄Æ1
;

1600 
AuthRec‹d
 *
Addôi⁄Æ2
;

1601 
AuthRec‹d
 *
DïídítOn
;

1602 
AuthRec‹d
 *
RRSë
;

1603 
mDNSRec‹dCÆlback
 *
Rec‹dCÆlback
;

1604 *
Rec‹dC⁄ãxt
;

1605 
mDNSu8
 
Ho°T¨gë
;

1606 
mDNSu8
 
AŒowRemŸeQuîy
;

1607 
mDNSu8
 
F‹˚MCa°
;

1610 
mDNSu8
 
AcknowÀdged
;

1611 
mDNSu8
 
ProbeCou¡
;

1612 
mDNSu8
 
A¬oun˚Cou¡
;

1613 
mDNSu8
 
RequúeGoodbye
;

1614 
mDNSu8
 
LoˇlAnswî
;

1615 
mDNSu8
 
In˛udeInProbe
;

1616 
mDNSI¡îÁ˚ID
 
ImmedAnswî
;

1617 
mDNSu8
 
ImmedUniˇ°
;

1618 #i‡
MDNS_LOG_ANSWER_SUPPRESSION_TIMES


1619 
mDNSs32
 
ImmedAnswîM¨kTime
;

1621 
mDNSI¡îÁ˚ID
 
ImmedAddôi⁄Æ
;

1622 
mDNSI¡îÁ˚ID
 
SídRNow
;

1623 
mDNSv4Addr
 
v4Reque°î
;

1624 
mDNSv6Addr
 
v6Reque°î
;

1625 
AuthRec‹d
 *
NextRe•⁄£
;

1626 c⁄° 
mDNSu8
 *
NR_AnswîTo
;

1627 
AuthRec‹d
 *
NR_Addôi⁄ÆTo
;

1628 
mDNSs32
 
ThisAPI¡îvÆ
;

1629 
mDNSs32
 
A¬oun˚U¡û
;

1630 
mDNSs32
 
La°APTime
;

1631 
mDNSs32
 
La°MCTime
;

1632 
mDNSI¡îÁ˚ID
 
La°MCI¡îÁ˚
;

1633 
RD©a
 *
NewRD©a
;

1634 
mDNSu16
 
√wrdÀngth
;

1635 
mDNSRec‹dUpd©eCÆlback
 *
Upd©eCÆlback
;

1636 
mDNSu32
 
Upd©eCªdôs
;

1637 
mDNSs32
 
NextUpd©eCªdô
;

1638 
mDNSs32
 
Upd©eBlocked
;

1640 
domaö«me
 
«me°‹age
;

1641 
RD©a
 
rd©a°‹age
;

1648 
	sARLi°EÀm


1650 
ARLi°EÀm
 *
√xt
;

1651 
AuthRec‹d
 
¨
;

1652 } 
	tARLi°EÀm
;

1654 
	sCacheGroup_°ru˘


1656 
CacheGroup
 *
√xt
;

1657 
mDNSu32
 
«mehash
;

1658 
CacheRec‹d
 *
membîs
;

1659 
CacheRec‹d
 **
ºˇche_èû
;

1660 
domaö«me
 *
«me
;

1661 
mDNSu8
 
«me°‹age
[
I∆öeCacheGroupNameSize
];

1664 
	sCacheRec‹d_°ru˘


1666 
CacheRec‹d
 *
√xt
;

1667 
Resour˚Rec‹d
 
ª§ec
;

1670 
CacheRec‹d
 *
NextInKALi°
;

1671 
mDNSs32
 
TimeRcvd
;

1672 
mDNSs32
 
DñayDñivîy
;

1673 
mDNSs32
 
NextRequúedQuîy
;

1674 
mDNSs32
 
La°U£d
;

1675 
DNSQue°i⁄
 *
CRA˘iveQue°i⁄
;

1676 
mDNSu32
 
U«nswîedQuîõs
;

1677 
mDNSs32
 
La°U«nswîedTime
;

1678 
mDNSu32
 
MPU«nswîedQ
;

1679 
mDNSs32
 
MPLa°U«nswîedQT
;

1680 
mDNSu32
 
MPU«nswîedKA
;

1681 
mDNSBoﬁ
 
MPEx≥˘ögKA
;

1682 
CacheRec‹d
 *
NextInCFLi°
;

1684 °ru˘ { 
mDNSu16
 
MaxRDLígth
; 
mDNSu8
 
d©a
[
I∆öeCacheRDSize
]; } 
rd©a°‹age
;

1688 
CacheE¡ôy_uni⁄
 
	tCacheE¡ôy
;

1689 
	uCacheE¡ôy_uni⁄
 { 
CacheE¡ôy
 *
√xt
; 
CacheGroup
 
cg
; 
CacheRec‹d
 
¸
; };

1693 
CacheRec‹d
 
r
;

1694 
mDNSu8
 
_exåad©a
[
MaximumRDSize
-
I∆öeCacheRDSize
];

1695 
domaö«me
 
«me°‹age
;

1696 } 
	tL¨geCacheRec‹d
;

1698 
	suDNS_Ho°«meInfo


1700 
uDNS_Ho°«meInfo
 *
√xt
;

1701 
domaö«me
 
fqdn
;

1702 
AuthRec‹d
 *
¨v4
;

1703 
AuthRec‹d
 *
¨v6
;

1704 
mDNSRec‹dCÆlback
 *
SètusCÆlback
;

1705 c⁄° *
SètusC⁄ãxt
;

1706 } 
	tuDNS_Ho°«meInfo
;

1710 
DNSSîvî_U¡e°ed
 = 0,

1711 
DNSSîvî_Faûed
 = 1,

1712 
DNSSîvî_Pas£d
 = 2

1715 
	sDNSSîvî


1717 
DNSSîvî
 *
√xt
;

1718 
mDNSAddr
 
addr
;

1719 
mDNSBoﬁ
 
dñ
;

1720 
mDNSu32
 
ã°°©e
;

1721 
domaö«me
 
domaö
;

1722 } 
	tDNSSîvî
;

1724 
Nëw‹kI¡îÁ˚Info_°ru˘
 
	tNëw‹kI¡îÁ˚Info
;

1735 
	sNëw‹kI¡îÁ˚Info_°ru˘


1738 
Nëw‹kI¡îÁ˚Info
 *
√xt
;

1740 
mDNSBoﬁ
 
I¡îÁ˚A˘ive
;

1741 
mDNSBoﬁ
 
IPv4AvaûabÀ
;

1742 
mDNSBoﬁ
 
IPv6AvaûabÀ
;

1745 
AuthRec‹d
 
RR_A
;

1746 
AuthRec‹d
 
RR_PTR
;

1747 
AuthRec‹d
 
RR_HINFO
;

1750 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
;

1751 
mDNSAddr
 
ù
;

1752 
mDNSAddr
 
mask
;

1753 
i‚ame
[64];

1754 
mDNSBoﬁ
 
Advîti£
;

1755 
mDNSBoﬁ
 
Mˇ°TxRx
;

1758 
ExåaResour˚Rec‹d_°ru˘
 
	tExåaResour˚Rec‹d
;

1759 
	sExåaResour˚Rec‹d_°ru˘


1761 
ExåaResour˚Rec‹d
 *
√xt
;

1762 
mDNSu32
 
Clõ¡ID
;

1763 
AuthRec‹d
 
r
;

1770 
Sîvi˚Rec‹dSë_°ru˘
 
	tSîvi˚Rec‹dSë
;

1771 
	tmDNSSîvi˚CÆlback
(
	tmDNS
 *c⁄° 
	tm
, 
	tSîvi˚Rec‹dSë
 *c⁄° 
	t§
, 
	tmSètus
 
	tªsu…
);

1772 
	sSîvi˚Rec‹dSë_°ru˘


1777 
Sîvi˚Rec‹dSë
 *
√xt
;

1778 
uDNS_RegInfo
 
uDNS_öfo
;

1779 
mDNSSîvi˚CÆlback
 *
Sîvi˚CÆlback
;

1780 *
Sîvi˚C⁄ãxt
;

1781 
ExåaResour˚Rec‹d
 *
Exåas
;

1782 
mDNSu32
 
NumSubTy≥s
;

1783 
AuthRec‹d
 *
SubTy≥s
;

1784 
mDNSBoﬁ
 
C⁄Êi˘
;

1785 
domaö«me
 
Ho°
;

1786 
AuthRec‹d
 
RR_ADV
;

1787 
AuthRec‹d
 
RR_PTR
;

1788 
AuthRec‹d
 
RR_SRV
;

1789 
AuthRec‹d
 
RR_TXT
;

1796 #¥agm®
m¨k
 - 
Que°i⁄
 
°ru˘uªs


1803 
	#DupSuµªssInfoSize
 8

	)

1807 
mDNSs32
 
Time
;

1808 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
;

1809 
mDNSs32
 
Ty≥
;

1810 } 
	tDupSuµªssInfo
;

1815 
LLQ_UnInô
 = 0,

1816 
LLQ_GëZ⁄eInfo
 = 1,

1817 
LLQ_InôülReque°
 = 2,

1818 
LLQ_Sec⁄d¨yReque°
 = 3,

1819 
LLQ_Re‰esh
 = 4,

1820 
LLQ_Rëry
 = 5,

1821 
LLQ_E°ablished
 = 6,

1822 
LLQ_Su•íded
 = 7,

1823 
LLQ_Su•ídDe„ºed
 = 8,

1824 
LLQ_Su•ídedPﬁl
 = 9,

1825 
LLQ_N©M≠Waô
 = 10,

1828 
LLQ_Sètic
 = 16,

1829 
LLQ_Pﬁl
 = 17,

1830 
LLQ_Eº‹
 = 18,

1831 
LLQ_C™˚Œed
 = 19

1832 } 
	tLLQ_Sèã
;

1836 
LLQ_Sèã
 
°©e
;

1837 
mDNSAddr
 
£rvAddr
;

1838 
mDNSIPP‹t
 
£rvP‹t
;

1839 
DNSQue°i⁄
 *
que°i⁄
;

1840 
mDNSu32
 
‹igLó£
;

1841 
mDNSs32
 
ªåy
;

1842 
mDNSs32
 
expúe
;

1843 
mDNSs16
 
¡rõs
;

1844 
mDNSu8
 
id
[8];

1845 
mDNSBoﬁ
 
dîiveRemovesOnResume
;

1846 
mDNSBoﬁ
 
NATM≠
;

1847 } 
	tLLQ_Info
;

1850 
	#kDNSO±_LLQ
 1

	)

1851 
	#kDNSO±_Ló£
 2

	)

1852 
	#kLLQ_Vîs
 1

	)

1853 
	#kLLQ_DefLó£
 7200

1854 
	#kLLQ_MAX_TRIES
 3

1855 
	#kLLQ_INIT_RESEND
 2

1856 
	#kLLQ_DEF_RETRY
 1800

1858 
	#kLLQOp_Sëup
 1

	)

1859 
	#kLLQOp_Re‰esh
 2

	)

1860 
	#kLLQOp_Evít
 3

	)

1862 
	#LLQ_OPT_RDLEN
 ((2 * (
mDNSu16
)Ë+ 
LLQ_OPTLEN
)

	)

1863 
	#LEASE_OPT_RDLEN
 (2 * (
mDNSu16
)Ë+ (
mDNSs32
)

	)

1868 
LLQEº_NoEº‹
 = 0,

1869 
LLQEº_SîvFuŒ
 = 1,

1870 
LLQEº_Sètic
 = 2,

1871 
LLQEº_F‹mEº
 = 3,

1872 
LLQEº_NoSuchLLQ
 = 4,

1873 
LLQEº_BadVîs
 = 5,

1874 
LLQEº_UnknownEº
 = 6

1877 (*
I¡î«lRe•⁄£HndÃ
)(
	tmDNS
 *c⁄° 
	tm
, 
	tDNSMesßge
 *
	tmsg
, c⁄° 
	tmDNSu8
 *
	tíd
, 
	tDNSQue°i⁄
 *
	tque°i⁄
, *
	töã∫ÆC⁄ãxt
);

1880 
mDNSO∑que16
 
id
;

1881 
mDNSBoﬁ
 
öã∫Æ
;

1882 
I¡î«lRe•⁄£HndÃ
 
ª•⁄£CÆlback
;

1883 
LLQ_Info
 *
Œq
;

1884 
mDNSBoﬁ
 
Answîed
;

1885 
CacheRec‹d
 *
knownAnswîs
;

1886 
mDNSs32
 
Re°¨tTime
;

1887 *
c⁄ãxt
;

1888 } 
	tuDNS_Que°i⁄Info
;

1891 
	tmDNSQue°i⁄CÆlback
(
	tmDNS
 *c⁄° 
	tm
, 
	tDNSQue°i⁄
 *
	tque°i⁄
, c⁄° 
	tResour˚Rec‹d
 *c⁄° 
	t™swî
, 
	tmDNSBoﬁ
 
	tAddRec‹d
);

1892 
	sDNSQue°i⁄_°ru˘


1895 
DNSQue°i⁄
 *
√xt
;

1896 
mDNSu32
 
q«mehash
;

1897 
mDNSs32
 
DñayAnswîög
;

1898 
mDNSs32
 
La°QTime
;

1899 
mDNSs32
 
ThisQI¡îvÆ
;

1903 
mDNSs32
 
La°AnswîPktNum
;

1904 
mDNSu32
 
Re˚¡AnswîPkts
;

1905 
mDNSu32
 
CuºítAnswîs
;

1906 
mDNSu32
 
L¨geAnswîs
;

1907 
mDNSu32
 
UniqueAnswîs
;

1908 
mDNSI¡îÁ˚ID
 
FœµögI¡îÁ˚
;

1909 
DNSQue°i⁄
 *
Du∂iˇãOf
;

1910 
DNSQue°i⁄
 *
NextInDQLi°
;

1911 
DupSuµªssInfo
 
DupSuµªss
[
DupSuµªssInfoSize
];

1912 
mDNSI¡îÁ˚ID
 
SídQNow
;

1913 
mDNSBoﬁ
 
SídOnAŒ
;

1914 
mDNSu32
 
Reque°Uniˇ°
;

1915 
mDNSs32
 
La°QTxTime
;

1916 
uDNS_Que°i⁄Info
 
uDNS_öfo
;

1919 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
;

1920 
mDNSAddr
 
T¨gë
;

1921 
mDNSIPP‹t
 
T¨gëP‹t
;

1922 
mDNSO∑que16
 
T¨gëQID
;

1923 
domaö«me
 
q«me
;

1924 
mDNSu16
 
qty≥
;

1925 
mDNSu16
 
q˛ass
;

1926 
mDNSBoﬁ
 
L⁄gLived
;

1927 
mDNSBoﬁ
 
Ex≥˘Unique
;

1928 
mDNSBoﬁ
 
F‹˚MCa°
;

1929 
mDNSBoﬁ
 
Rëu∫CNAME
;

1930 
mDNSQue°i⁄CÆlback
 *
Que°i⁄CÆlback
;

1931 *
Que°i⁄C⁄ãxt
;

1938 
domaö«me
 
«me
;

1939 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
;

1940 
mDNSAddr
 
ù
;

1941 
mDNSIPP‹t
 
p‹t
;

1942 
mDNSu16
 
TXTÀn
;

1943 
mDNSu8
 
TXTöfo
[2048];

1944 } 
	tSîvi˚Info
;

1947 
Sîvi˚InfoQuîy_°ru˘
 
	tSîvi˚InfoQuîy
;

1948 
	tmDNSSîvi˚InfoQuîyCÆlback
(
	tmDNS
 *c⁄° 
	tm
, 
	tSîvi˚InfoQuîy
 *
	tquîy
);

1949 
	sSîvi˚InfoQuîy_°ru˘


1957 
DNSQue°i⁄
 
qSRV
;

1958 
DNSQue°i⁄
 
qTXT
;

1959 
DNSQue°i⁄
 
qAv4
;

1960 
DNSQue°i⁄
 
qAv6
;

1961 
mDNSu8
 
GŸSRV
;

1962 
mDNSu8
 
GŸTXT
;

1963 
mDNSu8
 
GŸADD
;

1964 
mDNSu32
 
Answîs
;

1965 
Sîvi˚Info
 *
öfo
;

1966 
mDNSSîvi˚InfoQuîyCÆlback
 *
Sîvi˚InfoQuîyCÆlback
;

1967 *
Sîvi˚InfoQuîyC⁄ãxt
;

1972 #¥agm®
m¨k
 - 
NAT
 
Tøvîßl
 
°ru˘uªs
 
™d
 
c⁄°™ts


1975 
	#NATMAP_INIT_RETRY
 (
mDNSPœtf‹mO√Sec⁄d
 / 4)

1976 
	#NATMAP_MAX_RETRY
 
mDNSPœtf‹mO√Sec⁄d


1977 
	#NATMAP_MAX_TRIES
 3

1978 
	#NATMAP_DEFAULT_LEASE
 (60 * 60)

1979 
	#NATMAP_VERS
 0

	)

1980 
	#NATMAP_RESPONSE_MASK
 0x80

	)

1984 
NATOp_AddrReque°
 = 0,

1985 
NATOp_M≠UDP
 = 1,

1986 
NATOp_M≠TCP
 = 2

1987 } 
	tNATOp_t
;

1991 
NATEº_N⁄e
 = 0,

1992 
NATEº_Vîs
 = 1,

1993 
NATEº_Refu£d
 = 2,

1994 
NATEº_NëFaû
 = 3,

1995 
NATEº_Res
 = 4,

1996 
NATEº_Opcode
 = 5

1999 
mDNSu16
 
	tNATEº_t
;

2003 
NATSèã_Inô
 = 0,

2004 
NATSèã_Reque°
 = 1,

2005 
NATSèã_E°ablished
 = 2,

2006 
NATSèã_Legacy
 = 3,

2007 
NATSèã_Eº‹
 = 4,

2008 
NATSèã_Re‰esh
 = 5,

2009 
NATSèã_Dñëed
 = 6

2010 } 
	tNATSèã_t
;

2014 
∑cked°ru˘


2016 
mDNSu8
 
vîs
;

2017 
mDNSu8
 
›code
;

2018 } 
	tNATAddrReque°
;

2020 
∑cked°ru˘


2022 
mDNSu8
 
vîs
;

2023 
mDNSu8
 
›code
;

2024 
mDNSO∑que16
 
îr
;

2025 
mDNSO∑que32
 
u±ime
;

2026 
mDNSv4Addr
 
PubAddr
;

2027 } 
	tNATAddrRïly
;

2029 
∑cked°ru˘


2031 
mDNSu8
 
vîs
;

2032 
mDNSu8
 
›code
;

2033 
mDNSO∑que16
 
unu£d
;

2034 
mDNSIPP‹t
 
¥iv
;

2035 
mDNSIPP‹t
 
pub
;

2036 
mDNSO∑que32
 
Àa£
;

2037 } 
	tNATP‹tM≠Reque°
;

2039 
∑cked°ru˘


2041 
mDNSu8
 
vîs
;

2042 
mDNSu8
 
›code
;

2043 
mDNSO∑que16
 
îr
;

2044 
mDNSO∑que32
 
u±ime
;

2045 
mDNSIPP‹t
 
¥iv
;

2046 
mDNSIPP‹t
 
pub
;

2047 
mDNSO∑que32
 
Àa£
;

2048 } 
	tNATP‹tM≠Rïly
;

2051 
mDNSBoﬁ
 (*
	tNATRe•⁄£HndÃ
)(
	tNATTøvîßlInfo
 *
	tn
, 
	tmDNS
 *
	tm
, 
	tmDNSu8
 *
	tpkt
, 
	tmDNSu16
 
	tÀn
);

2053 
	sNATTøvîßlInfo_°ru˘


2055 
NATOp_t
 
›
;

2056 
NATRe•⁄£HndÃ
 
Re˚iveRe•⁄£
;

2057 uni⁄ { 
AuthRec‹d
 *
Rec‹dRegi°øti⁄
; 
Sîvi˚Rec‹dSë
 *
Sîvi˚Regi°øti⁄
; } 
ªg
;

2058 
mDNSAddr
 
Rouãr
;

2059 
mDNSIPP‹t
 
PublicP‹t
;

2060 uni⁄ { 
NATAddrReque°
 
AddrReq
; 
NATP‹tM≠Reque°
 
P‹tReq
; } 
ªque°
;

2061 
mDNSs32
 
ªåy
;

2062 
mDNSs32
 
RëryI¡îvÆ
;

2063 
¡rõs
;

2064 
NATSèã_t
 
°©e
;

2065 
NATTøvîßlInfo
 *
√xt
;

2070 #¥agm®
m¨k
 - 
Maö
 
mDNS
 
obje˘
, 
u£d
 
to
 
hﬁd
 
Æl
 
the
 mDNS 
°©e


2073 
	tmDNSCÆlback
(
	tmDNS
 *c⁄° 
	tm
, 
	tmSètus
 
	tªsu…
);

2075 
	#CACHE_HASH_SLOTS
 499

	)

2079 
mDNS_KnownBug_Ph™tomI¡îÁ˚s
 = 1

2084 
mDNSs32
 
√xãvít
;

2085 
DNSQue°i⁄
 *
A˘iveQuîõs
;

2086 
DNSQue°i⁄
 *
CuºítQuîy
;

2089 
Sîvi˚Rec‹dSë
 *
Sîvi˚Regi°øti⁄s
;

2090 
AuthRec‹d
 *
Rec‹dRegi°øti⁄s
;

2091 
NATTøvîßlInfo
 *
NATTøvîßls
;

2092 
mDNSu16
 
NextMesßgeID
;

2093 
DNSSîvî
 *
Sîvîs
;

2094 
mDNSAddr
 
Rouãr
;

2095 
mDNSAddr
 
Advîti£dV4
;

2096 
mDNSAddr
 
M≠≥dV4
;

2097 
mDNSAddr
 
Advîti£dV6
;

2098 
NATTøvîßlInfo
 *
LLQN©Info
;

2099 
domaö«me
 
Sîvi˚RegDomaö
;

2100 
uDNS_AuthInfo
 *
AuthInfoLi°
;

2101 
uDNS_Ho°«meInfo
 *
Ho°«mes
;

2102 
DNSQue°i⁄
 
Revî£M≠
;

2103 
mDNSBoﬁ
 
Revî£M≠A˘ive
;

2104 
domaö«me
 
SèticHo°«me
;

2105 
mDNSBoﬁ
 
DñaySRVUpd©e
;

2106 
mDNSs32
 
NextSRVUpd©e
;

2107 } 
	tuDNS_GlobÆInfo
;

2109 
	smDNS_°ru˘


2116 
mDNS_Pœtf‹mSuµ‹t
 *
p
;

2117 
mDNSu32
 
KnownBugs
;

2118 
mDNSBoﬁ
 
C™Re˚iveUniˇ°On5353
;

2119 
mDNSBoﬁ
 
Advîti£LoˇlAddªs£s
;

2120 
mSètus
 
mDNSPœtf‹mSètus
;

2121 
mDNSIPP‹t
 
Uniˇ°P‹t4
;

2122 
mDNSIPP‹t
 
Uniˇ°P‹t6
;

2123 
mDNSCÆlback
 *
MaöCÆlback
;

2124 *
MaöC⁄ãxt
;

2127 
mDNSu32
 
mDNS_busy
;

2128 
mDNSu32
 
mDNS_ªíå™cy
;

2129 
mDNSu8
 
mDNS_shutdown
;

2130 
mDNSu8
 
lock_ºˇche
;

2131 
mDNSu8
 
lock_Que°i⁄s
;

2132 
mDNSu8
 
lock_Rec‹ds
;

2133 
	#MaxMsg
 120

	)

2134 
MsgBuf„r
[
MaxMsg
];

2137 
mDNSs32
 
timíow_adju°
;

2138 
mDNSs32
 
timíow
;

2139 
mDNSs32
 
timíow_œ°
;

2140 
mDNSs32
 
NextScheduÀdEvít
;

2141 
mDNSs32
 
SuµªssSídög
;

2142 
mDNSs32
 
NextCacheCheck
;

2143 
mDNSs32
 
NextScheduÀdQuîy
;

2144 
mDNSs32
 
NextScheduÀdProbe
;

2145 
mDNSs32
 
NextScheduÀdRe•⁄£
;

2146 
mDNSs32
 
Ex≥˘Uniˇ°Re•⁄£
;

2147 
mDNSs32
 
R™domQuîyDñay
;

2148 
mDNSu32
 
R™domRec⁄fúmDñay
;

2149 
mDNSs32
 
PktNum
;

2150 
mDNSBoﬁ
 
SídDîegi°øti⁄s
;

2151 
mDNSBoﬁ
 
SídImmedüãAnswîs
;

2152 
mDNSBoﬁ
 
SÀïSèã
;

2155 
DNSQue°i⁄
 *
Que°i⁄s
;

2156 
DNSQue°i⁄
 *
NewQue°i⁄s
;

2157 
DNSQue°i⁄
 *
CuºítQue°i⁄
;

2158 
DNSQue°i⁄
 *
LoˇlO∆yQue°i⁄s
;

2159 
DNSQue°i⁄
 *
NewLoˇlO∆yQue°i⁄s
;

2160 
mDNSu32
 
ºˇche_size
;

2161 
mDNSu32
 
ºˇche_tŸÆu£d
;

2162 
mDNSu32
 
ºˇche_a˘ive
;

2163 
mDNSu32
 
ºˇche_ªp‹t
;

2164 
CacheE¡ôy
 *
ºˇche_‰ì
;

2165 
CacheGroup
 *
ºˇche_hash
[
CACHE_HASH_SLOTS
];

2168 
domaöœbñ
 
ni˚œbñ
;

2169 
domaöœbñ
 
ho°œbñ
;

2170 
domaö«me
 
Mu…iˇ°Ho°«me
;

2171 
UTF8°r255
 
HIH¨dw¨e
;

2172 
UTF8°r255
 
HISo·w¨e
;

2173 
AuthRec‹d
 *
Resour˚Rec‹ds
;

2174 
AuthRec‹d
 *
Du∂iˇãRec‹ds
;

2175 
AuthRec‹d
 *
NewLoˇlRec‹ds
;

2176 
AuthRec‹d
 *
CuºítRec‹d
;

2177 
Nëw‹kI¡îÁ˚Info
 *
Ho°I¡îÁ˚s
;

2178 
mDNSs32
 
ProbeFaûTime
;

2179 
mDNSu32
 
NumFaûedProbes
;

2180 
mDNSs32
 
SuµªssProbes
;

2183 
uDNS_GlobÆInfo
 
uDNS_öfo
;

2184 
mDNSs32
 
SuµªssStdP‹t53Quîõs
;

2187 
DNSMesßge
 
imsg
;

2188 
DNSMesßge
 
omsg
;

2189 
L¨geCacheRec‹d
 
ªc
;

2192 
	#FORALL_CACHERECORDS
(
SLOT
,
CG
,
CR
) \

2193 (
SLOT
Ë0; (SLOTË< 
CACHE_HASH_SLOTS
; (SLOT)++) \

2194 (
CG
)=
m
->
ºˇche_hash
[(
SLOT
)]; (CG); (CG)=(CG)->
√xt
) \

2195 (
CR
Ë(
CG
)->
membîs
; (CR); (CR)=(CR)->
√xt
)

	)

2199 #¥agm®
m¨k
 - 
U£ful
 
Sètic
 
C⁄°™ts


2202 c⁄° 
mDNSIPP‹t
 
zîoIPP‹t
;

2203 c⁄° 
mDNSv4Addr
 
zîov4Addr
;

2204 c⁄° 
mDNSv6Addr
 
zîov6Addr
;

2205 c⁄° 
mDNSEthAddr
 
zîoEthAddr
;

2206 c⁄° 
mDNSv4Addr
 
⁄esIPv4Addr
;

2207 c⁄° 
mDNSv6Addr
 
⁄esIPv6Addr
;

2208 c⁄° 
mDNSAddr
 
zîoAddr
;

2210 c⁄° 
mDNSI¡îÁ˚ID
 
mDNSI¡îÁ˚_Any
;

2211 c⁄° 
mDNSI¡îÁ˚ID
 
mDNSI¡îÁ˚_LoˇlO∆y
;

2213 c⁄° 
mDNSIPP‹t
 
Uniˇ°DNSP‹t
;

2214 c⁄° 
mDNSIPP‹t
 
NATPMPP‹t
;

2215 c⁄° 
mDNSIPP‹t
 
DNSEXTP‹t
;

2216 c⁄° 
mDNSIPP‹t
 
Mu…iˇ°DNSP‹t
;

2217 c⁄° 
mDNSIPP‹t
 
Lo›backIPCP‹t
;

2219 c⁄° 
mDNSv4Addr
 
AŒDNSAdmöGroup
;

2220 
	#AŒDNSLökGroupv4
 (
AŒDNSLökGroup_v4
.
ù
.
v4
)

	)

2221 
	#AŒDNSLökGroupv6
 (
AŒDNSLökGroup_v6
.
ù
.
v6
)

	)

2222 c⁄° 
mDNSAddr
 
AŒDNSLökGroup_v4
;

2223 c⁄° 
mDNSAddr
 
AŒDNSLökGroup_v6
;

2225 c⁄° 
mDNSO∑que16
 
zîoID
;

2226 c⁄° 
mDNSO∑que16
 
QuîyFœgs
;

2227 c⁄° 
mDNSO∑que16
 
uQuîyFœgs
;

2228 c⁄° 
mDNSO∑que16
 
Re•⁄£Fœgs
;

2229 c⁄° 
mDNSO∑que16
 
Upd©eReqFœgs
;

2230 c⁄° 
mDNSO∑que16
 
Upd©eRe•Fœgs
;

2232 
	#loˇldomaö
 (*(c⁄° 
domaö«me
 *)"\x5" "loˇl")

	)

2233 
	#LoˇlRevî£M≠Domaö
 (*(c⁄° 
domaö«me
 *)"\x3" "254" "\x3" "169" "\x7" "ö-addr" "\x4" "¨∑")

	)

2237 #¥agm®
m¨k
 - 
I∆öe
 
fun˘i⁄s


2240 #i‡(
deföed
(
_MSC_VER
))

2241 
	#mDNSölöe
 
__ölöe


	)

2242 #ñi‡((
__GNUC__
 > 2Ë|| ((__GNUC__ =2Ë&& (
__GNUC_MINOR__
 >= 9)))

2243 
	#mDNSölöe
 
ölöe


	)

2247 #i‡!
deföed
(
mDNSölöe
)

2248 
mDNSs32
 
N⁄ZîoTime
(mDNSs32 
t
);

2249 
mDNSu16
 
mDNSVÆ16
(
mDNSO∑que16
 
x
);

2250 
mDNSu32
 
mDNSVÆ32
(
mDNSO∑que32
 
x
);

2251 
mDNSO∑que16
 
mDNSO∑que16‰omI¡VÆ
(
mDNSu16
 
v
);

2252 
mDNSO∑que32
 
mDNSO∑que32‰omI¡VÆ
(
mDNSu32
 
v
);

2257 #i‡(!
deföed
(
mDNSölöe
Ë&& 
mDNS_In°™tüãI∆öes
)

2258 
	#mDNSölöe


	)

2261 #ifde‡
mDNSölöe


2263 
mDNSölöe
 
mDNSs32
 
N⁄ZîoTime
(mDNSs32 
t
Ë{ i‡(
	gt
) (t); (1); }

2265 
mDNSölöe
 
mDNSu16
 
mDNSVÆ16
(
mDNSO∑que16
 
x
Ë{ ((
	gmDNSu16
)((mDNSu16)
	gx
.
	gb
[0] << 8 | (mDNSu16)x.b[1])); }

2266 
mDNSölöe
 
mDNSu32
 
mDNSVÆ32
(
mDNSO∑que32
 
x
Ë{ ((
	gmDNSu32
)((mDNSu32)
	gx
.
	gb
[0] << 24 | (mDNSu32)x.b[1] << 16 | (mDNSu32)x.b[2] << 8 | (mDNSu32)x.b[3])); }

2268 
mDNSölöe
 
mDNSO∑que16
 
mDNSO∑que16‰omI¡VÆ
(
mDNSu16
 
v
)

2270 
mDNSO∑que16
 
	gx
;

2271 
	gx
.
	gb
[0] = (
mDNSu8
)(
v
 >> 8);

2272 
	gx
.
	gb
[1] = (
mDNSu8
)(
v
 & 0xFF);

2273 (
	gx
);

2276 
mDNSölöe
 
mDNSO∑que32
 
mDNSO∑que32‰omI¡VÆ
(
mDNSu32
 
v
)

2278 
mDNSO∑que32
 
	gx
;

2279 
	gx
.
	gb
[0] = (
mDNSu8
Ë(
v
 >> 24) ;

2280 
	gx
.
	gb
[1] = (
mDNSu8
)((
v
 >> 16) & 0xFF);

2281 
	gx
.
	gb
[2] = (
mDNSu8
)((
v
 >> 8 ) & 0xFF);

2282 
	gx
.
	gb
[3] = (
mDNSu8
)((
v
 ) & 0xFF);

2283  
	gx
;

2290 #¥agm®
m¨k
 - 
Maö
 
Clõ¡
 
Fun˘i⁄s


2337 
mSètus
 
mDNS_Inô
 (
mDNS
 *c⁄° 
m
, 
mDNS_Pœtf‹mSuµ‹t
 *c⁄° 
p
,

2338 
CacheE¡ôy
 *
ºˇche°‹age
, 
mDNSu32
 
ºˇchesize
,

2339 
mDNSBoﬁ
 
Advîti£LoˇlAddªs£s
,

2340 
mDNSCÆlback
 *
CÆlback
, *
C⁄ãxt
);

2342 
	#mDNS_Inô_NoCache
 
mDNSNULL


	)

2343 
	#mDNS_Inô_ZîoCacheSize
 0

	)

2345 
	#mDNS_Inô_Advîti£LoˇlAddªs£s
 
mDNSåue


	)

2346 
	#mDNS_Inô_D⁄tAdvîti£LoˇlAddªs£s
 
mDNSÁl£


	)

2347 
	#mDNS_Inô_NoInôCÆlback
 
mDNSNULL


	)

2348 
	#mDNS_Inô_NoInôCÆlbackC⁄ãxt
 
mDNSNULL


	)

2350 
mDNS_GrowCache
 (
mDNS
 *c⁄° 
m
, 
CacheE¡ôy
 *
°‹age
, 
mDNSu32
 
numªc‹ds
);

2351 
mDNS_Clo£
 (
mDNS
 *c⁄° 
m
);

2352 
mDNSs32
 
mDNS_Execuã
 (
mDNS
 *c⁄° 
m
);

2354 
mSètus
 
mDNS_Regi°î
 (
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
);

2355 
mSètus
 
mDNS_Upd©e
 (
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
, 
mDNSu32
 
√wâl
,

2356 c⁄° 
mDNSu16
 
√wrdÀngth
, 
RD©a
 *c⁄° 
√wrd©a
, 
mDNSRec‹dUpd©eCÆlback
 *
CÆlback
);

2357 
mSètus
 
mDNS_Dîegi°î
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
);

2359 
mSètus
 
mDNS_SèπQuîy
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *c⁄° 
que°i⁄
);

2360 
mSètus
 
mDNS_St›Quîy
 (
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *c⁄° 
que°i⁄
);

2361 
mSètus
 
mDNS_Rec⁄fúm
 (
mDNS
 *c⁄° 
m
, 
CacheRec‹d
 *c⁄° 
ˇchîr
);

2362 
mSètus
 
mDNS_Rec⁄fúmByVÆue
(
mDNS
 *c⁄° 
m
, 
Resour˚Rec‹d
 *c⁄° 
º
);

2363 
mDNSs32
 
mDNS_TimeNow
(c⁄° 
mDNS
 *c⁄° 
m
);

2367 #¥agm®
m¨k
 - 
Pœtf‹m
 
suµ‹t
 
fun˘i⁄s
 
th©
 
¨e
 
ac˚ssibÀ
 
to
 
the
 
˛õ¡
 
œyî
 
too


2370 
mDNSs32
 
mDNSPœtf‹mO√Sec⁄d
;

2374 #¥agm®
m¨k
 - 
GíîÆ
 
utûôy
 
™d
 
hñ≥r
 
fun˘i⁄s


2399 
mDNS_SëupResour˚Rec‹d
(
AuthRec‹d
 *
º
, 
RD©a
 *
RD©aSt‹age
, 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
,

2400 
mDNSu16
 
ºty≥
, 
mDNSu32
 
âl
, 
mDNSu8
 
Rec‹dTy≥
, 
mDNSRec‹dCÆlback
 
CÆlback
, *
C⁄ãxt
);

2402 
mSètus
 
mDNS_Regi°îSîvi˚
 (
mDNS
 *c⁄° 
m
, 
Sîvi˚Rec‹dSë
 *
§
,

2403 c⁄° 
domaöœbñ
 *c⁄° 
«me
, c⁄° 
domaö«me
 *c⁄° 
ty≥
, c⁄° domaö«mê*c⁄° 
domaö
,

2404 c⁄° 
domaö«me
 *c⁄° 
ho°
, 
mDNSIPP‹t
 
p‹t
, c⁄° 
mDNSu8
 
txtöfo
[], 
mDNSu16
 
txéí
,

2405 
AuthRec‹d
 *
SubTy≥s
, 
mDNSu32
 
NumSubTy≥s
,

2406 c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, 
mDNSSîvi˚CÆlback
 
CÆlback
, *
C⁄ãxt
);

2407 
mSètus
 
mDNS_AddRec‹dToSîvi˚
(
mDNS
 *c⁄° 
m
, 
Sîvi˚Rec‹dSë
 *
§
, 
ExåaResour˚Rec‹d
 *
exåa
, 
RD©a
 *
rd©a
, 
mDNSu32
 
âl
);

2408 
mSètus
 
mDNS_RemoveRec‹dFromSîvi˚
(
mDNS
 *c⁄° 
m
, 
Sîvi˚Rec‹dSë
 *
§
, 
ExåaResour˚Rec‹d
 *
exåa
, 
mDNSRec‹dCÆlback
 
MemFªeCÆlback
, *
C⁄ãxt
);

2409 
mSètus
 
mDNS_RíameAndRîegi°îSîvi˚
(
mDNS
 *c⁄° 
m
, 
Sîvi˚Rec‹dSë
 *c⁄° 
§
, c⁄° 
domaöœbñ
 *
√w«me
);

2410 
mSètus
 
mDNS_Dîegi°îSîvi˚
(
mDNS
 *c⁄° 
m
, 
Sîvi˚Rec‹dSë
 *
§
);

2412 
mSètus
 
mDNS_Regi°îNoSuchSîvi˚
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
,

2413 c⁄° 
domaöœbñ
 *c⁄° 
«me
, c⁄° 
domaö«me
 *c⁄° 
ty≥
, c⁄° domaö«mê*c⁄° 
domaö
,

2414 c⁄° 
domaö«me
 *c⁄° 
ho°
,

2415 c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, 
mDNSRec‹dCÆlback
 
CÆlback
, *
C⁄ãxt
);

2416 
	#mDNS_Dîegi°îNoSuchSîvi˚
 
mDNS_Dîegi°î


	)

2418 
mSètus
 
mDNS_SèπBrow£
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *c⁄° 
que°i⁄
,

2419 c⁄° 
domaö«me
 *c⁄° 
§v
, c⁄° domaö«mê*c⁄° 
domaö
,

2420 c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, 
mDNSBoﬁ
 
F‹˚MCa°
, 
mDNSQue°i⁄CÆlback
 *
CÆlback
, *
C⁄ãxt
);

2421 
	#mDNS_St›Brow£
 
mDNS_St›Quîy


	)

2423 
mSètus
 
mDNS_SèπResﬁveSîvi˚
(
mDNS
 *c⁄° 
m
, 
Sîvi˚InfoQuîy
 *
quîy
, 
Sîvi˚Info
 *
öfo
, 
mDNSSîvi˚InfoQuîyCÆlback
 *
CÆlback
, *
C⁄ãxt
);

2424 
mDNS_St›ResﬁveSîvi˚
 (
mDNS
 *c⁄° 
m
, 
Sîvi˚InfoQuîy
 *
quîy
);

2428 
	gmDNS_DomaöTy≥Brow£
 = 0,

2429 
	gmDNS_DomaöTy≥Brow£DeÁu…
 = 1,

2430 
	gmDNS_DomaöTy≥Brow£Legacy
 = 2,

2431 
	gmDNS_DomaöTy≥Regi°øti⁄
 = 3,

2432 
	gmDNS_DomaöTy≥Regi°øti⁄DeÁu…
 = 4,

2434 
	gmDNS_DomaöTy≥Max
 = 4

2435 } 
	tmDNS_DomaöTy≥
;

2437 c⁄° *c⁄° 
mDNS_DomaöTy≥Names
[];

2439 
mSètus
 
mDNS_GëDomaös
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *c⁄° 
que°i⁄
, 
mDNS_DomaöTy≥
 
DomaöTy≥
, c⁄° 
domaö«me
 *
dom
,

2440 c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, 
mDNSQue°i⁄CÆlback
 *
CÆlback
, *
C⁄ãxt
);

2441 
	#mDNS_St›GëDomaös
 
mDNS_St›Quîy


	)

2442 
mSètus
 
mDNS_Advîti£Domaös
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *
º
, 
mDNS_DomaöTy≥
 
DomaöTy≥
, c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, *
dom«me
);

2443 
	#mDNS_St›Advîti£Domaös
 
mDNS_Dîegi°î


	)

2447 #¥agm®
m¨k
 - 
DNS
 
«me
 
utûôy
 
fun˘i⁄s


2459 
	#AssignDomaöName
(
DST
, 
SRC
Ë
	`mDNSPœtf‹mMemC›y
((SRC)->
c
, (DST)->c, 
	`DomaöNameLígth
((SRC)))

	)

2462 
mDNSBoﬁ
 
SameDomaöLabñ
(c⁄° 
mDNSu8
 *
a
, c⁄° mDNSu8 *
b
);

2463 
mDNSBoﬁ
 
SameDomaöName
(c⁄° 
domaö«me
 *c⁄° 
d1
, c⁄° domaö«mê*c⁄° 
d2
);

2464 
mDNSBoﬁ
 
IsLoˇlDomaö
(c⁄° 
domaö«me
 *
d
);

2468 
mDNSu16
 
DomaöNameLígth
(c⁄° 
domaö«me
 *c⁄° 
«me
);

2475 
mDNSu8
 *
AµídLôîÆLabñSåög
(
domaö«me
 *c⁄° 
«me
, c⁄° *
c°r
);

2476 
mDNSu8
 *
AµídDNSNameSåög
 (
domaö«me
 *c⁄° 
«me
, c⁄° *
c°r
);

2477 
mDNSu8
 *
AµídDomaöLabñ
 (
domaö«me
 *c⁄° 
«me
, c⁄° 
domaöœbñ
 *c⁄° 
œbñ
);

2478 
mDNSu8
 *
AµídDomaöName
 (
domaö«me
 *c⁄° 
«me
, c⁄° domaö«mê*c⁄° 
≠≥nd
);

2485 
mDNSBoﬁ
 
MakeDomaöLabñFromLôîÆSåög
(
domaöœbñ
 *c⁄° 
œbñ
, c⁄° *
c°r
);

2486 
mDNSu8
 *
MakeDomaöNameFromDNSNameSåög
 (
domaö«me
 *c⁄° 
«me
, c⁄° *
c°r
);

2495 *
C⁄vîtDomaöLabñToCSåög_wôhesˇ≥
(c⁄° 
domaöœbñ
 *c⁄° 
«me
, *
c°r
, 
esc
);

2496 
	#C⁄vîtDomaöLabñToCSåög_u√sˇ≥d
(
D
,
C
Ë
	`C⁄vîtDomaöLabñToCSåög_wôhesˇ≥
((D), (C), 0)

	)

2497 
	#C⁄vîtDomaöLabñToCSåög
(
D
,
C
Ë
	`C⁄vîtDomaöLabñToCSåög_wôhesˇ≥
((D), (C), '\\')

	)

2498 *
C⁄vîtDomaöNameToCSåög_wôhesˇ≥
(c⁄° 
domaö«me
 *c⁄° 
«me
, *
c°r
, 
esc
);

2499 
	#C⁄vîtDomaöNameToCSåög_u√sˇ≥d
(
D
,
C
Ë
	`C⁄vîtDomaöNameToCSåög_wôhesˇ≥
((D), (C), 0)

	)

2500 
	#C⁄vîtDomaöNameToCSåög
(
D
,
C
Ë
	`C⁄vîtDomaöNameToCSåög_wôhesˇ≥
((D), (C), '\\')

	)

2502 
C⁄vîtUTF8P°rögToRFC1034Ho°Labñ
(c⁄° 
mDNSu8
 
UTF8Name
[], 
domaöœbñ
 *c⁄° 
ho°œbñ
);

2504 
mDNSu8
 *
C⁄°ru˘Sîvi˚Name
(
domaö«me
 *c⁄° 
fqdn
, c⁄° 
domaöœbñ
 *
«me
, c⁄° domaö«mê*
ty≥
, c⁄° domaö«mê*c⁄° 
domaö
);

2505 
mDNSBoﬁ
 
Dec⁄°ru˘Sîvi˚Name
(c⁄° 
domaö«me
 *c⁄° 
fqdn
, 
domaöœbñ
 *c⁄° 
«me
, domaö«mê*c⁄° 
ty≥
, domaö«mê*c⁄° 
domaö
);

2520 #¥agm®
m¨k
 - 
Othî
 
utûôy
 
fun˘i⁄s
 
™d
 
ma¸os


2528 
mDNSu32
 
mDNS_v¢¥ötf
(*
sbuf„r
, mDNSu32 
buÊí
, c⁄° *
fmt
, 
va_li°
 
¨g
);

2529 
mDNSu32
 
mDNS_¢¥ötf
(*
sbuf„r
, mDNSu32 
buÊí
, c⁄° *
fmt
, ...Ë
IS_A_PRINTF_STYLE_FUNCTION
(3,4);

2530 
mDNSu32
 
NumCacheRec‹dsF‹I¡îÁ˚ID
(c⁄° 
mDNS
 *c⁄° 
m
, 
mDNSI¡îÁ˚ID
 
id
);

2531 *
DNSTy≥Name
(
mDNSu16
 
ºty≥
);

2532 *
GëRRDi•œySåög_rdb
(c⁄° 
Resour˚Rec‹d
 *
º
, 
RD©aBody
 *
rd
, *
buf„r
);

2533 
	#RRDi•œySåög
(
m
, 
º
Ë
	`GëRRDi•œySåög_rdb
‘r, &‘r)->
rd©a
->
u
, (m)->
MsgBuf„r
)

	)

2534 
	#ARDi•œySåög
(
m
, 
º
Ë
	`GëRRDi•œySåög_rdb
(&‘r)->
ª§ec
, &‘r)->ª§ec.
rd©a
->
u
, (m)->
MsgBuf„r
)

	)

2535 
	#CRDi•œySåög
(
m
, 
º
Ë
	`GëRRDi•œySåög_rdb
(&‘r)->
ª§ec
, &‘r)->ª§ec.
rd©a
->
u
, (m)->
MsgBuf„r
)

	)

2536 
mDNSBoﬁ
 
mDNSSameAddªss
(c⁄° 
mDNSAddr
 *
ù1
, c⁄° mDNSAdd∏*
ù2
);

2537 
In¸emítLabñSuffix
(
domaöœbñ
 *
«me
, 
mDNSBoﬁ
 
RichText
);

2538 
mDNSBoﬁ
 
IsPriv©eV4Addr
(
mDNSAddr
 *
addr
);

2540 
	#mDNSSameIPv4Addªss
(
A
,
B
Ë((A).
NŸAnI¡egî
 =(B).NŸAnI¡egî)

	)

2541 
	#mDNSSameIPv6Addªss
(
A
,
B
Ë((A).
l
[0] =(B).l[0] && (A).l[1] =(B).l[1] && (A).l[2] =(B).l[2] && (A).l[3] =(B).l[3])

	)

2542 
	#mDNSSameEthAddªss
(
A
,
B
Ë((A)->
w
[0] =(B)->w[0] && (A)->w[1] =(B)->w[1] && (A)->w[2] =(B)->w[2])

	)

2544 
	#mDNSIPv4AddªssIsZîo
(
A
Ë
	`mDNSSameIPv4Addªss
((A), 
zîov4Addr
)

	)

2545 
	#mDNSIPv6AddªssIsZîo
(
A
Ë
	`mDNSSameIPv6Addªss
((A), 
zîov6Addr
)

	)

2547 
	#mDNSIPv4AddªssIsO√s
(
A
Ë
	`mDNSSameIPv4Addªss
((A), 
⁄esIPv4Addr
)

	)

2548 
	#mDNSIPv6AddªssIsO√s
(
A
Ë
	`mDNSSameIPv6Addªss
((A), 
⁄esIPv6Addr
)

	)

2550 
	#mDNSAddªssIsAŒDNSLökGroup
(
X
) ( \

2551 ((
X
)->
ty≥
 =
mDNSAddrTy≥_IPv4
 && 
	`mDNSSameIPv4Addªss
((X)->
ù
.
v4
, 
AŒDNSLökGroupv4
)) || \

2552 ((
X
)->
ty≥
 =
mDNSAddrTy≥_IPv6
 && 
	`mDNSSameIPv6Addªss
((X)->
ù
.
v6
, 
AŒDNSLökGroupv6
)Ë)

	)

2554 
	#mDNSAddªssIsZîo
(
X
) ( \

2555 ((
X
)->
ty≥
 =
mDNSAddrTy≥_IPv4
 && 
	`mDNSIPv4AddªssIsZîo
((X)->
ù
.
v4
)) || \

2556 ((
X
)->
ty≥
 =
mDNSAddrTy≥_IPv6
 && 
	`mDNSIPv6AddªssIsZîo
((X)->
ù
.
v6
)Ë)

	)

2558 
	#mDNSAddªssIsVÆidN⁄Zîo
(
X
) ( \

2559 ((
X
)->
ty≥
 =
mDNSAddrTy≥_IPv4
 && !
	`mDNSIPv4AddªssIsZîo
((X)->
ù
.
v4
)) || \

2560 ((
X
)->
ty≥
 =
mDNSAddrTy≥_IPv6
 && !
	`mDNSIPv6AddªssIsZîo
((X)->
ù
.
v6
)Ë)

	)

2562 
	#mDNSAddªssIsO√s
(
X
) ( \

2563 ((
X
)->
ty≥
 =
mDNSAddrTy≥_IPv4
 && 
	`mDNSIPv4AddªssIsO√s
((X)->
ù
.
v4
)) || \

2564 ((
X
)->
ty≥
 =
mDNSAddrTy≥_IPv6
 && 
	`mDNSIPv6AddªssIsO√s
((X)->
ù
.
v6
)Ë)

	)

2566 
	#mDNSAddªssIsVÆid
(
X
) ( \

2567 ((
X
)->
ty≥
 =
mDNSAddrTy≥_IPv4
Ë? !(
	`mDNSIPv4AddªssIsZîo
((X)->
ù
.
v4
Ë|| 
	`mDNSIPv4AddªssIsO√s
((X)->ip.v4)) : \

2568 ((
X
)->
ty≥
 =
mDNSAddrTy≥_IPv6
Ë? !(
	`mDNSIPv6AddªssIsZîo
((X)->
ù
.
v6
Ë|| 
	`mDNSIPv6AddªssIsO√s
((X)->ù.v6)Ë: 
mDNSÁl£
)

	)

2573 #¥agm®
m¨k
 - 
Authítiˇti⁄
 
Suµ‹t


2576 
	#HMAC_LEN
 64

	)

2577 
	#HMAC_IPAD
 0x36

	)

2578 
	#HMAC_OPAD
 0x5c

	)

2579 
	#MD5_LEN
 16

	)

2584 
mDNSu8
 
	gùad
[
HMAC_LEN
];

2585 
mDNSu8
 
	g›ad
[
HMAC_LEN
];

2586 } 
	tHMAC_Key
;

2589 
	suDNS_AuthInfo


2591 
domaö«me
 
	gz⁄e
;

2592 
domaö«me
 
	gkey«me
;

2593 
HMAC_Key
 
	gkey
;

2594 
uDNS_AuthInfo
 *
	g√xt
;

2595 } 
	tuDNS_AuthInfo
;

2606 
mSètus
 
mDNS_SëSe¸ëF‹Z⁄e
(
mDNS
 *
m
, c⁄° 
domaö«me
 *
z⁄e
, c⁄° domaö«mê*
key
, c⁄° *
sh¨edSe¸ë
);

2629 
mDNS_AddDynDNSHo°Name
(
mDNS
 *
m
, c⁄° 
domaö«me
 *
fqdn
, 
mDNSRec‹dCÆlback
 *
SètusCÆlback
, c⁄° *
SètusC⁄ãxt
);

2630 
mDNS_RemoveDynDNSHo°Name
(
mDNS
 *
m
, c⁄° 
domaö«me
 *
fqdn
);

2631 
mDNS_SëPrim¨yI¡îÁ˚Info
(
mDNS
 *
m
, c⁄° 
mDNSAddr
 *
v4addr
, c⁄° mDNSAdd∏*
v6addr
, c⁄° mDNSAdd∏*
rouãr
);

2632 
mDNS_Upd©eLLQs
(
mDNS
 *
m
);

2633 
mDNS_AddDNSSîvî
(
mDNS
 *c⁄° 
m
, c⁄° 
mDNSAddr
 *
dnsAddr
, c⁄° 
domaö«me
 *
domaö
);

2634 
mDNS_DñëeDNSSîvîs
(
mDNS
 *c⁄° 
m
);

2639 
mDNSs32
 
DNSDige°_Ba£64ToBö
(c⁄° *
§c
, 
mDNSu8
 *
èrgë
, 
mDNSu32
 
èrgsize
);

2642 
DNSDige°_C⁄°ru˘HMACKey
(
uDNS_AuthInfo
 *
öfo
, c⁄° 
mDNSu8
 *
key
, 
mDNSu32
 
Àn
);

2648 
mDNSu8
 *
DNSDige°_SignMesßge
(
DNSMesßge
 *
msg
, mDNSu8 **
íd
, 
mDNSu16
 *
numAddôi⁄Æs
, 
uDNS_AuthInfo
 *
öfo
);

2652 #¥agm®
m¨k
 - 
Pœtf‹mSuµ‹t
 
öãrÁ˚


2684 
mSètus
 
mDNSPœtf‹mInô
 (
mDNS
 *c⁄° 
m
);

2685 
mDNSPœtf‹mClo£
 (
mDNS
 *c⁄° 
m
);

2686 
mSètus
 
mDNSPœtf‹mSídUDP
(c⁄° 
mDNS
 *c⁄° 
m
, c⁄° *c⁄° 
msg
, c⁄° 
mDNSu8
 *c⁄° 
íd
,

2687 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, c⁄° 
mDNSAddr
 *
d°
, 
mDNSIPP‹t
 
d°p‹t
);

2689 
mDNSPœtf‹mLock
 (c⁄° 
mDNS
 *c⁄° 
m
);

2690 
mDNSPœtf‹mU∆ock
 (c⁄° 
mDNS
 *c⁄° 
m
);

2692 
mDNSPœtf‹mSåC›y
 (c⁄° *
§c
, *
d°
);

2693 
mDNSu32
 
mDNSPœtf‹mSåLí
 (c⁄° *
§c
);

2694 
mDNSPœtf‹mMemC›y
 (c⁄° *
§c
, *
d°
, 
mDNSu32
 
Àn
);

2695 
mDNSBoﬁ
 
mDNSPœtf‹mMemSame
 (c⁄° *
§c
, c⁄° *
d°
, 
mDNSu32
 
Àn
);

2696 
mDNSPœtf‹mMemZîo
 ( *
d°
, 
mDNSu32
 
Àn
);

2697 * 
mDNSPœtf‹mMemAŒoˇã
 (
mDNSu32
 
Àn
);

2698 
mDNSPœtf‹mMemFªe
 (*
mem
);

2699 
mDNSu32
 
mDNSPœtf‹mR™domSìd
 ();

2700 
mSètus
 
mDNSPœtf‹mTimeInô
 ();

2701 
mDNSs32
 
mDNSPœtf‹mRawTime
 ();

2702 
mDNSs32
 
mDNSPœtf‹mUTC
 ();

2703 
	#mDNS_TimeNow_NoLock
(
m
Ë(
	`mDNSPœtf‹mRawTime
(Ë+ m->
timíow_adju°
)

	)

2708 
mDNSI¡îÁ˚ID
 
mDNSPœtf‹mI¡îÁ˚ID‰omI¡îÁ˚Index
(
mDNS
 *c⁄° 
m
, 
mDNSu32
 
ödex
);

2709 
mDNSu32
 
mDNSPœtf‹mI¡îÁ˚Index‰omI¡îÁ˚ID
(
mDNS
 *c⁄° 
m
, 
mDNSI¡îÁ˚ID
 
id
);

2727 (*
	gTCPC⁄√˘i⁄CÆlback
)(
	tsd
, *
	tc⁄ãxt
, 
	tmDNSBoﬁ
 
	tC⁄√˘i⁄E°ablished
);

2728 
mSètus
 
mDNSPœtf‹mTCPC⁄√˘
(c⁄° 
mDNSAddr
 *
d°
, 
mDNSO∑que16
 
d°p‹t
, 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
,

2729 
TCPC⁄√˘i⁄CÆlback
 
ˇŒback
, *
c⁄ãxt
, *
des¸ùt‹
);

2730 
mDNSPœtf‹mTCPClo£C⁄√˘i⁄
(
sd
);

2731 
mDNSPœtf‹mRódTCP
(
sd
, *
buf
, 
buÊí
);

2732 
mDNSPœtf‹mWrôeTCP
(
sd
, c⁄° *
msg
, 
Àn
);

2740 
	sDNameLi°EÀm


2742 
domaö«me
 
	g«me
;

2743 
DNameLi°EÀm
 *
	g√xt
;

2744 } 
	tDNameLi°EÀm
;

2746 
DNameLi°EÀm
 *
mDNSPœtf‹mGëSórchDomaöLi°
();

2747 
DNameLi°EÀm
 *
mDNSPœtf‹mGëRegDomaöLi°
();

2750 
DNameLi°EÀm
 *
mDNS_C›yDNameLi°
(c⁄° DNameLi°EÀm *
‹ig
);

2751 
mDNS_FªeDNameLi°
(
DNameLi°EÀm
 *
li°
);

2753 #ifde‡
_LEGACY_NAT_TRAVERSAL_


2756 
	#DYN_PORT_MIN
 49152

2757 
	#DYN_PORT_MAX
 65535

	)

2758 
	#LEGACY_NATMAP_MAX_TRIES
 4

2759 

	)

2760 
mSètus
 
LNT_GëPublicIP
(
mDNSO∑que32
 *
ù
);

2761 
mSètus
 
LNT_M≠P‹t
(
mDNSIPP‹t
 
¥iv
, mDNSIPP‹à
pub
, 
mDNSBoﬁ
 
t˝
);

2762 
mSètus
 
LNT_Unm≠P‹t
(
mDNSIPP‹t
 
PubP‹t
, 
mDNSBoﬁ
 
t˝
);

2800 
mDNS_SëFQDN
(
mDNS
 *c⁄° 
m
);

2801 
mSètus
 
mDNS_Regi°îI¡îÁ˚
 (
mDNS
 *c⁄° 
m
, 
Nëw‹kI¡îÁ˚Info
 *
£t
, 
mDNSBoﬁ
 
Ê≠pög
);

2802 
mDNS_Dîegi°îI¡îÁ˚
(
mDNS
 *c⁄° 
m
, 
Nëw‹kI¡îÁ˚Info
 *
£t
, 
mDNSBoﬁ
 
Ê≠pög
);

2803 
mDNSC‹eInôCom∂ëe
(
mDNS
 *c⁄° 
m
, 
mSètus
 
ªsu…
);

2804 
mDNSC‹eRe˚ive
(
mDNS
 *c⁄° 
m
, *c⁄° 
msg
, c⁄° 
mDNSu8
 *c⁄° 
íd
,

2805 c⁄° 
mDNSAddr
 *c⁄° 
§ˇddr
, c⁄° 
mDNSIPP‹t
 
§˝‹t
,

2806 c⁄° 
mDNSAddr
 *c⁄° 
d°addr
, c⁄° 
mDNSIPP‹t
 
d°p‹t
, c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
);

2807 
mDNSC‹eMachöeSÀï
(
mDNS
 *c⁄° 
m
, 
mDNSBoﬁ
 
wake
);

2809 
mDNSBoﬁ
 
mDNSAddrIsDNSMu…iˇ°
(c⁄° 
mDNSAddr
 *
ù
);

2813 #¥agm®
m¨k
 - 
Compûe
-
Time
 
as£πi⁄
 
checks


2822 
	smDNS_CompûeTimeAs£πi⁄Checks


2826 
	gas£π0
[((
rd©aSRV
) == 262 ) ? 1 : -1];

2827 
	gas£π1
[((
DNSMesßgeHódî
) == 12 ) ? 1 : -1];

2828 
	gas£π2
[((
DNSMesßge
Ë=12+
AbsﬁuãMaxDNSMesßgeD©a
) ? 1 : -1];

2829 
	gas£π3
[((
mDNSs8
) == 1 ) ? 1 : -1];

2830 
	gas£π4
[((
mDNSu8
) == 1 ) ? 1 : -1];

2831 
	gas£π5
[((
mDNSs16
) == 2 ) ? 1 : -1];

2832 
	gas£π6
[((
mDNSu16
) == 2 ) ? 1 : -1];

2833 
	gas£π7
[((
mDNSs32
) == 4 ) ? 1 : -1];

2834 
	gas£π8
[((
mDNSu32
) == 4 ) ? 1 : -1];

2835 
	gas£π9
[((
mDNSO∑que16
) == 2 ) ? 1 : -1];

2836 
	gas£πA
[((
mDNSO∑que32
) == 4 ) ? 1 : -1];

2837 
	gas£πB
[((
mDNSO∑que128
) == 16 ) ? 1 : -1];

2838 
	gas£πC
[((
CacheRec‹d
 ) >(
CacheGroup
) ) ? 1 : -1];

2839 
	gas£πD
[(() >= 4 ) ? 1 : -1];

2844 #ifde‡
__˝lu•lus


	@mdns/mDNSPosix.c

292 
	~"mDNSEmbeddedAPI.h
"

293 
	~"mDNSPosix.h
"

294 
	~"dns_sd.h
"

296 
	~<as£π.h
>

297 
	~<°dio.h
>

298 
	~<°dlib.h
>

299 
	~<î∫o.h
>

300 
	~<°rög.h
>

301 
	~<uni°d.h
>

302 
	~<sy¶og.h
>

303 
	~<°d¨g.h
>

304 
	~<f˙é.h
>

305 
	~<sys/ty≥s.h
>

306 
	~<sys/time.h
>

307 
	~<sys/sockë.h
>

308 
	~<sys/uio.h
>

309 
	~<sys/£À˘.h
>

310 
	~<√töë/ö.h
>

311 
	~<¨∑/öë.h
>

312 
	~<time.h
>

314 #i‡
USES_NETLINK


315 
	~<asm/ty≥s.h
>

316 
	~<löux/√éök.h
>

317 
	~<löux/π√éök.h
>

319 
	~<√t/rouã.h
>

320 
	~<√t/if.h
>

323 
	~"mDNSUNP.h
"

324 
	~"GíLökedLi°.h
"

330 
	sPosixEvítSour˚


332 
mDNSPosixEvítCÆlback
 
	mCÆlback
;

333 *
	mC⁄ãxt
;

334 
	mfd
;

335 
PosixEvítSour˚
 *
	mNext
;

337 
PosixEvítSour˚
 
	tPosixEvítSour˚
;

340 
	sIfCh™geRec


342 
	mNŸifySD
;

343 
mDNS
* 
	mmDNS
;

345 
IfCh™geRec
 
	tIfCh™geRec
;

348 
fd_£t
 
	ggEvítFDs
;

349 
	ggMaxFD
;

350 
GíLökedLi°
 
	ggEvítSour˚s
;

351 
sig£t_t
 
	ggEvítSig«lSë
;

352 
sig£t_t
 
	ggEvítSig«ls
;

357 
	gnum_ªgi°îed_öãrÁ˚s
 = 0;

358 
	gnum_pkts_ac˚±ed
 = 0;

359 
	gnum_pkts_ªje˘ed
 = 0;

364 
	ggMDNSPœtf‹mPosixVîbo£Levñ
 = 0;

366 
	#PosixEº‹ToSètus
(
îrNum
Ë(”ºNumË=0 ? 
mSètus_NoEº‹
 : 
mSètus_UnknownEº
)

	)

368 
mDNSloˇl
 
	$SockAddrTomDNSAddr
(c⁄° 
sockaddr
 *c⁄° 
ß
, 
mDNSAddr
 *
ùAddr
, 
mDNSIPP‹t
 *
ùP‹t
)

370 
ß
->
ß_Ámûy
)

372 
AF_INET
:

374 
sockaddr_ö
* 
sö
 = (sockaddr_ö*)
ß
;

375 
ùAddr
->
ty≥
 = 
mDNSAddrTy≥_IPv4
;

376 
ùAddr
->
ù
.
v4
.
NŸAnI¡egî
 = 
sö
->
sö_addr
.
s_addr
;

377 i‡(
ùP‹t
ËùP‹t->
NŸAnI¡egî
 = 
sö
->
sö_p‹t
;

381 #i‡
HAVE_IPV6


382 
AF_INET6
:

384 
sockaddr_ö6
* 
sö6
 = (sockaddr_ö6*)
ß
;

385 #i‚de‡
NOT_HAVE_SA_LEN


386 
	`as£π
(
sö6
->
sö6_Àn
 == (*sin6));

388 
ùAddr
->
ty≥
 = 
mDNSAddrTy≥_IPv6
;

389 
ùAddr
->
ù
.
v6
 = *(
mDNSv6Addr
*)&
sö6
->
sö6_addr
;

390 i‡(
ùP‹t
ËùP‹t->
NŸAnI¡egî
 = 
sö6
->
sö6_p‹t
;

396 
	`vîbo£debugf
("SockAddrTomDNSAddr: Uknow¿addªs†Ámûy %d\n", 
ß
->
ß_Ámûy
);

397 
ùAddr
->
ty≥
 = 
mDNSAddrTy≥_N⁄e
;

398 i‡(
ùP‹t
ËùP‹t->
NŸAnI¡egî
 = 0;

401 
	}
}

403 #i‡
COMPILER_LIKES_PRAGMA_MARK


404 #¥agm®
m¨k
 ***** 
Síd
 
™d
 
Re˚ive


408 
mDNSexp‹t
 
mSètus
 
	$mDNSPœtf‹mSídUDP
(c⁄° 
mDNS
 *c⁄° 
m
, c⁄° *c⁄° 
msg
, c⁄° 
mDNSu8
 *c⁄° 
íd
,

409 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
, c⁄° 
mDNSAddr
 *
d°
, 
mDNSIPP‹t
 
d°P‹t
)

411 
îr
 = 0;

412 
sockaddr_°‹age
 
to
;

413 
PosixNëw‹kI¡îÁ˚
 * 
thisI¡f
 = (PosixNëw‹kI¡îÁ˚ *)(
I¡îÁ˚ID
);

414 
£ndögsockë
 = -1;

416 
	`as£π
(
m
 !
NULL
);

417 
	`as£π
(
msg
 !
NULL
);

418 
	`as£π
(
íd
 !
NULL
);

419 
	`as£π
–(((*Ë
íd
Ë- ((*Ë
msg
)) > 0 );

420 
	`as£π
(
d°P‹t
.
NŸAnI¡egî
 != 0);

422 i‡(
d°
->
ty≥
 =
mDNSAddrTy≥_IPv4
)

424 
sockaddr_ö
 *
sö
 = (sockaddr_ö*)&
to
;

425 #i‚de‡
NOT_HAVE_SA_LEN


426 
sö
->
sö_Àn
 = (*sin);

428 
sö
->
sö_Ámûy
 = 
AF_INET
;

429 
sö
->
sö_p‹t
 = 
d°P‹t
.
NŸAnI¡egî
;

430 
sö
->
sö_addr
.
s_addr
 = 
d°
->
ù
.
v4
.
NŸAnI¡egî
;

431 
£ndögsockë
 = 
thisI¡f
 ?ÅhisI¡f->
mu…iˇ°Sockë4
 : 
m
->
p
->
uniˇ°Sockë4
;

434 #i‡
HAVE_IPV6


435 i‡(
d°
->
ty≥
 =
mDNSAddrTy≥_IPv6
)

437 
sockaddr_ö6
 *
sö6
 = (sockaddr_ö6*)&
to
;

438 
	`mDNSPœtf‹mMemZîo
(
sö6
, (*sin6));

439 #i‚de‡
NOT_HAVE_SA_LEN


440 
sö6
->
sö6_Àn
 = (*sin6);

442 
sö6
->
sö6_Ámûy
 = 
AF_INET6
;

443 
sö6
->
sö6_p‹t
 = 
d°P‹t
.
NŸAnI¡egî
;

444 
sö6
->
sö6_addr
 = *(
ö6_addr
*)&
d°
->
ù
.
v6
;

445 
£ndögsockë
 = 
thisI¡f
 ?ÅhisI¡f->
mu…iˇ°Sockë6
 : 
m
->
p
->
uniˇ°Sockë6
;

449 i‡(
£ndögsockë
 >= 0)

450 
îr
 = 
	`£ndto
(
£ndögsockë
, 
msg
, (*)
íd
 - (*)msg, 0, (
sockaddr
 *)&
to
, 
	`GET_SA_LEN
(to));

452 i‡(
îr
 > 0)Érr = 0;

453 i‡(
îr
 < 0)

455 
MesßgeCou¡
 = 0;

457 i‡(!
	`mDNSAddªssIsAŒDNSLökGroup
(
d°
))

458 i‡(
î∫o
 =
EHOSTDOWN
 ||Éºnÿ=
ENETDOWN
 ||Éºnÿ=
EHOSTUNREACH
 ||Éºnÿ=
ENETUNREACH
Ë(
mSètus_Tønsõ¡Eº
);

460 i‡(
MesßgeCou¡
 < 1000)

462 
MesßgeCou¡
++;

463 i‡(
thisI¡f
)

464 
	`LogMsg
("mDNSPlatformSendUDP gotÉrror %d (%s) sendingÖacketÅo %#a on interface %#a/%s/%d",

465 
î∫o
, 
	`°ªº‹
”ºno), 
d°
, &
thisI¡f
->
c‹eI¡f
.
ù
,ÅhisI¡f->
ötfName
,ÅhisI¡f->
ödex
);

467 
	`LogMsg
("mDNSPœtf‹mSídUDP gŸÉº‹ %d (%sË£ndögÖackëÅÿ%#a", 
î∫o
, 
	`°ªº‹
”ºno), 
d°
);

471  
	`PosixEº‹ToSètus
(
îr
);

472 
	}
}

475 
mDNSloˇl
 
	$SockëD©aRódy
(
mDNS
 *c⁄° 
m
, 
PosixNëw‹kI¡îÁ˚
 *
ötf
, 
skt
)

477 
mDNSAddr
 
£ndîAddr
, 
de°Addr
;

478 
mDNSIPP‹t
 
£ndîP‹t
;

479 
ssize_t
 
∑ckëLí
;

480 
DNSMesßge
 
∑ckë
;

481 
my_ö_pktöfo
 
∑ckëInfo
;

482 
sockaddr_°‹age
 
‰om
;

483 
sockÀn_t
 
‰omLí
;

484 
Êags
;

485 
mDNSu8
 
âl
;

486 
mDNSBoﬁ
 
ªje˘
;

487 c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
 = 
ötf
 ? i¡f->
c‹eI¡f
.I¡îÁ˚ID : 
NULL
;

489 
	`as£π
(
m
 !
NULL
);

490 
	`as£π
(
skt
 >= 0);

492 
‰omLí
 = (
‰om
);

493 
Êags
 = 0;

494 
∑ckëLí
 = 
	`ªcv‰om_Êags
(
skt
, &
∑ckë
, ’ackë), &
Êags
, (
sockaddr
 *Ë&
‰om
, &
‰omLí
, &
∑ckëInfo
, &
âl
);

496 i‡(
∑ckëLí
 >= 0)

498 
	`SockAddrTomDNSAddr
((
sockaddr
*)&
‰om
, &
£ndîAddr
, &
£ndîP‹t
);

499 
	`SockAddrTomDNSAddr
((
sockaddr
*)&
∑ckëInfo
.
ùi_addr
, &
de°Addr
, 
NULL
);

516 #i‡
HAVE_BROKEN_RECVDSTADDR
 || (!
	`deföed
(
IP_PKTINFO
Ë&& !deföed(
IP_RECVDSTADDR
))

517 i‡–(
de°Addr
.
NŸAnI¡egî
 =0Ë&& (
Êags
 & 
MSG_MCAST
) )

519 
de°Addr
.
ty≥
 = 
£ndîAddr
.type;

520 i‡(
£ndîAddr
.
ty≥
 =
mDNSAddrTy≥_IPv4
Ë
de°Addr
.
ù
.
v4
 = 
AŒDNSLökGroupv4
;

521 i‡(
£ndîAddr
.
ty≥
 =
mDNSAddrTy≥_IPv6
Ë
de°Addr
.
ù
.
v6
 = 
AŒDNSLökGroupv6
;

533 
ªje˘
 = 
mDNSÁl£
;

534 i‡(!
ötf
)

537 i‡(
	`mDNSAddrIsDNSMu…iˇ°
(&
de°Addr
)Ë
∑ckëLí
 = -1;

541 i‡–
∑ckëInfo
.
ùi_i‚ame
[0] !0 ) 
ªje˘
 = (
	`°rcmp
’ackëInfo.ùi_i‚ame, 
ötf
->
ötfName
) != 0);

542 i‡–
∑ckëInfo
.
ùi_ifödex
 !-1 ) 
ªje˘
 = (∑ckëInfo.ùi_ifödex !
ötf
->
ödex
);

544 i‡(
ªje˘
)

546 
	`vîbo£debugf
("SocketDataReady ignoredáÖacket from %#aÅo %#a on interface %s/%dÉxpecting %#a/%s/%d/%d",

547 &
£ndîAddr
, &
de°Addr
, 
∑ckëInfo
.
ùi_i‚ame
,ÖackëInfo.
ùi_ifödex
,

548 &
ötf
->
c‹eI¡f
.
ù
, i¡f->
ötfName
, i¡f->
ödex
, 
skt
);

549 
∑ckëLí
 = -1;

550 
num_pkts_ªje˘ed
++;

551 i‡(
num_pkts_ªje˘ed
 > (
num_pkts_ac˚±ed
 + 1Ë* (
num_ªgi°îed_öãrÁ˚s
 + 1) * 2)

553 
	`Ârötf
(
°dîr
,

555 
num_pkts_ac˚±ed
 + 
num_pkts_ªje˘ed
,Çum_pkts_accepted,Çum_pkts_rejected);

556 
num_pkts_ac˚±ed
 = 0;

557 
num_pkts_ªje˘ed
 = 0;

562 
	`vîbo£debugf
("SocketDataReady gotáÖacket from %#aÅo %#a on interface %#a/%s/%d/%d",

563 &
£ndîAddr
, &
de°Addr
, &
ötf
->
c‹eI¡f
.
ù
, i¡f->
ötfName
, i¡f->
ödex
, 
skt
);

564 
num_pkts_ac˚±ed
++;

569 i‡(
∑ckëLí
 >= 0)

570 
	`mDNSC‹eRe˚ive
(
m
, &
∑ckë
, (
mDNSu8
 *)&∑ckë + 
∑ckëLí
,

571 &
£ndîAddr
, 
£ndîP‹t
, &
de°Addr
, 
Mu…iˇ°DNSP‹t
, 
I¡îÁ˚ID
);

572 
	}
}

574 
mDNSexp‹t
 
mSètus
 
	$mDNSPœtf‹mTCPC⁄√˘
(c⁄° 
mDNSAddr
 *
d°
, 
mDNSO∑que16
 
d°p‹t
, 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
,

575 
TCPC⁄√˘i⁄CÆlback
 
ˇŒback
, *
c⁄ãxt
, *
des¸ùt‹
)

577 ()
d°
;

578 ()
d°p‹t
;

579 ()
I¡îÁ˚ID
;

580 ()
ˇŒback
;

581 ()
c⁄ãxt
;

582 ()
des¸ùt‹
;

583 (
mSètus_Unsuµ‹ãdEº
);

584 
	}
}

586 
mDNSexp‹t
 
	$mDNSPœtf‹mTCPClo£C⁄√˘i⁄
(
sd
)

588 ()
sd
;

589 
	}
}

591 
mDNSexp‹t
 
	$mDNSPœtf‹mRódTCP
(
sd
, *
buf
, 
buÊí
)

593 ()
sd
;

594 ()
buf
;

595 ()
buÊí
;

597 
	}
}

599 
mDNSexp‹t
 
	$mDNSPœtf‹mWrôeTCP
(
sd
, c⁄° *
msg
, 
Àn
)

601 ()
sd
;

602 ()
msg
;

603 ()
Àn
;

605 
	}
}

607 #i‡
COMPILER_LIKES_PRAGMA_MARK


608 #¥agm®
m¨k
 ***** 
Gë
/
Fªe
 
Sórch
 
Domaö
 
Li°


611 
mDNSexp‹t
 
DNameLi°EÀm
 *
	$mDNSPœtf‹mGëSórchDomaöLi°
()

613 
DNameLi°EÀm
 
tmp
;

614 
mDNSBoﬁ
 
öô
 = 
mDNSÁl£
;

616 i‡(!
öô
)

618 
	`MakeDomaöNameFromDNSNameSåög
(&
tmp
.
«me
, "local.");

619 
tmp
.
√xt
 = 
NULL
;

620 
öô
 = 
mDNSåue
;

622  
	`mDNS_C›yDNameLi°
(&
tmp
);

623 
	}
}

625 
mDNSexp‹t
 
DNameLi°EÀm
 *
	$mDNSPœtf‹mGëRegDomaöLi°
()

627  
NULL
;

628 
	}
}

630 #i‡
COMPILER_LIKES_PRAGMA_MARK


631 #¥agm®
m¨k
 ***** 
Inô
 
™d
 
Tîm


635 
mDNSloˇl
 
	$GëU£rS≥cifõdRFC1034CompuãrName
(
domaöœbñ
 *c⁄° 
«mñabñ
)

637 
Àn
 = 0;

638 
	`gëho°«me
((*)(&
«mñabñ
->
c
[1]), 
MAX_DOMAIN_LABEL
);

639 
Àn
 < 
MAX_DOMAIN_LABEL
 && 
«mñabñ
->
c
[len+1] &&Çamelabel->c[len+1] != '.')Üen++;

640 
«mñabñ
->
c
[0] = 
Àn
;

641 
	}
}

646 
mDNSloˇl
 
	$GëU£rS≥cifõdFrõndlyCompuãrName
(
domaöœbñ
 *c⁄° 
«mñabñ
)

649 
	`GëU£rS≥cifõdRFC1034CompuãrName
–
«mñabñ
);

650 
	}
}

652 
mDNSexp‹t
 
	$P¨£DNSSîvîs
(
mDNS
 *
m
, c⁄° *
fûeP©h
)

654 
löe
[256];

655 
«me£rvî
[16];

656 
keyw‹d
[10];

657 
numOfSîvîs
 = 0;

658 
FILE
 *
Â
 = 
	`f›í
(
fûeP©h
, "r");

659 i‡(
Â
 =
NULL
)  -1;

660 
	`fgës
(
löe
,÷öe),
Â
))

662 
ö_addr
 
öa
;

663 
löe
[255]='\0';

664 i‡(
	`ssˇnf
(
löe
,"%10†%15s", 
keyw‹d
, 
«me£rvî
) != 2) ;

665 i‡(
	`°∫cmp
(
keyw‹d
,"nameserver",10)) ;

666 i‡(
	`öë_©⁄
(
«me£rvî
, (
ö_addr
 *)&
öa
) != 0)

668 
mDNSAddr
 
DNSAddr
;

669 
DNSAddr
.
ty≥
 = 
mDNSAddrTy≥_IPv4
;

670 
DNSAddr
.
ù
.
v4
.
NŸAnI¡egî
 = 
öa
.
s_addr
;

671 
	`mDNS_AddDNSSîvî
(
m
, &
DNSAddr
, 
NULL
);

672 
numOfSîvîs
++;

675  (
numOfSîvîs
 > 0) ? 0 : -1;

676 
	}
}

680 
mDNSloˇl
 
PosixNëw‹kI¡îÁ˚
 *
	$SórchF‹I¡îÁ˚ByName
(
mDNS
 *c⁄° 
m
, c⁄° *
ötfName
)

682 
PosixNëw‹kI¡îÁ˚
 *
ötf
;

684 
	`as£π
(
m
 !
NULL
);

685 
	`as£π
(
ötfName
 !
NULL
);

687 
ötf
 = (
PosixNëw‹kI¡îÁ˚
*)(
m
->
Ho°I¡îÁ˚s
);

688  (
ötf
 !
NULL
Ë&& (
	`°rcmp
(ötf->
ötfName
, intfName) != 0) )

689 
ötf
 = (
PosixNëw‹kI¡îÁ˚
 *)(ötf->
c‹eI¡f
.
√xt
);

691  
ötf
;

692 
	}
}

694 
mDNSexp‹t
 
mDNSI¡îÁ˚ID
 
	$mDNSPœtf‹mI¡îÁ˚ID‰omI¡îÁ˚Index
(
mDNS
 *c⁄° 
m
, 
mDNSu32
 
ödex
)

696 
PosixNëw‹kI¡îÁ˚
 *
ötf
;

698 
	`as£π
(
m
 !
NULL
);

700 i‡(
ödex
 =
kDNSSîvi˚I¡îÁ˚IndexLoˇlO∆y
Ë(
mDNSI¡îÁ˚_LoˇlO∆y
);

702 
ötf
 = (
PosixNëw‹kI¡îÁ˚
*)(
m
->
Ho°I¡îÁ˚s
);

703  (
ötf
 !
NULL
Ë&& (
mDNSu32
Ëötf->
ödex
 != index)

704 
ötf
 = (
PosixNëw‹kI¡îÁ˚
 *)(ötf->
c‹eI¡f
.
√xt
);

706  (
mDNSI¡îÁ˚ID
Ë
ötf
;

707 
	}
}

709 
mDNSexp‹t
 
mDNSu32
 
	$mDNSPœtf‹mI¡îÁ˚Index‰omI¡îÁ˚ID
(
mDNS
 *c⁄° 
m
, 
mDNSI¡îÁ˚ID
 
id
)

711 
PosixNëw‹kI¡îÁ˚
 *
ötf
;

713 
	`as£π
(
m
 !
NULL
);

715 i‡(
id
 =
mDNSI¡îÁ˚_LoˇlO∆y
Ë(
kDNSSîvi˚I¡îÁ˚IndexLoˇlO∆y
);

717 
ötf
 = (
PosixNëw‹kI¡îÁ˚
*)(
m
->
Ho°I¡îÁ˚s
);

718  (
ötf
 !
NULL
Ë&& (
mDNSI¡îÁ˚ID
Ëöt‡!
id
)

719 
ötf
 = (
PosixNëw‹kI¡îÁ˚
 *)(ötf->
c‹eI¡f
.
√xt
);

721  
ötf
 ? i¡f->
ödex
 : 0;

722 
	}
}

726 
mDNSloˇl
 
	$FªePosixNëw‹kI¡îÁ˚
(
PosixNëw‹kI¡îÁ˚
 *
ötf
)

728 
	`as£π
(
ötf
 !
NULL
);

729 i‡(
ötf
->
ötfName
 !
NULL
Ë
	`‰ì
((*)intf->intfName);

730 i‡(
ötf
->
mu…iˇ°Sockë4
 !-1Ë
	`as£π
(
	`˛o£
(intf->multicastSocket4) == 0);

731 #i‡
HAVE_IPV6


732 i‡(
ötf
->
mu…iˇ°Sockë6
 !-1Ë
	`as£π
(
	`˛o£
(intf->multicastSocket6) == 0);

734 
	`‰ì
(
ötf
);

735 
	}
}

738 
mDNSloˇl
 
	$CÀ¨I¡îÁ˚Li°
(
mDNS
 *c⁄° 
m
)

740 
	`as£π
(
m
 !
NULL
);

742 
m
->
Ho°I¡îÁ˚s
)

744 
PosixNëw‹kI¡îÁ˚
 *
ötf
 = (PosixNëw‹kI¡îÁ˚*)(
m
->
Ho°I¡îÁ˚s
);

745 
	`mDNS_Dîegi°îI¡îÁ˚
(
m
, &
ötf
->
c‹eI¡f
, 
mDNSÁl£
);

746 i‡(
gMDNSPœtf‹mPosixVîbo£Levñ
 > 0Ë
	`Ârötf
(
°dîr
, "Dîegi°îed i¡îÁ˚ %s\n", 
ötf
->
ötfName
);

747 
	`FªePosixNëw‹kI¡îÁ˚
(
ötf
);

749 
num_ªgi°îed_öãrÁ˚s
 = 0;

750 
num_pkts_ac˚±ed
 = 0;

751 
num_pkts_ªje˘ed
 = 0;

752 
	}
}

757 
mDNSloˇl
 
	$SëupSockë
(
sockaddr
 *
ötfAddr
, 
mDNSIPP‹t
 
p‹t
, 
öãrÁ˚Index
, *
sktPå
)

759 
îr
 = 0;

760 c⁄° 
kOn
 = 1;

761 c⁄° 
kI¡TwoFiveFive
 = 255;

762 c⁄° 
kByãTwoFiveFive
 = 255;

763 c⁄° 
mDNSBoﬁ
 
JoöMu…iˇ°Group
 = (
p‹t
.
NŸAnI¡egî
 != 0);

765 (Ë
öãrÁ˚Index
;

766 
	`as£π
(
ötfAddr
 !
NULL
);

767 
	`as£π
(
sktPå
 !
NULL
);

768 
	`as£π
(*
sktPå
 == -1);

771 i‡(
ötfAddr
->
ß_Ámûy
 =
AF_INET
 ) *
sktPå
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 
IPPROTO_UDP
);

772 #i‡
HAVE_IPV6


773 i‡(
ötfAddr
->
ß_Ámûy
 =
AF_INET6
Ë*
sktPå
 = 
	`sockë
(
PF_INET6
, 
SOCK_DGRAM
, 
IPPROTO_UDP
);

775  
EINVAL
;

777 i‡(*
sktPå
 < 0Ë{ 
îr
 = 
î∫o
; 
	`≥º‹
("socket"); }

780 i‡(
îr
 =0 && 
p‹t
.
NŸAnI¡egî
)

782 #i‡
	`deföed
(
SO_REUSEPORT
)

783 
îr
 = 
	`£tsock›t
(*
sktPå
, 
SOL_SOCKET
, 
SO_REUSEPORT
, &
kOn
, (kOn));

784 #ñi‡
	`deföed
(
SO_REUSEADDR
)

785 
îr
 = 
	`£tsock›t
(*
sktPå
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
kOn
, (kOn));

787 #îr‹ 
This
 
∂©f‹m
 
has
 
no
 
way
 
to
 
avoid
 
addªss
 
busy
 
îr‹s
 
⁄
 
mu…iˇ°
.

789 i‡(
îr
 < 0Ë{Éº = 
î∫o
; 
	`≥º‹
("setsockopt - SO_REUSExxxx"); }

793 i‡(
ötfAddr
->
ß_Ámûy
 =
AF_INET
)

795 
ù_mªq
 
imr
;

796 
sockaddr_ö
 
bödAddr
;

797 i‡(
îr
 == 0)

799 #i‡
	`deföed
(
IP_PKTINFO
)

800 
îr
 = 
	`£tsock›t
(*
sktPå
, 
IPPROTO_IP
, 
IP_PKTINFO
, &
kOn
, (kOn));

801 i‡(
îr
 < 0Ë{Éº = 
î∫o
; 
	`≥º‹
("setsockopt - IP_PKTINFO"); }

802 #ñi‡
	`deföed
(
IP_RECVDSTADDR
Ë|| deföed(
IP_RECVIF
)

803 #i‡
	`deföed
(
IP_RECVDSTADDR
)

804 
îr
 = 
	`£tsock›t
(*
sktPå
, 
IPPROTO_IP
, 
IP_RECVDSTADDR
, &
kOn
, (kOn));

805 i‡(
îr
 < 0Ë{Éº = 
î∫o
; 
	`≥º‹
("setsockopt - IP_RECVDSTADDR"); }

807 #i‡
	`deföed
(
IP_RECVIF
)

808 i‡(
îr
 == 0)

810 
îr
 = 
	`£tsock›t
(*
sktPå
, 
IPPROTO_IP
, 
IP_RECVIF
, &
kOn
, (kOn));

811 i‡(
îr
 < 0Ë{Éº = 
î∫o
; 
	`≥º‹
("setsockopt - IP_RECVIF"); }

815 #w¨nög 
This
 
∂©f‹m
 
has
 
no
 
way
 
to
 
gë
 
the
 
de°ö©i⁄
 
öãrÁ˚
 
öf‹m©i⁄
 -- 
wûl
 
⁄ly
 
w‹k
 
sögÀ
-
homed
 
ho°s


818 #i‡
	`deföed
(
IP_RECVTTL
)

819 i‡(
îr
 == 0)

821 
	`£tsock›t
(*
sktPå
, 
IPPROTO_IP
, 
IP_RECVTTL
, &
kOn
, (kOn));

827 i‡(
îr
 =0 && 
JoöMu…iˇ°Group
)

829 
imr
.
imr_mu…üddr
.
s_addr
 = 
AŒDNSLökGroupv4
.
NŸAnI¡egî
;

830 
imr
.
imr_öãrÁ˚
 = ((
sockaddr_ö
*)
ötfAddr
)->
sö_addr
;

831 
îr
 = 
	`£tsock›t
(*
sktPå
, 
IPPROTO_IP
, 
IP_ADD_MEMBERSHIP
, &
imr
, (imr));

832 i‡(
îr
 < 0Ë{Éº = 
î∫o
; 
	`≥º‹
("setsockopt - IP_ADD_MEMBERSHIP"); }

836 i‡(
îr
 =0 && 
JoöMu…iˇ°Group
)

838 
îr
 = 
	`£tsock›t
(*
sktPå
, 
IPPROTO_IP
, 
IP_MULTICAST_IF
, &((
sockaddr_ö
*)
ötfAddr
)->
sö_addr
, (
ö_addr
));

839 i‡(
îr
 < 0Ë{Éº = 
î∫o
; 
	`≥º‹
("setsockopt - IP_MULTICAST_IF"); }

843 i‡(
îr
 == 0)

845 
îr
 = 
	`£tsock›t
(*
sktPå
, 
IPPROTO_IP
, 
IP_TTL
, &
kI¡TwoFiveFive
, (kIntTwoFiveFive));

846 i‡(
îr
 < 0Ë{Éº = 
î∫o
; 
	`≥º‹
("setsockopt - IP_TTL"); }

851 i‡(
îr
 == 0)

853 
îr
 = 
	`£tsock›t
(*
sktPå
, 
IPPROTO_IP
, 
IP_MULTICAST_TTL
, &
kByãTwoFiveFive
, (kByteTwoFiveFive));

854 i‡(
îr
 < 0 && 
î∫o
 =
EINVAL
)

855 
îr
 = 
	`£tsock›t
(*
sktPå
, 
IPPROTO_IP
, 
IP_MULTICAST_TTL
, &
kI¡TwoFiveFive
, (kIntTwoFiveFive));

856 i‡(
îr
 < 0Ë{Éº = 
î∫o
; 
	`≥º‹
("setsockopt - IP_MULTICAST_TTL"); }

860 i‡(
îr
 == 0)

862 
bödAddr
.
sö_Ámûy
 = 
AF_INET
;

863 
bödAddr
.
sö_p‹t
 = 
p‹t
.
NŸAnI¡egî
;

864 
bödAddr
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

865 
îr
 = 
	`böd
(*
sktPå
, (
sockaddr
 *Ë&
bödAddr
, (bindAddr));

866 i‡(
îr
 < 0Ë{Éº = 
î∫o
; 
	`≥º‹
("böd"); 
	`fÊush
(
°dîr
); }

870 #i‡
HAVE_IPV6


871 i‡(
ötfAddr
->
ß_Ámûy
 =
AF_INET6
)

873 
ùv6_mªq
 
imr6
;

874 
sockaddr_ö6
 
bödAddr6
;

875 #i‡
	`deföed
(
IPV6_PKTINFO
)

876 i‡(
îr
 == 0)

878 
îr
 = 
	`£tsock›t
(*
sktPå
, 
IPPROTO_IPV6
, 
IPV6_PKTINFO
, &
kOn
, (kOn));

879 i‡(
îr
 < 0Ë{Éº = 
î∫o
; 
	`≥º‹
("setsockopt - IPV6_PKTINFO"); }

882 #w¨nög 
This
 
∂©f‹m
 
has
 
no
 
way
 
to
 
gë
 
the
 
de°ö©i⁄
 
öãrÁ˚
 
öf‹m©i⁄
 
IPv6
 -- 
wûl
 
⁄ly
 
w‹k
 
sögÀ
-
homed
 
ho°s


884 #i‡
	`deföed
(
IPV6_HOPLIMIT
)

885 i‡(
îr
 == 0)

887 
îr
 = 
	`£tsock›t
(*
sktPå
, 
IPPROTO_IPV6
, 
IPV6_HOPLIMIT
, &
kOn
, (kOn));

888 i‡(
îr
 < 0Ë{Éº = 
î∫o
; 
	`≥º‹
("setsockopt - IPV6_HOPLIMIT"); }

893 i‡(
îr
 =0 && 
JoöMu…iˇ°Group
)

895 
imr6
.
ùv6mr_mu…üddr
 = *(c⁄° 
ö6_addr
*)&
AŒDNSLökGroupv6
;

896 
imr6
.
ùv6mr_öãrÁ˚
 = 
öãrÁ˚Index
;

898 
îr
 = 
	`£tsock›t
(*
sktPå
, 
IPPROTO_IPV6
, 
IPV6_JOIN_GROUP
, &
imr6
, (imr6));

899 i‡(
îr
 < 0)

901 
îr
 = 
î∫o
;

902 
	`vîbo£debugf
("IPV6_JOIN_GROUP %.16®⁄ %d faûed.\n", &
imr6
.
ùv6mr_mu…üddr
, imr6.
ùv6mr_öãrÁ˚
);

903 
	`≥º‹
("setsockopt - IPV6_JOIN_GROUP");

908 i‡(
îr
 =0 && 
JoöMu…iˇ°Group
)

910 
u_öt
 
mu…iˇ°_if
 = 
öãrÁ˚Index
;

911 
îr
 = 
	`£tsock›t
(*
sktPå
, 
IPPROTO_IPV6
, 
IPV6_MULTICAST_IF
, &
mu…iˇ°_if
, (multicast_if));

912 i‡(
îr
 < 0Ë{Éº = 
î∫o
; 
	`≥º‹
("setsockopt - IPV6_MULTICAST_IF"); }

917 i‡(
îr
 == 0)

919 
îr
 = 
	`£tsock›t
(*
sktPå
, 
IPPROTO_IPV6
, 
IPV6_V6ONLY
, &
kOn
, (kOn));

920 i‡(
îr
 < 0Ë{Éº = 
î∫o
; 
	`≥º‹
("setsockopt - IPV6_V6ONLY"); }

924 i‡(
îr
 == 0)

926 
îr
 = 
	`£tsock›t
(*
sktPå
, 
IPPROTO_IPV6
, 
IPV6_UNICAST_HOPS
, &
kI¡TwoFiveFive
, (kIntTwoFiveFive));

927 i‡(
îr
 < 0Ë{Éº = 
î∫o
; 
	`≥º‹
("setsockopt - IPV6_UNICAST_HOPS"); }

932 i‡(
îr
 == 0)

934 
îr
 = 
	`£tsock›t
(*
sktPå
, 
IPPROTO_IPV6
, 
IPV6_MULTICAST_HOPS
, &
kByãTwoFiveFive
, (kByteTwoFiveFive));

935 i‡(
îr
 < 0 && 
î∫o
 =
EINVAL
)

936 
îr
 = 
	`£tsock›t
(*
sktPå
, 
IPPROTO_IPV6
, 
IPV6_MULTICAST_HOPS
, &
kI¡TwoFiveFive
, (kIntTwoFiveFive));

937 i‡(
îr
 < 0Ë{Éº = 
î∫o
; 
	`≥º‹
("setsockopt - IPV6_MULTICAST_HOPS"); }

941 i‡(
îr
 == 0)

943 
	`mDNSPœtf‹mMemZîo
(&
bödAddr6
, (bindAddr6));

944 #i‚de‡
NOT_HAVE_SA_LEN


945 
bödAddr6
.
sö6_Àn
 = (bindAddr6);

947 
bödAddr6
.
sö6_Ámûy
 = 
AF_INET6
;

948 
bödAddr6
.
sö6_p‹t
 = 
p‹t
.
NŸAnI¡egî
;

949 
bödAddr6
.
sö6_Êowöfo
 = 0;

950 
bödAddr6
.
sö6_addr
 = 
ö6addr_™y
;

951 
bödAddr6
.
sö6_sc›e_id
 = 0;

952 
îr
 = 
	`böd
(*
sktPå
, (
sockaddr
 *Ë&
bödAddr6
, (bindAddr6));

953 i‡(
îr
 < 0Ë{Éº = 
î∫o
; 
	`≥º‹
("böd"); 
	`fÊush
(
°dîr
); }

959 i‡(
îr
 == 0)

961 
îr
 = 
	`f˙é
(*
sktPå
, 
F_GETFL
, 0);

962 i‡(
îr
 < 0Ëî∏
î∫o
;

965 
îr
 = 
	`f˙é
(*
sktPå
, 
F_SETFL
,Éº | 
O_NONBLOCK
);

966 i‡(
îr
 < 0Ëî∏
î∫o
;

971 i‡(
îr
 !0 && *
sktPå
 !-1Ë{ 
	`as£π
(
	`˛o£
(*sktPtr) == 0); *sktPtr = -1; }

972 
	`as£π
–(
îr
 =0Ë=(*
sktPå
 != -1) );

973  
îr
;

974 
	}
}

978 
mDNSloˇl
 
	$SëupO√I¡îÁ˚
(
mDNS
 *c⁄° 
m
, 
sockaddr
 *
ötfAddr
, sockadd∏*
ötfMask
, c⁄° *
ötfName
, 
ötfIndex
)

980 
îr
 = 0;

981 
PosixNëw‹kI¡îÁ˚
 *
ötf
;

982 
PosixNëw‹kI¡îÁ˚
 *
Æüs
 = 
NULL
;

984 
	`as£π
(
m
 !
NULL
);

985 
	`as£π
(
ötfAddr
 !
NULL
);

986 
	`as£π
(
ötfName
 !
NULL
);

987 
	`as£π
(
ötfMask
 !
NULL
);

990 
ötf
 = (
PosixNëw‹kI¡îÁ˚
*)
	`mÆloc
((*intf));

991 i‡(
ötf
 =
NULL
Ë{ 
	`as£π
(0); 
îr
 = 
ENOMEM
; }

994 i‡(
îr
 == 0)

996 
ötf
->
ötfName
 = 
	`°rdup
(intfName);

997 i‡(
ötf
->
ötfName
 =
NULL
Ë{ 
	`as£π
(0); 
îr
 = 
ENOMEM
; }

1000 i‡(
îr
 == 0)

1003 
	`SockAddrTomDNSAddr
(
ötfAddr
, &
ötf
->
c‹eI¡f
.
ù
, 
NULL
);

1004 
	`SockAddrTomDNSAddr
(
ötfMask
, &
ötf
->
c‹eI¡f
.
mask
, 
NULL
);

1006 
	`°∫˝y
(
ötf
->
c‹eI¡f
.
i‚ame
, 
ötfName
, (intf->coreIntf.ifname));

1007 
ötf
->
c‹eI¡f
.
i‚ame
[(intf->coreIntf.ifname)-1] = 0;

1008 
ötf
->
c‹eI¡f
.
Advîti£
 = 
m
->
Advîti£LoˇlAddªs£s
;

1009 
ötf
->
c‹eI¡f
.
Mˇ°TxRx
 = 
mDNSåue
;

1012 
	`as£π
(
ötf
->
ötfName
 !
NULL
);

1013 
ötf
->
ödex
 = 
ötfIndex
;

1014 
ötf
->
mu…iˇ°Sockë4
 = -1;

1015 #i‡
HAVE_IPV6


1016 
ötf
->
mu…iˇ°Sockë6
 = -1;

1018 
Æüs
 = 
	`SórchF‹I¡îÁ˚ByName
(
m
, 
ötf
->
ötfName
);

1019 i‡(
Æüs
 =
NULL
ËÆü†
ötf
;

1020 
ötf
->
c‹eI¡f
.
I¡îÁ˚ID
 = (
mDNSI¡îÁ˚ID
)
Æüs
;

1022 i‡(
Æüs
 !
ötf
)

1023 
	`debugf
("SëupO√I¡îÁ˚: %†%#®i†™álü†o‡%#a", 
ötfName
, &
ötf
->
c‹eI¡f
.
ù
, &
Æüs
->coreIntf.ip);

1027 i‡(
îr
 == 0)

1029 i‡(
Æüs
->
mu…iˇ°Sockë4
 =-1 && 
ötfAddr
->
ß_Ámûy
 =
AF_INET
)

1030 
îr
 = 
	`SëupSockë
(
ötfAddr
, 
Mu…iˇ°DNSP‹t
, 
ötf
->
ödex
, &
Æüs
->
mu…iˇ°Sockë4
);

1031 #i‡
HAVE_IPV6


1032 i‡(
Æüs
->
mu…iˇ°Sockë6
 =-1 && 
ötfAddr
->
ß_Ámûy
 =
AF_INET6
)

1033 
îr
 = 
	`SëupSockë
(
ötfAddr
, 
Mu…iˇ°DNSP‹t
, 
ötf
->
ödex
, &
Æüs
->
mu…iˇ°Sockë6
);

1038 i‡(
îr
 == 0)

1039 
îr
 = 
	`mDNS_Regi°îI¡îÁ˚
(
m
, &
ötf
->
c‹eI¡f
, 
mDNSÁl£
);

1042 i‡(
îr
 == 0)

1044 
num_ªgi°îed_öãrÁ˚s
++;

1045 
	`debugf
("SëupO√I¡îÁ˚: %†%#®Regi°îed", 
ötf
->
ötfName
, &ötf->
c‹eI¡f
.
ù
);

1046 i‡(
gMDNSPœtf‹mPosixVîbo£Levñ
 > 0)

1047 
	`Ârötf
(
°dîr
, "Regi°îed i¡îÁ˚ %s\n", 
ötf
->
ötfName
);

1052 
	`debugf
("SëupO√I¡îÁ˚: %†%#®ÁûedÅÿªgi°î %d", 
ötfName
, &
ötf
->
c‹eI¡f
.
ù
, 
îr
);

1053 i‡(
ötf
Ë{ 
	`FªePosixNëw‹kI¡îÁ˚
(ötf); i¡‡
NULL
; }

1056 
	`as£π
–(
îr
 =0Ë=(
ötf
 !
NULL
) );

1058  
îr
;

1059 
	}
}

1062 
mDNSloˇl
 
	$SëupI¡îÁ˚Li°
(
mDNS
 *c⁄° 
m
)

1064 
mDNSBoﬁ
 
foundav4
 = 
mDNSÁl£
;

1065 
îr
 = 0;

1066 
ifi_öfo
 *
ötfLi°
 = 
	`gë_ifi_öfo
(
AF_INET
, 
mDNSåue
);

1067 
ifi_öfo
 *
fú°Lo›back
 = 
NULL
;

1069 
	`as£π
(
m
 !
NULL
);

1070 
	`debugf
("SetupInterfaceList");

1072 i‡(
ötfLi°
 =
NULL
Ë
îr
 = 
ENOENT
;

1074 #i‡
HAVE_IPV6


1075 i‡(
îr
 == 0)

1077 
ifi_öfo
 **
p
 = &
ötfLi°
;

1078 *
p
Ë∞&(*p)->
ifi_√xt
;

1079 *
p
 = 
	`gë_ifi_öfo
(
AF_INET6
, 
mDNSåue
);

1083 i‡(
îr
 == 0)

1085 
ifi_öfo
 *
i
 = 
ötfLi°
;

1086 
i
)

1088 i‡–((
i
->
ifi_addr
->
ß_Ámûy
 =
AF_INET
)

1089 #i‡
HAVE_IPV6


1090 || (
i
->
ifi_addr
->
ß_Ámûy
 =
AF_INET6
)

1092 Ë&& (
i
->
ifi_Êags
 & 
IFF_UP
Ë&& !(i->ifi_Êag†& 
IFF_POINTOPOINT
) )

1094 i‡(
i
->
ifi_Êags
 & 
IFF_LOOPBACK
)

1096 i‡(
fú°Lo›back
 =
NULL
)

1097 
fú°Lo›back
 = 
i
;

1101 i‡(
	`SëupO√I¡îÁ˚
(
m
, 
i
->
ifi_addr
, i->
ifi_√tmask
, i->
ifi_«me
, i->
ifi_ödex
) == 0)

1102 i‡(
i
->
ifi_addr
->
ß_Ámûy
 =
AF_INET
)

1103 
foundav4
 = 
mDNSåue
;

1106 
i
 = i->
ifi_√xt
;

1114 i‡–!
foundav4
 && 
fú°Lo›back
 )

1115 (Ë
	`SëupO√I¡îÁ˚
(
m
, 
fú°Lo›back
->
ifi_addr
, fú°Lo›back->
ifi_√tmask
, fú°Lo›back->
ifi_«me
, fú°Lo›back->
ifi_ödex
);

1119 i‡(
ötfLi°
 !
NULL
Ë
	`‰ì_ifi_öfo
(intfList);

1120  
îr
;

1121 
	}
}

1123 #i‡
USES_NETLINK


1128 
mDNSloˇl
 
mSètus
 
	$O≥nIfNŸifySockë
–*
pFD
)

1130 
mSètus
 
îr
 = 
mSètus_NoEº‹
;

1131 
sockaddr_∆
 
¢l
;

1132 
sock
;

1133 
ªt
;

1135 
sock
 = 
	`sockë
–
AF_NETLINK
, 
SOCK_RAW
, 
NETLINK_ROUTE
);

1136 i‡(
sock
 < 0)

1137  
î∫o
;

1140 (Ë
	`f˙é
–
sock
, 
F_SETFL
, 
O_NONBLOCK
);

1143 
	`bzîo
–&
¢l
,  snl);

1144 
¢l
.
∆_Ámûy
 = 
AF_NETLINK
;

1145 
¢l
.
∆_groups
 = 
RTMGRP_LINK
 | 
RTMGRP_IPV4_IFADDR
;

1146 
ªt
 = 
	`böd
–
sock
, (
sockaddr
 *Ë&
¢l
,  snl);

1147 i‡–0 =
ªt
)

1148 *
pFD
 = 
sock
;

1150 
îr
 = 
î∫o
;

1152  
îr
;

1153 
	}
}

1155 #i‡
MDNS_DEBUGMSGS


1156 
mDNSloˇl
 
	$PrötNëLökMsg
–c⁄° 
∆msghdr
 *
pNLMsg
)

1158 c⁄° *
kNLMsgTy≥s
[] = { "", "NLMSG_NOOP", "NLMSG_ERROR", "NLMSG_DONE", "NLMSG_OVERRUN" };

1159 c⁄° *
kNLRtMsgTy≥s
[] = { "RTM_NEWLINK", "RTM_DELLINK", "RTM_GETLINK", "RTM_NEWADDR", "RTM_DELADDR", "RTM_GETADDR" };

1161 
	`¥ötf
–"∆msghd∏Àn=%d,Åy≥=%s, fœgs=0x%x\n", 
pNLMsg
->
∆msg_Àn
,

1162 
pNLMsg
->
∆msg_ty≥
 < 
RTM_BASE
 ? 
kNLMsgTy≥s
[ÖNLMsg->∆msg_ty≥] : 
kNLRtMsgTy≥s
[ÖNLMsg->nlmsg_type - RTM_BASE],

1163 
pNLMsg
->
∆msg_Êags
);

1165 i‡–
RTM_NEWLINK
 <
pNLMsg
->
∆msg_ty≥
 &&ÖNLMsg->∆msg_ty≥ <
RTM_GETLINK
)

1167 
iföfomsg
 *
pIfInfo
 = (iföfomsg*Ë
	`NLMSG_DATA
–
pNLMsg
);

1168 
	`¥ötf
–"iföfomsg famûy=%d,Åy≥=%d, index=%d, fœgs=0x%x, ch™ge=0x%x\n", 
pIfInfo
->
ifi_Ámûy
,

1169 
pIfInfo
->
ifi_ty≥
,ÖIfInfo->
ifi_ödex
,ÖIfInfo->
ifi_Êags
,ÖIfInfo->
ifi_ch™ge
);

1172 i‡–
RTM_NEWADDR
 <
pNLMsg
->
∆msg_ty≥
 &&ÖNLMsg->∆msg_ty≥ <
RTM_GETADDR
)

1174 
iÁddrmsg
 *
pIfAddr
 = (iÁddrmsg*Ë
	`NLMSG_DATA
–
pNLMsg
);

1175 
	`¥ötf
–"iÁddrmsg famûy=%d, index=%d, fœgs=0x%x\n", 
pIfAddr
->
iÁ_Ámûy
,

1176 
pIfAddr
->
iÁ_ödex
,ÖIfAddr->
iÁ_Êags
);

1178 
	`¥ötf
( "\n");

1179 
	}
}

1182 
mDNSloˇl
 
mDNSu32
 
	$Pro˚ssRoutögNŸifiˇti⁄
–
sd
)

1186 
ssize_t
 
ªadCou¡
;

1187 
buff
[ 4096];

1188 
∆msghdr
 *
pNLMsg
 = (∆msghdr*Ë
buff
;

1189 
mDNSu32
 
ªsu…
 = 0;

1196 
ªadCou¡
 = 
	`ªad
–
sd
, 
buff
,  buff);

1201 i‡––(*Ë&
pNLMsg
[1] > ( 
buff
 + 
ªadCou¡
)) ||

1202 –(*Ë
pNLMsg
 +ÖNLMsg->
∆msg_Àn
 > ( 
buff
 + 
ªadCou¡
)))

1204 i‡–
buff
 < (*Ë
pNLMsg
)

1207 
ªadCou¡
 -–(*Ë
pNLMsg
 - 
buff
);

1208 
	`memmove
–
buff
, 
pNLMsg
, 
ªadCou¡
);

1209 
pNLMsg
 = (
∆msghdr
*Ë
buff
;

1212 
ªadCou¡
 +
	`ªad
–
sd
, 
buff
 +ÑeadCount,  buff -ÑeadCount);

1219 #i‡
MDNS_DEBUGMSGS


1220 
	`PrötNëLökMsg
–
pNLMsg
);

1224 i‡–
pNLMsg
->
∆msg_ty≥
 =
RTM_GETLINK
 ||ÖNLMsg->∆msg_ty≥ =
RTM_NEWLINK
)

1225 
ªsu…
 |1 << ((
iföfomsg
*Ë
	`NLMSG_DATA
–
pNLMsg
))->
ifi_ödex
;

1226 i‡–
pNLMsg
->
∆msg_ty≥
 =
RTM_DELADDR
 ||ÖNLMsg->∆msg_ty≥ =
RTM_NEWADDR
)

1227 
ªsu…
 |1 << ((
iÁddrmsg
*Ë
	`NLMSG_DATA
–
pNLMsg
))->
iÁ_ödex
;

1230 i‡––
pNLMsg
->
∆msg_Êags
 & 
NLM_F_MULTI
Ë!0 &&ÖNLMsg->
∆msg_ty≥
 !
NLMSG_DONE
)

1232 
ssize_t
 
Àn
 = 
ªadCou¡
 - ( (*)
pNLMsg
 - 
buff
);

1233 
pNLMsg
 = 
	`NLMSG_NEXT
–pNLMsg, 
Àn
);

1239  
ªsu…
;

1240 
	}
}

1245 
mDNSloˇl
 
mSètus
 
	$O≥nIfNŸifySockë
–*
pFD
)

1247 *
pFD
 = 
	`sockë
–
AF_ROUTE
, 
SOCK_RAW
, 0);

1249 i‡–*
pFD
 < 0)

1250  
mSètus_UnknownEº
;

1253 (Ë
	`f˙é
–*
pFD
, 
F_SETFL
, 
O_NONBLOCK
);

1255  
mSètus_NoEº‹
;

1256 
	}
}

1258 #i‡
MDNS_DEBUGMSGS


1259 
mDNSloˇl
 
	$PrötRoutögSockëMsg
–c⁄° 
iÁ_msghdr
 *
pRSMsg
)

1261 c⁄° *
kRSMsgTy≥s
[] = { "", "RTM_ADD", "RTM_DELETE", "RTM_CHANGE", "RTM_GET", "RTM_LOSING",

1265 
ödex
 = 
pRSMsg
->
iÁm_ty≥
 =
RTM_IFINFO
 ? ((
if_msghdr
*ËpRSMsg)->
ifm_ödex
 :ÖRSMsg->
iÁm_ödex
;

1267 
	`¥ötf
–"iÁ_msghd∏Àn=%d,Åy≥=%s, index=%d\n", 
pRSMsg
->
iÁm_msgÀn
, 
kRSMsgTy≥s
[ÖRSMsg->
iÁm_ty≥
], 
ödex
);

1268 
	}
}

1271 
mDNSloˇl
 
mDNSu32
 
	$Pro˚ssRoutögNŸifiˇti⁄
–
sd
)

1275 
ssize_t
 
ªadCou¡
;

1276 
buff
[ 4096];

1277 
iÁ_msghdr
 *
pRSMsg
 = (iÁ_msghdr*Ë
buff
;

1278 
mDNSu32
 
ªsu…
 = 0;

1280 
ªadCou¡
 = 
	`ªad
–
sd
, 
buff
,  buff);

1281 i‡–
ªadCou¡
 < (
ssize_t
Ë–
iÁ_msghdr
))

1282  
mSètus_Unsuµ‹ãdEº
;

1284 #i‡
MDNS_DEBUGMSGS


1285 
	`PrötRoutögSockëMsg
–
pRSMsg
);

1289 i‡–
pRSMsg
->
iÁm_ty≥
 =
RTM_NEWADDR
 ||ÖRSMsg->iÁm_ty≥ =
RTM_DELADDR
 ||

1290 
pRSMsg
->
iÁm_ty≥
 =
RTM_IFINFO
)

1292 i‡–
pRSMsg
->
iÁm_ty≥
 =
RTM_IFINFO
)

1293 
ªsu…
 |1 << ((
if_msghdr
*Ë
pRSMsg
)->
ifm_ödex
;

1295 
ªsu…
 |1 << 
pRSMsg
->
iÁm_ödex
;

1298  
ªsu…
;

1299 
	}
}

1304 
mDNSloˇl
 
	$I¡îÁ˚Ch™geCÆlback
–*
c⁄ãxt
)

1306 
IfCh™geRec
 *
pChgRec
 = (IfCh™geRec*Ë
c⁄ãxt
;

1307 
fd_£t
 
ªadFDs
;

1308 
mDNSu32
 
ch™gedI¡îÁ˚s
 = 0;

1309 
timevÆ
 
zîoTimeout
 = { 0, 0 };

1311 
	`FD_ZERO
–&
ªadFDs
);

1312 
	`FD_SET
–
pChgRec
->
NŸifySD
, &
ªadFDs
);

1316 
ch™gedI¡îÁ˚s
 |
	`Pro˚ssRoutögNŸifiˇti⁄
–
pChgRec
->
NŸifySD
);

1318  0 < 
	`£À˘
–
pChgRec
->
NŸifySD
 + 1, &
ªadFDs
, (
fd_£t
*Ë
NULL
, (fd_£t*ËNULL, &
zîoTimeout
));

1323 i‡–
ch™gedI¡îÁ˚s
)

1324 
	`mDNSPœtf‹mPosixRe‰eshI¡îÁ˚Li°
–
pChgRec
->
mDNS
);

1325 
	}
}

1328 
mDNSloˇl
 
mSètus
 
	$W©chF‹I¡îÁ˚Ch™ge
(
mDNS
 *c⁄° 
m
)

1330 
mSètus
 
îr
;

1331 
IfCh™geRec
 *
pChgRec
;

1333 
pChgRec
 = (
IfCh™geRec
*Ë
	`mDNSPœtf‹mMemAŒoˇã
(  *pChgRec);

1334 i‡–
pChgRec
 =
NULL
)

1335  
mSètus_NoMem‹yEº
;

1337 
pChgRec
->
mDNS
 = 
m
;

1338 
îr
 = 
	`O≥nIfNŸifySockë
–&
pChgRec
->
NŸifySD
);

1339 i‡–
îr
 == 0)

1340 
îr
 = 
	`mDNSPosixAddFDToEvítLo›
–
pChgRec
->
NŸifySD
, 
I¡îÁ˚Ch™geCÆlback
,ÖChgRec);

1342  
îr
;

1343 
	}
}

1348 
mDNSloˇl
 
mDNSBoﬁ
 
	$mDNSPœtf‹mInô_C™Re˚iveUniˇ°
()

1350 
îr
;

1351 
s
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 
IPPROTO_UDP
);

1352 
sockaddr_ö
 
s5353
;

1353 
s5353
.
sö_Ámûy
 = 
AF_INET
;

1354 
s5353
.
sö_p‹t
 = 
Mu…iˇ°DNSP‹t
.
NŸAnI¡egî
;

1355 
s5353
.
sö_addr
.
s_addr
 = 0;

1356 
îr
 = 
	`böd
(
s
, (
sockaddr
 *)&
s5353
, (s5353));

1357 
	`˛o£
(
s
);

1358 i‡(
îr
Ë
	`debugf
("No unicast UDPÑesponses");

1359 
	`debugf
("Unicast UDPÑesponses okay");

1360 (
îr
 == 0);

1361 
	}
}

1364 
mDNSexp‹t
 
mSètus
 
	$mDNSPœtf‹mInô
(
mDNS
 *c⁄° 
m
)

1366 
îr
 = 0;

1367 
sockaddr
 
ß
;

1368 
	`as£π
(
m
 !
NULL
);

1370 i‡(
	`mDNSPœtf‹mInô_C™Re˚iveUniˇ°
()Ë
m
->
C™Re˚iveUniˇ°On5353
 = 
mDNSåue
;

1375 
m
->
ni˚œbñ
.
c
[0] = 0;

1376 
	`GëU£rS≥cifõdFrõndlyCompuãrName
(&
m
->
ni˚œbñ
);

1377 i‡(
m
->
ni˚œbñ
.
c
[0] =0Ë
	`MakeDomaöLabñFromLôîÆSåög
(&m->nicelabel, "Computer");

1380 
m
->
ho°œbñ
.
c
[0] = 0;

1381 
	`GëU£rS≥cifõdRFC1034CompuãrName
(&
m
->
ho°œbñ
);

1382 i‡(
m
->
ho°œbñ
.
c
[0] =0Ë
	`MakeDomaöLabñFromLôîÆSåög
(&m->hostlabel, "Computer");

1384 
	`mDNS_SëFQDN
(
m
);

1386 
ß
.
ß_Ámûy
 = 
AF_INET
;

1387 
m
->
p
->
uniˇ°Sockë4
 = -1;

1388 i‡(
îr
 =
mSètus_NoEº‹
Ëî∏
	`SëupSockë
(&
ß
, 
zîoIPP‹t
, 0, &
m
->
p
->
uniˇ°Sockë4
);

1389 #i‡
HAVE_IPV6


1390 
ß
.
ß_Ámûy
 = 
AF_INET6
;

1391 
m
->
p
->
uniˇ°Sockë6
 = -1;

1392 i‡(
îr
 =
mSètus_NoEº‹
Ëî∏
	`SëupSockë
(&
ß
, 
zîoIPP‹t
, 0, &
m
->
p
->
uniˇ°Sockë6
);

1396 i‡(
îr
 =
mSètus_NoEº‹
Ëî∏
	`SëupI¡îÁ˚Li°
(
m
);

1399 i‡(
îr
 =
mSètus_NoEº‹
Ë
	`P¨£DNSSîvîs
(
m
, 
uDNS_SERVERS_FILE
);

1401 i‡(
îr
 =
mSètus_NoEº‹
)

1403 
îr
 = 
	`W©chF‹I¡îÁ˚Ch™ge
(
m
);

1405 i‡–
îr
 !
mSètus_NoEº‹
)

1407 
	`Ârötf
(
°dîr
, "mDNS(%dËWARNING: U«bÀÅÿdëe˘ i¡îÁ˚ ch™ge†(%d).\n", 
	`gëpid
(), 
îr
);

1408 
îr
 = 
mSètus_NoEº‹
;

1415 i‡(
îr
 =
mSètus_NoEº‹
)

1416 
	`mDNSC‹eInôCom∂ëe
(
m
, 
mSètus_NoEº‹
);

1418  
	`PosixEº‹ToSètus
(
îr
);

1419 
	}
}

1423 
mDNSexp‹t
 
	$mDNSPœtf‹mClo£
(
mDNS
 *c⁄° 
m
)

1425 
	`as£π
(
m
 !
NULL
);

1426 
	`CÀ¨I¡îÁ˚Li°
(
m
);

1427 i‡(
m
->
p
->
uniˇ°Sockë4
 !-1Ë
	`as£π
(
	`˛o£
(m->p->unicastSocket4) == 0);

1428 #i‡
HAVE_IPV6


1429 i‡(
m
->
p
->
uniˇ°Sockë6
 !-1Ë
	`as£π
(
	`˛o£
(m->p->unicastSocket6) == 0);

1431 
	}
}

1433 
mDNSexp‹t
 
mSètus
 
	$mDNSPœtf‹mPosixRe‰eshI¡îÁ˚Li°
(
mDNS
 *c⁄° 
m
)

1435 
îr
;

1436 
	`CÀ¨I¡îÁ˚Li°
(
m
);

1437 
îr
 = 
	`SëupI¡îÁ˚Li°
(
m
);

1438  
	`PosixEº‹ToSètus
(
îr
);

1439 
	}
}

1441 #i‡
COMPILER_LIKES_PRAGMA_MARK


1442 #¥agm®
m¨k
 ***** 
Lockög


1450 
mDNSexp‹t
 
	$mDNSPœtf‹mLock
 (c⁄° 
mDNS
 *c⁄° 
m
)

1452 (Ë
m
;

1453 
	}
}

1457 
mDNSexp‹t
 
	$mDNSPœtf‹mU∆ock
 (c⁄° 
mDNS
 *c⁄° 
m
)

1459 (Ë
m
;

1460 
	}
}

1462 #i‡
COMPILER_LIKES_PRAGMA_MARK


1463 #¥agm®
m¨k
 ***** 
Såögs


1468 
mDNSexp‹t
 
	$mDNSPœtf‹mSåC›y
(c⁄° *
§c
, *
d°
)

1470 
	`°r˝y
((*)
d°
, (*)
§c
);

1471 
	}
}

1475 
mDNSexp‹t
 
mDNSu32
 
	$mDNSPœtf‹mSåLí
 (c⁄° *
§c
)

1477  
	`°æí
((*)
§c
);

1478 
	}
}

1482 
mDNSexp‹t
 
	$mDNSPœtf‹mMemC›y
(c⁄° *
§c
, *
d°
, 
mDNSu32
 
Àn
)

1484 
	`mem˝y
(
d°
, 
§c
, 
Àn
);

1485 
	}
}

1489 
mDNSexp‹t
 
mDNSBoﬁ
 
	$mDNSPœtf‹mMemSame
(c⁄° *
§c
, c⁄° *
d°
, 
mDNSu32
 
Àn
)

1491  
	`memcmp
(
d°
, 
§c
, 
Àn
) == 0;

1492 
	}
}

1496 
mDNSexp‹t
 
	$mDNSPœtf‹mMemZîo
–*
d°
, 
mDNSu32
 
Àn
)

1498 
	`mem£t
(
d°
, 0, 
Àn
);

1499 
	}
}

1501 
mDNSexp‹t
 * 
	$mDNSPœtf‹mMemAŒoˇã
(
mDNSu32
 
Àn
Ë{ (
	`mÆloc
÷í)); 
	}
}

1502 
mDNSexp‹t
 
	$mDNSPœtf‹mMemFªe
 (*
mem
Ë{ 
	`‰ì
(mem); 
	}
}

1504 
mDNSexp‹t
 
mDNSu32
 
	$mDNSPœtf‹mR™domSìd
()

1506 
timevÆ
 
tv
;

1507 
	`gëtimeofday
(&
tv
, 
NULL
);

1508 (
tv
.
tv_u£c
);

1509 
	}
}

1511 
mDNSexp‹t
 
mDNSs32
 
	gmDNSPœtf‹mO√Sec⁄d
 = 1024;

1513 
mDNSexp‹t
 
mSètus
 
	$mDNSPœtf‹mTimeInô
()

1518 (
mSètus_NoEº‹
);

1519 
	}
}

1521 
mDNSexp‹t
 
mDNSs32
 
	$mDNSPœtf‹mRawTime
()

1523 
timevÆ
 
tv
;

1524 
	`gëtimeofday
(&
tv
, 
NULL
);

1531 –(
tv
.
tv_£c
 << 10Ë| (tv.
tv_u£c
 * 16 / 15625) );

1532 
	}
}

1534 
mDNSexp‹t
 
mDNSs32
 
	$mDNSPœtf‹mUTC
()

1536  
	`time
(
NULL
);

1537 
	}
}

1539 
mDNSloˇl
 
	$mDNSPosixAddToFDSë
(*
nfds
, 
fd_£t
 *
ªadfds
, 
s
)

1541 i‡(*
nfds
 < 
s
 + 1) *nfds = s + 1;

1542 
	`FD_SET
(
s
, 
ªadfds
);

1543 
	}
}

1545 
mDNSexp‹t
 
	$mDNSPosixGëFDSë
(
mDNS
 *
m
, *
nfds
, 
fd_£t
 *
ªadfds
, 
timevÆ
 *
timeout
)

1547 
mDNSs32
 
ticks
;

1548 
timevÆ
 
öãrvÆ
;

1551 
mDNSs32
 
√xãvít
 = 
	`mDNS_Execuã
(
m
);

1554 
PosixNëw‹kI¡îÁ˚
 *
öfo
 = (PosixNëw‹kI¡îÁ˚ *)(
m
->
Ho°I¡îÁ˚s
);

1555 i‡(
m
->
p
->
uniˇ°Sockë4
 !-1Ë
	`mDNSPosixAddToFDSë
(
nfds
, 
ªadfds
, m->p->unicastSocket4);

1556 #i‡
HAVE_IPV6


1557 i‡(
m
->
p
->
uniˇ°Sockë6
 !-1Ë
	`mDNSPosixAddToFDSë
(
nfds
, 
ªadfds
, m->p->unicastSocket6);

1559 
öfo
)

1561 i‡(
öfo
->
mu…iˇ°Sockë4
 !-1Ë
	`mDNSPosixAddToFDSë
(
nfds
, 
ªadfds
, info->multicastSocket4);

1562 #i‡
HAVE_IPV6


1563 i‡(
öfo
->
mu…iˇ°Sockë6
 !-1Ë
	`mDNSPosixAddToFDSë
(
nfds
, 
ªadfds
, info->multicastSocket6);

1565 
öfo
 = (
PosixNëw‹kI¡îÁ˚
 *)(öfo->
c‹eI¡f
.
√xt
);

1569 
ticks
 = 
√xãvít
 - 
	`mDNS_TimeNow
(
m
);

1570 i‡(
ticks
 < 1)Åicks = 1;

1571 
öãrvÆ
.
tv_£c
 = 
ticks
 >> 10;

1572 
öãrvÆ
.
tv_u£c
 = ((
ticks
 & 0x3FF) * 15625) / 16;

1575 i‡(
timeout
->
tv_£c
 > 
öãrvÆ
.tv_sec ||

1576 (
timeout
->
tv_£c
 =
öãrvÆ
.tv_£¯&&Åimeout->
tv_u£c
 > interval.tv_usec))

1577 *
timeout
 = 
öãrvÆ
;

1578 
	}
}

1580 
mDNSexp‹t
 
	$mDNSPosixPro˚ssFDSë
(
mDNS
 *c⁄° 
m
, 
fd_£t
 *
ªadfds
)

1582 
PosixNëw‹kI¡îÁ˚
 *
öfo
;

1583 
	`as£π
(
m
 !
NULL
);

1584 
	`as£π
(
ªadfds
 !
NULL
);

1585 
öfo
 = (
PosixNëw‹kI¡îÁ˚
 *)(
m
->
Ho°I¡îÁ˚s
);

1587 i‡(
m
->
p
->
uniˇ°Sockë4
 !-1 && 
	`FD_ISSET
(m->p->uniˇ°Sockë4, 
ªadfds
))

1589 
	`FD_CLR
(
m
->
p
->
uniˇ°Sockë4
, 
ªadfds
);

1590 
	`SockëD©aRódy
(
m
, 
NULL
, m->
p
->
uniˇ°Sockë4
);

1592 #i‡
HAVE_IPV6


1593 i‡(
m
->
p
->
uniˇ°Sockë6
 !-1 && 
	`FD_ISSET
(m->p->uniˇ°Sockë6, 
ªadfds
))

1595 
	`FD_CLR
(
m
->
p
->
uniˇ°Sockë6
, 
ªadfds
);

1596 
	`SockëD©aRódy
(
m
, 
NULL
, m->
p
->
uniˇ°Sockë6
);

1600 
öfo
)

1602 i‡(
öfo
->
mu…iˇ°Sockë4
 !-1 && 
	`FD_ISSET
(öfo->mu…iˇ°Sockë4, 
ªadfds
))

1604 
	`FD_CLR
(
öfo
->
mu…iˇ°Sockë4
, 
ªadfds
);

1605 
	`SockëD©aRódy
(
m
, 
öfo
, info->
mu…iˇ°Sockë4
);

1607 #i‡
HAVE_IPV6


1608 i‡(
öfo
->
mu…iˇ°Sockë6
 !-1 && 
	`FD_ISSET
(öfo->mu…iˇ°Sockë6, 
ªadfds
))

1610 
	`FD_CLR
(
öfo
->
mu…iˇ°Sockë6
, 
ªadfds
);

1611 
	`SockëD©aRódy
(
m
, 
öfo
, info->
mu…iˇ°Sockë6
);

1614 
öfo
 = (
PosixNëw‹kI¡îÁ˚
 *)(öfo->
c‹eI¡f
.
√xt
);

1616 
	}
}

1619 
mDNSloˇl
 
	$DëîmöeMaxEvítFD
( )

1621 
PosixEvítSour˚
 *
iSour˚
;

1623 
gMaxFD
 = 0;

1624  
iSour˚
=(
PosixEvítSour˚
*)
gEvítSour˚s
.
Hód
; iSour˚; iSour˚ = iSour˚->
Next
)

1625 i‡–
gMaxFD
 < 
iSour˚
->
fd
)

1626 
gMaxFD
 = 
iSour˚
->
fd
;

1627 
	}
}

1630 
mSètus
 
	$mDNSPosixAddFDToEvítLo›
–
fd
, 
mDNSPosixEvítCÆlback
 
ˇŒback
, *
c⁄ãxt
)

1632 
PosixEvítSour˚
 *
√wSour˚
;

1634 i‡–
gEvítSour˚s
.
LökOff£t
 == 0)

1635 
	`InôLökedLi°
–&
gEvítSour˚s
, 
	`off£tof
–
PosixEvítSour˚
, 
Next
));

1637 i‡–
fd
 >(Ë
FD_SETSIZE
 || fd < 0)

1638  
mSètus_Unsuµ‹ãdEº
;

1639 i‡–
ˇŒback
 =
NULL
)

1640  
mSètus_BadP¨amEº
;

1642 
√wSour˚
 = (
PosixEvítSour˚
*Ë
	`mÆloc
(  *newSource);

1643 i‡–
NULL
 =
√wSour˚
)

1644  
mSètus_NoMem‹yEº
;

1646 
√wSour˚
->
CÆlback
 = 
ˇŒback
;

1647 
√wSour˚
->
C⁄ãxt
 = 
c⁄ãxt
;

1648 
√wSour˚
->
fd
 = fd;

1650 
	`AddToTaû
–&
gEvítSour˚s
, 
√wSour˚
);

1651 
	`FD_SET
–
fd
, &
gEvítFDs
);

1653 
	`DëîmöeMaxEvítFD
();

1655  
mSètus_NoEº‹
;

1656 
	}
}

1659 
mSètus
 
	$mDNSPosixRemoveFDFromEvítLo›
–
fd
)

1661 
PosixEvítSour˚
 *
iSour˚
;

1663  
iSour˚
=(
PosixEvítSour˚
*)
gEvítSour˚s
.
Hód
; iSour˚; iSour˚ = iSour˚->
Next
)

1665 i‡–
fd
 =
iSour˚
->fd)

1667 
	`FD_CLR
–
fd
, &
gEvítFDs
);

1668 
	`RemoveFromLi°
–&
gEvítSour˚s
, 
iSour˚
);

1669 
	`‰ì
–
iSour˚
);

1670 
	`DëîmöeMaxEvítFD
();

1671  
mSètus_NoEº‹
;

1674  
mSètus_NoSuchNameEº
;

1675 
	}
}

1678 
mDNSloˇl
 
	$NŸeSig«l
–
signum
)

1680 
	`sigadd£t
–&
gEvítSig«ls
, 
signum
);

1681 
	}
}

1684 
mSètus
 
	$mDNSPosixLi°íF‹Sig«lInEvítLo›
–
signum
)

1686 
siga˘i⁄
 
a˘i⁄
;

1687 
mSètus
 
îr
;

1689 
	`bzîo
–&
a˘i⁄
, áction);

1690 
a˘i⁄
.
ß_h™dÀr
 = 
NŸeSig«l
;

1691 
îr
 = 
	`siga˘i⁄
–
signum
, &
a˘i⁄
, (
siga˘i⁄
*Ë
NULL
);

1693 
	`sigadd£t
–&
gEvítSig«lSë
, 
signum
);

1695  
îr
;

1696 
	}
}

1699 
mSètus
 
	$mDNSPosixIgn‹eSig«lInEvítLo›
–
signum
)

1701 
siga˘i⁄
 
a˘i⁄
;

1702 
mSètus
 
îr
;

1704 
	`bzîo
–&
a˘i⁄
, áction);

1705 
a˘i⁄
.
ß_h™dÀr
 = 
SIG_DFL
;

1706 
îr
 = 
	`siga˘i⁄
–
signum
, &
a˘i⁄
, (
siga˘i⁄
*Ë
NULL
);

1708 
	`sigdñ£t
–&
gEvítSig«lSë
, 
signum
);

1710  
îr
;

1711 
	}
}

1715 
mSètus
 
	$mDNSPosixRunEvítLo›On˚
–
mDNS
 *
m
, c⁄° 
timevÆ
 *
pTimeout
,

1716 
sig£t_t
 *
pSig«lsRe˚ived
, 
mDNSBoﬁ
 *
pD©aDi•©ched
)

1718 
fd_£t
 
li°íFDs
 = 
gEvítFDs
;

1719 
fdMax
 = 0, 
numRódy
;

1720 
timevÆ
 
timeout
 = *
pTimeout
;

1723 
	`mDNSPosixGëFDSë
–
m
, &
fdMax
, &
li°íFDs
, &
timeout
);

1724 i‡–
fdMax
 < 
gMaxFD
)

1725 
fdMax
 = 
gMaxFD
;

1727 
numRódy
 = 
	`£À˘
–
fdMax
 + 1, &
li°íFDs
, (
fd_£t
*Ë
NULL
, (fd_£t*ËNULL, &
timeout
);

1730 i‡–
numRódy
 > 0)

1732 
PosixEvítSour˚
 *
iSour˚
;

1734 (Ë
	`mDNSPosixPro˚ssFDSë
–
m
, &
li°íFDs
);

1736  
iSour˚
=(
PosixEvítSour˚
*)
gEvítSour˚s
.
Hód
; iSour˚; iSour˚ = iSour˚->
Next
)

1738 i‡–
	`FD_ISSET
–
iSour˚
->
fd
, &
li°íFDs
))

1740 
iSour˚
->
	`CÆlback
–iSour˚->
C⁄ãxt
);

1744 *
pD©aDi•©ched
 = 
mDNSåue
;

1747 *
pD©aDi•©ched
 = 
mDNSÁl£
;

1749 (Ë
	`sig¥ocmask
–
SIG_BLOCK
, &
gEvítSig«lSë
, (
sig£t_t
*Ë
NULL
);

1750 *
pSig«lsRe˚ived
 = 
gEvítSig«ls
;

1751 
	`sigem±y£t
–&
gEvítSig«ls
);

1752 (Ë
	`sig¥ocmask
–
SIG_UNBLOCK
, &
gEvítSig«lSë
, (
sig£t_t
*Ë
NULL
);

1754  
mSètus_NoEº‹
;

1755 
	}
}

	@mdns/mDNSPosix.h

78 #i‚de‡
__mDNSPœtf‹mPosix_h


79 
	#__mDNSPœtf‹mPosix_h


	)

81 
	~<sig«l.h
>

82 
	~<sys/time.h
>

84 #ifde‡ 
__˝lu•lus


94 
PosixNëw‹kI¡îÁ˚
 
	tPosixNëw‹kI¡îÁ˚
;

96 
	sPosixNëw‹kI¡îÁ˚


98 
Nëw‹kI¡îÁ˚Info
 
c‹eI¡f
;

99 c⁄° * 
ötfName
;

100 
PosixNëw‹kI¡îÁ˚
 * 
ÆüsI¡f
;

101 
ödex
;

102 
mu…iˇ°Sockë4
;

103 #i‡
HAVE_IPV6


104 
mu…iˇ°Sockë6
;

109 
gMDNSPœtf‹mPosixVîbo£Levñ
;

111 
	smDNS_Pœtf‹mSuµ‹t_°ru˘


113 
	guniˇ°Sockë4
;

114 #i‡
HAVE_IPV6


115 
	guniˇ°Sockë6
;

119 
	#uDNS_SERVERS_FILE
 "/ëc/ªsﬁv.c⁄f"

	)

120 
P¨£DNSSîvîs
(
mDNS
 *
m
, c⁄° *
fûeP©h
);

121 
mSètus
 
mDNSPœtf‹mPosixRe‰eshI¡îÁ˚Li°
(
mDNS
 *c⁄° 
m
);

130 
mDNSPosixGëFDSë
(
mDNS
 *
m
, *
nfds
, 
fd_£t
 *
ªadfds
, 
timevÆ
 *
timeout
);

131 
mDNSPosixPro˚ssFDSë
(
mDNS
 *c⁄° 
m
, 
fd_£t
 *
ªadfds
);

133 (*
	gmDNSPosixEvítCÆlback
)–*
	tc⁄ãxt
);

135 
mSètus
 
mDNSPosixAddFDToEvítLo›
–
fd
, 
mDNSPosixEvítCÆlback
 
ˇŒback
, *
c⁄ãxt
);

136 
mSètus
 
mDNSPosixRemoveFDFromEvítLo›
–
fd
);

137 
mSètus
 
mDNSPosixLi°íF‹Sig«lInEvítLo›
–
signum
);

138 
mSètus
 
mDNSPosixIgn‹eSig«lInEvítLo›
–
signum
);

139 
mSètus
 
mDNSPosixRunEvítLo›On˚
–
mDNS
 *
m
, c⁄° 
timevÆ
 *
pTimeout
, 
sig£t_t
 *
pSig«lsRe˚ived
, 
mDNSBoﬁ
 *
pD©aDi•©ched
);

141 #ifde‡ 
__˝lu•lus


	@mdns/mDNSUNP.c

133 
	~"mDNSUNP.h
"

135 
	~<î∫o.h
>

136 
	~<as£π.h
>

137 
	~<°rög.h
>

138 
	~<°dlib.h
>

139 
	~<sys/uio.h
>

140 
	~<sys/io˘l.h
>

141 
	~<uni°d.h
>

142 
	~<°dio.h
>

149 #ifde‡
NEED_ALIGN_MACRO


150 #ö˛udê
NEED_ALIGN_MACRO


159 #i‚de‡
SIOCGIFCONF


160 
	~<sys/sockio.h
>

167 #ifde‡ 
IP_RECVIF


168 
	~<√t/if_dl.h
>

171 #i‡
deföed
(
AF_INET6
Ë&& 
HAVE_IPV6
 && !
HAVE_LINUX


172 
	~<√t/if_v¨.h
>

173 
	~<√töë/ö_v¨.h
>

177 #i‡
deföed
(
AF_INET6
Ë&& 
HAVE_IPV6
 && 
HAVE_LINUX


178 
	~<√tdb.h
>

179 
	~<¨∑/öë.h
>

182 
	$∂í_to_mask
(
∂í
, *
addr
) {

183 
i
;

184 
cﬁ⁄s
=7;

185 
bôs_ö_block
=16;

186 
i
=0;i<=
cﬁ⁄s
;i++) {

187 
block
, 
⁄es
=0xffff, 
⁄es_ö_block
;

188 if(
∂í
>
bôs_ö_block
Ë
⁄es_ö_block
=bits_in_block;

189 
⁄es_ö_block
=
∂í
;

190 
block
 = 
⁄es
 & (⁄e†<< (
bôs_ö_block
-
⁄es_ö_block
));

191 
i
==0 ? 
	`•rötf
(
addr
, "%x", 
block
) : sprintf(addr, "%s:%x",áddr, block);

192 
∂í
 -
⁄es_ö_block
;

194 
	}
}

197 
ifi_öfo
 *
	$gë_ifi_öfo_löuxv6
(
Ámûy
, 
dﬂlü£s
)

199 
ifi_öfo
 *
ifi
, *
ifihód
, **
ifù√xt
;

200 
FILE
 *
Â
;

201 
addr
[8][5];

202 
Êags
, 
myÊags
, 
ödex
, 
∂í
, 
sc›e
;

203 
i‚ame
[8], 
œ°«me
[
IFNAMSIZ
];

204 
addr6
[32+7+1];

205 
addröfo
 
höts
, *
ªs0
;

206 
sockaddr_ö6
 *
sö6
;

207 
ö6_addr
 *
addΩå
;

208 
îr
;

210 
ªs0
=
NULL
;

211 
ifihód
 = 
NULL
;

212 
ifù√xt
 = &
ifihód
;

213 
œ°«me
[0] = 0;

215 i‡((
Â
 = 
	`f›í
(
PROC_IFINET6_PATH
, "r")Ë!
NULL
) {

216 
	`fsˇnf
(
Â
,

218 
addr
[0],addr[1],addr[2],addr[3],

219 
addr
[4],addr[5],addr[6],addr[7],

220 &
ödex
, &
∂í
, &
sc›e
, &
Êags
, 
i‚ame
Ë!
EOF
) {

222 
myÊags
 = 0;

223 i‡(
	`°∫cmp
(
œ°«me
, 
i‚ame
, 
IFNAMSIZ
) == 0) {

224 i‡(
dﬂlü£s
 == 0)

226 
myÊags
 = 
IFI_ALIAS
;

228 
	`mem˝y
(
œ°«me
, 
i‚ame
, 
IFNAMSIZ
);

229 
ifi
 = (
ifi_öfo
*)
	`ˇŒoc
(1, (ifi_info));

230 i‡(
ifi
 =
NULL
) {

231 
gŸEº‹
;

234 *
ifù√xt
 = 
ifi
;

235 
ifù√xt
 = &
ifi
->
ifi_√xt
;

237 
	`•rötf
(
addr6
, "%s:%s:%s:%s:%s:%s:%s:%s",

238 
addr
[0],addr[1],addr[2],addr[3],

239 
addr
[4],addr[5],addr[6],addr[7]);

242 
	`mem£t
(&
höts
, 0, (hints));

243 
höts
.
ai_Ámûy
 = 
AF_INET6
;

244 
höts
.
ai_Êags
 = 
AI_NUMERICHOST
;

245 
îr
 = 
	`gëaddröfo
(
addr6
, 
NULL
, &
höts
, &
ªs0
);

246 i‡(
îr
) {

247 
gŸEº‹
;

249 
ifi
->
ifi_addr
 = 
	`ˇŒoc
(1, (
sockaddr_ö6
));

250 i‡(
ifi
->
ifi_addr
 =
NULL
) {

251 
gŸEº‹
;

253 
	`mem˝y
(
ifi
->
ifi_addr
, 
ªs0
->
ai_addr
, (
sockaddr_ö6
));

256 
ùv6addr
[
INET6_ADDRSTRLEN
];

257 
	`∂í_to_mask
(
∂í
, 
ùv6addr
);

258 
ifi
->
ifi_√tmask
 = 
	`ˇŒoc
(1, (
sockaddr_ö6
));

259 i‡(
ifi
->
ifi_addr
 =
NULL
) {

260 
gŸEº‹
;

262 
sö6
=
	`ˇŒoc
(1, (
sockaddr_ö6
));

263 
addΩå
=
	`ˇŒoc
(1, (
ö6_addr
));

264 
	`öë_±⁄
(
Ámûy
, 
ùv6addr
, 
addΩå
);

265 
sö6
->
sö6_Ámûy
=
Ámûy
;

266 
sö6
->
sö6_addr
=*
addΩå
;

267 
sö6
->
sö6_sc›e_id
=
sc›e
;

268 
	`mem˝y
(
ifi
->
ifi_√tmask
, 
sö6
, (
sockaddr_ö6
));

269 
	`‰ì
(
sö6
);

273 
	`mem˝y
(
ifi
->
ifi_«me
, 
i‚ame
, 
IFI_NAME
);

276 
ifi
->
ifi_ödex
 = 
ödex
;

279 
ifi
->
ifi_Êags
 = 
IFF_UP
;

281 
	`‰ìaddröfo
(
ªs0
);

282 
ªs0
=
NULL
;

285 
d⁄e
;

287 
gŸEº‹
:

288 i‡(
ifihód
 !
NULL
) {

289 
	`‰ì_ifi_öfo
(
ifihód
);

290 
ifihód
 = 
NULL
;

292 i‡(
ªs0
 !
NULL
) {

293 
	`‰ìaddröfo
(
ªs0
);

294 
ªs0
=
NULL
;

296 
d⁄e
:

297 (
ifihód
);

298 
	}
}

301 
ifi_öfo
 *
	$gë_ifi_öfo
(
Ámûy
, 
dﬂlü£s
)

303 
junk
;

304 
ifi_öfo
 *
ifi
, *
ifihód
, **
ifù√xt
;

305 
sockfd
, 
sockf6
, 
Àn
, 
œ°Àn
, 
Êags
, 
myÊags
;

306 #ifde‡
NOT_HAVE_IF_NAMETOINDEX


307 
ödex
 = 200;

309 *
±r
, *
buf
, 
œ°«me
[
IFNAMSIZ
], *
˝å
;

310 
ifc⁄f
 
ifc
;

311 
i‰eq
 *
i‰
, 
i‰c›y
;

312 
sockaddr_ö
 *
sö±r
;

314 #i‡
	`deföed
(
AF_INET6
Ë&& 
HAVE_IPV6


315 
sockaddr_ö6
 *
sö±r6
;

318 #i‡
	`deföed
(
AF_INET6
Ë&& 
HAVE_IPV6
 && 
HAVE_LINUX


319 if(
Ámûy
 =
AF_INET6
Ë 
	`gë_ifi_öfo_löuxv6
(Ámûy, 
dﬂlü£s
);

322 
sockfd
 = -1;

323 
sockf6
 = -1;

324 
buf
 = 
NULL
;

325 
ifihód
 = 
NULL
;

327 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

328 i‡(
sockfd
 < 0) {

329 
gŸEº‹
;

332 
œ°Àn
 = 0;

333 
Àn
 = 100 * (
i‰eq
);

335 
buf
 = (*)
	`mÆloc
(
Àn
);

336 i‡(
buf
 =
NULL
) {

337 
gŸEº‹
;

339 
ifc
.
ifc_Àn
 = 
Àn
;

340 
ifc
.
ifc_buf
 = 
buf
;

341 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFCONF
, &
ifc
) < 0) {

342 i‡(
î∫o
 !
EINVAL
 || 
œ°Àn
 != 0) {

343 
gŸEº‹
;

346 i‡(
ifc
.
ifc_Àn
 =
œ°Àn
)

348 
œ°Àn
 = 
ifc
.
ifc_Àn
;

350 
Àn
 +10 * (
i‰eq
);

351 
	`‰ì
(
buf
);

353 
ifihód
 = 
NULL
;

354 
ifù√xt
 = &
ifihód
;

355 
œ°«me
[0] = 0;

359 
±r
 = 
buf
;Öå < bu‡+ 
ifc
.
ifc_Àn
; ) {

360 
i‰
 = (
i‰eq
 *Ë
±r
;

363 i‡((
i‰eq
Ë> (
i‰
->
i‰_«me
Ë+ 
	`GET_SA_LEN
(i‰->
i‰_addr
))

364 
±r
 +(
i‰eq
);

366 
±r
 +(
i‰
->
i‰_«me
Ë+ 
	`GET_SA_LEN
(i‰->
i‰_addr
);

370 i‡(
i‰
->
i‰_addr
.
ß_Ámûy
 !
Ámûy
)

373 
myÊags
 = 0;

374 i‡–(
˝å
 = 
	`°rchr
(
i‰
->
i‰_«me
, ':')Ë!
NULL
)

375 *
˝å
 = 0;

376 i‡(
	`°∫cmp
(
œ°«me
, 
i‰
->
i‰_«me
, 
IFNAMSIZ
) == 0) {

377 i‡(
dﬂlü£s
 == 0)

379 
myÊags
 = 
IFI_ALIAS
;

381 
	`mem˝y
(
œ°«me
, 
i‰
->
i‰_«me
, 
IFNAMSIZ
);

383 
i‰c›y
 = *
i‰
;

384 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFFLAGS
, &
i‰c›y
) < 0) {

385 
gŸEº‹
;

388 
Êags
 = 
i‰c›y
.
i‰_Êags
;

389 i‡((
Êags
 & 
IFF_UP
) == 0)

392 
ifi
 = (
ifi_öfo
*)
	`ˇŒoc
(1, (ifi_info));

393 i‡(
ifi
 =
NULL
) {

394 
gŸEº‹
;

396 *
ifù√xt
 = 
ifi
;

397 
ifù√xt
 = &
ifi
->
ifi_√xt
;

399 
ifi
->
ifi_Êags
 = 
Êags
;

400 
ifi
->
ifi_myÊags
 = 
myÊags
;

401 #i‚de‡
NOT_HAVE_IF_NAMETOINDEX


402 
ifi
->
ifi_ödex
 = 
	`if_«mëoödex
(
i‰
->
i‰_«me
);

404 
i‰c›y
 = *
i‰
;

405 #ifde‡
SIOCGIFINDEX


406 i‡–0 >
	`io˘l
(
sockfd
, 
SIOCGIFINDEX
, &
i‰c›y
))

407 
ifi
->
ifi_ödex
 = 
i‰c›y
.
i‰_ödex
;

410 
ifi
->
ifi_ödex
 = 
ödex
++;

412 
	`mem˝y
(
ifi
->
ifi_«me
, 
i‰
->
i‰_«me
, 
IFI_NAME
);

413 
ifi
->
ifi_«me
[
IFI_NAME
-1] = '\0';

416 
i‰
->
i‰_addr
.
ß_Ámûy
) {

417 
AF_INET
:

418 
sö±r
 = (
sockaddr_ö
 *Ë&
i‰
->
i‰_addr
;

419 i‡(
ifi
->
ifi_addr
 =
NULL
) {

420 
ifi
->
ifi_addr
 = (
sockaddr
*)
	`ˇŒoc
(1, (
sockaddr_ö
));

421 i‡(
ifi
->
ifi_addr
 =
NULL
) {

422 
gŸEº‹
;

424 
	`mem˝y
(
ifi
->
ifi_addr
, 
sö±r
, (
sockaddr_ö
));

426 #ifde‡ 
SIOCGIFNETMASK


427 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFNETMASK
, &
i‰c›y
Ë< 0Ë
gŸEº‹
;

428 
ifi
->
ifi_√tmask
 = (
sockaddr
*)
	`ˇŒoc
(1, (
sockaddr_ö
));

429 i‡(
ifi
->
ifi_√tmask
 =
NULL
Ë
gŸEº‹
;

430 
sö±r
 = (
sockaddr_ö
 *Ë&
i‰c›y
.
i‰_addr
;

432 #i‚de‡
NOT_HAVE_SA_LEN


433 
sö±r
->
sö_Àn
 = (
sockaddr_ö
);

435 
sö±r
->
sö_Ámûy
 = 
AF_INET
;

436 
	`mem˝y
(
ifi
->
ifi_√tmask
, 
sö±r
, (
sockaddr_ö
));

439 #ifde‡ 
SIOCGIFBRDADDR


440 i‡(
Êags
 & 
IFF_BROADCAST
) {

441 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFBRDADDR
, &
i‰c›y
) < 0) {

442 
gŸEº‹
;

444 
sö±r
 = (
sockaddr_ö
 *Ë&
i‰c›y
.
i‰_brﬂdaddr
;

446 #i‚de‡
NOT_HAVE_SA_LEN


447 
sö±r
->
sö_Àn
 = –
sockaddr_ö
 );

449 
sö±r
->
sö_Ámûy
 = 
AF_INET
;

450 
ifi
->
ifi_brdaddr
 = (
sockaddr
*)
	`ˇŒoc
(1, (
sockaddr_ö
));

451 i‡(
ifi
->
ifi_brdaddr
 =
NULL
) {

452 
gŸEº‹
;

454 
	`mem˝y
(
ifi
->
ifi_brdaddr
, 
sö±r
, (
sockaddr_ö
));

458 #ifde‡ 
SIOCGIFDSTADDR


459 i‡(
Êags
 & 
IFF_POINTOPOINT
) {

460 i‡(
	`io˘l
(
sockfd
, 
SIOCGIFDSTADDR
, &
i‰c›y
) < 0) {

461 
gŸEº‹
;

463 
sö±r
 = (
sockaddr_ö
 *Ë&
i‰c›y
.
i‰_d°addr
;

465 #i‚de‡
NOT_HAVE_SA_LEN


466 
sö±r
->
sö_Àn
 = –
sockaddr_ö
 );

468 
sö±r
->
sö_Ámûy
 = 
AF_INET
;

469 
ifi
->
ifi_d°addr
 = (
sockaddr
*)
	`ˇŒoc
(1, (
sockaddr_ö
));

470 i‡(
ifi
->
ifi_d°addr
 =
NULL
) {

471 
gŸEº‹
;

473 
	`mem˝y
(
ifi
->
ifi_d°addr
, 
sö±r
, (
sockaddr_ö
));

479 #i‡
	`deföed
(
AF_INET6
Ë&& 
HAVE_IPV6


480 
AF_INET6
:

481 
sö±r6
 = (
sockaddr_ö6
 *Ë&
i‰
->
i‰_addr
;

482 i‡(
ifi
->
ifi_addr
 =
NULL
) {

483 
ifi
->
ifi_addr
 = 
	`ˇŒoc
(1, (
sockaddr_ö6
));

484 i‡(
ifi
->
ifi_addr
 =
NULL
) {

485 
gŸEº‹
;

490 i‡(
	`IN6_IS_ADDR_LINKLOCAL
(&
sö±r6
->
sö6_addr
))

491 
sö±r6
->
sö6_addr
.
s6_addr
[2] = sinptr6->sin6_addr.s6_addr[3] = 0;

492 
	`mem˝y
(
ifi
->
ifi_addr
, 
sö±r6
, (
sockaddr_ö6
));

494 #ifde‡ 
SIOCGIFNETMASK_IN6


496 
ö6_i‰eq
 
i‰6
;

497 i‡(
sockf6
 == -1)

498 
sockf6
 = 
	`sockë
(
AF_INET6
, 
SOCK_DGRAM
, 0);

499 
	`bzîo
(&
i‰6
, (ifr6));

500 
	`mem˝y
(&
i‰6
.
i‰_«me
, &
i‰
->ifr_name, (ifr6.ifr_name ));

501 
	`mem˝y
(&
i‰6
.
i‰_i‰u
.
i‰u_addr
, &
i‰
->
i‰_addr
, (ifr6.ifr_ifru.ifru_addr));

502 i‡(
	`io˘l
(
sockf6
, 
SIOCGIFNETMASK_IN6
, &
i‰6
Ë< 0Ë
gŸEº‹
;

503 
ifi
->
ifi_√tmask
 = (
sockaddr
*)
	`ˇŒoc
(1, (
sockaddr_ö6
));

504 i‡(
ifi
->
ifi_√tmask
 =
NULL
Ë
gŸEº‹
;

505 
sö±r6
 = (
sockaddr_ö6
 *Ë&
i‰6
.
i‰_i‰u
.
i‰u_addr
;

506 
	`mem˝y
(
ifi
->
ifi_√tmask
, 
sö±r6
, (
sockaddr_ö6
));

517 
d⁄e
;

519 
gŸEº‹
:

520 i‡(
ifihód
 !
NULL
) {

521 
	`‰ì_ifi_öfo
(
ifihód
);

522 
ifihód
 = 
NULL
;

525 
d⁄e
:

526 i‡(
buf
 !
NULL
) {

527 
	`‰ì
(
buf
);

529 i‡(
sockfd
 != -1) {

530 
junk
 = 
	`˛o£
(
sockfd
);

531 
	`as£π
(
junk
 == 0);

533 i‡(
sockf6
 != -1) {

534 
junk
 = 
	`˛o£
(
sockf6
);

535 
	`as£π
(
junk
 == 0);

537 (
ifihód
);

538 
	}
}

543 
	$‰ì_ifi_öfo
(
ifi_öfo
 *
ifihód
)

545 
ifi_öfo
 *
ifi
, *
iföext
;

547 
ifi
 = 
ifihód
; ifò!
NULL
; ifò
iföext
) {

548 i‡(
ifi
->
ifi_addr
 !
NULL
)

549 
	`‰ì
(
ifi
->
ifi_addr
);

550 i‡(
ifi
->
ifi_brdaddr
 !
NULL
)

551 
	`‰ì
(
ifi
->
ifi_brdaddr
);

552 i‡(
ifi
->
ifi_d°addr
 !
NULL
)

553 
	`‰ì
(
ifi
->
ifi_d°addr
);

554 
iföext
 = 
ifi
->
ifi_√xt
;

555 
	`‰ì
(
ifi
);

557 
	}
}

560 
ssize_t


561 
	$ªcv‰om_Êags
(
fd
, *
±r
, 
size_t
 
nbyãs
, *
Êag•
,

562 
sockaddr
 *
ß
, 
sockÀn_t
 *
ßÀ≈å
, 
my_ö_pktöfo
 *
pkç
, 
u_ch¨
 *
âl
)

564 
msghdr
 
msg
;

565 
iovec
 
iov
[1];

566 
ssize_t
 
n
;

568 #ifde‡
CMSG_FIRSTHDR


569 
cmsghdr
 *
cm±r
;

571 
cmsghdr
 
cm
;

572 
c⁄åﬁ
[1024];

573 } 
c⁄åﬁ_un
;

575 *
âl
 = 255;

577 
msg
.
msg_c⁄åﬁ
 = 
c⁄åﬁ_un
.
c⁄åﬁ
;

578 
msg
.
msg_c⁄åﬁÀn
 = (
c⁄åﬁ_un
.
c⁄åﬁ
);

579 
msg
.
msg_Êags
 = 0;

581 
	`mem£t
(&
msg
, 0, (msg));

584 
msg
.
msg_«me
 = (*Ë
ß
;

585 
msg
.
msg_«mñí
 = *
ßÀ≈å
;

586 
iov
[0].
iov_ba£
 = (*)
±r
;

587 
iov
[0].
iov_Àn
 = 
nbyãs
;

588 
msg
.
msg_iov
 = 
iov
;

589 
msg
.
msg_iovÀn
 = 1;

591 i‡–(
n
 = 
	`ªcvmsg
(
fd
, &
msg
, *
Êag•
)) < 0)

592 (
n
);

594 *
ßÀ≈å
 = 
msg
.
msg_«mñí
;

595 i‡(
pkç
) {

603 
	`mem£t
(
pkç
, 0, (
my_ö_pktöfo
));

604 
pkç
->
ùi_ifödex
 = -1;

609 #i‚de‡
CMSG_FIRSTHDR


610 #w¨nög 
CMSG_FIRSTHDR
 
nŸ
 
deföed
. 
Wûl
ÇŸ 
be
 
abÀ
 
to
 
dëîmöe
 
de°ö©i⁄
 
addªss
, 
ª˚ived
 
öãrÁ˚
, 
ëc
.

611 *
Êag•
 = 0;

612 (
n
);

615 *
Êag•
 = 
msg
.
msg_Êags
;

616 i‡(
msg
.
msg_c⁄åﬁÀn
 < (
sockÀn_t
)(
cmsghdr
) ||

617 (
msg
.
msg_Êags
 & 
MSG_CTRUNC
Ë|| 
pkç
 =
NULL
)

618 (
n
);

620 
cm±r
 = 
	`CMSG_FIRSTHDR
(&
msg
); cm±∏!
NULL
;

621 
cm±r
 = 
	`CMSG_NXTHDR
(&
msg
, cmptr)) {

623 #ifde‡ 
IP_PKTINFO


624 #i‡
ö_pktöfo_deföôi⁄_is_missög


625 
	sö_pktöfo


627 
ùi_ifödex
;

628 
ö_addr
 
ùi_•ec_d°
;

629 
ö_addr
 
ùi_addr
;

632 i‡(
cm±r
->
cmsg_Àvñ
 =
IPPROTO_IP
 &&

633 
cm±r
->
cmsg_ty≥
 =
IP_PKTINFO
) {

634 
ö_pktöfo
 *
tmp
;

635 
sockaddr_ö
 *
sö
 = (sockaddr_ö*)&
pkç
->
ùi_addr
;

637 
tmp
 = (
ö_pktöfo
 *Ë
	`CMSG_DATA
(
cm±r
);

638 
sö
->
sö_Ámûy
 = 
AF_INET
;

639 
sö
->
sö_addr
 = 
tmp
->
ùi_addr
;

640 
sö
->
sö_p‹t
 = 0;

641 
pkç
->
ùi_ifödex
 = 
tmp
->ipi_ifindex;

646 #ifde‡ 
IP_RECVDSTADDR


647 i‡(
cm±r
->
cmsg_Àvñ
 =
IPPROTO_IP
 &&

648 
cm±r
->
cmsg_ty≥
 =
IP_RECVDSTADDR
) {

649 
sockaddr_ö
 *
sö
 = (sockaddr_ö*)&
pkç
->
ùi_addr
;

651 
sö
->
sö_Ámûy
 = 
AF_INET
;

652 
sö
->
sö_addr
 = *(
ö_addr
*)
	`CMSG_DATA
(
cm±r
);

653 
sö
->
sö_p‹t
 = 0;

658 #ifde‡ 
IP_RECVIF


659 i‡(
cm±r
->
cmsg_Àvñ
 =
IPPROTO_IP
 &&

660 
cm±r
->
cmsg_ty≥
 =
IP_RECVIF
) {

661 
sockaddr_dl
 *
sdl
 = (sockaddr_d»*Ë
	`CMSG_DATA
(
cm±r
);

662 #i‚de‡
HAVE_BROKEN_RECVIF_NAME


663 
«meLí
 = (
sdl
->
sdl_∆í
 < 
IFI_NAME
 - 1) ? sdl->sdl_nlen : (IFI_NAME - 1);

664 
	`°∫˝y
(
pkç
->
ùi_i‚ame
, 
sdl
->
sdl_d©a
, 
«meLí
);

666 
pkç
->
ùi_ifödex
 = 
sdl
->
sdl_ödex
;

667 
	`as£π
(
pkç
->
ùi_i‚ame
[
IFI_NAME
 - 1] == 0);

673 #ifde‡ 
IP_RECVTTL


674 i‡(
cm±r
->
cmsg_Àvñ
 =
IPPROTO_IP
 &&

675 
cm±r
->
cmsg_ty≥
 =
IP_RECVTTL
) {

676 *
âl
 = *(
u_ch¨
*)
	`CMSG_DATA
(
cm±r
);

679 i‡(
cm±r
->
cmsg_Àvñ
 =
IPPROTO_IP
 &&

680 
cm±r
->
cmsg_ty≥
 =
IP_TTL
) {

681 *
âl
 = *(*)
	`CMSG_DATA
(
cm±r
);

686 #i‡
	`deföed
(
IPV6_PKTINFO
Ë&& 
HAVE_IPV6


687 i‡(
cm±r
->
cmsg_Àvñ
 =
IPPROTO_IPV6
 &&

688 
cm±r
->
cmsg_ty≥
 =
IPV6_PKTINFO
) {

689 
sockaddr_ö6
 *
sö6
 = (sockaddr_ö6*)&
pkç
->
ùi_addr
;

690 
ö6_pktöfo
 *
ù6_öfo
 = (ö6_pktöfo*)
	`CMSG_DATA
(
cm±r
);

692 
sö6
->
sö6_Ámûy
 = 
AF_INET6
;

693 #i‚de‡
NOT_HAVE_SA_LEN


694 
sö6
->
sö6_Àn
 = (*sin6);

696 
sö6
->
sö6_addr
 = 
ù6_öfo
->
ùi6_addr
;

697 
sö6
->
sö6_Êowöfo
 = 0;

698 
sö6
->
sö6_sc›e_id
 = 0;

699 
sö6
->
sö6_p‹t
 = 0;

700 
pkç
->
ùi_ifödex
 = 
ù6_öfo
->
ùi6_ifödex
;

705 #i‡
	`deföed
(
IPV6_HOPLIMIT
Ë&& 
HAVE_IPV6


706 i‡(
cm±r
->
cmsg_Àvñ
 =
IPPROTO_IPV6
 &&

707 
cm±r
->
cmsg_ty≥
 =
IPV6_HOPLIMIT
) {

708 *
âl
 = *(*)
	`CMSG_DATA
(
cm±r
);

712 
	`as£π
(0);

714 (
n
);

716 
	}
}

723 #ifde‡
NOT_HAVE_DAEMON


724 
	~<f˙é.h
>

725 
	~<sys/°©.h
>

726 
	~<sys/sig«l.h
>

728 
	$d´m⁄
(
nochdú
, 
no˛o£
)

730 
	`f‹k
())

734 : 
	`_exô
(0);

737 i‡(
	`£tsid
() == -1) (-1);

739 
	`sig«l
(
SIGHUP
, 
SIG_IGN
);

741 
	`f‹k
())

745 : 
	`_exô
(0);

748 i‡(!
nochdú
Ë()
	`chdú
("/");

749 
	`umask
(0);

751 i‡(!
no˛o£
)

753 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
, 0);

754 i‡(
fd
 != -1)

757 i‡(
fd
 !
STDIN_FILENO
Ë()
	`dup2
(fd, STDIN_FILENO);

758 i‡(
fd
 !
STDOUT_FILENO
Ë()
	`dup2
(fd, STDOUT_FILENO);

759 i‡(
fd
 !
STDERR_FILENO
Ë()
	`dup2
(fd, STDERR_FILENO);

760 i‡(
fd
 !
STDIN_FILENO
 && fd !
STDOUT_FILENO
 && fd !
STDERR_FILENO
)

761 ()
	`˛o£
 (
fd
);

765 
	}
}

	@mdns/mDNSUNP.h

84 #i‚de‡
__mDNSUNP_h


85 
	#__mDNSUNP_h


	)

87 
	~<sys/ty≥s.h
>

88 
	~<sys/sockë.h
>

89 
	~<√t/if.h
>

90 
	~<√töë/ö.h
>

92 #ifde‡
HAVE_LINUX


93 
	~<löux/sockë.h
>

96 #ifde‡ 
__˝lu•lus


100 #ifde‡
NOT_HAVE_SOCKLEN_T


101 
	tsockÀn_t
;

104 #i‡!
deföed
(
_SS_MAXSIZE
)

105 #i‡
HAVE_IPV6


106 
	#sockaddr_°‹age
 
sockaddr_ö6


	)

108 
	#sockaddr_°‹age
 
sockaddr


	)

112 #i‚de‡
NOT_HAVE_SA_LEN


113 
	#GET_SA_LEN
(
X
Ë((
sockaddr
Ë> ((sockaddr*)&(X))->
ß_Àn
 ? \

114 (
sockaddr
Ë: ((sockaddr*)&(
X
))->
ß_Àn
 )

	)

115 #ñi‡
HAVE_IPV6


116 
	#GET_SA_LEN
(
X
Ë(((
sockaddr
*)&(X))->
ß_Ámûy
 =
AF_INET
 ? (
sockaddr_ö
) : \

117 ((
sockaddr
*)&(
X
))->
ß_Ámûy
 =
AF_INET6
 ? (
sockaddr_ö6
Ë: (sockaddr))

	)

119 
	#GET_SA_LEN
(
X
Ë(((
sockaddr
*)&(X))->
ß_Ámûy
 =
AF_INET
 ? (
sockaddr_ö
Ë: (sockaddr))

	)

122 
	#IFI_NAME
 16

	)

123 
	#IFI_HADDR
 8

	)

127 
	smy_ö_pktöfo
 {

128 
sockaddr_°‹age
 
	gùi_addr
;

129 
	gùi_ifödex
;

130 
	gùi_i‚ame
[
IFI_NAME
];

139 
ssize_t
 
ªcv‰om_Êags
(
fd
, *
±r
, 
size_t
 
nbyãs
, *
Êag•
,

140 
sockaddr
 *
ß
, 
sockÀn_t
 *
ßÀ≈å
, 
my_ö_pktöfo
 *
pkç
, 
u_ch¨
 *
âl
);

142 
	sifi_öfo
 {

143 
	gifi_«me
[
IFI_NAME
];

144 
u_ch¨
 
	gifi_haddr
[
IFI_HADDR
];

145 
u_sh‹t
 
	gifi_hÀn
;

146 
	gifi_Êags
;

147 
	gifi_myÊags
;

148 
	gifi_ödex
;

149 
sockaddr
 *
	gifi_addr
;

150 
sockaddr
 *
	gifi_√tmask
;

151 
sockaddr
 *
	gifi_brdaddr
;

152 
sockaddr
 *
	gifi_d°addr
;

153 
ifi_öfo
 *
	gifi_√xt
;

156 #i‡
deföed
(
AF_INET6
Ë&& 
HAVE_IPV6
 && 
HAVE_LINUX


157 
	#PROC_IFINET6_PATH
 "/¥oc/√t/if_öë6"

	)

158 
ifi_öfo
 *
gë_ifi_öfo_löuxv6
(
Ámûy
, 
dﬂlü£s
);

161 #i‡
deföed
(
AF_INET6
Ë&& 
HAVE_IPV6


162 
	#INET6_ADDRSTRLEN
 46

	)

167 
	#IFI_ALIAS
 1

	)

173 
ifi_öfo
 *
gë_ifi_öfo
(
Ámûy
, 
dﬂlü£s
);

177 
‰ì_ifi_öfo
(
ifi_öfo
 *);

179 #ifde‡
NOT_HAVE_DAEMON


180 
d´m⁄
(
nochdú
, 
no˛o£
);

183 #ifde‡ 
__˝lu•lus


	@mdns/uDNS.c

777 
	~"uDNS.h
"

779 #if(
deföed
(
_MSC_VER
))

785 #¥agm®
w¨nög
(
dißbÀ
:4706)

788 
	#umÆloc
(
x
Ë
	`mDNSPœtf‹mMemAŒoˇã
(x)

789 
	#u‰ì
(
x
Ë
	`mDNSPœtf‹mMemFªe
(x)

	)

790 
	#ubzîo
(
x
,
y
Ë
	`mDNSPœtf‹mMemZîo
(x,y)

	)

791 
	#umem˝y
(
x
, 
y
, 
l
Ë
	`mDNSPœtf‹mMemC›y
(y, x,Ü)

792 

	)

797 
	mz⁄eD©aResu…


799 } 
	tAsyncOpResu…Ty≥
;

803 
domaö«me
 
	mz⁄eName
;

804 
mDNSAddr
 
	m¥im¨yAddr
;

805 
mDNSu16
 
	mz⁄eCœss
;

806 
mDNSIPP‹t
 
	mŒqP‹t
;

807 
mDNSIPP‹t
 
	mupd©eP‹t
;

808 } 
	tz⁄eD©a_t
;

814 
AsyncOpResu…Ty≥
 
	mty≥
;

815 
z⁄eD©a_t
 
	mz⁄eD©a
;

817 } 
	tAsyncOpResu…
;

819 
	tAsyncOpCÆlback
(
	tmSètus
 
	tîr
, 
	tmDNS
 *c⁄° 
	tm
, *
	töfo
, c⁄° 
	tAsyncOpResu…
 *
	tªsu…
);

828 
mDNSloˇl
 
mDNSBoﬁ
 
FªeNATInfo
(
mDNS
 *
m
, 
NATTøvîßlInfo
 *
n
);

829 
mDNSloˇl
 
hndlTrunˇãdAnswî
(
DNSQue°i⁄
 *
que°i⁄
, c⁄° 
mDNSAddr
 *
§c
, 
mDNS
 *
m
);

830 
mDNSloˇl
 
mSètus
 
°¨tGëZ⁄eD©a
(
domaö«me
 *
«me
, 
mDNS
 *
m
, 
mDNSBoﬁ
 
födUpd©eP‹t
, mDNSBoﬁ 
födLLQP‹t
, 
AsyncOpCÆlback
 
ˇŒback
, *
ˇŒbackInfo
);

831 
mDNSloˇl
 
mDNSBoﬁ
 
ªcvLLQRe•⁄£
(
mDNS
 *
m
, 
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, c⁄° 
mDNSAddr
 *
§ˇddr
, 
mDNSIPP‹t
 
§˝‹t
, c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
);

832 
mDNSloˇl
 
£ndRec‹dRegi°øti⁄
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *
º
);

833 
mDNSloˇl
 
SídSîvi˚Regi°øti⁄
(
mDNS
 *
m
, 
Sîvi˚Rec‹dSë
 *
§s
);

834 
mDNSloˇl
 
SídSîvi˚Dîegi°øti⁄
(
mDNS
 *
m
, 
Sîvi˚Rec‹dSë
 *
§s
);

835 
mDNSloˇl
 
£rvi˚Regi°øti⁄CÆlback
(
mSètus
 
îr
, 
mDNS
 *c⁄° 
m
, *
§sPå
, c⁄° 
AsyncOpResu…
 *
ªsu…
);

836 
mDNSloˇl
 
Su•ídLLQs
(
mDNS
 *
m
, 
mDNSBoﬁ
 
Dîegi°îA˘ive
);

837 
mDNSloˇl
 
Re°¨tQuîõs
(
mDNS
 *
m
);

838 
mDNSloˇl
 
°¨tLLQH™dshake
(
mDNS
 *
m
, 
LLQ_Info
 *
öfo
, 
mDNSBoﬁ
 
de„r
);

839 
mDNSloˇl
 
ŒqRe•⁄£HndÃ
(
mDNS
 * c⁄° 
m
, 
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, 
DNSQue°i⁄
 *
que°i⁄
, *
c⁄ãxt
);

842 #i‡
COMPILER_LIKES_PRAGMA_MARK


843 #¥agm®
m¨k
 - 
Temp‹¨y
 
w‹k¨ound


852 
mDNSloˇl
 
mDNSs32
 
	$mDNSPœtf‹mTimeNow
(
mDNS
 *
m
)

854 i‡(
m
->
mDNS_busy
 && m->
timíow
) (m->timenow);

855 
	`LogMsg
("ERROR: uDNS.c codeÉxecuting without holding main mDNSÜock");

861 (
	`mDNS_TimeNow
(
m
));

862 
	}
}

865 #i‡
COMPILER_LIKES_PRAGMA_MARK


866 #¥agm®
m¨k
 - 
GíîÆ
 
Utûôy
 
Fun˘i⁄s


871 
mDNSloˇl
 
	$Cou¡Labñs
(c⁄° 
domaö«me
 *
d
)

873 
cou¡
 = 0;

874 c⁄° 
mDNSu8
 *
±r
;

876 
±r
 = 
d
->
c
; *±r;Öå =Öå +Öå[0] + 1Ë
cou¡
++;

877  
cou¡
;

878 
	}
}

880 
mDNSloˇl
 
mDNSO∑que16
 
	$√wMesßgeID
(
uDNS_GlobÆInfo
 *
u
)

882 
mDNSBoﬁ
 
øndomized
 = 
mDNSÁl£
;

884 i‡(!
øndomized
Ë{ 
u
->
NextMesßgeID
 = (
mDNSu16
)
	`mDNSR™dom
(0xFFFF);Ñ™domized = 
mDNSåue
; }

885 i‡(
u
->
NextMesßgeID
 == 0) u->NextMessageID++;

886  
	`mDNSO∑que16‰omI¡VÆ
(
u
->
NextMesßgeID
++);

887 
	}
}

890 
mDNSloˇl
 
mSètus
 
	$u∆ökAR
(
AuthRec‹d
 **
li°
, AuthRec‹d *c⁄° 
º
)

892 *
li°
 && *li° !
º
Ëli° = &(*li°)->
√xt
;

893 i‡(*
li°
Ë{ *li° = 
º
->
√xt
;Ñr->√xà
mDNSNULL
; (
mSètus_NoEº‹
); }

894 
	`LogMsg
("ERROR: u∆ökAR -Çÿsuchá˘ivêªc‹d %##s", 
º
->
ª§ec
.
«me
->
c
);

895 (
mSètus_NoSuchRec‹d
);

896 
	}
}

898 
mDNSloˇl
 
	$u∆ökSRS
(
mDNS
 *
m
, 
Sîvi˚Rec‹dSë
 *
§s
)

900 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

901 
Sîvi˚Rec‹dSë
 **
p
;

902 
NATTøvîßlInfo
 *
n
 = 
u
->
NATTøvîßls
;

905 
n
)

907 i‡(
n
->
ªg
.
Sîvi˚Regi°øti⁄
 =
§s
)

909 
NATTøvîßlInfo
 *
tmp
 = 
n
;

910 
n
 =Ç->
√xt
;

911 
	`LogMsg
("ERROR: U∆ökög sîvi˚Ñec‹d së %##†°û»ª„ªn˚d by NATÅøvîß»obje˘!", 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
);

912 
	`FªeNATInfo
(
m
, 
tmp
);

914 
n
 =Ç->
√xt
;

917 
p
 = &
u
->
Sîvi˚Regi°øti⁄s
; *p;Ö = &(*p)->
√xt
)

918 i‡(*
p
 =
§s
)

920 
ExåaResour˚Rec‹d
 *
e
;

921 *
p
 = 
§s
->
√xt
;

922 
§s
->
√xt
 = 
mDNSNULL
;

923 
e
=
§s
->
Exåas
;É;ÉÛ->
√xt
)

924 i‡(
	`u∆ökAR
(&
u
->
Rec‹dRegi°øti⁄s
, &
e
->
r
))

925 
	`LogMsg
("u∆ökSRS:Éxå®ªc‹d %##†nŸ found", 
e
->
r
.
ª§ec
.
«me
->
c
);

928 
	`LogMsg
("ERROR: u∆ökSRS - SRSÇŸ found i¿Sîvi˚Regi°øti⁄†li° %##s", 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
);

929 
	}
}

931 
mDNSloˇl
 
	$LökA˘iveQue°i⁄
(
uDNS_GlobÆInfo
 *
u
, 
DNSQue°i⁄
 *
q
)

933 i‡(
	`uDNS_IsA˘iveQuîy
(
q
, 
u
))

934 { 
	`LogMsg
("LökA˘iveQue°i⁄ - %##†(%dËÆªady i¿li°!", 
q
->
q«me
.
c
, q->
qty≥
); ; }

936 
q
->
√xt
 = 
u
->
A˘iveQuîõs
;

937 
u
->
A˘iveQuîõs
 = 
q
;

938 
	}
}

942 
mDNSloˇl
 
	$SëRec‹dRëry
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *
º
, 
mSètus
 
SídEº
)

944 
º
->
La°APTime
 = 
	`mDNSPœtf‹mTimeNow
(
m
);

945 i‡(
SídEº
 =
mSètus_Tønsõ¡Eº
 || 
º
->
ThisAPI¡îvÆ
 < 
INIT_UCAST_POLL_INTERVAL
)Ñr->ThisAPInterval = INIT_UCAST_POLL_INTERVAL;

946 i‡(
º
->
ThisAPI¡îvÆ
*2 <
MAX_UCAST_POLL_INTERVAL
)Ñr->ThisAPInterval *= 2;

947 i‡(
º
->
ThisAPI¡îvÆ
 !
MAX_UCAST_POLL_INTERVAL
)Ñr->ThisAPInterval = MAX_UCAST_POLL_INTERVAL;

948 
	}
}

952 #i‡
COMPILER_LIKES_PRAGMA_MARK


953 #¥agm®
m¨k
 - 
Name
 
Sîvî
 
Li°
 
M™agemít


956 
mDNSexp‹t
 
	$mDNS_AddDNSSîvî
(
mDNS
 *c⁄° 
m
, c⁄° 
mDNSAddr
 *
addr
, c⁄° 
domaö«me
 *
d
)

958 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

959 
DNSSîvî
 *
s
, **
p
 = &
u
->
Sîvîs
;

961 
	`mDNS_Lock
(
m
);

962 i‡(!
d
Ëd = (
domaö«me
 *)"";

964 *
p
)

966 i‡(
	`mDNSSameAddªss
(&(*
p
)->
addr
,áddrË&& 
	`SameDomaöName
(&(*p)->
domaö
, 
d
))

967 
	`LogMsg
("NŸe: DNS Sîvî %#®f‹ domaö %##†ªgi°îed m‹êth™ on˚", 
addr
, 
d
->
c
);

968 
p
=&(*p)->
√xt
;

972 
s
 = 
	`umÆloc
((*s));

973 i‡(!
s
Ë{ 
	`LogMsg
("Eº‹: mDNS_AddDNSSîvî - mÆloc"); 
íd
; }

974 
s
->
addr
 = *addr;

975 
s
->
dñ
 = 
mDNSÁl£
;

976 
s
->
ã°°©e
 = 
DNSSîvî_U¡e°ed
;

977 
	`AssignDomaöName
(&
s
->
domaö
, 
d
);

978 
s
->
√xt
 = 
mDNSNULL
;

979 *
p
 = 
s
;

981 
íd
:

982 
	`mDNS_U∆ock
(
m
);

983 
	}
}

985 
mDNSexp‹t
 
	$mDNS_DñëeDNSSîvîs
(
mDNS
 *c⁄° 
m
)

987 
DNSSîvî
 *
s
;

988 
	`mDNS_Lock
(
m
);

990 
s
 = 
m
->
uDNS_öfo
.
Sîvîs
;

991 
m
->
uDNS_öfo
.
Sîvîs
 = 
mDNSNULL
;

992 
s
)

994 
DNSSîvî
 *
tmp
 = 
s
;

995 
s
 = s->
√xt
;

996 
	`u‰ì
(
tmp
);

999 
	`mDNS_U∆ock
(
m
);

1000 
	}
}

1003 #i‡
COMPILER_LIKES_PRAGMA_MARK


1004 #¥agm®
m¨k
 - 
auth‹iz©i⁄
 
m™agemít


1007 
mDNSloˇl
 
uDNS_AuthInfo
 *
	$GëAuthInfoF‹Name
(c⁄° 
uDNS_GlobÆInfo
 *
u
, c⁄° 
domaö«me
 *
«me
)

1009 
uDNS_AuthInfo
 *
±r
;

1010 
«me
->
c
[0])

1012 
±r
 = 
u
->
AuthInfoLi°
;Öå;Öå =Öå->
√xt
)

1013 i‡(
	`SameDomaöName
(&
±r
->
z⁄e
, 
«me
)) (ptr);

1014 
«me
 = (c⁄° 
domaö«me
 *)“ame->
c
 + 1 +Çame->c[0]);

1016  
mDNSNULL
;

1017 
	}
}

1019 
mDNSloˇl
 
	$DñëeAuthInfoF‹Z⁄e
(
uDNS_GlobÆInfo
 *
u
, c⁄° 
domaö«me
 *
z⁄e
)

1021 
uDNS_AuthInfo
 *
±r
, *
¥ev
 = 
mDNSNULL
;

1023 
±r
 = 
u
->
AuthInfoLi°
;Öå;Öå =Öå->
√xt
)

1025 i‡(
	`SameDomaöName
(&
±r
->
z⁄e
, zone))

1027 i‡(
¥ev
Ë¥ev->
√xt
 = 
±r
->next;

1028 
u
->
AuthInfoLi°
 = 
±r
->
√xt
;

1029 
	`u‰ì
(
±r
);

1032 
¥ev
 = 
±r
;

1034 
	}
}

1036 
mDNSexp‹t
 
mSètus
 
	$mDNS_SëSe¸ëF‹Z⁄e
(
mDNS
 *
m
, c⁄° 
domaö«me
 *
z⁄e
, c⁄° domaö«mê*
key
, c⁄° *
sh¨edSe¸ë
)

1038 
uDNS_AuthInfo
 *
öfo
;

1039 
mDNSu8
 
keybuf
[1024];

1040 
mDNSs32
 
keyÀn
;

1041 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

1042 
mSètus
 
°©us
 = 
mSètus_NoEº‹
;

1044 
	`mDNS_Lock
(
m
);

1046 i‡(
	`GëAuthInfoF‹Name
(
u
, 
z⁄e
)Ë
	`DñëeAuthInfoF‹Z⁄e
(u, zone);

1047 i‡(!
key
Ë
exô
;

1049 
öfo
 = (
uDNS_AuthInfo
*)
	`umÆloc
((*info));

1050 i‡(!
öfo
Ë{ 
	`LogMsg
("ERROR: umÆloc"); 
°©us
 = 
mSètus_NoMem‹yEº
; 
exô
; }

1051 
	`ubzîo
(
öfo
, (*info));

1052 
	`AssignDomaöName
(&
öfo
->
z⁄e
, zone);

1053 
	`AssignDomaöName
(&
öfo
->
key«me
, 
key
);

1055 
keyÀn
 = 
	`DNSDige°_Ba£64ToBö
(
sh¨edSe¸ë
, 
keybuf
, 1024);

1056 i‡(
keyÀn
 < 0)

1058 
	`LogMsg
("ERROR: mDNS_SëSe¸ëF‹Z⁄ê- couldÇŸ c⁄vîàsh¨ed se¸ë %†‰om ba£64", 
sh¨edSe¸ë
);

1059 
	`u‰ì
(
öfo
);

1060 
°©us
 = 
mSètus_UnknownEº
;

1061 
exô
;

1063 
	`DNSDige°_C⁄°ru˘HMACKey
(
öfo
, 
keybuf
, (
mDNSu32
)
keyÀn
);

1066 
öfo
->
√xt
 = 
m
->
uDNS_öfo
.
AuthInfoLi°
;

1067 
m
->
uDNS_öfo
.
AuthInfoLi°
 = 
öfo
;

1068 
exô
:

1069 
	`mDNS_U∆ock
(
m
);

1070  
°©us
;

1071 
	}
}

1074 #i‡
COMPILER_LIKES_PRAGMA_MARK


1075 #¥agm®
m¨k
 - 
NAT
 
Tøvîßl


1078 
mDNSloˇl
 
mDNSBoﬁ
 
	$DomaöC⁄èösLabñSåög
(c⁄° 
domaö«me
 *
d
, c⁄° *
°r
)

1080 c⁄° 
domaöœbñ
 *
l
;

1081 
domaöœbñ
 
buf
;

1083 i‡(!
	`MakeDomaöLabñFromLôîÆSåög
(&
buf
, 
°r
)Ë 
mDNSÁl£
;

1085 
l
 = (c⁄° 
domaöœbñ
 *)
d
;Ü->
c
[0];Ü = (const domainlabel *)(l->c +Ü->c[0]+1))

1086 i‡(
	`SameDomaöLabñ
(
l
->
c
, 
buf
.c)Ë 
mDNSåue
;

1087  
mDNSÁl£
;

1088 
	}
}

1091 
mDNSloˇl
 
NATTøvîßlInfo
 *
	$AŒocNATInfo
(
mDNS
 *c⁄° 
m
, 
NATOp_t
 
›
, 
NATRe•⁄£HndÃ
 
ˇŒback
)

1093 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

1094 
NATTøvîßlInfo
 *
öfo
 = 
	`umÆloc
((NATTraversalInfo));

1095 i‡(!
öfo
Ë{ 
	`LogMsg
("ERROR: mÆloc");  
mDNSNULL
; }

1096 
	`ubzîo
(
öfo
, (
NATTøvîßlInfo
));

1097 
öfo
->
√xt
 = 
u
->
NATTøvîßls
;

1098 
u
->
NATTøvîßls
 = 
öfo
;

1099 
öfo
->
ªåy
 = 
	`mDNSPœtf‹mTimeNow
(
m
Ë+ 
NATMAP_INIT_RETRY
;

1100 
öfo
->
›
 = op;

1101 
öfo
->
°©e
 = 
NATSèã_Inô
;

1102 
öfo
->
Re˚iveRe•⁄£
 = 
ˇŒback
;

1103 
öfo
->
PublicP‹t
.
NŸAnI¡egî
 = 0;

1104 
öfo
->
Rouãr
 = 
u
->Router;

1105  
öfo
;

1106 
	}
}

1109 
mDNSloˇl
 
mDNSBoﬁ
 
	$FªeNATInfo
(
mDNS
 *
m
, 
NATTøvîßlInfo
 *
n
)

1111 
NATTøvîßlInfo
 *
±r
, *
¥ev
 = 
mDNSNULL
;

1112 
Sîvi˚Rec‹dSë
 *
s
 = 
m
->
uDNS_öfo
.
Sîvi˚Regi°øti⁄s
;

1115 
s
)

1117 i‡(
s
->
uDNS_öfo
.
NATöfo
 =
n
)

1119 
	`LogMsg
("Eº‹: Fªeög NAT infÿobje˘ stû»ª„ªn˚d by Sîvi˚ Rec‹d Së %##s!", 
s
->
RR_SRV
.
ª§ec
.
«me
->
c
);

1120 
s
->
uDNS_öfo
.
NATöfo
 = 
mDNSNULL
;

1122 
s
 = s->
√xt
;

1125 i‡(
n
 =
m
->
uDNS_öfo
.
LLQN©Info
Ëm->uDNS_öfo.LLQN©Infÿ
mDNSNULL
;

1126 
±r
 = 
m
->
uDNS_öfo
.
NATTøvîßls
;

1127 
±r
)

1129 i‡(
±r
 =
n
)

1131 i‡(
¥ev
Ë¥ev->
√xt
 = 
±r
->next;

1132 
m
->
uDNS_öfo
.
NATTøvîßls
 = 
±r
->
√xt
;

1133 
	`u‰ì
(
n
);

1134  
mDNSåue
;

1136 
¥ev
 = 
±r
;

1137 
±r
 =Öå->
√xt
;

1139 
	`LogMsg
("FreeNATInfo: NATTraversalInfoÇot found inÜist");

1140  
mDNSÁl£
;

1141 
	}
}

1143 
mDNSloˇl
 
	$SídNATMsg
(
NATTøvîßlInfo
 *
öfo
, 
mDNS
 *
m
)

1145 
mSètus
 
îr
;

1146 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

1148 i‡(
öfo
->
°©e
 !
NATSèã_Reque°
 && info->°©ê!
NATSèã_Re‰esh
)

1149 { 
	`LogMsg
("SídNATMsg: Bad sèã %d", 
öfo
->
°©e
); ; }

1151 i‡(
u
->
Rouãr
.
ù
.
v4
.
NŸAnI¡egî
)

1154 c⁄° 
mDNSu8
 *
íd
 = (mDNSu8 *)&
öfo
->
ªque°
;

1155 i‡(
öfo
->
›
 =
NATOp_AddrReque°
Ë
íd
 +(
NATAddrReque°
);

1156 
íd
 +(
NATP‹tM≠Reque°
);

1158 
îr
 = 
	`mDNSPœtf‹mSídUDP
(
m
, &
öfo
->
ªque°
, 
íd
, 0, &
u
->
Rouãr
, 
NATPMPP‹t
);

1159 i‡(!
îr
Ë(
öfo
->
¡rõs
++);

1163 i‡(
öfo
->
RëryI¡îvÆ
 < 
NATMAP_INIT_RETRY
) info->RetryInterval = NATMAP_INIT_RETRY;

1164 i‡(
öfo
->
RëryI¡îvÆ
 * 2 > 
NATMAP_MAX_RETRY
) info->RetryInterval = NATMAP_MAX_RETRY;

1165 
öfo
->
RëryI¡îvÆ
 *= 2;

1166 
öfo
->
ªåy
 = 
	`mDNSPœtf‹mTimeNow
(
m
Ë+ info->
RëryI¡îvÆ
;

1167 
	}
}

1169 
mDNSloˇl
 
mDNSBoﬁ
 
	$Re˚iveNATAddrRe•⁄£
(
NATTøvîßlInfo
 *
n
, 
mDNS
 *
m
, 
mDNSu8
 *
pkt
, 
mDNSu16
 
Àn
)

1171 
mSètus
 
îr
 = 
mSètus_NoEº‹
;

1172 
AuthRec‹d
 *
º
 = 
mDNSNULL
;

1173 
NATAddrRïly
 *
ª•⁄£
 = (NATAddrRïly *)
pkt
;

1174 
mDNSAddr
 
addr
;

1176 i‡(
n
->
°©e
 !
NATSèã_Reque°
)

1178 
	`LogMsg
("Re˚iveNATAddrRe•⁄£: bad sèã %d", 
n
->
°©e
);

1179  
mDNSÁl£
;

1182 
º
 = 
n
->
ªg
.
Rec‹dRegi°øti⁄
;

1183 i‡(!
º
)

1185 
	`LogMsg
("ReceiveNATAddrResponse:Ñegistration cancelled");

1186  
mDNSÁl£
;

1189 
addr
.
ty≥
 = 
mDNSAddrTy≥_IPv4
;

1190 
addr
.
ù
.
v4
 = 
º
->
ª§ec
.
rd©a
->
u
.
ùv4
;

1192 i‡(!
pkt
)

1194 #ifde‡
_LEGACY_NAT_TRAVERSAL_


1195 
îr
 = 
	`LNT_GëPublicIP
(&
addr
.
ù
.
v4
);

1196 i‡(
îr
Ë
íd
;

1197 
n
->
°©e
 = 
NATSèã_Legacy
;

1199 
	`debugf
("ReceiveNATAddrResponse:Åimeout");

1200 
îr
 = 
mSètus_NATTøvîßl
;

1201 
íd
;

1206 i‡(
Àn
 < (*
ª•⁄£
))

1208 
	`LogMsg
("Re˚iveNATAddrRe•⁄£:Ñe•⁄£Åoÿsh‹à(%d byãs)", 
Àn
);

1209  
mDNSÁl£
;

1211 i‡(
ª•⁄£
->
vîs
 !
NATMAP_VERS
)

1213 
	`LogMsg
("Re˚iveNATAddrRe•⁄£:Ñe˚ived vîsi⁄ %d (ex≥˘ vîsi⁄ %d)", 
pkt
[0], 
NATMAP_VERS
);

1214  
mDNSÁl£
;

1216 i‡(
ª•⁄£
->
›code
 !(
NATOp_AddrReque°
 | 
NATMAP_RESPONSE_MASK
))

1218 
	`LogMsg
("Re˚iveNATAddrRe•⁄£: badÑe•⁄£ codê%d", 
ª•⁄£
->
›code
);

1219  
mDNSÁl£
;

1221 i‡(
ª•⁄£
->
îr
.
NŸAnI¡egî
)

1222 { 
	`LogMsg
("Re˚iveAddrRe•⁄£:Ñe˚ivedÉº‹ %d", 
	`mDNSVÆ16
(
ª•⁄£
->
îr
));Éº = 
mSètus_NATTøvîßl
; 
íd
; }

1224 
addr
.
ù
.
v4
 = 
ª•⁄£
->
PubAddr
;

1225 
n
->
°©e
 = 
NATSèã_E°ablished
;

1228 i‡(
	`IsPriv©eV4Addr
(&
addr
))

1230 
	`LogMsg
("ReceiveNATAddrResponse: Double NAT");

1231 
îr
 = 
mSètus_DoubÀNAT
;

1232 
íd
;

1235 
íd
:

1236 i‡(
îr
)

1238 
	`FªeNATInfo
(
m
, 
n
);

1239 i‡(
º
)

1241 
º
->
uDNS_öfo
.
NATöfo
 = 
mDNSNULL
;

1242 
º
->
uDNS_öfo
.
°©e
 = 
ªgSèã_Uƒegi°îed
;

1243 
º
->
	`Rec‹dCÆlback
(
m
,Ñr, 
mSètus_NATTøvîßl
);

1246  
mDNSåue
;

1248 
	`LogO≥øti⁄
("Re˚ivedÖubli¯IPáddªs†%d.%d.%d.%d from NAT.", 
addr
.
ù
.
v4
.
b
[0],áddr.ip.v4.b[1],áddr.ip.v4.b[2],áddr.ip.v4.b[3]);

1249 
º
->
ª§ec
.
rd©a
->
u
.
ùv4
 = 
addr
.
ù
.
v4
;

1250 
	`uDNS_Regi°îRec‹d
(
m
, 
º
);

1251  
mDNSåue
;

1252 
	}
}

1255 
mDNSloˇl
 
	$SèπGëPublicAddr
(
mDNS
 *
m
, 
AuthRec‹d
 *
AddªssRec
)

1257 
NATAddrReque°
 *
ªq
;

1258 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

1260 
NATTøvîßlInfo
 *
öfo
 = 
	`AŒocNATInfo
(
m
, 
NATOp_AddrReque°
, 
Re˚iveNATAddrRe•⁄£
);

1261 i‡(!
öfo
Ë{ 
	`uDNS_Regi°îRec‹d
(
m
, 
AddªssRec
); ; }

1262 
AddªssRec
->
uDNS_öfo
.
NATöfo
 = 
öfo
;

1263 
öfo
->
ªg
.
Rec‹dRegi°øti⁄
 = 
AddªssRec
;

1264 
öfo
->
°©e
 = 
NATSèã_Reque°
;

1267 
ªq
 = &
öfo
->
ªque°
.
AddrReq
;

1268 
ªq
->
vîs
 = 
NATMAP_VERS
;

1269 
ªq
->
›code
 = 
NATOp_AddrReque°
;

1271 i‡(!
u
->
Rouãr
.
ù
.
v4
.
NŸAnI¡egî
)

1273 
	`debugf
("Nÿrouãr. Wû»ªåy NATÅøvîß»ö %ldÅicks", 
NATMAP_INIT_RETRY
);

1277 
	`SídNATMsg
(
öfo
, 
m
);

1278 
	}
}

1281 
mDNSloˇl
 
	$Re‰eshNATM≠pög
(
NATTøvîßlInfo
 *
n
, 
mDNS
 *
m
)

1283 
n
->
°©e
 = 
NATSèã_Re‰esh
;

1284 
n
->
RëryI¡îvÆ
 = 
NATMAP_INIT_RETRY
;

1285 
n
->
¡rõs
 = 0;

1286 
	`SídNATMsg
(
n
, 
m
);

1287 
	}
}

1289 
mDNSloˇl
 
	$LLQN©M≠Com∂ëe
(
mDNS
 *
m
)

1291 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

1292 
LLQ_Info
 *
ŒqInfo
;

1293 
NATTøvîßlInfo
 *
n
 = 
u
->
LLQN©Info
;

1295 i‡(!
n
Ë{ 
	`LogMsg
("Error: LLQNatMapComplete called with NULL LLQNatInfo"); ; }

1296 i‡(
n
->
°©e
 !
NATSèã_E°ablished
 &&Ç->°©ê!
NATSèã_Legacy
 &&Ç->°©ê!
NATSèã_Eº‹
)

1297 { 
	`LogMsg
("LLQN©M≠Com∂ëê- badÇ© sèã %d", 
n
->
°©e
); ; }

1299 
u
->
CuºítQuîy
 = u->
A˘iveQuîõs
;

1300 
u
->
CuºítQuîy
)

1302 
DNSQue°i⁄
 *
q
 = 
u
->
CuºítQuîy
;

1303 
u
->
CuºítQuîy
 = u->CuºítQuîy->
√xt
;

1304 
ŒqInfo
 = 
q
->
uDNS_öfo
.
Œq
;

1305 i‡(
q
->
L⁄gLived
 && 
ŒqInfo
->
°©e
 =
LLQ_N©M≠Waô
)

1307 i‡(
n
->
°©e
 =
NATSèã_Eº‹
)

1309 
ŒqInfo
->
NATM≠
 = 
mDNSÁl£
;

1310 
ŒqInfo
->
que°i⁄
->
uDNS_öfo
.
ª•⁄£CÆlback
 = 
ŒqRe•⁄£HndÃ
;

1311 
ŒqInfo
->
°©e
 = 
LLQ_Pﬁl
;

1312 
ŒqInfo
->
que°i⁄
->
La°QTime
 = 
	`mDNSPœtf‹mTimeNow
(
m
Ë- (2 * 
INIT_UCAST_POLL_INTERVAL
);

1313 
ŒqInfo
->
que°i⁄
->
ThisQI¡îvÆ
 = 
INIT_UCAST_POLL_INTERVAL
;

1315 { 
ŒqInfo
->
°©e
 = 
LLQ_GëZ⁄eInfo
; 
	`°¨tLLQH™dshake
(
m
,ÜlqInfo, 
mDNSÁl£
); }

1318 
	}
}

1320 
mDNSloˇl
 
mDNSBoﬁ
 
	$Re˚iveP‹tM≠Rïly
(
NATTøvîßlInfo
 *
n
, 
mDNS
 *
m
, 
mDNSu8
 *
pkt
, 
mDNSu16
 
Àn
)

1322 
Sîvi˚Rec‹dSë
 *
§s
 = 
n
->
ªg
.
Sîvi˚Regi°øti⁄
;

1323 
mDNSIPP‹t
 
¥iv
 = 
§s
 ? srs->
RR_SRV
.
ª§ec
.
rd©a
->
u
.
§v
.
p‹t
 : 
m
->
Uniˇ°P‹t4
;

1324 
mDNSu32
 
Àa£
;

1325 
mDNSBoﬁ
 
dñëi⁄
 = !
n
->
ªque°
.
P‹tReq
.
Àa£
.
NŸAnI¡egî
;

1326 
NATP‹tM≠Rïly
 *
ª∂y
 = (NATP‹tM≠Rïly *)
pkt
;

1327 
mDNSu8
 *
£rvi˚
 = 
§s
 ? srs->
RR_SRV
.
ª§ec
.
«me
->
c
 : (mDNSu8 *)"\016LLQÉventÖort";

1329 i‡(
n
->
°©e
 !
NATSèã_Reque°
 &&Ç->°©ê!
NATSèã_Re‰esh
)

1330 { 
	`LogMsg
("Re˚iveP‹tM≠Rïly (%##s): bad sèã %d", 
£rvi˚
, 
n
->
°©e
);  
mDNSÁl£
; }

1332 i‡(!
pkt
 && !
dñëi⁄
)

1334 #ifde‡
_LEGACY_NAT_TRAVERSAL_


1335 
mDNSIPP‹t
 
pub
;

1336 
¡rõs
 = 0;

1337 
mSètus
 
îr
;

1338 
mDNSBoﬁ
 
t˝
 = (
§s
 && 
	`DomaöC⁄èösLabñSåög
(§s->
RR_PTR
.
ª§ec
.
«me
, "_tcp"));

1340 
pub
 = 
¥iv
;

1343 
îr
 = 
	`LNT_M≠P‹t
(
¥iv
, 
pub
, 
t˝
);

1344 i‡(!
îr
)

1346 
n
->
PublicP‹t
 = 
pub
;

1347 
n
->
°©e
 = 
NATSèã_Legacy
;

1348 
íd
;

1350 i‡(
îr
 !
mSètus_AÃódyRegi°îed
 || ++
¡rõs
 > 
LEGACY_NATMAP_MAX_TRIES
)

1352 
n
->
°©e
 = 
NATSèã_Eº‹
;

1353 
íd
;

1358 
mDNSu16
 
R™dP‹t
 = 
	`mDNSR™dom
(
DYN_PORT_MAX
 - 
DYN_PORT_MIN
) + DYN_PORT_MIN;

1359 
pub
 = 
	`mDNSO∑que16‰omI¡VÆ
(
R™dP‹t
);

1363 
íd
;

1367 i‡(
Àn
 < (*
ª∂y
)Ë{ 
	`LogMsg
("Re˚iveP‹tM≠Rïly:Ñe•⁄£Åoÿsh‹à(%d byãs)",Üí);  
mDNSÁl£
; }

1368 i‡(
ª∂y
->
vîs
 !
NATMAP_VERS
Ë{ 
	`LogMsg
("Re˚iveP‹tM≠Rïly:Ñe˚ived vîsi⁄ %d (ex≥˘ vîsi⁄ %d)", 
pkt
[0], NATMAP_VERS);  
mDNSÁl£
; }

1369 i‡(
ª∂y
->
›code
 !(
n
->
›
 | 
NATMAP_RESPONSE_MASK
)Ë{ 
	`LogMsg
("Re˚iveP‹tM≠Rïly: badÑe•⁄£ codê%d", 
pkt
[1]);  
mDNSÁl£
; }

1370 i‡(
ª∂y
->
îr
.
NŸAnI¡egî
Ë{ 
	`LogMsg
("Re˚iveP‹tM≠Rïly:Ñe˚ivedÉº‹ %d", 
	`mDNSVÆ16
‘ïly->îr));  
mDNSÁl£
; }

1371 i‡(
¥iv
.
NŸAnI¡egî
 !
ª∂y
->¥iv.NŸAnI¡egîË 
mDNSÁl£
;

1373 i‡(!
§s
 && 
n
 !
m
->
uDNS_öfo
.
LLQN©Info
)

1375 
	`LogMsg
("ReceivePortMapReply:Ñegistration cancelled");

1376 
	`FªeNATInfo
(
m
, 
n
);

1377  
mDNSåue
;

1380 i‡(
dñëi⁄
Ë{ 
n
->
°©e
 = 
NATSèã_Dñëed
;  
mDNSåue
; }

1382 
Àa£
 = (
mDNSu32
)
	`mDNSVÆ32
(
ª∂y
->lease);

1383 i‡(
Àa£
 > 0x70000000UL / 
mDNSPœtf‹mO√Sec⁄d
)Üease = 0x70000000UL / mDNSPlatformOneSecond;

1385 i‡(
n
->
°©e
 =
NATSèã_Re‰esh
 && 
ª∂y
->
pub
.
NŸAnI¡egî
 !n->
PublicP‹t
.NotAnInteger)

1386 
	`LogMsg
("Re˚iveP‹tM≠Rïly: NATÑe‰esh ch™gedÖubli¯p‹à‰om %dÅÿ%d", 
	`mDNSVÆ16
(
n
->
PublicP‹t
), mDNSVÆ16(
ª∂y
->
pub
));

1390 
n
->
PublicP‹t
 = 
ª∂y
->
pub
;

1391 i‡(
ª∂y
->
pub
.
NŸAnI¡egî
 !
n
->
ªque°
.
P‹tReq
.pub.NotAnInteger)Ç->request.PortReq.pub =Ñeply->pub;

1393 
n
->
ªåy
 = 
	`mDNSPœtf‹mTimeNow
(
m
Ë+ ((
mDNSs32
)
Àa£
 * 
mDNSPœtf‹mO√Sec⁄d
 / 2);

1395 i‡(
n
->
°©e
 =
NATSèã_Re‰esh
Ë{Ç->°©ê
NATSèã_E°ablished
;  
mDNSåue
; }

1396 
n
->
°©e
 = 
NATSèã_E°ablished
;

1398 
íd
:

1399 i‡(
n
->
°©e
 !
NATSèã_E°ablished
 &&Ç->°©ê!
NATSèã_Legacy
)

1401 
	`LogMsg
("NAT P‹àM≠pög (%##s):Åimeout", 
£rvi˚
);

1402 i‡(
pkt
Ë
	`LogMsg
("!!!Åimeout withÇon-nullÖacket");

1403 
n
->
°©e
 = 
NATSèã_Eº‹
;

1404 i‡(
§s
)

1406 
uDNS_Ho°«meInfo
 *
hi
 = 
m
->
uDNS_öfo
.
Ho°«mes
;

1407 
hi
)

1409 i‡(
hi
->
¨v6
 && (hi->¨v6->
uDNS_öfo
.
°©e
 =
ªgSèã_Regi°îed
 || hi->¨v6->uDNS_öfo.°©ê=
ªgSèã_Re‰esh
)) ;

1410 
hi
 = hi->
√xt
;

1413 i‡(
hi
)

1415 
	`debugf
("P‹àm≠ faûed f‹ sîvi˚ %##†- usög IPv6 sîvi˚Å¨gë", 
£rvi˚
);

1416 
§s
->
uDNS_öfo
.
NATöfo
 = 
mDNSNULL
;

1417 
	`FªeNATInfo
(
m
, 
n
);

1418 
ªgi°î_£rvi˚
;

1420 
§s
->
uDNS_öfo
.
°©e
 = 
ªgSèã_NATEº‹
;

1422 
	`LLQN©M≠Com∂ëe
(
m
);

1423  
mDNSåue
;

1425 
	`LogO≥øti⁄
("M≠≥dÖriv©êp‹à%dÅÿpubli¯p‹à%d", 
	`mDNSVÆ16
(
¥iv
), mDNSVÆ16(
n
->
PublicP‹t
));

1427 i‡(!
§s
Ë{ 
	`LLQN©M≠Com∂ëe
(
m
);  
mDNSåue
; }

1429 
ªgi°î_£rvi˚
:

1430 i‡(
§s
->
uDNS_öfo
.
ns
.
ù
.
v4
.
NŸAnI¡egî
Ë
	`SídSîvi˚Regi°øti⁄
(
m
, srs);

1433 
§s
->
uDNS_öfo
.
°©e
 = 
ªgSèã_FëchögZ⁄eD©a
;

1434 
	`°¨tGëZ⁄eD©a
(
§s
->
RR_SRV
.
ª§ec
.
«me
, 
m
, 
mDNSåue
, 
mDNSÁl£
, 
£rvi˚Regi°øti⁄CÆlback
, srs);

1436  
mDNSåue
;

1437 
	}
}

1439 
mDNSloˇl
 
	$F‹m©P‹tM≠ªque°
(
NATTøvîßlInfo
 *
öfo
, 
mDNSIPP‹t
 
p‹t
)

1441 
NATP‹tM≠Reque°
 *
ªq
 = &
öfo
->
ªque°
.
P‹tReq
;

1443 
ªq
->
vîs
 = 
NATMAP_VERS
;

1444 
ªq
->
›code
 = 
öfo
->
›
;

1445 
ªq
->
unu£d
.
NŸAnI¡egî
 = 0;

1446 
ªq
->
¥iv
 = 
p‹t
;

1447 
ªq
->
pub
 = 
p‹t
;

1448 
ªq
->
Àa£
 = 
	`mDNSO∑que32‰omI¡VÆ
(
NATMAP_DEFAULT_LEASE
);

1449 
	}
}

1451 
mDNSloˇl
 
	$SídInôülPM≠Req
(
mDNS
 *
m
, 
NATTøvîßlInfo
 *
öfo
)

1453 i‡(!
m
->
uDNS_öfo
.
Rouãr
.
ù
.
v4
.
NŸAnI¡egî
)

1455 
	`debugf
("Nÿrouãr. Wû»ªåy NATÅøvîß»ö %ld sec⁄ds", 
NATMAP_INIT_RETRY
);

1456 
öfo
->
ªåy
 = 
	`mDNSPœtf‹mTimeNow
(
m
Ë+ 
NATMAP_INIT_RETRY
;

1457 
öfo
->
RëryI¡îvÆ
 = 
NATMAP_INIT_RETRY
;

1460 
	`SídNATMsg
(
öfo
, 
m
);

1462 
	}
}

1464 
mDNSloˇl
 
	$SèπNATP‹tM≠
(
mDNS
 *
m
, 
Sîvi˚Rec‹dSë
 *
§s
)

1466 
NATOp_t
 
›
;

1467 
NATTøvîßlInfo
 *
öfo
;

1469 i‡(
	`DomaöC⁄èösLabñSåög
(
§s
->
RR_PTR
.
ª§ec
.
«me
, "_t˝")Ë
›
 = 
NATOp_M≠TCP
;

1470 i‡(
	`DomaöC⁄èösLabñSåög
(
§s
->
RR_PTR
.
ª§ec
.
«me
, "_udp")Ë
›
 = 
NATOp_M≠UDP
;

1471 { 
	`LogMsg
("SèπNATP‹tM≠: couldÇŸ dëîmöêå™•‹à¥Ÿocﬁ o‡£rvi˚ %##s", 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
); 
îr‹
; }

1473 i‡(
§s
->
uDNS_öfo
.
NATöfo
Ë{ 
	`LogMsg
("Eº‹: SèπNATP‹tM≠ - NAT infÿÆªady inôülized!"); 
	`FªeNATInfo
(
m
, srs->uDNS_info.NATinfo); }

1474 
öfo
 = 
	`AŒocNATInfo
(
m
, 
›
, 
Re˚iveP‹tM≠Rïly
);

1475 
§s
->
uDNS_öfo
.
NATöfo
 = 
öfo
;

1476 
öfo
->
ªg
.
Sîvi˚Regi°øti⁄
 = 
§s
;

1477 
öfo
->
°©e
 = 
NATSèã_Reque°
;

1479 
	`F‹m©P‹tM≠ªque°
(
öfo
, 
§s
->
RR_SRV
.
ª§ec
.
rd©a
->
u
.
§v
.
p‹t
);

1480 
	`SídInôülPM≠Req
(
m
, 
öfo
);

1483 
îr‹
:

1484 
	`°¨tGëZ⁄eD©a
(
§s
->
RR_SRV
.
ª§ec
.
«me
, 
m
, 
mDNSåue
, 
mDNSÁl£
, 
£rvi˚Regi°øti⁄CÆlback
, srs);

1485 
	}
}

1487 
mDNSloˇl
 
	$DñëeNATP‹tM≠pög
(
mDNS
 *
m
, 
NATTøvîßlInfo
 *
«t
, 
Sîvi˚Rec‹dSë
 *
§s
)

1489 i‡(
«t
->
°©e
 =
NATSèã_E°ablished
)

1492 
«t
->
ªque°
.
P‹tReq
.
Àa£
.
NŸAnI¡egî
 = 0;

1493 
«t
->
°©e
 = 
NATSèã_Reque°
;

1494 
	`SídNATMsg
(
«t
, 
m
);

1496 #ifde‡
_LEGACY_NAT_TRAVERSAL_


1497 i‡(
«t
->
°©e
 =
NATSèã_Legacy
)

1499 
mSètus
 
îr
 = 
mSètus_NoEº‹
;

1500 
mDNSBoﬁ
 
t˝
 = 
§s
 ? 
	`DomaöC⁄èösLabñSåög
(§s->
RR_PTR
.
ª§ec
.
«me
, "_t˝"Ë: 
mDNSÁl£
;

1501 
îr
 = 
	`LNT_Unm≠P‹t
(
«t
->
PublicP‹t
, 
t˝
);

1502 i‡(
îr
Ë
	`LogMsg
("Legacy NAT Traversal - unmapÑequest failed withÉrror %ld",Érr);

1505 ()
§s
;

1507 
	}
}

1509 
mDNSloˇl
 
	$SèπLLQN©M≠
(
mDNS
 *
m
)

1511 
NATTøvîßlInfo
 *
öfo
 = 
	`AŒocNATInfo
(
m
, 
NATOp_M≠UDP
, 
Re˚iveP‹tM≠Rïly
);

1512 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

1514 
u
->
LLQN©Info
 = 
öfo
;

1516 
öfo
->
ªg
.
Rec‹dRegi°øti⁄
 = 
mDNSNULL
;

1517 
öfo
->
ªg
.
Sîvi˚Regi°øti⁄
 = 
mDNSNULL
;

1518 
öfo
->
°©e
 = 
NATSèã_Reque°
;

1519 
	`F‹m©P‹tM≠ªque°
(
öfo
, 
m
->
Uniˇ°P‹t4
);

1520 
	`SídInôülPM≠Req
(
m
, 
öfo
);

1522 
	}
}

1525 
mDNSloˇl
 
	$CheckF‹Uƒe„ªn˚dLLQM≠pög
(
mDNS
 *
m
)

1527 
NATTøvîßlInfo
 *
«t
 = 
m
->
uDNS_öfo
.
LLQN©Info
;

1528 
DNSQue°i⁄
 *
q
;

1530 i‡(!
«t
) ;

1532 
q
 = 
m
->
uDNS_öfo
.
A˘iveQuîõs
; q; q = q->
√xt
)

1533 i‡(
q
->
L⁄gLived
 && q->
uDNS_öfo
.
Œq
->
NATM≠
) ;

1536 i‡(
«t
->
°©e
 =
NATSèã_E°ablished
 ||Ç©->°©ê=
NATSèã_Legacy
)

1537 
	`DñëeNATP‹tM≠pög
(
m
, 
«t
, 
mDNSNULL
);

1538 
	`FªeNATInfo
(
m
, 
«t
);

1539 
	}
}

1542 #i‡
COMPILER_LIKES_PRAGMA_MARK


1543 #¥agm®
m¨k
 - 
ho°
 
«me
 
™d
 
öãrÁ˚
 
m™agemít


1548 
mDNSloˇl
 
mDNSBoﬁ
 
	$GëSîvi˚T¨gë
(
uDNS_GlobÆInfo
 *
u
, 
AuthRec‹d
 *
§v
, 
domaö«me
 *
d°
)

1550 
uDNS_Ho°«meInfo
 *
hi
 = 
u
->
Ho°«mes
;

1551 ()
§v
;

1553 
d°
->
c
[0] = 0;

1554 
hi
)

1556 i‡(
hi
->
¨v4
 && (hi->¨v4->
uDNS_öfo
.
°©e
 =
ªgSèã_Regi°îed
 || hi->¨v4->uDNS_öfo.°©ê=
ªgSèã_Re‰esh
))

1558 
	`AssignDomaöName
(
d°
, 
hi
->
¨v4
->
ª§ec
.
«me
);

1559  
mDNSåue
;

1561 i‡(
hi
->
¨v6
 && (hi->¨v6->
uDNS_öfo
.
°©e
 =
ªgSèã_Regi°îed
 || hi->¨v6->uDNS_öfo.°©ê=
ªgSèã_Re‰esh
))

1563 
	`AssignDomaöName
(
d°
, 
hi
->
¨v4
->
ª§ec
.
«me
);

1564  
mDNSåue
;

1566 
hi
 = hi->
√xt
;

1569 i‡(
u
->
SèticHo°«me
.
c
[0]Ë{ 
	`AssignDomaöName
(
d°
, &u->SèticHo°«me);  
mDNSåue
; }

1570  
mDNSÁl£
;

1571 
	}
}

1573 
mDNSloˇl
 
	$Upd©eSRV
(
mDNS
 *
m
, 
Sîvi˚Rec‹dSë
 *
§s
)

1575 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

1576 
ExåaResour˚Rec‹d
 *
e
;

1583 
domaö«me
 
√wèrgë
;

1584 
domaö«me
 *
cuπ¨gë
 = &
§s
->
RR_SRV
.
ª§ec
.
rd©a
->
u
.
§v
.
èrgë
;

1585 
mDNSBoﬁ
 
HaveT¨gë
 = 
	`GëSîvi˚T¨gë
(
u
, &
§s
->
RR_SRV
, &
√wèrgë
);

1586 
mDNSBoﬁ
 
T¨gëCh™ged
 = (
HaveT¨gë
 && 
§s
->
uDNS_öfo
.
°©e
 =
ªgSèã_NoT¨gë
Ë|| (
cuπ¨gë
->
c
[0] && !HaveT¨gëË|| !
	`SameDomaöName
(cuπ¨gë, &
√wèrgë
);

1587 
mDNSBoﬁ
 
HaveZ⁄eD©a
 = 
§s
->
uDNS_öfo
.
ns
.
ù
.
v4
.
NŸAnI¡egî
 ? 
mDNSåue
 : 
mDNSÁl£
;

1594 
NATTøvîßlInfo
 *
«t
 = 
§s
->
uDNS_öfo
.
NATöfo
;

1595 
mDNSIPP‹t
 
p‹t
 = 
§s
->
RR_SRV
.
ª§ec
.
rd©a
->
u
.
§v
.port;

1596 
mDNSBoﬁ
 
NATCh™ged
 = 
mDNSÁl£
;

1597 
mDNSBoﬁ
 
NowBehödNAT
 = 
p‹t
.
NŸAnI¡egî
 && 
	`IsPriv©eV4Addr
(&
u
->
Advîti£dV4
);

1598 
mDNSBoﬁ
 
WîeBehödNAT
 = 
«t
 !
mDNSNULL
;

1599 
mDNSBoﬁ
 
NATRouãrCh™ged
 = 
«t
 &&Ç©->
Rouãr
.
ù
.
v4
.
NŸAnI¡egî
 !
u
->Router.ip.v4.NotAnInteger;

1600 
mDNSBoﬁ
 
P‹tWasM≠≥d
 = 
«t
 && («t->
°©e
 =
NATSèã_E°ablished
 ||Ç©->°©ê=
NATSèã_Legacy
Ë&&Ç©->
PublicP‹t
.
NŸAnI¡egî
 !
p‹t
.NotAnInteger;

1602 i‡(
WîeBehödNAT
 && 
NowBehödNAT
 && 
NATRouãrCh™ged
Ë
NATCh™ged
 = 
mDNSåue
;

1603 i‡(!
NowBehödNAT
 && 
P‹tWasM≠≥d
Ë
NATCh™ged
 = 
mDNSåue
;

1604 i‡(!
WîeBehödNAT
 && 
NowBehödNAT
Ë
NATCh™ged
 = 
mDNSåue
;

1606 i‡(!
T¨gëCh™ged
 && !
NATCh™ged
) ;

1608 
	`debugf
("UpdateSRV (%##s) HadZoneData=%d, TargetChanged=%d, HaveTarget=%d, NowBehindNAT=%d, WereBehindNAT=%d, NATRouterChanged=%d, PortWasMapped=%d",

1609 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
, 
HaveZ⁄eD©a
, 
T¨gëCh™ged
, 
HaveT¨gë
, 
NowBehödNAT
, 
WîeBehödNAT
, 
NATRouãrCh™ged
, 
P‹tWasM≠≥d
);

1611 
§s
->
uDNS_öfo
.
°©e
)

1613 
ªgSèã_FëchögZ⁄eD©a
:

1614 
ªgSèã_C™˚Œed
:

1615 
ªgSèã_DîegPídög
:

1616 
ªgSèã_DîegDe„ºed
:

1617 
ªgSèã_Uƒegi°îed
:

1618 
ªgSèã_NATM≠
:

1619 
ªgSèã_ExåaQueued
:

1624 
ªgSèã_Pídög
:

1625 
ªgSèã_Re‰esh
:

1626 
ªgSèã_Upd©ePídög
:

1628 
§s
->
uDNS_öfo
.
SRVUpd©eDe„ºed
 = 
mDNSåue
;

1631 
ªgSèã_NATEº‹
:

1632 i‡(!
NATCh™ged
) ;

1635 
ªgSèã_NoT¨gë
:

1636 i‡(
HaveT¨gë
)

1638 
	`debugf
("Upd©eSRV: %†£rvi˚ %##s", 
HaveZ⁄eD©a
 ? (
NATCh™ged
 && 
NowBehödNAT
 ? "Sèπög P‹àM≠ f‹" : "Regi°îög"Ë: "Gëtög Z⁄êD©®f‹", 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
);

1639 i‡(!
HaveZ⁄eD©a
)

1641 
§s
->
uDNS_öfo
.
°©e
 = 
ªgSèã_FëchögZ⁄eD©a
;

1642 
	`°¨tGëZ⁄eD©a
(
§s
->
RR_SRV
.
ª§ec
.
«me
, 
m
, 
mDNSåue
, 
mDNSÁl£
, 
£rvi˚Regi°øti⁄CÆlback
, srs);

1646 i‡(
«t
 && (
NATCh™ged
 || !
NowBehödNAT
)Ë{ 
§s
->
uDNS_öfo
.
NATöfo
 = 
mDNSNULL
; 
	`FªeNATInfo
(
m
,Çat); }

1647 i‡(
NATCh™ged
 && 
NowBehödNAT
Ë{ 
§s
->
uDNS_öfo
.
°©e
 = 
ªgSèã_NATM≠
; 
	`SèπNATP‹tM≠
(
m
, srs); }

1648 
	`SídSîvi˚Regi°øti⁄
(
m
, 
§s
);

1653 
ªgSèã_Regi°îed
:

1655 
	`debugf
("Upd©eSRV: SRVÑec‹d ch™ged f‹ sîvi˚ %##†- dîegi°îög (wû»ª-ªgi°î wôhÇew SRV)", 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
);

1656 
e
 = 
§s
->
Exåas
;É;É =É->
√xt
Ëe->
r
.
uDNS_öfo
.
°©e
 = 
ªgSèã_ExåaQueued
;

1657 
§s
->
uDNS_öfo
.
SRVCh™ged
 = 
mDNSåue
;

1658 
	`SídSîvi˚Dîegi°øti⁄
(
m
, 
§s
);

1661 
	}
}

1663 
mDNSloˇl
 
	$Upd©eSRVRec‹ds
(
mDNS
 *
m
)

1665 
Sîvi˚Rec‹dSë
 *
§s
;

1667 
§s
 = 
m
->
uDNS_öfo
.
Sîvi˚Regi°øti⁄s
; srs; sr†§s->
√xt
Ë
	`Upd©eSRV
(m, srs);

1668 
	}
}

1670 
mDNSloˇl
 
	$Ho°«meCÆlback
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
, 
mSètus
 
ªsu…
)

1672 
uDNS_Ho°«meInfo
 *
hi
 = (uDNS_Ho°«meInfÿ*)
º
->
Rec‹dC⁄ãxt
;

1674 i‡(
ªsu…
 =
mSètus_MemFªe
)

1676 i‡(
hi
)

1678 i‡(
hi
->
¨v4
 =
º
Ëhi->¨v4 = 
mDNSNULL
;

1679 i‡(
hi
->
¨v4
 =
º
Ëhi->
¨v6
 = 
mDNSNULL
;

1680 
º
->
Rec‹dC⁄ãxt
 = 
mDNSNULL
;

1681 i‡(!
hi
->
¨v4
 && !hi->
¨v6
Ë
	`u‰ì
(hi);

1683 
	`u‰ì
(
º
);

1687 i‡(
ªsu…
)

1690 i‡(
º
->
ª§ec
.
ºty≥
 =
kDNSTy≥_A
)

1691 
	`LogMsg
("Ho°«meCÆlback: Eº‹ %ld f‹Ñegi°øti⁄ o‡%##†IP %.4a", 
ªsu…
, 
º
->
ª§ec
.
«me
->
c
, &º->ª§ec.
rd©a
->
u
.
ùv4
);

1693 
	`LogMsg
("Ho°«meCÆlback: Eº‹ %ld f‹Ñegi°øti⁄ o‡%##†IP %.16a", 
ªsu…
, 
º
->
ª§ec
.
«me
->
c
, &º->ª§ec.
rd©a
->
u
.
ùv6
);

1694 i‡(!
hi
Ë{ 
	`u‰ì
(
º
); ; }

1695 i‡(
º
->
uDNS_öfo
.
°©e
 !
ªgSèã_Uƒegi°îed
Ë
	`LogMsg
("Error: HostnameCallback invoked withÉrror code forÑecordÇot inÑegState_Unregistered!");

1697 i‡((!
hi
->
¨v4
 || hi->¨v4->
uDNS_öfo
.
°©e
 =
ªgSèã_Uƒegi°îed
) &&

1698 (!
hi
->
¨v6
 || hi->¨v6->
uDNS_öfo
.
°©e
 =
ªgSèã_Uƒegi°îed
))

1701 
º
->
Rec‹dC⁄ãxt
 = (*)
hi
->
SètusC⁄ãxt
;

1702 i‡(
hi
->
SètusCÆlback
)

1703 
hi
->
	`SètusCÆlback
(
m
, 
º
, 
ªsu…
);

1704 
º
->
Rec‹dC⁄ãxt
 = (*)
hi
;

1709 
	`Upd©eSRVRec‹ds
(
m
);

1712 i‡(!
hi
Ë{ 
	`LogMsg
("HostnameCallback invoked with orphanedáddressÑecord"); ; }

1713 i‡(
º
->
ª§ec
.
ºty≥
 =
kDNSTy≥_A
)

1714 
	`LogMsg
("Regi°îed ho°«mê%##†IP %.4a", 
º
->
ª§ec
.
«me
->
c
, &º->ª§ec.
rd©a
->
u
.
ùv4
);

1716 
	`LogMsg
("Regi°îed ho°«mê%##†IP %.16a", 
º
->
ª§ec
.
«me
->
c
, &º->ª§ec.
rd©a
->
u
.
ùv6
);

1718 
º
->
Rec‹dC⁄ãxt
 = (*)
hi
->
SètusC⁄ãxt
;

1719 i‡(
hi
->
SètusCÆlback
)

1720 
hi
->
	`SètusCÆlback
(
m
, 
º
, 
ªsu…
);

1721 
º
->
Rec‹dC⁄ãxt
 = (*)
hi
;

1722 
	}
}

1725 
mDNSloˇl
 
	$Advîti£Ho°«me
(
mDNS
 *
m
, 
uDNS_Ho°«meInfo
 *
h
)

1727 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

1729 i‡(
u
->
Advîti£dV4
.
ù
.
v4
.
NŸAnI¡egî
 && 
h
->
¨v4
->
uDNS_öfo
.
°©e
 =
ªgSèã_Uƒegi°îed
)

1731 i‡(
	`IsPriv©eV4Addr
(&
u
->
Advîti£dV4
))

1732 
	`SèπGëPublicAddr
(
m
, 
h
->
¨v4
);

1735 
	`LogMsg
("Advîtisög %##†IP %.4a", 
h
->
¨v4
->
ª§ec
.
«me
->
c
, &
u
->
Advîti£dV4
.
ù
.
v4
);

1736 
	`uDNS_Regi°îRec‹d
(
m
, 
h
->
¨v4
);

1739 i‡(
u
->
Advîti£dV6
.
ù
.
v6
.
b
[0] && 
h
->
¨v6
->
uDNS_öfo
.
°©e
 =
ªgSèã_Uƒegi°îed
)

1741 
	`LogMsg
("Advîtisög %##†IP %.16a", 
h
->
¨v4
->
ª§ec
.
«me
->
c
, &
u
->
Advîti£dV6
.
ù
.
v6
);

1742 
	`uDNS_Regi°îRec‹d
(
m
, 
h
->
¨v6
);

1744 
	}
}

1746 
mDNSloˇl
 
	$FoundSèticHo°«me
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *
que°i⁄
, c⁄° 
Resour˚Rec‹d
 *c⁄° 
™swî
, 
mDNSBoﬁ
 
AddRec‹d
)

1748 c⁄° 
domaö«me
 *
pkäame
 = &
™swî
->
rd©a
->
u
.
«me
;

1749 
domaö«me
 *
°‹ed«me
 = &
m
->
uDNS_öfo
.
SèticHo°«me
;

1750 
uDNS_Ho°«meInfo
 *
h
 = 
m
->
uDNS_öfo
.
Ho°«mes
;

1752 ()
que°i⁄
;

1754 
	`debugf
("FoundSèticHo°«me: %##†-> %##†(%s)", 
que°i⁄
->
q«me
.
c
, 
™swî
->
rd©a
->
u
.
«me
.c, 
AddRec‹d
 ? "added" : "removed");

1755 i‡(
AddRec‹d
 && !
	`SameDomaöName
(
pkäame
, 
°‹ed«me
))

1757 
	`AssignDomaöName
(
°‹ed«me
, 
pkäame
);

1758 
h
)

1760 i‡((
h
->
¨v4
 && (h->¨v4->
uDNS_öfo
.
°©e
 =
ªgSèã_FëchögZ⁄eD©a
 || h->¨v4->uDNS_öfo.°©ê=
ªgSèã_Pídög
 || h->¨v4->uDNS_öfo.°©ê=
ªgSèã_NATM≠
)) ||

1761 (
h
->
¨v6
 && (h->¨v6->
uDNS_öfo
.
°©e
 =
ªgSèã_FëchögZ⁄eD©a
 || h->¨v6->uDNS_öfo.°©ê=
ªgSèã_Pídög
)))

1764 
m
->
uDNS_öfo
.
DñaySRVUpd©e
 = 
mDNSåue
;

1765 
m
->
uDNS_öfo
.
NextSRVUpd©e
 = 
	`mDNSPœtf‹mTimeNow
(mË+ (5 * 
mDNSPœtf‹mO√Sec⁄d
);

1768 
h
 = h->
√xt
;

1770 
	`Upd©eSRVRec‹ds
(
m
);

1772 i‡(!
AddRec‹d
 && 
	`SameDomaöName
(
pkäame
, 
°‹ed«me
))

1774 
°‹ed«me
->
c
[0] = 0;

1775 
	`Upd©eSRVRec‹ds
(
m
);

1777 
	}
}

1779 
mDNSloˇl
 
	$GëSèticHo°«me
(
mDNS
 *
m
)

1781 
buf
[
MAX_ESCAPED_DOMAIN_NAME
];

1782 
DNSQue°i⁄
 *
q
 = &
m
->
uDNS_öfo
.
Revî£M≠
;

1783 
mDNSu8
 *
ù
 = 
m
->
uDNS_öfo
.
Advîti£dV4
.ù.
v4
.
b
;

1784 
mSètus
 
îr
;

1786 i‡(
m
->
uDNS_öfo
.
Revî£M≠A˘ive
)

1788 
	`uDNS_St›Quîy
(
m
, 
q
);

1789 
m
->
uDNS_öfo
.
Revî£M≠A˘ive
 = 
mDNSÁl£
;

1792 
m
->
uDNS_öfo
.
SèticHo°«me
.
c
[0] = 0;

1793 i‡(!
m
->
uDNS_öfo
.
Advîti£dV4
.
ù
.
v4
.
NŸAnI¡egî
) ;

1794 
	`ubzîo
(
q
, (*q));

1795 
	`mDNS_¢¥ötf
(
buf
, 
MAX_ESCAPED_DOMAIN_NAME
, "%d.%d.%d.%d.ö-addr.¨∑.", 
ù
[3], ip[2], ip[1], ip[0]);

1796 i‡(!
	`MakeDomaöNameFromDNSNameSåög
(&
q
->
q«me
, 
buf
)Ë{ 
	`LogMsg
("Error: GetStaticHostname - badÇame %s", buf); ; }

1798 
q
->
I¡îÁ˚ID
 = 
mDNSI¡îÁ˚_Any
;

1799 
q
->
T¨gë
 = 
zîoAddr
;

1800 
q
->
qty≥
 = 
kDNSTy≥_PTR
;

1801 
q
->
q˛ass
 = 
kDNSCœss_IN
;

1802 
q
->
L⁄gLived
 = 
mDNSÁl£
;

1803 
q
->
Ex≥˘Unique
 = 
mDNSÁl£
;

1804 
q
->
F‹˚MCa°
 = 
mDNSÁl£
;

1805 
q
->
Que°i⁄CÆlback
 = 
FoundSèticHo°«me
;

1806 
q
->
Que°i⁄C⁄ãxt
 = 
mDNSNULL
;

1808 
îr
 = 
	`uDNS_SèπQuîy
(
m
, 
q
);

1809 i‡(
îr
Ë
	`LogMsg
("Error: GetStaticHostname - StartQueryÑeturnedÉrror %d",Érr);

1810 
m
->
uDNS_öfo
.
Revî£M≠A˘ive
 = 
mDNSåue
;

1811 
	}
}

1813 
mDNSloˇl
 
	$AssignHo°«meInfoAuthRec‹d
(
mDNS
 *
m
, 
uDNS_Ho°«meInfo
 *
hi
, 
ty≥
)

1815 
AuthRec‹d
 **
d°
 = (
ty≥
 =
mDNSAddrTy≥_IPv4
 ? &
hi
->
¨v4
 : &hi->
¨v6
);

1816 
AuthRec‹d
 *
¨
 = 
	`umÆloc
((*ar));

1817 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

1819 i‡(
ty≥
 !
mDNSAddrTy≥_IPv4
 &&Åy≥ !
mDNSAddrTy≥_IPv6
Ë{ 
	`LogMsg
("ERROR: AssignHostnameInfoAuthRecord - badÅype %d",Åype); ; }

1820 i‡(!
¨
Ë{ 
	`LogMsg
("ERROR: AssignHostnameInfoAuthRecord - malloc"); ; }

1822 
	`mDNS_SëupResour˚Rec‹d
(
¨
, 
mDNSNULL
, 0, 
ty≥
 =
mDNSAddrTy≥_IPv4
 ? 
kDNSTy≥_A
 : 
kDNSTy≥_AAAA
, 1, 
kDNSRec‹dTy≥KnownUnique
, 
Ho°«meCÆlback
, 
hi
);

1823 
	`AssignDomaöName
(
¨
->
ª§ec
.
«me
, &
hi
->
fqdn
);

1826 i‡(
ty≥
 =
mDNSAddrTy≥_IPv4
 && 
u
->
Advîti£dV4
.
ù
.
v4
.
NŸAnI¡egî
)

1828 i‡(
u
->
M≠≥dV4
.
ù
.
v4
.
NŸAnI¡egî
Ë
¨
->
ª§ec
.
rd©a
->u.
ùv4
 = u->MappedV4.ip.v4;

1829 
¨
->
ª§ec
.
rd©a
->
u
.
ùv4
 = u->
Advîti£dV4
.
ù
.
v4
;

1831 i‡(
ty≥
 =
mDNSAddrTy≥_IPv6
 && 
u
->
Advîti£dV6
.
ù
.
v6
.
b
[0])

1833 
¨
->
ª§ec
.
rd©a
->
u
.
ùv6
 = u->
Advîti£dV6
.
ù
.
v6
;

1836 
¨
->
uDNS_öfo
.
°©e
 = 
ªgSèã_Uƒegi°îed
;

1838 i‡(*
d°
)

1840 
	`LogMsg
("ERROR: AssignHo°«meInfoAuthRec‹d - ovîwrôög %†AuthRec", 
ty≥
 =
mDNSAddrTy≥_IPv4
 ? "IPv4" : "IPv6");

1841 
	`u∆ökAR
(&
u
->
Rec‹dRegi°øti⁄s
, *
d°
);

1842 (*
d°
)->
Rec‹dC⁄ãxt
 = 
mDNSNULL
;

1845 *
d°
 = 
¨
;

1846 
	}
}

1851 
mDNSloˇl
 
	$Upd©eHo°«meRegi°øti⁄s
(
mDNS
 *
m
)

1853 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

1854 
uDNS_Ho°«meInfo
 *
i
;

1856 
i
 = 
u
->
Ho°«mes
; i; i = i->
√xt
)

1858 i‡(
i
->
¨v4
 && i->¨v4->
uDNS_öfo
.
°©e
 !
ªgSèã_Uƒegi°îed
 &&

1859 
i
->
¨v4
->
ª§ec
.
rd©a
->
u
.
ùv4
.
NŸAnI¡egî
 !u->
Advîti£dV4
.
ù
.
v4
.NotAnInteger &&

1860 
i
->
¨v4
->
ª§ec
.
rd©a
->
u
.
ùv4
.
NŸAnI¡egî
 !=u->
M≠≥dV4
.
ù
.
v4
.NotAnInteger)

1862 
	`uDNS_Dîegi°îRec‹d
(
m
, 
i
->
¨v4
);

1863 
i
->
¨v4
 = 
mDNSNULL
;

1865 i‡(
i
->
¨v6
 && !
	`mDNSPœtf‹mMemSame
(i->¨v6->
ª§ec
.
rd©a
->
u
.
ùv6
.
b
, u->
Advîti£dV6
.
ù
.
v6
.b, 16Ë&& i->¨v6->
uDNS_öfo
.
°©e
 !
ªgSèã_Uƒegi°îed
)

1867 
	`uDNS_Dîegi°îRec‹d
(
m
, 
i
->
¨v6
);

1868 
i
->
¨v6
 = 
mDNSNULL
;

1871 i‡(!
i
->
¨v4
 && 
u
->
Advîti£dV4
.
ù
.
v4
.
NŸAnI¡egî
Ë
	`AssignHo°«meInfoAuthRec‹d
(
m
, i, 
mDNSAddrTy≥_IPv4
);

1872 i‡(
i
->
¨v4
 && i->¨v4->
uDNS_öfo
.
°©e
 =
ªgSèã_Uƒegi°îed
Ëi->¨v4->
ª§ec
.
rd©a
->
u
.
ùv4
 = u->
Advîti£dV4
.
ù
.
v4
;

1873 i‡(!
i
->
¨v6
 && 
u
->
Advîti£dV6
.
ù
.
v6
.
b
[0]Ë
	`AssignHo°«meInfoAuthRec‹d
(
m
, i, 
mDNSAddrTy≥_IPv6
);

1874 i‡(
i
->
¨v6
 &&i->¨v6->
uDNS_öfo
.
°©e
 =
ªgSèã_Uƒegi°îed
Ëi->¨v6->
ª§ec
.
rd©a
->
u
.
ùv6
 = u->
Advîti£dV6
.
ù
.
v6
;

1876 
	`Advîti£Ho°«me
(
m
, 
i
);

1878 
	}
}

1880 
mDNSexp‹t
 
	$mDNS_AddDynDNSHo°Name
(
mDNS
 *
m
, c⁄° 
domaö«me
 *
fqdn
, 
mDNSRec‹dCÆlback
 *
SètusCÆlback
, c⁄° *
SètusC⁄ãxt
)

1882 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

1883 
uDNS_Ho°«meInfo
 *
±r
, *
√w
;

1885 
	`mDNS_Lock
(
m
);

1888 
±r
 = 
u
->
Ho°«mes
;Öå;Öå =Öå->
√xt
)

1890 i‡(
	`SameDomaöName
(
fqdn
, &
±r
->fqdn))

1891 { 
	`LogMsg
("Ho° Domaö %##†Æªady i¿li°", 
fqdn
->
c
); 
exô
; }

1895 
√w
 = 
	`umÆloc
((*new));

1896 i‡(!
√w
Ë{ 
	`LogMsg
("ERROR: mDNS_AddDynDNSHo°«mê- mÆloc"); 
exô
; }

1897 
	`ubzîo
(
√w
, (*new));

1898 
√w
->
√xt
 = 
u
->
Ho°«mes
;

1899 
u
->
Ho°«mes
 = 
√w
;

1901 
	`AssignDomaöName
(&
√w
->
fqdn
, fqdn);

1902 
√w
->
SètusCÆlback
 = StatusCallback;

1903 
√w
->
SètusC⁄ãxt
 = StatusContext;

1905 i‡(
u
->
Advîti£dV4
.
ù
.
v4
.
NŸAnI¡egî
Ë
	`AssignHo°«meInfoAuthRec‹d
(
m
, 
√w
, 
mDNSAddrTy≥_IPv4
);

1906 
√w
->
¨v4
 = 
mDNSNULL
;

1907 i‡(
u
->
Advîti£dV6
.
ù
.
v6
.
b
[0]Ë
	`AssignHo°«meInfoAuthRec‹d
(
m
, 
√w
, 
mDNSAddrTy≥_IPv6
);

1908 
√w
->
¨v6
 = 
mDNSNULL
;

1910 i‡(
u
->
Advîti£dV6
.
ù
.
v6
.
b
[0] || u->
Advîti£dV4
.ù.
v4
.
NŸAnI¡egî
Ë
	`Advîti£Ho°«me
(
m
, 
√w
);

1912 
exô
:

1913 
	`mDNS_U∆ock
(
m
);

1914 
	}
}

1916 
mDNSexp‹t
 
	$mDNS_RemoveDynDNSHo°Name
(
mDNS
 *
m
, c⁄° 
domaö«me
 *
fqdn
)

1918 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

1919 
uDNS_Ho°«meInfo
 **
±r
 = &
u
->
Ho°«mes
;

1921 
	`mDNS_Lock
(
m
);

1923 *
±r
 && !
	`SameDomaöName
(
fqdn
, &(*±r)->fqdn)Ë±∏&(*±r)->
√xt
;

1924 i‡(!*
±r
Ë
	`LogMsg
("mDNS_RemoveDynDNSHo°Name:Çÿsuch domaö«mê%##s", 
fqdn
->
c
);

1927 
uDNS_Ho°«meInfo
 *
hi
 = *
±r
;

1928 *
±r
 = (*±r)->
√xt
;

1929 i‡(
hi
->
¨v4
)

1931 
hi
->
¨v4
->
Rec‹dC⁄ãxt
 = 
mDNSNULL
;

1932 i‡(
hi
->
¨v4
->
uDNS_öfo
.
°©e
 !
ªgSèã_Uƒegi°îed
Ë
	`uDNS_Dîegi°îRec‹d
(
m
, hi->arv4);

1933 { 
	`u‰ì
(
hi
->
¨v4
); hi->¨v4 = 
mDNSNULL
; }

1935 i‡(
hi
->
¨v6
)

1937 
hi
->
¨v6
->
Rec‹dC⁄ãxt
 = 
mDNSNULL
;

1938 i‡(
hi
->
¨v6
->
uDNS_öfo
.
°©e
 !
ªgSèã_Uƒegi°îed
Ë
	`uDNS_Dîegi°îRec‹d
(
m
, hi->arv6);

1939 { 
	`u‰ì
(
hi
->
¨v6
); hi->¨v6 = 
mDNSNULL
; }

1941 
	`u‰ì
(
hi
);

1943 
	`Upd©eSRVRec‹ds
(
m
);

1944 
	`mDNS_U∆ock
(
m
);

1945 
	}
}

1947 
mDNSexp‹t
 
	$mDNS_SëPrim¨yI¡îÁ˚Info
(
mDNS
 *
m
, c⁄° 
mDNSAddr
 *
v4addr
, c⁄° mDNSAdd∏*
v6addr
, c⁄° mDNSAdd∏*
rouãr
)

1949 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

1950 
mDNSBoﬁ
 
v4Ch™ged
, 
v6Ch™ged
, 
RouãrCh™ged
;

1952 i‡(
v4addr
 && v4addr->
ty≥
 !
mDNSAddrTy≥_IPv4
Ë{ 
	`LogMsg
("mDNS_SetPrimaryInterfaceInfo V4áddress - incorrectÅype. Discarding."); ; }

1953 i‡(
v6addr
 && v6addr->
ty≥
 !
mDNSAddrTy≥_IPv6
Ë{ 
	`LogMsg
("mDNS_SetPrimaryInterfaceInfo V6áddress - incorrectÅype. Discarding."); ; }

1954 i‡(
rouãr
 &&Ñouãr->
ty≥
 !
mDNSAddrTy≥_IPv4
Ë{ 
	`LogMsg
("mDNS_SetPrimaryInterfaceInfoÖassedÇon-V4Ñouter. Discarding."); ; }

1956 
	`mDNS_Lock
(
m
);

1958 
v4Ch™ged
 = (
v4addr
 ? v4addr->
ù
.
v4
.
NŸAnI¡egî
 : 0Ë!
u
->
Advîti£dV4
.ip.v4.NotAnInteger;

1959 
v6Ch™ged
 = 
v6addr
 ? !
	`mDNSPœtf‹mMemSame
(v6addr, &
u
->
Advîti£dV6
, (*v6addr)Ë: (u->Advîti£dV6.
ù
.
v6
.
b
[0] != 0);

1960 
RouãrCh™ged
 = (
rouãr
 ?Ñouãr->
ù
.
v4
.
NŸAnI¡egî
 : 0Ë!
u
->
Rouãr
.ip.v4.NotAnInteger;

1962 #i‡
MDNS_DEBUGMSGS


1963 i‡(
v4addr
 && (
v4Ch™ged
 || 
RouãrCh™ged
))

1964 
	`LogMsg
("mDNS_SetPrimaryInterfaceInfo:áddress changed from %d.%d.%d.%dÅo %d.%d.%d.%d:%d",

1965 
u
->
Advîti£dV4
.
ù
.
v4
.
b
[0], u->AdvertisedV4.ip.v4.b[1], u->AdvertisedV4.ip.v4.b[2], u->AdvertisedV4.ip.v4.b[3],

1966 
v4addr
->
ù
.
v4
.
b
[0], v4addr->ip.v4.b[1], v4addr->ip.v4.b[2], v4addr->ip.v4.b[3]);

1969 i‡((
v4Ch™ged
 || 
RouãrCh™ged
Ë&& 
u
->
M≠≥dV4
.
ù
.
v4
.
NŸAnI¡egî
) u->MappedV4.ip.v4.NotAnInteger = 0;

1970 i‡(
v4addr
Ë
u
->
Advîti£dV4
 = *v4addr; u->Advîti£dV4.
ù
.
v4
.
NŸAnI¡egî
 = 0;

1971 i‡(
v6addr
Ë
u
->
Advîti£dV6
 = *v6addr; 
	`ubzîo
(u->Advîti£dV6.
ù
.
v6
.
b
, 16);

1972 i‡(
rouãr
Ë
u
->
Rouãr
 = *rouãr; u->Rouãr.
ù
.
v4
.
NŸAnI¡egî
 = 0;

1975 i‡((
v4Ch™ged
 || 
RouãrCh™ged
 || 
v6Ch™ged
Ë&& 
v4addr
)

1978 
	`Upd©eHo°«meRegi°øti⁄s
(
m
);

1979 
	`Upd©eSRVRec‹ds
(
m
);

1980 
	`GëSèticHo°«me
(
m
);

1983 
	`mDNS_U∆ock
(
m
);

1984 
	}
}

1987 #i‡
COMPILER_LIKES_PRAGMA_MARK


1988 #¥agm®
m¨k
 - 
Incomög
 
Mesßge
 
Pro˚ssög


1991 
mDNSloˇl
 
mDNSBoﬁ
 
	$kaLi°C⁄èösAnswî
(
DNSQue°i⁄
 *
que°i⁄
, 
CacheRec‹d
 *
º
)

1993 
CacheRec‹d
 *
±r
;

1995 
±r
 = 
que°i⁄
->
uDNS_öfo
.
knownAnswîs
;Öå;Öå =Öå->
√xt
)

1996 i‡(
	`SameResour˚Rec‹d
(&
±r
->
ª§ec
, &
º
->ª§ec)Ë 
mDNSåue
;

1998  
mDNSÁl£
;

1999 
	}
}

2002 
mDNSloˇl
 
	$ªmoveKnownAnswî
(
DNSQue°i⁄
 *
que°i⁄
, 
CacheRec‹d
 *
º
)

2004 
CacheRec‹d
 *
±r
, *
¥ev
 = 
mDNSNULL
;

2006 
±r
 = 
que°i⁄
->
uDNS_öfo
.
knownAnswîs
;Öå;Öå =Öå->
√xt
)

2008 i‡(
	`SameResour˚Rec‹d
(&
±r
->
ª§ec
, &
º
->resrec))

2010 i‡(
¥ev
Ë¥ev->
√xt
 = 
±r
->next;

2011 
que°i⁄
->
uDNS_öfo
.
knownAnswîs
 = 
±r
->
√xt
;

2012 
	`u‰ì
(
±r
);

2015 
¥ev
 = 
±r
;

2017 
	`LogMsg
("removeKnownAnswer() called forÑecordÇot in KAÜist");

2018 
	}
}

2021 
mDNSloˇl
 
	$addKnownAnswî
(
DNSQue°i⁄
 *
que°i⁄
, c⁄° 
CacheRec‹d
 *
º
)

2023 
CacheRec‹d
 *
√wCR
 = 
mDNSNULL
;

2024 
mDNSu32
 
size
;

2026 
size
 = (
CacheRec‹d
Ë+ 
º
->
ª§ec
.
rdÀngth
 - 
I∆öeCacheRDSize
;

2027 
√wCR
 = (
CacheRec‹d
 *)
	`umÆloc
(
size
);

2028 i‡(!
√wCR
Ë{ 
	`LogMsg
("ERROR:áddKnownAnswer - malloc"); ; }

2029 
	`umem˝y
(
√wCR
, 
º
, 
size
);

2030 
√wCR
->
ª§ec
.
rd©a
 = (
RD©a
*)&√wCR->
rd©a°‹age
;

2031 
√wCR
->
ª§ec
.
rd©a
->
MaxRDLígth
 = 
º
->ª§ec.
rdÀngth
;

2032 
√wCR
->
ª§ec
.
«me
 = &
que°i⁄
->
q«me
;

2033 
√wCR
->
√xt
 = 
que°i⁄
->
uDNS_öfo
.
knownAnswîs
;

2034 
que°i⁄
->
uDNS_öfo
.
knownAnswîs
 = 
√wCR
;

2035 
	}
}

2037 
mDNSloˇl
 
	$dîiveGoodbyes
(
mDNS
 * c⁄° 
m
, 
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, 
DNSQue°i⁄
 *
que°i⁄
)

2039 c⁄° 
mDNSu8
 *
±r
;

2040 
i
;

2041 
CacheRec‹d
 *
Âå
, *
ka
, *
¸
, *
™swîs
 = 
mDNSNULL
, *
¥ev
 = mDNSNULL;

2042 
L¨geCacheRec‹d
 *
l¸
;

2044 i‡(
que°i⁄
 !
m
->
uDNS_öfo
.
CuºítQuîy
Ë{ 
	`LogMsg
("ERROR: deriveGoodbyes called without CurrentQuery set!"); ; }

2046 
±r
 = 
	`LoˇãAnswîs
(
msg
, 
íd
);

2047 i‡(!
±r
Ë
pkt_îr‹
;

2049 i‡(!
msg
->
h
.
numAnswîs
)

2052 
ka
 = 
que°i⁄
->
uDNS_öfo
.
knownAnswîs
;

2053 
ka
)

2055 
	`debugf
("dîivög goodbyêf‹ %##s", 
ka
->
ª§ec
.
«me
->
c
);

2057 
m
->
mDNS_ªíå™cy
++;

2058 
que°i⁄
->
	`Que°i⁄CÆlback
(
m
, que°i⁄, &
ka
->
ª§ec
, 
mDNSÁl£
);

2059 
m
->
mDNS_ªíå™cy
--;

2063 i‡(
que°i⁄
 !
m
->
uDNS_öfo
.
CuºítQuîy
)

2065 
	`debugf
("deriveGoodbyes - questionÑemoved via callback.Ñeturning.");

2068 
Âå
 = 
ka
;

2069 
ka
 = ka->
√xt
;

2070 
	`u‰ì
(
Âå
);

2072 
que°i⁄
->
uDNS_öfo
.
knownAnswîs
 = 
mDNSNULL
;

2077 
i
 = 0; i < 
msg
->
h
.
numAnswîs
; i++)

2079 
l¸
 = (
L¨geCacheRec‹d
 *)
	`umÆloc
((LargeCacheRecord));

2080 i‡(!
l¸
Ë
mÆloc_îr‹
;

2081 
	`ubzîo
(
l¸
, (
L¨geCacheRec‹d
));

2082 
±r
 = 
	`GëL¨geResour˚Rec‹d
(
m
, 
msg
,Öå, 
íd
, 0, 
kDNSRec‹dTy≥PackëAns
, 
l¸
);

2083 i‡(!
±r
Ë
pkt_îr‹
;

2084 
¸
 = &
l¸
->
r
;

2085 i‡(
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
¸
->
ª§ec
, 
que°i⁄
))

2087 
¸
->
√xt
 = 
™swîs
;

2088 
™swîs
 = 
¸
;

2090 
	`u‰ì
(
¸
);

2094 
ka
 = 
que°i⁄
->
uDNS_öfo
.
knownAnswîs
;

2095 
ka
)

2097 
¸
 = 
™swîs
; cr; c∏¸->
√xt
)

2098 { i‡(
	`SameResour˚Rec‹d
(&
ka
->
ª§ec
, &
¸
->resrec)) ; }

2099 i‡(!
¸
)

2102 i‡(
¥ev
Ë¥ev->
√xt
 = 
ka
->next;

2103 
que°i⁄
->
uDNS_öfo
.
knownAnswîs
 = 
ka
->
√xt
;

2104 
	`debugf
("dîivög goodbyêf‹ %##s", 
ka
->
ª§ec
.
«me
->
c
);

2105 
m
->
mDNS_ªíå™cy
++;

2106 
que°i⁄
->
	`Que°i⁄CÆlback
(
m
, que°i⁄, &
ka
->
ª§ec
, 
mDNSÁl£
);

2107 
m
->
mDNS_ªíå™cy
--;

2111 i‡(
que°i⁄
 !
m
->
uDNS_öfo
.
CuºítQuîy
)

2113 
	`debugf
("deriveGoodbyes - questionÑemoved via callback.Ñeturning.");

2116 
Âå
 = 
ka
;

2117 
ka
 = ka->
√xt
;

2118 
	`u‰ì
(
Âå
);

2122 
¥ev
 = 
ka
;

2123 
ka
 = ka->
√xt
;

2128 
¸
 = 
™swîs
;

2129 
¸
Ë{ 
Âå
 = cr; c∏¸->
√xt
; 
	`u‰ì
(fptr); }

2133 
pkt_îr‹
:

2134 
	`LogMsg
("ERROR: deriveGoodbyes -Ñeceived malformedÑesponseÅo query for %##s (%d)",

2135 
que°i⁄
->
q«me
.
c
, que°i⁄->
qty≥
);

2138 
mÆloc_îr‹
:

2139 
	`LogMsg
("ERROR: Malloc");

2140 
	}
}

2142 
mDNSloˇl
 
	$pktRe•⁄£HndÃ
(
mDNS
 * c⁄° 
m
, 
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, 
DNSQue°i⁄
 *
que°i⁄
, 
mDNSBoﬁ
 
Œq
)

2144 c⁄° 
mDNSu8
 *
±r
;

2145 
i
;

2146 
CacheRec‹d
 *
¸
 = &
m
->
ªc
.
r
;

2147 
mDNSBoﬁ
 
goodbye
, 
öKALi°
;

2148 
fﬁlowedCNames
 = 0;

2149 c⁄° 
maxCNames
 = 5;

2150 
LLQ_Info
 *
ŒqInfo
 = 
que°i⁄
->
uDNS_öfo
.
Œq
;

2151 
domaö«me
 
‹ig«me
;

2152 
‹ig«me
.
c
[0] = 0;

2154 i‡(
que°i⁄
 !
m
->
uDNS_öfo
.
CuºítQuîy
)

2155 { 
	`LogMsg
("ERROR:ÖktResponseHdnlr called without CurrentQueryÖtr set!"); ; }

2157 i‡(
que°i⁄
->
uDNS_öfo
.
Answîed
 =0 && 
msg
->
h
.
numAnswîs
 =0 && !
Œq
)

2160 
que°i⁄
->
uDNS_öfo
.
Answîed
 = 
mDNSåue
;

2163 
¸
->
ª§ec
.
Rec‹dTy≥
 = 
kDNSRec‹dTy≥Uƒegi°îed
;

2164 
¸
->
ª§ec
.
I¡îÁ˚ID
 = 
mDNSNULL
;

2165 
¸
->
ª§ec
.
«me
 = &
que°i⁄
->
q«me
;

2166 
¸
->
ª§ec
.
ºty≥
 = 
que°i⁄
->
qty≥
;

2167 
¸
->
ª§ec
.
º˛ass
 = 
que°i⁄
->
q˛ass
;

2168 
¸
->
ª§ec
.
º‹igöÆâl
 = 1;

2169 
¸
->
ª§ec
.
rdÀngth
 = 0;

2170 
¸
->
ª§ec
.
rde°im©e
 = 0;

2171 
¸
->
ª§ec
.
«mehash
 = 0;

2172 
¸
->
ª§ec
.
«mehash
 = 0;

2173 
¸
->
ª§ec
.
rd©a
 = (
RD©a
*)&¸->
rd©a°‹age
;

2174 
¸
->
ª§ec
.
rd©a
->
MaxRDLígth
 = cr->ª§ec.
rdÀngth
;

2177 
m
->
mDNS_ªíå™cy
++;

2178 
que°i⁄
->
	`Que°i⁄CÆlback
(
m
, que°i⁄, &
¸
->
ª§ec
, 0);

2179 
m
->
mDNS_ªíå™cy
--;

2183 
m
->
ªc
.
r
.
ª§ec
.
Rec‹dTy≥
 = 0;

2184 i‡(
que°i⁄
 !
m
->
uDNS_öfo
.
CuºítQuîy
)

2186 
	`debugf
("pktResponseHndlr - CurrentQuery changed by QuestionCallback -Ñeturning.");

2191 
que°i⁄
->
uDNS_öfo
.
Answîed
 = 
mDNSåue
;

2193 
±r
 = 
	`LoˇãAnswîs
(
msg
, 
íd
);

2194 i‡(!
±r
Ë
pkt_îr‹
;

2196 
i
 = 0; i < 
msg
->
h
.
numAnswîs
; i++)

2198 
±r
 = 
	`GëL¨geResour˚Rec‹d
(
m
, 
msg
,Öå, 
íd
, 0, 
kDNSRec‹dTy≥PackëAns
, &m->
ªc
);

2199 i‡(!
±r
Ë
pkt_îr‹
;

2200 i‡(
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
¸
->
ª§ec
, 
que°i⁄
))

2202 
goodbye
 = 
Œq
 ? ((
mDNSs32
)
¸
->
ª§ec
.
º‹igöÆâl
 =-1Ë: 
mDNSÁl£
;

2203 i‡(
¸
->
ª§ec
.
ºty≥
 =
kDNSTy≥_CNAME
)

2205 i‡(
fﬁlowedCNames
 > (
maxCNames
 - 1)Ë
	`LogMsg
("Eº‹:Åoÿm™y CNAMEÑe„øl†f‹ que°i⁄ %##s", &
‹ig«me
);

2208 
	`debugf
("Fﬁlowög c«mê%##†-> %##s", 
que°i⁄
->
q«me
.
c
, 
¸
->
ª§ec
.
rd©a
->
u
.
«me
.c);

2209 i‡(
que°i⁄
->
Rëu∫CNAME
)

2211 
m
->
mDNS_ªíå™cy
++;

2212 
que°i⁄
->
	`Que°i⁄CÆlback
(
m
, que°i⁄, &
¸
->
ª§ec
, !
goodbye
);

2213 
m
->
mDNS_ªíå™cy
--;

2217 i‡(
que°i⁄
 !
m
->
uDNS_öfo
.
CuºítQuîy
)

2219 
m
->
ªc
.
r
.
ª§ec
.
Rec‹dTy≥
 = 0;

2220 
	`debugf
("pktResponseHndlr - CurrentQuery changed by QuestionCallback -Ñeturning.");

2224 
	`AssignDomaöName
(&
‹ig«me
, &
que°i⁄
->
q«me
);

2225 
	`AssignDomaöName
(&
que°i⁄
->
q«me
, &
¸
->
ª§ec
.
rd©a
->
u
.
«me
);

2226 
que°i⁄
->
q«mehash
 = 
	`DomaöNameHashVÆue
(&que°i⁄->
q«me
);

2227 
fﬁlowedCNames
++;

2228 
i
 = -1;

2229 
±r
 = 
	`LoˇãAnswîs
(
msg
, 
íd
);

2230 
m
->
ªc
.
r
.
ª§ec
.
Rec‹dTy≥
 = 0;

2235 
öKALi°
 = 
	`kaLi°C⁄èösAnswî
(
que°i⁄
, 
¸
);

2237 i‡((
goodbye
 && !
öKALi°
) || (!goodbye && inKAList))

2239 
m
->
ªc
.
r
.
ª§ec
.
Rec‹dTy≥
 = 0;

2242 i‡(!
öKALi°
Ë
	`addKnownAnswî
(
que°i⁄
, 
¸
);

2243 i‡(
goodbye
Ë
	`ªmoveKnownAnswî
(
que°i⁄
, 
¸
);

2244 
m
->
mDNS_ªíå™cy
++;

2245 
que°i⁄
->
	`Que°i⁄CÆlback
(
m
, que°i⁄, &
¸
->
ª§ec
, !
goodbye
);

2246 
m
->
mDNS_ªíå™cy
--;

2247 i‡(
que°i⁄
 !
m
->
uDNS_öfo
.
CuºítQuîy
)

2249 
m
->
ªc
.
r
.
ª§ec
.
Rec‹dTy≥
 = 0;

2250 
	`debugf
("pktResponseHndlr - CurrentQuery changed by QuestionCallback -Ñeturning");

2255 
m
->
ªc
.
r
.
ª§ec
.
Rec‹dTy≥
 = 0;

2258 i‡(!
Œq
 || 
ŒqInfo
->
°©e
 =
LLQ_Pﬁl
 ||ÜlqInfo->
dîiveRemovesOnResume
)

2260 
	`dîiveGoodbyes
(
m
, 
msg
, 
íd
,
que°i⁄
);

2261 i‡(
Œq
 && 
ŒqInfo
->
dîiveRemovesOnResume
ËŒqInfo->dîiveRemovesOnResumê
mDNSÁl£
;

2268 i‡(
Œq
 && 
ŒqInfo
->
°©e
 =
LLQ_Pﬁl
 &&ÜlqInfo->
£rvP‹t
.
NŸAnI¡egî
Ë
que°i⁄
->
ThisQI¡îvÆ
 = 
LLQ_POLL_INTERVAL
;

2269 i‡(
que°i⁄
->
ThisQI¡îvÆ
 < 
MAX_UCAST_POLL_INTERVAL
) question->ThisQInterval = MAX_UCAST_POLL_INTERVAL;

2272 
pkt_îr‹
:

2273 
	`LogMsg
("ERROR:ÖktResponseHndlr -Ñeceived malformedÑesponseÅo query for %##s (%d)",

2274 
que°i⁄
->
q«me
.
c
, que°i⁄->
qty≥
);

2276 
	}
}

2278 
mDNSloˇl
 
	$sim∂eRe•⁄£HndÃ
(
mDNS
 * c⁄° 
m
, 
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, 
DNSQue°i⁄
 *
que°i⁄
, *
c⁄ãxt
)

2280 ()
c⁄ãxt
;

2281 
	`pktRe•⁄£HndÃ
(
m
, 
msg
, 
íd
, 
que°i⁄
, 
mDNSÁl£
);

2282 
	}
}

2284 
mDNSloˇl
 
	$ŒqRe•⁄£HndÃ
(
mDNS
 * c⁄° 
m
, 
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, 
DNSQue°i⁄
 *
que°i⁄
, *
c⁄ãxt
)

2286 ()
c⁄ãxt
;

2287 
	`pktRe•⁄£HndÃ
(
m
, 
msg
, 
íd
, 
que°i⁄
, 
mDNSåue
);

2288 
	}
}

2290 
mDNSloˇl
 
mSètus
 
	$P¨£TSIGEº‹
(
mDNS
 *
m
, c⁄° 
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, c⁄° 
domaö«me
 *
di•œy«me
)

2292 
L¨geCacheRec‹d
 
l¸
;

2293 c⁄° 
mDNSu8
 *
±r
;

2294 
mSètus
 
îr
 = 
mSètus_NoEº‹
;

2295 
i
;

2297 
±r
 = 
	`LoˇãAddôi⁄Æs
(
msg
, 
íd
);

2298 i‡(!
±r
Ë
föish
;

2300 
i
 = 0; i < 
msg
->
h
.
numAddôi⁄Æs
; i++)

2302 
±r
 = 
	`GëL¨geResour˚Rec‹d
(
m
, 
msg
,Öå, 
íd
, 0, 
kDNSRec‹dTy≥PackëAdd
, &
l¸
);

2303 i‡(!
±r
Ë
föish
;

2304 i‡(
l¸
.
r
.
ª§ec
.
ºty≥
 =
kDNSTy≥_TSIG
)

2306 
mDNSu32
 
macsize
;

2307 
mDNSu8
 *
rd
 = 
l¸
.
r
.
ª§ec
.
rd©a
->
u
.
d©a
;

2308 
mDNSu8
 *
rdíd
 = 
rd
 + 
MaximumRDSize
;

2309 
ÆgÀn
 = 
	`DomaöNameLígth
(&
l¸
.
r
.
ª§ec
.
rd©a
->
u
.
«me
);

2311 i‡(
rd
 + 
ÆgÀn
 > 
rdíd
Ë
föish
;

2312 
rd
 +
ÆgÀn
;

2313 i‡(
rd
 + 6 > 
rdíd
Ë
föish
;

2314 
rd
 += 6;

2315 i‡(
rd
 + (
mDNSO∑que16
Ë> 
rdíd
Ë
föish
;

2316 
rd
 +(
mDNSO∑que16
);

2317 i‡(
rd
 + (
mDNSO∑que16
Ë> 
rdíd
Ë
föish
;

2318 
macsize
 = 
	`mDNSVÆ16
(*(
mDNSO∑que16
 *)
rd
);

2319 
rd
 +(
mDNSO∑que16
);

2320 i‡(
rd
 + 
macsize
 > 
rdíd
Ë
föish
;

2321 
rd
 +
macsize
;

2322 i‡(
rd
 + (
mDNSO∑que16
Ë> 
rdíd
Ë
föish
;

2323 
rd
 +(
mDNSO∑que16
);

2324 i‡(
rd
 + (
mDNSO∑que16
Ë> 
rdíd
Ë
föish
;

2325 
îr
 = 
	`mDNSVÆ16
(*(
mDNSO∑que16
 *)
rd
);

2327 i‡(
îr
 =
TSIG_EºBadSig
Ë{ 
	`LogMsg
("%##s: bad sig«tuª", 
di•œy«me
->
c
);Éº = 
mSètus_BadSig
; }

2328 i‡(
îr
 =
TSIG_EºBadKey
Ë{ 
	`LogMsg
("%##s: bad key", 
di•œy«me
->
c
);Éº = 
mSètus_BadKey
; }

2329 i‡(
îr
 =
TSIG_EºBadTime
Ë{ 
	`LogMsg
("%##s: badÅime", 
di•œy«me
->
c
);Éº = 
mSètus_BadTime
; }

2330 i‡(
îr
Ë{ 
	`LogMsg
("%##s: unknow¿tsigÉº‹ %d", 
di•œy«me
->
c
,Éº);Éº = 
mSètus_UnknownEº
; }

2331 
föish
;

2335 
föish
:

2336  
îr
;

2337 
	}
}

2339 
mDNSloˇl
 
mSètus
 
	$checkUpd©eResu…
(
domaö«me
 *
di•œy«me
, 
mDNSu8
 
rcode
, 
mDNS
 *
m
, c⁄° 
DNSMesßge
 *
msg
, c⁄° mDNSu8 *
íd
)

2341 ()
msg
;

2342 i‡(!
rcode
Ë 
mSètus_NoEº‹
;

2343 i‡(
rcode
 =
kDNSFœg1_RC_YXDomaö
)

2345 
	`debugf
("«mêö u£: %##s", 
di•œy«me
->
c
);

2346  
mSètus_NameC⁄Êi˘
;

2348 i‡(
rcode
 =
kDNSFœg1_RC_Refu£d
)

2350 
	`LogMsg
("Upd©ê%##†ªfu£d", 
di•œy«me
->
c
);

2351  
mSètus_Refu£d
;

2353 i‡(
rcode
 =
kDNSFœg1_RC_NXRRSë
)

2355 
	`LogMsg
("Rîegi°îÑefu£d (NXRRSET): %##s", 
di•œy«me
->
c
);

2356  
mSètus_NoSuchRec‹d
;

2358 i‡(
rcode
 =
kDNSFœg1_RC_NŸAuth
)

2361 
mSètus
 
tsigîr
 = 
	`P¨£TSIGEº‹
(
m
, 
msg
, 
íd
, 
di•œy«me
);

2362 i‡(!
tsigîr
)

2364 
	`LogMsg
("Pîmissi⁄ díõd (NOAUTH): %##s", 
di•œy«me
->
c
);

2365  
mSètus_UnknownEº
;

2367  
tsigîr
;

2369 i‡(
rcode
 =
kDNSFœg1_RC_FmtEº
)

2371 
mSètus
 
tsigîr
 = 
	`P¨£TSIGEº‹
(
m
, 
msg
, 
íd
, 
di•œy«me
);

2372 i‡(!
tsigîr
)

2374 
	`LogMsg
("F‹m© Eº‹: %##s", 
di•œy«me
->
c
);

2375  
mSètus_UnknownEº
;

2377  
tsigîr
;

2381 
	`LogMsg
("Upd©ê%##†Áûed wôhÑcodê%d", 
di•œy«me
->
c
, 
rcode
);

2382  
mSètus_UnknownEº
;

2384 
	}
}

2386 
mDNSloˇl
 
	$hndlSîvi˚Upd©eRïly
(
mDNS
 * c⁄° 
m
, 
Sîvi˚Rec‹dSë
 *
§s
, 
mSètus
 
îr
)

2388 
mDNSBoﬁ
 
InvokeCÆlback
 = 
mDNSÁl£
;

2389 
uDNS_RegInfo
 *
öfo
 = &
§s
->
uDNS_öfo
;

2390 
NATTøvîßlInfo
 *
«t
 = 
§s
->
uDNS_öfo
.
NATöfo
;

2391 
ExåaResour˚Rec‹d
 **
e
 = &
§s
->
Exåas
;

2392 
AuthRec‹d
 *
txt
 = &
§s
->
RR_TXT
;

2393 
uDNS_RegInfo
 *
txtInfo
 = &
txt
->
uDNS_öfo
;

2394 
öfo
->
°©e
)

2396 
ªgSèã_Pídög
:

2397 i‡(
îr
 =
mSètus_NameC⁄Êi˘
 && !
öfo
->
Te°F‹SñfC⁄Êi˘
)

2399 
öfo
->
Te°F‹SñfC⁄Êi˘
 = 
mDNSåue
;

2400 
	`debugf
("checkög f‹ sñf-c⁄Êi˘ o‡£rvi˚ %##s", 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
);

2401 
	`SídSîvi˚Regi°øti⁄
(
m
, 
§s
);

2404 i‡(
öfo
->
Te°F‹SñfC⁄Êi˘
)

2406 
öfo
->
Te°F‹SñfC⁄Êi˘
 = 
mDNSÁl£
;

2407 i‡(
îr
 =
mSètus_NoSuchRec‹d
Ëî∏
mSètus_NameC⁄Êi˘
;

2408 i‡(
îr
Ë
öfo
->
°©e
 = 
ªgSèã_Uƒegi°îed
;

2409 
öfo
->
°©e
 = 
ªgSèã_Regi°îed
;

2410 
InvokeCÆlback
 = 
mDNSåue
;

2413 i‡(
îr
 =
mSètus_UnknownEº
 && 
öfo
->
Àa£
)

2415 
	`LogMsg
("Re-åyög upd©êo‡£rvi˚ %##†wôhouàÀa£ o±i⁄", 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
);

2416 
öfo
->
Àa£
 = 
mDNSÁl£
;

2417 
	`SídSîvi˚Regi°øti⁄
(
m
, 
§s
);

2422 i‡(
îr
Ë{ 
	`LogMsg
("Eº‹ %ld f‹Ñegi°øti⁄ o‡£rvi˚ %##s",Éº, 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
); 
öfo
->
°©e
 = 
ªgSèã_Uƒegi°îed
; }

2423 
öfo
->
°©e
 = 
ªgSèã_Regi°îed
;

2424 
InvokeCÆlback
 = 
mDNSåue
;

2427 
ªgSèã_Re‰esh
:

2428 i‡(
îr
)

2430 
	`LogMsg
("Eº‹ %ld f‹Ñe‰esh o‡£rvi˚ %##s", 
îr
, 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
);

2431 
InvokeCÆlback
 = 
mDNSåue
;

2432 
öfo
->
°©e
 = 
ªgSèã_Uƒegi°îed
;

2434 
öfo
->
°©e
 = 
ªgSèã_Regi°îed
;

2436 
ªgSèã_DîegPídög
:

2437 i‡(
îr
Ë
	`LogMsg
("Eº‹ %ld f‹ dîegi°øti⁄ o‡£rvi˚ %##s",Éº, 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
);

2438 i‡(
öfo
->
SRVCh™ged
)

2440 
öfo
->
°©e
 = 
ªgSèã_NoT¨gë
;

2443 
îr
 = 
mSètus_MemFªe
;

2444 
InvokeCÆlback
 = 
mDNSåue
;

2445 i‡(
«t
)

2447 i‡(
«t
->
°©e
 =
NATSèã_Dñëed
Ë{ 
öfo
->
NATöfo
 = 
mDNSNULL
; 
	`FªeNATInfo
(
m
,Çat); }

2448 
«t
->
ªg
.
Sîvi˚Regi°øti⁄
 = 
mDNSNULL
;

2450 
öfo
->
°©e
 = 
ªgSèã_Uƒegi°îed
;

2452 
ªgSèã_DîegDe„ºed
:

2453 i‡(
îr
)

2455 
	`debugf
("Eº‹ %ldÑe˚ivedÖri‹Åÿde„ºed dîig°øti⁄ o‡%##s", 
îr
, 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
);

2456 
îr
 = 
mSètus_MemFªe
;

2457 
InvokeCÆlback
 = 
mDNSåue
;

2458 
öfo
->
°©e
 = 
ªgSèã_Uƒegi°îed
;

2463 
	`debugf
("Pîf‹mög de„ºed dîegi°øti⁄ o‡%##s", 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
);

2464 
öfo
->
°©e
 = 
ªgSèã_Regi°îed
;

2465 
	`SídSîvi˚Dîegi°øti⁄
(
m
, 
§s
);

2468 
ªgSèã_Upd©ePídög
:

2469 i‡(
îr
)

2471 
	`LogMsg
("hndlSîvi˚Upd©eRïly:Éº‹ upd©ög TXTÑec‹d f‹ sîvi˚ %##s", 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
);

2472 
öfo
->
°©e
 = 
ªgSèã_Uƒegi°îed
;

2473 
InvokeCÆlback
 = 
mDNSåue
;

2477 
öfo
->
°©e
 = 
ªgSèã_Regi°îed
;

2479 i‡(
txtInfo
->
Upd©eRDCÆlback
ËtxtInfo->
	`Upd©eRDCÆlback
(
m
, 
txt
,ÅxtInfo->
OrigRD©a
);

2480 
	`SëNewRD©a
(&
txt
->
ª§ec
, 
txtInfo
->
InFlightRD©a
,ÅxtInfo->
InFlightRDLí
);

2481 
txtInfo
->
OrigRD©a
 = 
mDNSNULL
;

2482 
txtInfo
->
InFlightRD©a
 = 
mDNSNULL
;

2485 
ªgSèã_FëchögZ⁄eD©a
:

2486 
ªgSèã_Regi°îed
:

2487 
ªgSèã_C™˚Œed
:

2488 
ªgSèã_Uƒegi°îed
:

2489 
ªgSèã_NATM≠
:

2490 
ªgSèã_NoT¨gë
:

2491 
ªgSèã_ExåaQueued
:

2492 
ªgSèã_NATEº‹
:

2493 
	`LogMsg
("hndlServiceUpdateReply called for service %##s in unexpected state %d withÉrror %ld. Unlinking.",

2494 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
, 
öfo
->
°©e
, 
îr
);

2495 
îr
 = 
mSètus_UnknownEº
;

2498 i‡((
öfo
->
SRVCh™ged
 || info->
SRVUpd©eDe„ºed
Ë&& (öfo->
°©e
 =
ªgSèã_NoT¨gë
 || info->°©ê=
ªgSèã_Regi°îed
))

2500 i‡(
InvokeCÆlback
)

2502 
öfo
->
Clõ¡CÆlbackDe„ºed
 = 
mDNSåue
;

2503 
öfo
->
De„ºedSètus
 = 
îr
;

2505 
öfo
->
SRVCh™ged
 = 
mDNSÁl£
;

2506 
	`Upd©eSRV
(
m
, 
§s
);

2510 *
e
)

2512 
uDNS_RegInfo
 *
eöfo
 = &(*
e
)->
r
.
uDNS_öfo
;

2513 i‡(
eöfo
->
°©e
 =
ªgSèã_ExåaQueued
)

2515 i‡(
öfo
->
°©e
 =
ªgSèã_Regi°îed
 && !
îr
)

2518 
	`AssignDomaöName
(&
eöfo
->
z⁄e
, &
öfo
->zone);

2519 
eöfo
->
ns
 = 
öfo
->ns;

2520 
eöfo
->
p‹t
 = 
öfo
->port;

2521 
eöfo
->
Àa£
 = 
öfo
->lease;

2522 
	`£ndRec‹dRegi°øti⁄
(
m
, &(*
e
)->
r
);

2523 
e
 = &(*e)->
√xt
;

2525 i‡(
îr
 && 
eöfo
->
°©e
 !
ªgSèã_Uƒegi°îed
)

2528 
eöfo
->
°©e
 = 
ªgSèã_Uƒegi°îed
;

2529 *
e
 = (*e)->
√xt
;

2531 
e
 = &(*e)->
√xt
;

2533 
e
 = &(*e)->
√xt
;

2536 
§s
->
RR_SRV
.
ThisAPI¡îvÆ
 = 
INIT_UCAST_POLL_INTERVAL
 - 1;

2537 i‡(
öfo
->
°©e
 =
ªgSèã_Uƒegi°îed
Ë
	`u∆ökSRS
(
m
, 
§s
);

2538 i‡(
txtInfo
->
QueuedRD©a
 && 
öfo
->
°©e
 =
ªgSèã_Regi°îed
)

2540 i‡(
InvokeCÆlback
)

2543 
öfo
->
Clõ¡CÆlbackDe„ºed
 = 
mDNSåue
;

2544 
öfo
->
De„ºedSètus
 = 
îr
;

2546 
öfo
->
°©e
 = 
ªgSèã_Upd©ePídög
;

2547 
txtInfo
->
InFlightRD©a
 =ÅxtInfo->
QueuedRD©a
;

2548 
txtInfo
->
InFlightRDLí
 =ÅxtInfo->
QueuedRDLí
;

2549 
öfo
->
OrigRD©a
 = 
txt
->
ª§ec
.
rd©a
;

2550 
öfo
->
OrigRDLí
 = 
txt
->
ª§ec
.
rdÀngth
;

2551 
txtInfo
->
QueuedRD©a
 = 
mDNSNULL
;

2552 
	`SídSîvi˚Regi°øti⁄
(
m
, 
§s
);

2556 
m
->
mDNS_ªíå™cy
++;

2557 i‡(
InvokeCÆlback
Ë
§s
->
	`Sîvi˚CÆlback
(
m
, srs, 
îr
);

2558 i‡(
öfo
->
Clõ¡CÆlbackDe„ºed
)

2560 
öfo
->
Clõ¡CÆlbackDe„ºed
 = 
mDNSÁl£
;

2561 
§s
->
	`Sîvi˚CÆlback
(
m
, srs, 
öfo
->
De„ºedSètus
);

2563 
m
->
mDNS_ªíå™cy
--;

2565 
	}
}

2567 
mDNSloˇl
 
	$hndlRec‹dUpd©eRïly
(
mDNS
 *
m
, 
AuthRec‹d
 *
º
, 
mSètus
 
îr
)

2569 
uDNS_RegInfo
 *
öfo
 = &
º
->
uDNS_öfo
;

2570 
mDNSBoﬁ
 
InvokeCÆlback
 = 
mDNSåue
;

2572 i‡(
öfo
->
°©e
 =
ªgSèã_Upd©ePídög
)

2574 i‡(
îr
)

2576 
	`LogMsg
("Upd©êªc‹d faûed f‹ %##†”º %d)", 
º
->
ª§ec
.
«me
->
c
, 
îr
);

2577 
öfo
->
°©e
 = 
ªgSèã_Uƒegi°îed
;

2581 
	`debugf
("Upd©êªc‹d %##†- suc˚ss", 
º
->
ª§ec
.
«me
->
c
);

2582 
öfo
->
°©e
 = 
ªgSèã_Regi°îed
;

2584 i‡(
öfo
->
Upd©eRDCÆlback
Ëöfo->
	`Upd©eRDCÆlback
(
m
, 
º
, info->
OrigRD©a
);

2585 
	`SëNewRD©a
(&
º
->
ª§ec
, 
öfo
->
InFlightRD©a
, info->
InFlightRDLí
);

2586 
öfo
->
OrigRD©a
 = 
mDNSNULL
;

2587 
öfo
->
InFlightRD©a
 = 
mDNSNULL
;

2591 i‡(
öfo
->
°©e
 =
ªgSèã_DîegPídög
)

2593 
	`debugf
("Re˚ivedÑïly f‹ dîegi°îÑec‹d %##†ty≥ %d", 
º
->
ª§ec
.
«me
->
c
,Ñr->ª§ec.
ºty≥
);

2594 i‡(
îr
Ë
	`LogMsg
("ERROR: Deregistration ofÑecord %##sÅype %d failed withÉrror %ld",

2595 
º
->
ª§ec
.
«me
->
c
,Ñr->ª§ec.
ºty≥
, 
îr
);

2596 
îr
 = 
mSètus_MemFªe
;

2597 
öfo
->
°©e
 = 
ªgSèã_Uƒegi°îed
;

2600 i‡(
öfo
->
°©e
 =
ªgSèã_DîegDe„ºed
)

2602 i‡(
îr
)

2604 
	`LogMsg
("Cancelling deferred deregistrationÑecord %##sÅype %d dueÅoÑegistrationÉrror %ld",

2605 
º
->
ª§ec
.
«me
->
c
,Ñr->ª§ec.
ºty≥
, 
îr
);

2606 
öfo
->
°©e
 = 
ªgSèã_Uƒegi°îed
;

2608 
	`debugf
("CÆlög de„ºed dîegi°øti⁄ o‡ªc‹d %##†ty≥ %d", 
º
->
ª§ec
.
«me
->
c
,Ñr->ª§ec.
ºty≥
);

2609 
öfo
->
°©e
 = 
ªgSèã_Regi°îed
;

2610 
	`uDNS_Dîegi°îRec‹d
(
m
, 
º
);

2614 i‡(
öfo
->
°©e
 =
ªgSèã_Pídög
 || info->°©ê=
ªgSèã_Re‰esh
)

2616 i‡(!
îr
)

2618 
öfo
->
°©e
 = 
ªgSèã_Regi°îed
;

2619 i‡(
öfo
->
°©e
 =
ªgSèã_Re‰esh
Ë
InvokeCÆlback
 = 
mDNSÁl£
;

2623 i‡(
öfo
->
Àa£
 && 
îr
 =
mSètus_UnknownEº
)

2625 
	`LogMsg
("Re-åyög upd©êo‡ªc‹d %##†wôhouàÀa£ o±i⁄", 
º
->
ª§ec
.
«me
->
c
);

2626 
öfo
->
Àa£
 = 
mDNSÁl£
;

2627 
	`£ndRec‹dRegi°øti⁄
(
m
, 
º
);

2630 
	`LogMsg
("Regi°øti⁄ o‡ªc‹d %##†ty≥ %d faûed wôhÉº‹ %ld", 
º
->
ª§ec
.
«me
->
c
,Ñr->ª§ec.
ºty≥
, 
îr
);

2631 
öfo
->
°©e
 = 
ªgSèã_Uƒegi°îed
;

2635 i‡(
öfo
->
°©e
 =
ªgSèã_Uƒegi°îed
Ë
	`u∆ökAR
(&
m
->
uDNS_öfo
.
Rec‹dRegi°øti⁄s
, 
º
);

2636 
º
->
ThisAPI¡îvÆ
 = 
INIT_UCAST_POLL_INTERVAL
 - 1;

2638 i‡(
öfo
->
QueuedRD©a
 && info->
°©e
 =
ªgSèã_Regi°îed
)

2640 
öfo
->
°©e
 = 
ªgSèã_Upd©ePídög
;

2641 
öfo
->
InFlightRD©a
 = info->
QueuedRD©a
;

2642 
öfo
->
InFlightRDLí
 = info->
QueuedRDLí
;

2643 
öfo
->
OrigRD©a
 = 
º
->
ª§ec
.
rd©a
;

2644 
öfo
->
OrigRDLí
 = 
º
->
ª§ec
.
rdÀngth
;

2645 
öfo
->
QueuedRD©a
 = 
mDNSNULL
;

2646 
	`£ndRec‹dRegi°øti⁄
(
m
, 
º
);

2650 i‡(
InvokeCÆlback
)

2652 
m
->
mDNS_ªíå™cy
++;

2653 i‡(
º
->
Rec‹dCÆlback
Ëº->
	`Rec‹dCÆlback
(
m
,Ñr, 
îr
);

2654 
m
->
mDNS_ªíå™cy
--;

2656 
	}
}

2659 
mDNSloˇl
 
	$SëUpd©eExpú©i⁄
(
mDNS
 *
m
, 
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, 
uDNS_RegInfo
 *
öfo
)

2661 
L¨geCacheRec‹d
 
l¸
;

2662 c⁄° 
mDNSu8
 *
±r
;

2663 
i
;

2664 
mDNSu32
 
Àa£
 = 0;

2665 
mDNSs32
 
expúe
;

2667 
±r
 = 
	`LoˇãAddôi⁄Æs
(
msg
, 
íd
);

2669 i‡(
öfo
->
Àa£
 && (
±r
 = 
	`LoˇãAddôi⁄Æs
(
msg
, 
íd
)))

2671 
i
 = 0; i < 
msg
->
h
.
numAddôi⁄Æs
; i++)

2673 
±r
 = 
	`GëL¨geResour˚Rec‹d
(
m
, 
msg
,Öå, 
íd
, 0, 
kDNSRec‹dTy≥PackëAdd
, &
l¸
);

2674 i‡(!
±r
) ;

2675 i‡(
l¸
.
r
.
ª§ec
.
ºty≥
 =
kDNSTy≥_OPT
)

2677 i‡(
l¸
.
r
.
ª§ec
.
rdÀngth
 < 
LEASE_OPT_RDLEN
) ;

2678 i‡(
l¸
.
r
.
ª§ec
.
rd©a
->
u
.
›t
.›à!
kDNSO±_Ló£
) ;

2679 
Àa£
 = 
l¸
.
r
.
ª§ec
.
rd©a
->
u
.
›t
.
O±D©a
.lease;

2685 i‡(
Àa£
 > 0)

2687 
expúe
 = (
	`mDNSPœtf‹mTimeNow
(
m
Ë+ (((
mDNSs32
)
Àa£
 * 
mDNSPœtf‹mO√Sec⁄d
)) * 3/4);

2688 i‡(
öfo
->
°©e
 =
ªgSèã_Upd©ePídög
)

2690 { i‡(
expúe
 - 
öfo
->expire < 0) info->expire =Éxpire; }

2691 
öfo
->
expúe
 =Éxpire;

2693 
öfo
->
Àa£
 = 
mDNSÁl£
;

2694 
	}
}

2696 
mDNSexp‹t
 
	$uDNS_Re˚iveNATM≠
(
mDNS
 *
m
, 
mDNSu8
 *
pkt
, 
mDNSu16
 
Àn
)

2698 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

2699 
NATTøvîßlInfo
 *
±r
 = 
u
->
NATTøvîßls
;

2700 
NATOp_t
 
›
;

2703 i‡(
Àn
 < (
NATP‹tM≠Rïly
Ë&&Üí < (
NATAddrRïly
)Ë{ 
	`LogMsg
("NAT Traversal messageÅoo short (%d bytes)",Üen); ; }

2704 i‡(
pkt
[0] !
NATMAP_VERS
Ë{ 
	`LogMsg
("Received NAT TraversalÑesponse with version %d (expect version %d)",Ökt[0], NATMAP_VERS); ; }

2705 
›
 = 
pkt
[1];

2706 i‡(!(
›
 & 
NATMAP_RESPONSE_MASK
)Ë{ 
	`LogMsg
("Received NAT Traversal messageÅhat isÇotáÑesponse (opcode %d)", op); ; }

2708 
±r
)

2710 i‡((
±r
->
°©e
 =
NATSèã_Reque°
 ||Öå->°©ê=
NATSèã_Re‰esh
Ë&& (±r->
›
 | 
NATMAP_RESPONSE_MASK
) == op)

2711 i‡(
±r
->
	`Re˚iveRe•⁄£
’å, 
m
, 
pkt
, 
Àn
)) ;

2712 
±r
 =Öå->
√xt
;

2714 
	}
}

2716 
mDNSloˇl
 c⁄° 
domaö«me
 *
	gDNSRñayTe°Que°i⁄
 = (domainname*)

2721 
mDNSloˇl
 
mDNSBoﬁ
 
	$uDNS_Re˚iveTe°Que°i⁄Re•⁄£
(
mDNS
 *c⁄° 
m
, 
DNSMesßge
 *c⁄° 
msg
, c⁄° 
mDNSu8
 *c⁄° 
íd
,

2722 c⁄° 
mDNSAddr
 *c⁄° 
§ˇddr
, c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
)

2724 c⁄° 
mDNSu8
 *
±r
 = 
msg
->
d©a
;

2725 
DNSQue°i⁄
 
q
;

2726 
DNSSîvî
 *
s
;

2727 
mDNSu32
 
ªsu…
 = 0;

2728 
mDNSBoﬁ
 
found
 = 
mDNSÁl£
;

2731 i‡(
msg
->
h
.
numQue°i⁄s
 !1Ë(
mDNSÁl£
);

2732 
±r
 = 
	`gëQue°i⁄
(
msg
,Öå, 
íd
, 
I¡îÁ˚ID
, &
q
);

2733 i‡(!
±r
Ë(
mDNSÁl£
);

2734 i‡(
q
.
qty≥
 !
kDNSTy≥_PTR
 || q.
q˛ass
 !
kDNSCœss_IN
Ë(
mDNSÁl£
);

2735 i‡(!
	`SameDomaöName
(&
q
.
q«me
, 
DNSRñayTe°Que°i⁄
)Ë(
mDNSÁl£
);

2739 i‡((
msg
->
h
.
Êags
.
b
[1] & 
kDNSFœg1_RC
Ë=
kDNSFœg1_RC_NoEº
 && msg->h.
numAnswîs
 > 0)

2740 
ªsu…
 = 
DNSSîvî_Faûed
;

2742 
ªsu…
 = 
DNSSîvî_Pas£d
;

2745 
s
 = 
m
->
uDNS_öfo
.
Sîvîs
; s; s = s->
√xt
)

2746 i‡(
	`mDNSSameAddªss
(
§ˇddr
, &
s
->
addr
Ë&& s->
ã°°©e
 !
ªsu…
)

2747 { 
s
->
ã°°©e
 = 
ªsu…
; 
found
 = 
mDNSåue
; }

2751 i‡(
found
 && 
ªsu…
 =
DNSSîvî_Faûed
)

2752 
	`LogMsg
("NOTE: Wide-Aª®Sîvi˚ Discovîy dißbÀdÅÿavoid cøshög de„˘ivêDNSÑñay %#a.", 
§ˇddr
);

2754 (
mDNSåue
);

2755 
	}
}

2757 
mDNSexp‹t
 
	$uDNS_Re˚iveMsg
(
mDNS
 *c⁄° 
m
, 
DNSMesßge
 *c⁄° 
msg
, c⁄° 
mDNSu8
 *c⁄° 
íd
,

2758 c⁄° 
mDNSAddr
 *c⁄° 
§ˇddr
, c⁄° 
mDNSIPP‹t
 
§˝‹t
, c⁄° mDNSAdd∏*c⁄° 
d°addr
,

2759 c⁄° 
mDNSIPP‹t
 
d°p‹t
, c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
)

2761 
DNSQue°i⁄
 *
q±r
;

2762 
AuthRec‹d
 *
Ωå
;

2763 
Sîvi˚Rec‹dSë
 *
•å
;

2764 
mSètus
 
îr
 = 
mSètus_NoEº‹
;

2765 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

2767 
mDNSu8
 
StdR
 = 
kDNSFœg0_QR_Re•⁄£
 | 
kDNSFœg0_OP_StdQuîy
;

2768 
mDNSu8
 
Upd©eR
 = 
kDNSFœg0_QR_Re•⁄£
 | 
kDNSFœg0_OP_Upd©e
;

2769 
mDNSu8
 
QR_OP
 = (mDNSu8)(
msg
->
h
.
Êags
.
b
[0] & 
kDNSFœg0_QROP_Mask
);

2770 
mDNSu8
 
rcode
 = (mDNSu8)(
msg
->
h
.
Êags
.
b
[1] & 
kDNSFœg1_RC
);

2772 
mDNSs32
 
timíow
 = 
	`mDNSPœtf‹mTimeNow
(
m
);

2775 ()
d°addr
;

2776 ()
d°p‹t
;

2777 ()
I¡îÁ˚ID
;

2779 i‡(
QR_OP
 =
StdR
)

2783 i‡(
§ˇddr
 && 
	`ªcvLLQRe•⁄£
(
m
, 
msg
, 
íd
, srˇddr, 
§˝‹t
, 
I¡îÁ˚ID
)) ;

2785 i‡(
	`uDNS_Re˚iveTe°Que°i⁄Re•⁄£
(
m
, 
msg
, 
íd
, 
§ˇddr
, 
I¡îÁ˚ID
)) ;

2787 
q±r
 = 
u
->
A˘iveQuîõs
; q±r; q±∏q±r->
√xt
)

2790 i‡(
q±r
->
uDNS_öfo
.
id
.
NŸAnI¡egî
 =
msg
->
h
.id.NotAnInteger)

2792 i‡(
timíow
 - (
q±r
->
La°QTime
 + 
RESPONSE_WINDOW
) > 0)

2793 { 
	`debugf
("uDNS_ReceiveMsg -ÑesponseÑeceivedáfter maximumállowed window. Discarding"); ; }

2794 i‡(
msg
->
h
.
Êags
.
b
[0] & 
kDNSFœg0_TC
)

2795 { 
	`hndlTrunˇãdAnswî
(
q±r
, 
§ˇddr
, 
m
); ; }

2798 
u
->
CuºítQuîy
 = 
q±r
;

2799 
q±r
->
uDNS_öfo
.
	`ª•⁄£CÆlback
(
m
, 
msg
, 
íd
, q±r, q±r->uDNS_öfo.
c⁄ãxt
);

2800 
u
->
CuºítQuîy
 = 
mDNSNULL
;

2807 i‡(
QR_OP
 =
Upd©eR
)

2809 
•å
 = 
u
->
Sîvi˚Regi°øti⁄s
; s±r; s±∏•å->
√xt
)

2811 i‡(
•å
->
uDNS_öfo
.
id
.
NŸAnI¡egî
 =
msg
->
h
.id.NotAnInteger)

2813 
îr
 = 
	`checkUpd©eResu…
(
•å
->
RR_SRV
.
ª§ec
.
«me
, 
rcode
, 
m
, 
msg
, 
íd
);

2814 i‡(!
îr
Ë
	`SëUpd©eExpú©i⁄
(
m
, 
msg
, 
íd
, &
•å
->
uDNS_öfo
);

2815 
	`hndlSîvi˚Upd©eRïly
(
m
, 
•å
, 
îr
);

2819 
Ωå
 = 
u
->
Rec‹dRegi°øti⁄s
;Ñ±r;Ñ±∏Ωå->
√xt
)

2821 i‡(
Ωå
->
uDNS_öfo
.
id
.
NŸAnI¡egî
 =
msg
->
h
.id.NotAnInteger)

2823 
îr
 = 
	`checkUpd©eResu…
(
Ωå
->
ª§ec
.
«me
, 
rcode
, 
m
, 
msg
, 
íd
);

2824 i‡(!
îr
Ë
	`SëUpd©eExpú©i⁄
(
m
, 
msg
, 
íd
, &
Ωå
->
uDNS_öfo
);

2825 
	`hndlRec‹dUpd©eRïly
(
m
, 
Ωå
, 
îr
);

2830 
	`debugf
("Re˚ived u√x≥˘edÑe•⁄£: ID %d m©che†nÿa˘ivêªc‹ds", 
	`mDNSVÆ16
(
msg
->
h
.
id
));

2831 
	}
}

2834 
mDNSloˇl
 
DNSSîvî
 *
	$GëSîvîF‹Name
(
uDNS_GlobÆInfo
 *
u
, c⁄° 
domaö«me
 *
«me
)

2836 
DNSSîvî
 *
curm©ch
 = 
mDNSNULL
, *
p
 = 
u
->
Sîvîs
;

2837 
i
, 
curm©chÀn
 = -1;

2838 
ncou¡
 = 
«me
 ? 
	`Cou¡Labñs
(name) : 0;

2840 
p
)

2842 
scou¡
 = 
	`Cou¡Labñs
(&
p
->
domaö
);

2843 i‡(
scou¡
 <
ncou¡
 && scou¡ > 
curm©chÀn
)

2846 c⁄° 
domaö«me
 *
èû
 = 
«me
;

2847 
i
 = 0; i < 
ncou¡
 - 
scou¡
; i++)

2848 
èû
 = (
domaö«me
 *)—aû->
c
 + 1 +Åail->c[0]);

2849 i‡(
	`SameDomaöName
(
èû
, &
p
->
domaö
)Ë{ 
curm©ch
 =Ö; 
curm©chÀn
 = 
scou¡
; }

2851 
p
 =Ö->
√xt
;

2853 (
curm©ch
);

2854 
	}
}

2857 #i‡
COMPILER_LIKES_PRAGMA_MARK


2858 #¥agm®
m¨k
 - 
Quîy
 
Routöes


2861 
	#ßmeID
(
x
,
y
Ë
	`mDNSPœtf‹mMemSame
(x,y,8)

	)

2863 
mDNSloˇl
 
	$öôülizeQuîy
(
DNSMesßge
 *
msg
, 
DNSQue°i⁄
 *
que°i⁄
)

2865 
	`ubzîo
(
msg
, (msg));

2866 
	`InôülizeDNSMesßge
(&
msg
->
h
, 
que°i⁄
->
uDNS_öfo
.
id
, 
uQuîyFœgs
);

2867 
	}
}

2869 
mDNSloˇl
 
mSètus
 
	$c⁄°ru˘QuîyMsg
(
DNSMesßge
 *
msg
, 
mDNSu8
 **
ídPå
, 
DNSQue°i⁄
 *c⁄° 
que°i⁄
)

2871 
	`öôülizeQuîy
(
msg
, 
que°i⁄
);

2873 *
ídPå
 = 
	`putQue°i⁄
(
msg
, msg->
d©a
, msg->d©®+ 
AbsﬁuãMaxDNSMesßgeD©a
, &
que°i⁄
->
q«me
, que°i⁄->
qty≥
, que°i⁄->
q˛ass
);

2874 i‡(!*
ídPå
)

2876 
	`LogMsg
("ERROR: Unicast query out of space inÖacket");

2877  
mSètus_UnknownEº
;

2879  
mSètus_NoEº‹
;

2880 
	}
}

2882 
mDNSloˇl
 
mDNSu8
 *
	$putLLQ
(
DNSMesßge
 *c⁄° 
msg
, 
mDNSu8
 *
±r
, 
DNSQue°i⁄
 *
que°i⁄
, 
LLQO±D©a
 *
d©a
, 
mDNSBoﬁ
 
ö˛udeQue°i⁄
)

2884 
AuthRec‹d
 
º
;

2885 
Resour˚Rec‹d
 *
›t
 = &
º
.
ª§ec
;

2886 
rd©aO±
 *
›tRD
;

2889 i‡(
ö˛udeQue°i⁄
)

2891 
±r
 = 
	`putQue°i⁄
(
msg
,Öå, msg->
d©a
 + 
AbsﬁuãMaxDNSMesßgeD©a
, &
que°i⁄
->
q«me
, que°i⁄->
qty≥
, que°i⁄->
q˛ass
);

2892 i‡(!
±r
Ë{ 
	`LogMsg
("ERROR:ÖutLLQ -ÖutQue°i⁄");  
mDNSNULL
; }

2899 
	`ubzîo
(&
º
, (
AuthRec‹d
));

2900 
	`mDNS_SëupResour˚Rec‹d
(&
º
, 
mDNSNULL
, 
mDNSI¡îÁ˚_Any
, 
kDNSTy≥_OPT
, 
kSènd¨dTTL
, 
kDNSRec‹dTy≥KnownUnique
, mDNSNULL, mDNSNULL);

2901 
›t
->
rdÀngth
 = 
LLQ_OPT_RDLEN
;

2902 
›t
->
rde°im©e
 = 
LLQ_OPT_RDLEN
;

2904 
›tRD
 = &
º
.
ª§ec
.
rd©a
->
u
.
›t
;

2905 
›tRD
->
›t
 = 
kDNSO±_LLQ
;

2906 
›tRD
->
›éí
 = 
LLQ_OPTLEN
;

2907 
	`umem˝y
(&
›tRD
->
O±D©a
.
Œq
, 
d©a
, (*data));

2908 
±r
 = 
	`PutResour˚Rec‹dTTLJumbo
(
msg
,Öå, &msg->
h
.
numAddôi⁄Æs
, 
›t
, 0);

2909 i‡(!
±r
Ë{ 
	`LogMsg
("ERROR:ÖutLLQ - PutResour˚Rec‹dTTLJumbo");  
mDNSNULL
; }

2911  
±r
;

2912 
	}
}

2915 
mDNSloˇl
 
mDNSBoﬁ
 
	$gëLLQAtIndex
(
mDNS
 *
m
, 
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, 
LLQO±D©a
 *
Œq
, 
ödex
)

2917 
L¨geCacheRec‹d
 
l¸
;

2918 
i
;

2919 c⁄° 
mDNSu8
 *
±r
;

2921 
	`ubzîo
(&
l¸
, (lcr));

2923 
±r
 = 
	`LoˇãAddôi⁄Æs
(
msg
, 
íd
);

2924 i‡(!
±r
Ë 
mDNSÁl£
;

2927 
i
 = 0; i < 
msg
->
h
.
numAddôi⁄Æs
; i++)

2930 { 
±r
 = 
	`GëL¨geResour˚Rec‹d
(
m
, 
msg
,Öå, 
íd
, 0, 
kDNSRec‹dTy≥PackëAdd
, &
l¸
); i‡(!±rË 
mDNSÁl£
; i‡÷¸.
r
.
ª§ec
.
ºty≥
 =
kDNSTy≥_OPT
) ; }

2931 i‡(
l¸
.
r
.
ª§ec
.
ºty≥
 !
kDNSTy≥_OPT
Ë 
mDNSÁl£
;

2932 i‡(
l¸
.
r
.
ª§ec
.
rdÀngth
 < (
ödex
 + 1Ë* 
LLQ_OPT_RDLEN
Ë 
mDNSÁl£
;

2933 
	`umem˝y
(
Œq
, (
mDNSu8
 *)&
l¸
.
r
.
ª§ec
.
rd©a
->
u
.
›t
.
O±D©a
.Œq + (
ödex
 * (*llq)), (*llq));

2934  
mDNSåue
;

2935 
	}
}

2937 
mDNSloˇl
 
	$ªcvRe‰eshRïly
(
mDNS
 *
m
, 
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, 
DNSQue°i⁄
 *
q
)

2939 
LLQ_Info
 *
qInfo
;

2940 
LLQO±D©a
 
pktD©a
;

2942 
qInfo
 = 
q
->
uDNS_öfo
.
Œq
;

2943 i‡(!
	`gëLLQAtIndex
(
m
, 
msg
, 
íd
, &
pktD©a
, 0)Ë{ 
	`LogMsg
("ERRORÑecvRefreshReply - getLLQAtIndex"); ; }

2944 i‡(
pktD©a
.
ŒqOp
 !
kLLQOp_Re‰esh
) ;

2945 i‡(!
	`ßmeID
(
pktD©a
.
id
, 
qInfo
->id)Ë{ 
	`LogMsg
("recvRefreshReply - ID mismatch. Discarding"); ; }

2946 i‡(
pktD©a
.
îr
 !
LLQEº_NoEº‹
Ë{ 
	`LogMsg
("recvRefreshReply:ÑeceivedÉrror %d from server",ÖktData.err); ; }

2948 
qInfo
->
expúe
 = 
	`mDNSPœtf‹mTimeNow
(
m
Ë+ ((
mDNSs32
)
pktD©a
.
Àa£
 * 
mDNSPœtf‹mO√Sec⁄d
);

2949 
qInfo
->
ªåy
 = qInfo->
expúe
 - ((
mDNSs32
)
pktD©a
.
Àa£
 * 
mDNSPœtf‹mO√Sec⁄d
/2);

2951 
qInfo
->
‹igLó£
 = 
pktD©a
.
Àa£
;

2952 
qInfo
->
°©e
 = 
LLQ_E°ablished
;

2953 
	}
}

2955 
mDNSloˇl
 
	$£ndLLQRe‰esh
(
mDNS
 *
m
, 
DNSQue°i⁄
 *
q
, 
mDNSu32
 
Àa£
)

2957 
DNSMesßge
 
msg
;

2958 
mDNSu8
 *
íd
;

2959 
LLQO±D©a
 
Œq
;

2960 
LLQ_Info
 *
öfo
 = 
q
->
uDNS_öfo
.
Œq
;

2961 
mSètus
 
îr
;

2962 
mDNSs32
 
timíow
;

2964 
timíow
 = 
	`mDNSPœtf‹mTimeNow
(
m
);

2965 i‡((
öfo
->
°©e
 =
LLQ_Re‰esh
 && info->
¡rõs
 >
kLLQ_MAX_TRIES
) ||

2966 
öfo
->
expúe
 - 
timíow
 < 0)

2968 
	`LogMsg
("U«bÀÅÿª‰esh LLQ %##†- wû»ªåy i¿%d möuãs", 
q
->
q«me
.
c
, 
kLLQ_DEF_RETRY
/60);

2969 
öfo
->
°©e
 = 
LLQ_Rëry
;

2970 
öfo
->
ªåy
 = 
	`mDNSPœtf‹mTimeNow
(
m
Ë+ 
kLLQ_DEF_RETRY
 * 
mDNSPœtf‹mO√Sec⁄d
;

2971 
öfo
->
dîiveRemovesOnResume
 = 
mDNSåue
;

2976 
Œq
.
vîs
 = 
kLLQ_Vîs
;

2977 
Œq
.
ŒqOp
 = 
kLLQOp_Re‰esh
;

2978 
Œq
.
îr
 = 
LLQEº_NoEº‹
;

2979 
	`umem˝y
(
Œq
.
id
, 
öfo
->id, 8);

2980 
Œq
.
Àa£
 =Üease;

2982 
	`öôülizeQuîy
(&
msg
, 
q
);

2983 
íd
 = 
	`putLLQ
(&
msg
, msg.
d©a
, 
q
, &
Œq
, 
mDNSåue
);

2984 i‡(!
íd
Ë{ 
	`LogMsg
("ERROR: sendLLQRefresh -ÖutLLQ"); ; }

2986 
îr
 = 
	`mDNSSídDNSMesßge
(
m
, &
msg
, 
íd
, 
mDNSI¡îÁ˚_Any
, &
öfo
->
£rvAddr
, info->
£rvP‹t
, -1, 
mDNSNULL
);

2987 i‡(
îr
Ë
	`debugf
("ERROR: sendLLQRefresh - mDNSSendDNSMessageÑeturned %ld",Érr);

2989 i‡(
öfo
->
°©e
 =
LLQ_E°ablished
Ëöfo->
¡rõs
 = 1;

2990 
öfo
->
¡rõs
++;

2991 
öfo
->
°©e
 = 
LLQ_Re‰esh
;

2992 
q
->
La°QTime
 = 
timíow
;

2993 
öfo
->
ªåy
 = (öfo->
expúe
 - 
q
->
La°QTime
) / 2;

2994 
	}
}

2996 
mDNSloˇl
 
mDNSBoﬁ
 
	$ªcvLLQEvít
(
mDNS
 *
m
, 
DNSQue°i⁄
 *
q
, 
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, c⁄° 
mDNSAddr
 *
§ˇddr
, 
mDNSIPP‹t
 
§˝‹t
, 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
)

2998 
DNSMesßge
 
ack
;

2999 
mDNSu8
 *
ackEnd
 = 
ack
.
d©a
;

3000 
mSètus
 
îr
;

3001 
LLQO±D©a
 
›t
;

3003 ()
I¡îÁ˚ID
;

3006 i‡(!
	`gëLLQAtIndex
(
m
, 
msg
, 
íd
, &
›t
, 0)Ë{ 
	`debugf
("Pkàd€†nŸ c⁄èö LLQ O±");  
mDNSÁl£
; }

3007 i‡(!
q
->
uDNS_öfo
.
Œq
Ë{ 
	`LogMsg
("Eº‹:ÑecvLLQEvíà- que°i⁄ obje˘ d€†nŸ c⁄èö LLQ mëad©a");  
mDNSÁl£
; }

3008 i‡(!
	`ßmeID
(
›t
.
id
, 
q
->
uDNS_öfo
.
Œq
->id)Ë{  
mDNSÁl£
; }

3009 i‡(
›t
.
ŒqOp
 !
kLLQOp_Evít
Ë{ i‡(!
q
->
uDNS_öfo
.
Œq
->
¡rõs
Ë
	`LogMsg
("ªcvLLQEvíà- Bad LLQ Opcodê%d", o±.ŒqOp);  
mDNSÁl£
; }

3012 
m
->
uDNS_öfo
.
CuºítQuîy
 = 
q
;

3013 
q
->
uDNS_öfo
.
	`ª•⁄£CÆlback
(
m
, 
msg
, 
íd
, q, q->uDNS_öfo.
c⁄ãxt
);

3014 i‡(
m
->
uDNS_öfo
.
CuºítQuîy
 !
q
Ë 
mDNSåue
;

3017 
	`InôülizeDNSMesßge
(&
ack
.
h
, 
msg
->h.
id
, 
Re•⁄£Fœgs
);

3018 
ackEnd
 = 
	`putLLQ
(&
ack
,áck.
d©a
, 
mDNSNULL
, &
›t
, 
mDNSÁl£
);

3019 i‡(!
ackEnd
Ë{ 
	`LogMsg
("ERROR:ÑecvLLQEvíà-ÖutLLQ");  
mDNSÁl£
; }

3020 
îr
 = 
	`mDNSSídDNSMesßge
(
m
, &
ack
, 
ackEnd
, 
mDNSI¡îÁ˚_Any
, 
§ˇddr
, 
§˝‹t
, -1, 
mDNSNULL
);

3021 i‡(
îr
Ë
	`debugf
("ERROR:ÑecvLLQEvent - mDNSSendDNSMessageÑeturned %ld",Érr);

3022  
mDNSåue
;

3023 
	}
}

3027 
mDNSloˇl
 
	$hndlChÆÀngeRe•⁄£Ack
(
mDNS
 *
m
, 
DNSMesßge
 *
pktMsg
, c⁄° 
mDNSu8
 *
íd
, 
LLQO±D©a
 *
Œq
, 
DNSQue°i⁄
 *
q
)

3029 
LLQ_Info
 *
öfo
 = 
q
->
uDNS_öfo
.
Œq
;

3031 i‡(
Œq
->
îr
Ë{ 
	`LogMsg
("hndlChÆÀngeRe•⁄£Ack -Ñe˚ivedÉº‹ %d from sîvî",Ülq->îr); 
îr‹
; }

3032 i‡(!
	`ßmeID
(
öfo
->
id
, 
Œq
->id)Ë{ 
	`LogMsg
("hndlChallengeResponseAck - ID changed. discarding"); ; }

3033 
öfo
->
expúe
 = 
	`mDNSPœtf‹mTimeNow
(
m
Ë+ ((
mDNSs32
)
Œq
->
Àa£
 * 
mDNSPœtf‹mO√Sec⁄d
);

3034 
öfo
->
ªåy
 = info->
expúe
 - ((
mDNSs32
)
Œq
->
Àa£
 * 
mDNSPœtf‹mO√Sec⁄d
 / 2);

3036 
öfo
->
‹igLó£
 = 
Œq
->
Àa£
;

3037 
öfo
->
°©e
 = 
LLQ_E°ablished
;

3039 
q
->
uDNS_öfo
.
ª•⁄£CÆlback
 = 
ŒqRe•⁄£HndÃ
;

3040 
	`ŒqRe•⁄£HndÃ
(
m
, 
pktMsg
, 
íd
, 
q
, 
mDNSNULL
);

3043 
îr‹
:

3044 
öfo
->
°©e
 = 
LLQ_Eº‹
;

3045 
	}
}

3047 
mDNSloˇl
 
	$£ndChÆÀngeRe•⁄£
(
mDNS
 *
m
, 
DNSQue°i⁄
 *
q
, 
LLQO±D©a
 *
Œq
)

3049 
LLQ_Info
 *
öfo
 = 
q
->
uDNS_öfo
.
Œq
;

3050 
DNSMesßge
 
ª•⁄£
;

3051 
mDNSu8
 *
ª•⁄£På
 = 
ª•⁄£
.
d©a
;

3052 
mSètus
 
îr
;

3053 
LLQO±D©a
 
ŒqBuf
;

3054 
mDNSs32
 
timíow
 = 
	`mDNSPœtf‹mTimeNow
(
m
);

3056 i‡(
öfo
->
¡rõs
++ =
kLLQ_MAX_TRIES
)

3058 
	`LogMsg
("sendChallengeResponse: %d failedáttempts for LLQ %##s. WillÑe-try in %d minutes",

3059 
kLLQ_MAX_TRIES
, 
q
->
q«me
.
c
, 
kLLQ_DEF_RETRY
 / 60);

3060 
öfo
->
°©e
 = 
LLQ_Rëry
;

3061 
öfo
->
ªåy
 = 
timíow
 + (
kLLQ_DEF_RETRY
 * 
mDNSPœtf‹mO√Sec⁄d
);

3066 i‡(!
Œq
)

3068 
Œq
 = &
ŒqBuf
;

3069 
Œq
->
vîs
 = 
kLLQ_Vîs
;

3070 
Œq
->
ŒqOp
 = 
kLLQOp_Sëup
;

3071 
Œq
->
îr
 = 
LLQEº_NoEº‹
;

3072 
	`umem˝y
(
Œq
->
id
, 
öfo
->id, 8);

3073 
Œq
->
Àa£
 = 
öfo
->
‹igLó£
;

3076 
q
->
La°QTime
 = 
timíow
;

3077 
öfo
->
ªåy
 = 
timíow
 + (
kLLQ_INIT_RESEND
 * info->
¡rõs
 * 
mDNSPœtf‹mO√Sec⁄d
);

3079 i‡(
	`c⁄°ru˘QuîyMsg
(&
ª•⁄£
, &
ª•⁄£På
, 
q
)Ë
îr‹
;

3080 
ª•⁄£På
 = 
	`putLLQ
(&
ª•⁄£
,Ñe•⁄£På, 
q
, 
Œq
, 
mDNSÁl£
);

3081 i‡(!
ª•⁄£På
Ë{ 
	`LogMsg
("ERROR: sídChÆÀngeRe•⁄£ -ÖutLLQ"); 
îr‹
; }

3083 
îr
 = 
	`mDNSSídDNSMesßge
(
m
, &
ª•⁄£
, 
ª•⁄£På
, 
mDNSI¡îÁ˚_Any
, &
öfo
->
£rvAddr
, info->
£rvP‹t
, -1, 
mDNSNULL
);

3084 i‡(
îr
Ë
	`debugf
("ERROR: sendChallengeResponse - mDNSSendDNSMessageÑeturned %ld",Érr);

3089 
îr‹
:

3090 
öfo
->
°©e
 = 
LLQ_Eº‹
;

3091 
	}
}

3095 
mDNSloˇl
 
	$hndlReque°ChÆÀnge
(
mDNS
 *
m
, 
DNSMesßge
 *
pktMsg
, c⁄° 
mDNSu8
 *
íd
, 
LLQO±D©a
 *
Œq
, 
DNSQue°i⁄
 *
q
)

3097 
LLQ_Info
 *
öfo
 = 
q
->
uDNS_öfo
.
Œq
;

3098 
mDNSs32
 
timíow
 = 
	`mDNSPœtf‹mTimeNow
(
m
);

3099 
Œq
->
îr
)

3101 
LLQEº_NoEº‹
: ;

3102 
LLQEº_SîvFuŒ
:

3103 
	`LogMsg
("hndlReque°ChÆÀngê-Ñe˚ived SîvFuŒ from sîvî f‹ LLQ %##s. Rëry i¿%lu sec", 
q
->
q«me
.
c
, 
Œq
->
Àa£
);

3104 
öfo
->
ªåy
 = 
timíow
 + ((
mDNSs32
)
Œq
->
Àa£
 * 
mDNSPœtf‹mO√Sec⁄d
);

3105 
öfo
->
°©e
 = 
LLQ_Rëry
;

3106 
	`sim∂eRe•⁄£HndÃ
(
m
, 
pktMsg
, 
íd
, 
q
, 
mDNSNULL
);

3107 
öfo
->
dîiveRemovesOnResume
 = 
mDNSåue
;

3108 
LLQEº_Sètic
:

3109 
öfo
->
°©e
 = 
LLQ_Sètic
;

3110 
	`LogMsg
("LLQ %##s: sètic", 
q
->
q«me
.
c
);

3111 
	`sim∂eRe•⁄£HndÃ
(
m
, 
pktMsg
, 
íd
, 
q
, 
mDNSNULL
);

3113 
LLQEº_F‹mEº
:

3114 
	`LogMsg
("ERROR: hndlReque°ChÆÀngê-Ñe˚ived F‹mEº from sîvî f‹ LLQ %##s", 
q
->
q«me
.
c
);

3115 
îr‹
;

3116 
LLQEº_BadVîs
:

3117 
	`LogMsg
("ERROR: hndlRequestChallenge -Ñeceived BadVers from server");

3118 
îr‹
;

3119 
LLQEº_UnknownEº
:

3120 
	`LogMsg
("ERROR: hndlReque°ChÆÀngê-Ñe˚ived UnknownEº from sîvî f‹ LLQ %##s", 
q
->
q«me
.
c
);

3121 
îr‹
;

3123 
	`LogMsg
("ERROR: hndlReque°ChÆÀngê-Ñe˚ived invÆidÉº‹ %d f‹ LLQ %##s", 
Œq
->
îr
, 
q
->
q«me
.
c
);

3124 
îr‹
;

3127 i‡(
öfo
->
‹igLó£
 !
Œq
->
Àa£
)

3128 
	`debugf
("hndlReque°ChÆÀnge:Ñeque°edÜó£ %lu, gø¡edÜó£ %lu", 
öfo
->
‹igLó£
, 
Œq
->
Àa£
);

3131 
öfo
->
‹igLó£
 = 
Œq
->
Àa£
;

3132 
öfo
->
expúe
 = 
timíow
 + ((
mDNSs32
)
Œq
->
Àa£
 * 
mDNSPœtf‹mO√Sec⁄d
);

3135 
öfo
->
°©e
 = 
LLQ_Sec⁄d¨yReque°
;

3136 
	`umem˝y
(
öfo
->
id
, 
Œq
->id, 8);

3137 
öfo
->
¡rõs
 = 0;

3139 
	`£ndChÆÀngeRe•⁄£
(
m
, 
q
, 
Œq
);

3143 
îr‹
:

3144 
öfo
->
°©e
 = 
LLQ_Eº‹
;

3145 
	}
}

3149 
mDNSloˇl
 
	$ªcvSëupRe•⁄£
(
mDNS
 *
m
, 
DNSMesßge
 *
pktMsg
, c⁄° 
mDNSu8
 *
íd
, 
DNSQue°i⁄
 *
q
, *
˛õ¡C⁄ãxt
)

3151 
DNSQue°i⁄
 
pktQue°i⁄
;

3152 
LLQO±D©a
 
Œq
;

3153 c⁄° 
mDNSu8
 *
±r
 = 
pktMsg
->
d©a
;

3154 
LLQ_Info
 *
öfo
 = 
q
->
uDNS_öfo
.
Œq
;

3155 
mDNSu8
 
rcode
 = (mDNSu8)(
pktMsg
->
h
.
Êags
.
b
[1] & 
kDNSFœg1_RC
);

3157 ()
˛õ¡C⁄ãxt
;

3159 i‡(
rcode
 &&Ñcodê!
kDNSFœg1_RC_NXDomaö
Ë
pﬁl
;

3161 
±r
 = 
	`gëQue°i⁄
(
pktMsg
,Öå, 
íd
, 0, &
pktQue°i⁄
);

3162 i‡(!
±r
Ë{ 
	`LogMsg
("ERROR:ÑecvSëupRe•⁄£ - gëQue°i⁄"); 
pﬁl
; }

3163 i‡(!
	`SameDomaöName
(&
q
->
q«me
, &
pktQue°i⁄
.qname))

3164 { 
	`LogMsg
("ERROR:ÑecvSëupRe•⁄£ - mism©ched que°i⁄ i¿ª•⁄£ f‹Ülq sëu∞%##s", 
q
->
q«me
.
c
); 
pﬁl
; }

3166 i‡(!
	`gëLLQAtIndex
(
m
, 
pktMsg
, 
íd
, &
Œq
, 0)Ë{ 
	`debugf
("ªcvSëupRe•⁄£ - GëLLQAtIndex"); 
pﬁl
; }

3167 i‡(
Œq
.
ŒqOp
 !
kLLQOp_Sëup
Ë{ 
	`LogMsg
("ERROR:ÑecvSëupRe•⁄£ - bad o∞%d",Ülq.ŒqOp); 
pﬁl
; }

3168 i‡(
Œq
.
vîs
 !
kLLQ_Vîs
Ë{ 
	`LogMsg
("ERROR:ÑecvSëupRe•⁄£ - bad vî†%d",Ülq.vîs); 
pﬁl
; }

3170 i‡(
öfo
->
°©e
 =
LLQ_InôülReque°
Ë{ 
	`hndlReque°ChÆÀnge
(
m
, 
pktMsg
, 
íd
, &
Œq
, 
q
); ; }

3171 i‡(
öfo
->
°©e
 =
LLQ_Sec⁄d¨yReque°
Ë{ 
	`hndlChÆÀngeRe•⁄£Ack
(
m
, 
pktMsg
, 
íd
, &
Œq
, 
q
); ; }

3172 
	`LogMsg
("ªcvSëupRe•⁄£ - bad sèã %d", 
öfo
->
°©e
);

3174 
pﬁl
:

3175 
öfo
->
°©e
 = 
LLQ_Pﬁl
;

3176 
q
->
uDNS_öfo
.
ª•⁄£CÆlback
 = 
ŒqRe•⁄£HndÃ
;

3177 
öfo
->
que°i⁄
->
La°QTime
 = 
	`mDNSPœtf‹mTimeNow
(
m
Ë- (2 * 
INIT_UCAST_POLL_INTERVAL
);

3178 
öfo
->
que°i⁄
->
ThisQI¡îvÆ
 = 
INIT_UCAST_POLL_INTERVAL
;

3179 
	}
}

3181 
mDNSloˇl
 
	$°¨tLLQH™dshake
(
mDNS
 *
m
, 
LLQ_Info
 *
öfo
, 
mDNSBoﬁ
 
de„r
)

3183 
DNSMesßge
 
msg
;

3184 
mDNSu8
 *
íd
;

3185 
LLQO±D©a
 
ŒqD©a
;

3186 
DNSQue°i⁄
 *
q
 = 
öfo
->
que°i⁄
;

3187 
mSètus
 
îr
 = 
mSètus_NoEº‹
;

3188 
mDNSs32
 
timíow
 = 
	`mDNSPœtf‹mTimeNow
(
m
);

3189 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

3191 i‡(
	`IsPriv©eV4Addr
(&
u
->
Advîti£dV4
))

3193 i‡(!
u
->
LLQN©Info
)

3195 
öfo
->
°©e
 = 
LLQ_N©M≠Waô
;

3196 
	`SèπLLQN©M≠
(
m
);

3199 i‡(
u
->
LLQN©Info
->
°©e
 =
NATSèã_Eº‹
Ë
pﬁl
;

3200 i‡(
u
->
LLQN©Info
->
°©e
 !
NATSèã_E°ablished
 && u->LLQN©Info->°©ê!
NATSèã_Legacy
)

3201 { 
öfo
->
°©e
 = 
LLQ_N©M≠Waô
; info->
NATM≠
 = 
mDNSåue
; ; }

3202 
öfo
->
NATM≠
 = 
mDNSåue
;

3205 i‡(
öfo
->
¡rõs
++ >
kLLQ_MAX_TRIES
)

3207 
	`debugf
("°¨tLLQH™dshake: %d faûedáâem±†f‹ LLQ %##s. Pﬁlög.", 
kLLQ_MAX_TRIES
, 
q
->
q«me
.
c
, 
kLLQ_DEF_RETRY
 / 60);

3208 
pﬁl
;

3212 
ŒqD©a
.
vîs
 = 
kLLQ_Vîs
;

3213 
ŒqD©a
.
ŒqOp
 = 
kLLQOp_Sëup
;

3214 
ŒqD©a
.
îr
 = 
LLQEº_NoEº‹
;

3215 
	`ubzîo
(
ŒqD©a
.
id
, 8);

3216 
ŒqD©a
.
Àa£
 = 
kLLQ_DefLó£
;

3218 
	`öôülizeQuîy
(&
msg
, 
q
);

3219 
íd
 = 
	`putLLQ
(&
msg
, msg.
d©a
, 
q
, &
ŒqD©a
, 
mDNSåue
);

3220 i‡(!
íd
)

3222 
	`LogMsg
("ERROR: startLLQHandshake -ÖutLLQ");

3223 
öfo
->
°©e
 = 
LLQ_Eº‹
;

3227 i‡(!
de„r
)

3229 
îr
 = 
	`mDNSSídDNSMesßge
(
m
, &
msg
, 
íd
, 
mDNSI¡îÁ˚_Any
, &
öfo
->
£rvAddr
, info->
£rvP‹t
, -1, 
mDNSNULL
);

3230 i‡(
îr
Ë
	`debugf
("ERROR: startLLQHandshake - mDNSSendDNSMessageÑeturned %ld",Érr);

3235 
öfo
->
°©e
 = 
LLQ_InôülReque°
;

3236 
öfo
->
‹igLó£
 = 
kLLQ_DefLó£
;

3237 
öfo
->
ªåy
 = 
timíow
 + (
kLLQ_INIT_RESEND
 * 
mDNSPœtf‹mO√Sec⁄d
);

3238 
q
->
La°QTime
 = 
timíow
;

3239 
q
->
uDNS_öfo
.
ª•⁄£CÆlback
 = 
ªcvSëupRe•⁄£
;

3240 
q
->
uDNS_öfo
.
öã∫Æ
 = 
mDNSåue
;

3243 
pﬁl
:

3244 
öfo
->
que°i⁄
->
uDNS_öfo
.
ª•⁄£CÆlback
 = 
ŒqRe•⁄£HndÃ
;

3245 
öfo
->
°©e
 = 
LLQ_Pﬁl
;

3246 
öfo
->
que°i⁄
->
La°QTime
 = 
	`mDNSPœtf‹mTimeNow
(
m
Ë- (2 * 
INIT_UCAST_POLL_INTERVAL
);

3247 
öfo
->
que°i⁄
->
ThisQI¡îvÆ
 = 
INIT_UCAST_POLL_INTERVAL
;

3248 
	}
}

3251 
mDNSloˇl
 
	$°¨tLLQH™dshakeCÆlback
(
mSètus
 
îr
, 
mDNS
 *c⁄° 
m
, *
ŒqInfo
, c⁄° 
AsyncOpResu…
 *
ªsu…
)

3253 
LLQ_Info
 *
öfo
 = (LLQ_Infÿ*)
ŒqInfo
;

3254 c⁄° 
z⁄eD©a_t
 *
z⁄eInfo
 = 
mDNSNULL
;

3257 i‡(
öfo
->
°©e
 =
LLQ_C™˚Œed
)

3260 
	`debugf
("startLLQHandshake - LLQ Cancelled.");

3261 
öfo
->
que°i⁄
 = 
mDNSNULL
;

3262 
	`u‰ì
(
öfo
);

3266 i‡(!
öfo
->
que°i⁄
)

3267 { 
	`LogMsg
("ERROR: sèπLLQH™dshakeCÆlback invoked wôh NULL que°i⁄"); 
îr‹
; }

3269 i‡(
öfo
->
°©e
 !
LLQ_GëZ⁄eInfo
)

3270 { 
	`LogMsg
("ERROR: sèπLLQH™dshakê- bad sèã %d", 
öfo
->
°©e
); 
îr‹
; }

3272 i‡(
îr
)

3273 { 
	`LogMsg
("ERROR: sèπLLQH™dshakeCÆlback %##†övoked wôhÉº‹ codê%ld", 
öfo
->
que°i⁄
->
q«me
.
c
, 
îr
); 
pﬁl
; }

3275 i‡(!
ªsu…
)

3276 { 
	`LogMsg
("ERROR: sèπLLQH™dshakeCÆlback invoked wôh NULLÑesu…ándÇÿîr‹ code"); 
îr‹
; }

3278 
z⁄eInfo
 = &
ªsu…
->
z⁄eD©a
;

3280 i‡(!
z⁄eInfo
->
ŒqP‹t
.
NŸAnI¡egî
)

3281 { 
	`debugf
("LLQÖ‹àlooku∞Áûed -ÑevîtögÅÿpﬁlög"); 
öfo
->
£rvP‹t
.
NŸAnI¡egî
 = 0; 
pﬁl
; }

3284 
öfo
->
£rvAddr
 = 
z⁄eInfo
->
¥im¨yAddr
;

3285 
öfo
->
£rvP‹t
 = 
z⁄eInfo
->
ŒqP‹t
;

3286 
öfo
->
¡rõs
 = 0;

3288 i‡(
öfo
->
°©e
 =
LLQ_Su•ídDe„ºed
Ëöfo->°©ê
LLQ_Su•íded
;

3289 
	`°¨tLLQH™dshake
(
m
, 
öfo
, 
mDNSÁl£
);

3292 
pﬁl
:

3293 
öfo
->
que°i⁄
->
uDNS_öfo
.
ª•⁄£CÆlback
 = 
ŒqRe•⁄£HndÃ
;

3294 
öfo
->
°©e
 = 
LLQ_Pﬁl
;

3295 
öfo
->
que°i⁄
->
La°QTime
 = 
	`mDNSPœtf‹mTimeNow
(
m
Ë- (2 * 
INIT_UCAST_POLL_INTERVAL
);

3296 
öfo
->
que°i⁄
->
ThisQI¡îvÆ
 = 
INIT_UCAST_POLL_INTERVAL
;

3299 
îr‹
:

3300 
öfo
->
°©e
 = 
LLQ_Eº‹
;

3301 
	}
}

3303 
mDNSloˇl
 
mSètus
 
	$°¨tLLQ
(
mDNS
 *
m
, 
DNSQue°i⁄
 *
que°i⁄
)

3305 
LLQ_Info
 *
öfo
;

3306 
mSètus
 
îr
 = 
mSètus_NoEº‹
;

3309 
öfo
 = 
	`umÆloc
((
LLQ_Info
));

3310 i‡(!
öfo
Ë{ 
	`LogMsg
("ERROR: sèπLLQ - mÆloc");  
mSètus_NoMem‹yEº
; }

3311 
	`ubzîo
(
öfo
, (
LLQ_Info
));

3312 
öfo
->
°©e
 = 
LLQ_GëZ⁄eInfo
;

3315 
öfo
->
que°i⁄
 = question;

3316 
que°i⁄
->
uDNS_öfo
.
Œq
 = 
öfo
;

3318 
que°i⁄
->
uDNS_öfo
.
ª•⁄£CÆlback
 = 
ŒqRe•⁄£HndÃ
;

3320 
îr
 = 
	`°¨tGëZ⁄eD©a
(&
que°i⁄
->
q«me
, 
m
, 
mDNSÁl£
, 
mDNSåue
, 
°¨tLLQH™dshakeCÆlback
, 
öfo
);

3321 i‡(
îr
)

3323 
	`LogMsg
("ERROR: sèπLLQ - sèπGëZ⁄eD©®ªtu∫ed %ld", 
îr
);

3324 
öfo
->
que°i⁄
 = 
mDNSNULL
;

3325 
	`u‰ì
(
öfo
);

3326 
que°i⁄
->
uDNS_öfo
.
Œq
 = 
mDNSNULL
;

3327  
îr
;

3330 
	`LökA˘iveQue°i⁄
(&
m
->
uDNS_öfo
, 
que°i⁄
);

3331  
îr
;

3332 
	}
}

3334 
mDNSloˇl
 
mDNSBoﬁ
 
	$ªcvLLQRe•⁄£
(
mDNS
 *
m
, 
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, c⁄° 
mDNSAddr
 *
§ˇddr
, 
mDNSIPP‹t
 
§˝‹t
, c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
)

3336 
DNSQue°i⁄
 
pktQ
, *
q
;

3337 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

3338 c⁄° 
mDNSu8
 *
±r
 = 
msg
->
d©a
;

3339 
LLQ_Info
 *
ŒqInfo
;

3341 i‡(!
msg
->
h
.
numQue°i⁄s
Ë 
mDNSÁl£
;

3343 
±r
 = 
	`gëQue°i⁄
(
msg
,Öå, 
íd
, 0, &
pktQ
);

3344 i‡(!
±r
Ë 
mDNSÁl£
;

3345 
pktQ
.
uDNS_öfo
.
id
 = 
msg
->
h
.id;

3347 
q
 = 
u
->
A˘iveQuîõs
;

3348 
q
)

3350 
ŒqInfo
 = 
q
->
uDNS_öfo
.
Œq
;

3351 i‡(
q
->
L⁄gLived
 &&

3352 
ŒqInfo
 &&

3353 
q
->
q«mehash
 =
pktQ
.qnamehash &&

3354 
q
->
qty≥
 =
pktQ
.qtype &&

3355 
	`SameDomaöName
(&
q
->
q«me
, &
pktQ
.qname))

3357 
u
->
CuºítQuîy
 = 
q
;

3358 i‡(
ŒqInfo
->
°©e
 =
LLQ_E°ablished
 || (ŒqInfo->°©ê=
LLQ_Re‰esh
 && 
msg
->
h
.
numAnswîs
))

3359 { i‡(
	`ªcvLLQEvít
(
m
, 
q
, 
msg
, 
íd
, 
§ˇddr
, 
§˝‹t
, 
I¡îÁ˚ID
)Ë 
mDNSåue
; }

3360 i‡(
msg
->
h
.
id
.
NŸAnI¡egî
 =
q
->
uDNS_öfo
.id.NotAnInteger)

3362 i‡(
ŒqInfo
->
°©e
 =
LLQ_Re‰esh
 && 
msg
->
h
.
numAddôi⁄Æs
 && !msg->h.
numAnswîs
)

3363 { 
	`ªcvRe‰eshRïly
(
m
, 
msg
, 
íd
, 
q
);  
mDNSåue
; }

3364 i‡(
ŒqInfo
->
°©e
 < 
LLQ_Sètic
)

3366 i‡((
ŒqInfo
->
°©e
 !
LLQ_InôülReque°
 &&ÜlqInfo->°©ê!
LLQ_Sec⁄d¨yReque°
Ë|| 
	`mDNSSameAddªss
(
§ˇddr
, &ŒqInfo->
£rvAddr
))

3367 { 
q
->
uDNS_öfo
.
	`ª•⁄£CÆlback
(
m
, 
msg
, 
íd
, q, q->uDNS_öfo.
c⁄ãxt
);  
mDNSåue
; }

3371 
q
 = q->
√xt
;

3373  
mDNSÁl£
;

3374 
	}
}

3376 
mDNSexp‹t
 
mDNSBoﬁ
 
	$uDNS_IsA˘iveQuîy
(
DNSQue°i⁄
 *c⁄° 
que°i⁄
, 
uDNS_GlobÆInfo
 *
u
)

3378 
DNSQue°i⁄
 *
q
;

3380 
q
 = 
u
->
A˘iveQuîõs
; q; q = q->
√xt
)

3382 i‡(
q
 =
que°i⁄
)

3384 i‡(!
que°i⁄
->
uDNS_öfo
.
id
.
NŸAnI¡egî
 || que°i⁄->
I¡îÁ˚ID
 =
mDNSI¡îÁ˚_LoˇlO∆y
 || 
	`IsLoˇlDomaö
(&que°i⁄->
q«me
))

3385 
	`LogMsg
("Warning: Question %##s in Active Unicast QueryÜist with id %d, interfaceID %p",

3386 
que°i⁄
->
q«me
.
c
, que°i⁄->
uDNS_öfo
.
id
.
NŸAnI¡egî
, que°i⁄->
I¡îÁ˚ID
);

3387  
mDNSåue
;

3390  
mDNSÁl£
;

3391 
	}
}

3394 
mDNSloˇl
 
	$°›LLQ
(
mDNS
 *
m
, 
DNSQue°i⁄
 *
que°i⁄
)

3396 
LLQ_Info
 *
öfo
 = 
que°i⁄
->
uDNS_öfo
.
Œq
;

3397 ()
m
;

3399 i‡(!
que°i⁄
->
L⁄gLived
Ë{ 
	`LogMsg
("ERROR: stopLLQ - LongLived flagÇot set"); ; }

3400 i‡(!
öfo
Ë{ 
	`LogMsg
("ERROR: stopLLQ -Ülq info is NULL"); ; }

3402 
öfo
->
°©e
)

3404 
LLQ_UnInô
:

3405 
	`LogMsg
("ERROR: stopLLQ - state LLQ_UnInit");

3408 
LLQ_GëZ⁄eInfo
:

3409 
LLQ_Su•ídDe„ºed
:

3410 
öfo
->
que°i⁄
 = 
mDNSNULL
;

3411 
öfo
->
°©e
 = 
LLQ_C™˚Œed
;

3413 
LLQ_E°ablished
:

3414 
LLQ_Re‰esh
:

3416 
	`£ndLLQRe‰esh
(
m
, 
que°i⁄
, 0);

3417 
íd
;

3419 
	`debugf
("°›LLQ - sûíéy disˇrdög LLQ i¿°©ê%d", 
öfo
->
°©e
);

3420 
íd
;

3423 
íd
:

3424 i‡(
öfo
->
NATM≠
Ëöfo->NATM≠ = 
mDNSÁl£
;

3425 
	`CheckF‹Uƒe„ªn˚dLLQM≠pög
(
m
);

3426 
öfo
->
que°i⁄
 = 
mDNSNULL
;

3427 
	`u‰ì
(
öfo
);

3428 
que°i⁄
->
uDNS_öfo
.
Œq
 = 
mDNSNULL
;

3429 
que°i⁄
->
L⁄gLived
 = 
mDNSÁl£
;

3430 
	}
}

3432 
mDNSexp‹t
 
mSètus
 
	$uDNS_St›Quîy
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *c⁄° 
que°i⁄
)

3434 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

3435 
DNSQue°i⁄
 *
q±r
, *
¥ev
 = 
mDNSNULL
;

3436 
CacheRec‹d
 *
ka
;

3438 
q±r
 = 
u
->
A˘iveQuîõs
;

3439 
q±r
)

3441 i‡(
q±r
 =
que°i⁄
)

3443 i‡(
que°i⁄
->
L⁄gLived
 && que°i⁄->
uDNS_öfo
.
Œq
)

3444 
	`°›LLQ
(
m
, 
que°i⁄
);

3445 i‡(
m
->
uDNS_öfo
.
CuºítQuîy
 =
que°i⁄
)

3446 
m
->
uDNS_öfo
.
CuºítQuîy
 = m->uDNS_öfo.CuºítQuîy->
√xt
;

3447 
que°i⁄
->
uDNS_öfo
.
knownAnswîs
)

3449 
ka
 = 
que°i⁄
->
uDNS_öfo
.
knownAnswîs
;

3450 
que°i⁄
->
uDNS_öfo
.
knownAnswîs
 = que°i⁄->uDNS_öfo.knownAnswîs->
√xt
;

3451 
	`u‰ì
(
ka
);

3453 i‡(
¥ev
Ë¥ev->
√xt
 = 
que°i⁄
->next;

3454 
u
->
A˘iveQuîõs
 = 
que°i⁄
->
√xt
;

3455  
mSètus_NoEº‹
;

3457 
¥ev
 = 
q±r
;

3458 
q±r
 = q±r->
√xt
;

3460 
	`LogMsg
("uDNS_St›Quîy:Çÿsuchá˘ivêquîy (%##s)", 
que°i⁄
->
q«me
.
c
);

3461  
mSètus_UnknownEº
;

3462 
	}
}

3464 
mDNSloˇl
 
mSètus
 
	$°¨tQuîy
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *c⁄° 
que°i⁄
, 
mDNSBoﬁ
 
öã∫Æ
)

3466 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

3468 i‡(!
	`VÆid©eDomaöName
(&
que°i⁄
->
q«me
))

3470 
	`LogMsg
("Aâem±Åÿ°¨àquîy wôh invÆid q«mê%##†(%s)", 
que°i⁄
->
q«me
.
c
, 
	`DNSTy≥Name
(que°i⁄->
qty≥
));

3471  
mSètus_InvÆid
;

3474 
que°i⁄
->
√xt
 = 
mDNSNULL
;

3475 
que°i⁄
->
q«mehash
 = 
	`DomaöNameHashVÆue
(&que°i⁄->
q«me
);

3476 
que°i⁄
->
uDNS_öfo
.
id
 = 
	`√wMesßgeID
(
u
);

3477 
que°i⁄
->
uDNS_öfo
.
Answîed
 = 
mDNSÁl£
;

3480 i‡(
que°i⁄
->
L⁄gLived
Ë 
	`°¨tLLQ
(
m
, question);

3482 
que°i⁄
->
ThisQI¡îvÆ
 = 
INIT_UCAST_POLL_INTERVAL
 / 2;

3483 
que°i⁄
->
La°QTime
 = 
	`mDNSPœtf‹mTimeNow
(
m
Ë- que°i⁄->
ThisQI¡îvÆ
;

3485 
que°i⁄
->
uDNS_öfo
.
öã∫Æ
 = internal;

3486 
	`LökA˘iveQue°i⁄
(
u
, 
que°i⁄
);

3487 
que°i⁄
->
uDNS_öfo
.
knownAnswîs
 = 
mDNSNULL
;

3488 
	`LogO≥øti⁄
("uDNS sèπQuîy: %##†(%s)", 
que°i⁄
->
q«me
.
c
, 
	`DNSTy≥Name
(que°i⁄->
qty≥
));

3490  
mSètus_NoEº‹
;

3491 
	}
}

3493 
mDNSexp‹t
 
mSètus
 
	$uDNS_SèπQuîy
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *c⁄° 
que°i⁄
)

3495 
	`ubzîo
(&
que°i⁄
->
uDNS_öfo
, (
uDNS_Que°i⁄Info
));

3496 
que°i⁄
->
uDNS_öfo
.
ª•⁄£CÆlback
 = 
sim∂eRe•⁄£HndÃ
;

3497 
que°i⁄
->
uDNS_öfo
.
c⁄ãxt
 = 
mDNSNULL
;

3499  
	`°¨tQuîy
(
m
, 
que°i⁄
, 0);

3500 
	}
}

3503 
mDNSloˇl
 
mSètus
 
	$°¨tI¡î«lQuîy
(
DNSQue°i⁄
 *
q
, 
mDNS
 *
m
, 
I¡î«lRe•⁄£HndÃ
 
ˇŒback
, *
hndÃC⁄ãxt
)

3505 
	`ubzîo
(&
q
->
uDNS_öfo
, (
uDNS_Que°i⁄Info
));

3506 
q
->
Que°i⁄C⁄ãxt
 = 
hndÃC⁄ãxt
;

3507 
q
->
uDNS_öfo
.
ª•⁄£CÆlback
 = 
ˇŒback
;

3508 
q
->
uDNS_öfo
.
c⁄ãxt
 = 
hndÃC⁄ãxt
;

3509  
	`°¨tQuîy
(
m
, 
q
, 1);

3510 
	}
}

3515 #i‡
COMPILER_LIKES_PRAGMA_MARK


3516 #¥agm®
m¨k
 - 
Domaö
 -> 
Name
 
Sîvî
 
C⁄vîsi⁄


3558 
	möô
,

3559 
	mlookupSOA
,

3560 
	mfoundZ⁄e
,

3561 
	mlookupNS
,

3562 
	mfoundNS
,

3563 
	mlookupA
,

3564 
	mfoundA
,

3565 
	mlookupP‹t
,

3566 
	mfoundP‹t
,

3567 
	mcom∂ëe


3568 } 
	t¡aSèã
;

3573 
	msmC⁄töue
,

3574 
	msmBªak
,

3575 
	msmEº‹


3576 } 
	tsmA˘i⁄
;

3580 
domaö«me
 
	m‹igName
;

3581 
domaö«me
 *
	mcurSOA
;

3582 
¡aSèã
 
	m°©e
;

3583 
mDNS
 *
	mm
;

3584 
domaö«me
 
	mz⁄e
;

3585 
mDNSu16
 
	mz⁄eCœss
;

3586 
domaö«me
 
	mns
;

3587 
mDNSv4Addr
 
	maddr
;

3588 
DNSQue°i⁄
 
	mque°i⁄
;

3589 
DNSQue°i⁄
 
	mexåaQue°i⁄
;

3590 
mDNSBoﬁ
 
	mque°i⁄A˘ive
;

3591 
mDNSBoﬁ
 
	mfödUpd©eP‹t
;

3592 
mDNSBoﬁ
 
	mfödLLQP‹t
;

3593 
mDNSIPP‹t
 
	mupd©eP‹t
;

3594 
mDNSIPP‹t
 
	mŒqP‹t
;

3595 
AsyncOpCÆlback
 *
	mˇŒback
;

3596 *
	mˇŒbackInfo
;

3597 } 
	t¡aC⁄ãxt
;

3602 
mDNSloˇl
 
gëZ⁄eD©a
(
mDNS
 *c⁄° 
m
, 
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, 
DNSQue°i⁄
 *
que°i⁄
, *
c⁄ãxtPå
);

3603 
mDNSloˇl
 
smA˘i⁄
 
hndlLookupSOA
(
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, 
¡aC⁄ãxt
 *
c⁄ãxt
);

3604 
mDNSloˇl
 
¥o˚ssSOA
(
¡aC⁄ãxt
 *
c⁄ãxt
, 
Resour˚Rec‹d
 *
º
);

3605 
mDNSloˇl
 
smA˘i⁄
 
c⁄fúmNS
(
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, 
¡aC⁄ãxt
 *
c⁄ãxt
);

3606 
mDNSloˇl
 
smA˘i⁄
 
lookupNSAddr
(
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, 
¡aC⁄ãxt
 *
c⁄ãxt
);

3607 
mDNSloˇl
 
smA˘i⁄
 
hndlLookupP‹ts
(
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, 
¡aC⁄ãxt
 *
c⁄ãxt
);

3610 
mDNSloˇl
 
mSètus
 
	$°¨tGëZ⁄eD©a
(
domaö«me
 *
«me
, 
mDNS
 *
m
, 
mDNSBoﬁ
 
födUpd©eP‹t
, mDNSBoﬁ 
födLLQP‹t
,

3611 
AsyncOpCÆlback
 
ˇŒback
, *
ˇŒbackInfo
)

3613 
¡aC⁄ãxt
 *
c⁄ãxt
 = (¡aC⁄ãxt*)
	`umÆloc
((ntaContext));

3614 i‡(!
c⁄ãxt
Ë{ 
	`LogMsg
("ERROR: sèπGëZ⁄eD©®- umÆlo¯Áûed");  
mSètus_NoMem‹yEº
; }

3615 
	`ubzîo
(
c⁄ãxt
, (
¡aC⁄ãxt
));

3616 
	`AssignDomaöName
(&
c⁄ãxt
->
‹igName
, 
«me
);

3617 
c⁄ãxt
->
°©e
 = 
öô
;

3618 
c⁄ãxt
->
m
 = m;

3619 
c⁄ãxt
->
ˇŒback
 = callback;

3620 
c⁄ãxt
->
ˇŒbackInfo
 = callbackInfo;

3621 
c⁄ãxt
->
födUpd©eP‹t
 = findUpdatePort;

3622 
c⁄ãxt
->
födLLQP‹t
 = findLLQPort;

3623 
	`gëZ⁄eD©a
(
m
, 
mDNSNULL
, mDNSNULL, mDNSNULL, 
c⁄ãxt
);

3624  
mSètus_NoEº‹
;

3625 
	}
}

3628 
mDNSloˇl
 
	$gëZ⁄eD©a
(
mDNS
 *c⁄° 
m
, 
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, 
DNSQue°i⁄
 *
que°i⁄
, *
c⁄ãxtPå
)

3630 
AsyncOpResu…
 
ªsu…
;

3631 
¡aC⁄ãxt
 *
c⁄ãxt
 = (¡aC⁄ãxt*)
c⁄ãxtPå
;

3632 
smA˘i⁄
 
a˘i⁄
;

3635 ()
m
;

3636 ()
que°i⁄
;

3639 i‡(
c⁄ãxt
->
que°i⁄A˘ive
)

3641 
	`uDNS_St›Quîy
(
c⁄ãxt
->
m
, &c⁄ãxt->
que°i⁄
);

3642 
c⁄ãxt
->
que°i⁄A˘ive
 = 
mDNSÁl£
;

3645 i‡(
msg
 && msg->
h
.
Êags
.
b
[2] >> 4 && msg->h.Êags.b[2] >> 4 !
kDNSFœg1_RC_NXDomaö
)

3648 
	`LogMsg
("ERROR: gëZ⁄eD©®-Ñe˚ivedÑe•⁄£ w/Ñcodê%d", 
msg
->
h
.
Êags
.
b
[2] >> 4);

3649 
îr‹
;

3652 
c⁄ãxt
->
°©e
)

3654 
öô
:

3655 
lookupSOA
:

3656 
a˘i⁄
 = 
	`hndlLookupSOA
(
msg
, 
íd
, 
c⁄ãxt
);

3657 i‡(
a˘i⁄
 =
smEº‹
Ë
îr‹
;

3658 i‡(
a˘i⁄
 =
smBªak
) ;

3659 
foundZ⁄e
:

3660 
lookupNS
:

3661 
a˘i⁄
 = 
	`c⁄fúmNS
(
msg
, 
íd
, 
c⁄ãxt
);

3662 i‡(
a˘i⁄
 =
smEº‹
Ë
îr‹
;

3663 i‡(
a˘i⁄
 =
smBªak
) ;

3664 
foundNS
:

3665 
lookupA
:

3666 
a˘i⁄
 = 
	`lookupNSAddr
(
msg
, 
íd
, 
c⁄ãxt
);

3667 i‡(
a˘i⁄
 =
smEº‹
Ë
îr‹
;

3668 i‡(
a˘i⁄
 =
smBªak
) ;

3669 
foundA
:

3670 i‡(!
c⁄ãxt
->
födUpd©eP‹t
 && !c⁄ãxt->
födLLQP‹t
)

3672 
c⁄ãxt
->
°©e
 = 
com∂ëe
;

3675 
lookupP‹t
:

3676 
a˘i⁄
 = 
	`hndlLookupP‹ts
(
msg
, 
íd
, 
c⁄ãxt
);

3677 i‡(
a˘i⁄
 =
smEº‹
Ë
îr‹
;

3678 i‡(
a˘i⁄
 =
smBªak
) ;

3679 i‡(
a˘i⁄
 =
smC⁄töue
Ë
c⁄ãxt
->
°©e
 = 
com∂ëe
;

3680 
foundP‹t
:

3681 
com∂ëe
: ;

3684 i‡(
c⁄ãxt
->
°©e
 !
com∂ëe
)

3686 
	`LogMsg
("ERROR: gëZ⁄eD©®-Éxôed sèã machöêwôh sèã %d", 
c⁄ãxt
->
°©e
);

3687 
îr‹
;

3690 
ªsu…
.
ty≥
 = 
z⁄eD©aResu…
;

3691 
ªsu…
.
z⁄eD©a
.
¥im¨yAddr
.
ù
.
v4
 = 
c⁄ãxt
->
addr
;

3692 
ªsu…
.
z⁄eD©a
.
¥im¨yAddr
.
ty≥
 = 
mDNSAddrTy≥_IPv4
;

3693 
	`AssignDomaöName
(&
ªsu…
.
z⁄eD©a
.
z⁄eName
, &
c⁄ãxt
->
z⁄e
);

3694 
ªsu…
.
z⁄eD©a
.
z⁄eCœss
 = 
c⁄ãxt
->zoneClass;

3695 
ªsu…
.
z⁄eD©a
.
ŒqP‹t
 = 
c⁄ãxt
->
födLLQP‹t
 ? c⁄ãxt->ŒqP‹à: 
zîoIPP‹t
;

3696 
ªsu…
.
z⁄eD©a
.
upd©eP‹t
 = 
c⁄ãxt
->
födUpd©eP‹t
 ? c⁄ãxt->upd©eP‹à: 
zîoIPP‹t
;

3697 
c⁄ãxt
->
	`ˇŒback
(
mSètus_NoEº‹
, c⁄ãxt->
m
, c⁄ãxt->
ˇŒbackInfo
, &
ªsu…
);

3698 
˛ónup
;

3700 
îr‹
:

3701 i‡(
c⁄ãxt
 && c⁄ãxt->
ˇŒback
)

3702 
c⁄ãxt
->
	`ˇŒback
(
mSètus_UnknownEº
, c⁄ãxt->
m
, c⁄ãxt->
ˇŒbackInfo
, 
mDNSNULL
);

3703 
˛ónup
:

3704 i‡(
c⁄ãxt
 && c⁄ãxt->
que°i⁄A˘ive
)

3706 
	`uDNS_St›Quîy
(
c⁄ãxt
->
m
, &c⁄ãxt->
que°i⁄
);

3707 
c⁄ãxt
->
que°i⁄A˘ive
 = 
mDNSÁl£
;

3709 i‡(
c⁄ãxt
Ë
	`u‰ì
(context);

3710 
	}
}

3712 
mDNSloˇl
 
smA˘i⁄
 
	$hndlLookupSOA
(
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, 
¡aC⁄ãxt
 *
c⁄ãxt
)

3714 
mSètus
 
îr
;

3715 
L¨geCacheRec‹d
 
l¸
;

3716 
Resour˚Rec‹d
 *
º
 = &
l¸
.
r
.
ª§ec
;

3717 
DNSQue°i⁄
 *
quîy
 = &
c⁄ãxt
->
que°i⁄
;

3718 c⁄° 
mDNSu8
 *
±r
;

3720 i‡(
msg
)

3723 
i
;

3724 
±r
 = 
	`LoˇãAnswîs
(
msg
, 
íd
);

3725 
i
 = 0; i < 
msg
->
h
.
numAnswîs
; i++)

3727 
±r
 = 
	`GëL¨geResour˚Rec‹d
(
c⁄ãxt
->
m
, 
msg
,Öå, 
íd
, 0, 
kDNSRec‹dTy≥PackëAns
, &
l¸
);

3728 i‡(!
±r
Ë{ 
	`LogMsg
("ERROR: hndlLookupSOA, Answî†- GëL¨geResour˚Rec‹dÑëu∫ed NULL");  
smEº‹
; }

3729 i‡(
º
->
ºty≥
 =
kDNSTy≥_SOA
 && 
	`SameDomaöName
(
c⁄ãxt
->
curSOA
,Ñr->
«me
))

3731 
	`¥o˚ssSOA
(
c⁄ãxt
, 
º
);

3732  
smC⁄töue
;

3735 
±r
 = 
	`LoˇãAuth‹ôõs
(
msg
, 
íd
);

3737 
i
 = 0; i < 
msg
->
h
.
numAuth‹ôõs
; i++)

3739 
±r
 = 
	`GëL¨geResour˚Rec‹d
(
c⁄ãxt
->
m
, 
msg
,Öå, 
íd
, 0, 
kDNSRec‹dTy≥PackëAns
, &
l¸
);

3740 i‡(!
±r
Ë{ 
	`LogMsg
("ERROR: hndlLookupSOA, Auth‹ôy - GëL¨geResour˚Rec‹dÑëu∫ed NULL");  
smEº‹
; }

3741 i‡(
º
->
ºty≥
 =
kDNSTy≥_SOA
)

3743 
	`¥o˚ssSOA
(
c⁄ãxt
, 
º
);

3744  
smC⁄töue
;

3749 i‡(
c⁄ãxt
->
°©e
 !
öô
 && !c⁄ãxt->
curSOA
->
c
[0])

3752 
	`LogMsg
("ERROR: hndlLookupSOA -ÑecursedÅoÑootÜabel of %##s without finding SOA",

3753 
c⁄ãxt
->
‹igName
.
c
);

3754  
smEº‹
;

3757 
	`ubzîo
(
quîy
, (
DNSQue°i⁄
));

3759 i‡(
c⁄ãxt
->
°©e
 =
öô
Ëc⁄ãxt->
curSOA
 = &c⁄ãxt->
‹igName
;

3760 
c⁄ãxt
->
curSOA
 = (
domaö«me
 *)(c⁄ãxt->curSOA->
c
 + context->curSOA->c[0]+1);

3762 
c⁄ãxt
->
°©e
 = 
lookupSOA
;

3763 
	`AssignDomaöName
(&
quîy
->
q«me
, 
c⁄ãxt
->
curSOA
);

3764 
quîy
->
qty≥
 = 
kDNSTy≥_SOA
;

3765 
quîy
->
q˛ass
 = 
kDNSCœss_IN
;

3766 
îr
 = 
	`°¨tI¡î«lQuîy
(
quîy
, 
c⁄ãxt
->
m
, 
gëZ⁄eD©a
, context);

3767 
c⁄ãxt
->
que°i⁄A˘ive
 = 
mDNSåue
;

3768 i‡(
îr
Ë
	`LogMsg
("hndlLookupSOA: startInternalQueryÑeturnedÉrror %ld (breaking untilÇextÖeriodicÑetransmission)",Érr);

3770  
smBªak
;

3771 
	}
}

3773 
mDNSloˇl
 
	$¥o˚ssSOA
(
¡aC⁄ãxt
 *
c⁄ãxt
, 
Resour˚Rec‹d
 *
º
)

3775 
	`AssignDomaöName
(&
c⁄ãxt
->
z⁄e
, 
º
->
«me
);

3776 
c⁄ãxt
->
z⁄eCœss
 = 
º
->
º˛ass
;

3777 
	`AssignDomaöName
(&
c⁄ãxt
->
ns
, &
º
->
rd©a
->
u
.
sﬂ
.
m«me
);

3778 
c⁄ãxt
->
°©e
 = 
foundZ⁄e
;

3779 
	}
}

3782 
mDNSloˇl
 
smA˘i⁄
 
	$c⁄fúmNS
(
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, 
¡aC⁄ãxt
 *
c⁄ãxt
)

3784 
DNSQue°i⁄
 *
quîy
 = &
c⁄ãxt
->
que°i⁄
;

3785 
mSètus
 
îr
;

3786 
L¨geCacheRec‹d
 
l¸
;

3787 c⁄° 
Resour˚Rec‹d
 *c⁄° 
º
 = &
l¸
.
r
.
ª§ec
;

3788 c⁄° 
mDNSu8
 *
±r
;

3789 
i
;

3791 i‡(
c⁄ãxt
->
°©e
 =
foundZ⁄e
)

3794 
	`AssignDomaöName
(&
quîy
->
q«me
, &
c⁄ãxt
->
z⁄e
);

3795 
quîy
->
qty≥
 = 
kDNSTy≥_NS
;

3796 
quîy
->
q˛ass
 = 
kDNSCœss_IN
;

3797 
îr
 = 
	`°¨tI¡î«lQuîy
(
quîy
, 
c⁄ãxt
->
m
, 
gëZ⁄eD©a
, context);

3798 
c⁄ãxt
->
que°i⁄A˘ive
 = 
mDNSåue
;

3799 i‡(
îr
Ë
	`LogMsg
("confirmNS: startInternalQueryÑeturnedÉrror %ld (breaking untilÇextÖeriodicÑetransmission",Érr);

3800 
c⁄ãxt
->
°©e
 = 
lookupNS
;

3801  
smBªak
;

3803 i‡(
c⁄ãxt
->
°©e
 =
lookupNS
)

3805 
±r
 = 
	`LoˇãAnswîs
(
msg
, 
íd
);

3806 
i
 = 0; i < 
msg
->
h
.
numAnswîs
; i++)

3808 
±r
 = 
	`GëL¨geResour˚Rec‹d
(
c⁄ãxt
->
m
, 
msg
,Öå, 
íd
, 0, 
kDNSRec‹dTy≥PackëAns
, &
l¸
);

3809 i‡(!
±r
Ë{ 
	`LogMsg
("ERROR: c⁄fúmNS, Answî†- GëL¨geResour˚Rec‹dÑëu∫ed NULL");  
smEº‹
; }

3810 i‡(
º
->
ºty≥
 =
kDNSTy≥_NS
 &&

3811 
	`SameDomaöName
(&
c⁄ãxt
->
z⁄e
, 
º
->
«me
Ë&& SameDomaöName(&c⁄ãxt->
ns
, &º->
rd©a
->
u
.name))

3813 
c⁄ãxt
->
°©e
 = 
foundNS
;

3814  
smC⁄töue
;

3817 
	`debugf
("ERROR: couldÇŸ c⁄fúmÉxi°í˚ o‡ªc‹d %##†NS %##s", 
c⁄ãxt
->
z⁄e
.
c
, c⁄ãxt->
ns
.c);

3818  
smEº‹
;

3820 { 
	`LogMsg
("ERROR: c⁄fúmNS - bad sèã %d", 
c⁄ãxt
->
°©e
);  
smEº‹
; }

3821 
	}
}

3823 
mDNSloˇl
 
smA˘i⁄
 
	$quîyNSAddr
(
¡aC⁄ãxt
 *
c⁄ãxt
)

3825 
mSètus
 
îr
;

3826 
DNSQue°i⁄
 *
quîy
 = &
c⁄ãxt
->
que°i⁄
;

3828 
	`AssignDomaöName
(&
quîy
->
q«me
, &
c⁄ãxt
->
ns
);

3829 
quîy
->
qty≥
 = 
kDNSTy≥_A
;

3830 
quîy
->
q˛ass
 = 
kDNSCœss_IN
;

3831 
îr
 = 
	`°¨tI¡î«lQuîy
(
quîy
, 
c⁄ãxt
->
m
, 
gëZ⁄eD©a
, context);

3832 
c⁄ãxt
->
que°i⁄A˘ive
 = 
mDNSåue
;

3833 i‡(
îr
Ë
	`LogMsg
("confirmNS: startInternalQueryÑeturnedÉrror %ld (breaking untilÇextÖeriodicÑetransmission)",Érr);

3834 
c⁄ãxt
->
°©e
 = 
lookupA
;

3835  
smBªak
;

3836 
	}
}

3838 
mDNSloˇl
 
smA˘i⁄
 
	$lookupNSAddr
(
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, 
¡aC⁄ãxt
 *
c⁄ãxt
)

3840 c⁄° 
mDNSu8
 *
±r
;

3841 
i
;

3842 
L¨geCacheRec‹d
 
l¸
;

3843 
Resour˚Rec‹d
 *
º
 = &
l¸
.
r
.
ª§ec
;

3845 i‡(
c⁄ãxt
->
°©e
 =
foundNS
)

3848 i‡(!
msg
->
h
.
numAddôi⁄Æs
Ë 
	`quîyNSAddr
(
c⁄ãxt
);

3849 
±r
 = 
	`LoˇãAddôi⁄Æs
(
msg
, 
íd
);

3850 i‡(!
±r
)

3852 
	`LogMsg
("ERROR:ÜookupNSAdd∏- LoˇãAddôi⁄Æ†ªtu∫ed NULL,Éx≥˘ed %dáddôi⁄Æs", 
msg
->
h
.
numAddôi⁄Æs
);

3853  
	`quîyNSAddr
(
c⁄ãxt
);

3857 
i
 = 0; i < 
msg
->
h
.
numAddôi⁄Æs
; i++)

3859 
±r
 = 
	`GëL¨geResour˚Rec‹d
(
c⁄ãxt
->
m
, 
msg
,Öå, 
íd
, 0, 
kDNSRec‹dTy≥PackëAns
, &
l¸
);

3860 i‡(!
±r
)

3862 
	`LogMsg
("ERROR:ÜookupNSAddr, Additionals - GetLargeResourceRecordÑeturned NULL");

3863  
	`quîyNSAddr
(
c⁄ãxt
);

3865 i‡(
º
->
ºty≥
 =
kDNSTy≥_A
 && 
	`SameDomaöName
(&
c⁄ãxt
->
ns
,Ñr->
«me
))

3867 
c⁄ãxt
->
addr
 = 
º
->
rd©a
->
u
.
ùv4
;

3868 
c⁄ãxt
->
°©e
 = 
foundA
;

3869  
smC⁄töue
;

3874  
	`quîyNSAddr
(
c⁄ãxt
);

3876 i‡(
c⁄ãxt
->
°©e
 =
lookupA
)

3878 
±r
 = 
	`LoˇãAnswîs
(
msg
, 
íd
);

3879 i‡(!
±r
Ë{ 
	`LogMsg
("ERROR:ÜookupNSAddr: LoˇãAnswî†ªtu∫ed NULL");  
smEº‹
; }

3880 
i
 = 0; i < 
msg
->
h
.
numAnswîs
; i++)

3882 
±r
 = 
	`GëL¨geResour˚Rec‹d
(
c⁄ãxt
->
m
, 
msg
,Öå, 
íd
, 0, 
kDNSRec‹dTy≥PackëAns
, &
l¸
);

3883 i‡(!
±r
Ë{ 
	`LogMsg
("ERROR:ÜookupNSAddr, Answers - GetLargeResourceRecordÑeturned NULL"); ; }

3884 i‡(
º
->
ºty≥
 =
kDNSTy≥_A
 && 
	`SameDomaöName
(&
c⁄ãxt
->
ns
,Ñr->
«me
))

3886 
c⁄ãxt
->
addr
 = 
º
->
rd©a
->
u
.
ùv4
;

3887 
c⁄ãxt
->
°©e
 = 
foundA
;

3888  
smC⁄töue
;

3891 
	`LogMsg
("ERROR:ÜookupNSAddr: AddressÑecordÇot found inánswer section");

3892  
smEº‹
;

3894 { 
	`LogMsg
("ERROR:ÜookupNSAdd∏- bad sèã %d", 
c⁄ãxt
->
°©e
);  
smEº‹
; }

3895 
	}
}

3897 
mDNSloˇl
 
smA˘i⁄
 
	$lookupDNSP‹t
(
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, 
¡aC⁄ãxt
 *
c⁄ãxt
, *
p‹tName
, 
mDNSIPP‹t
 *
p‹t
)

3899 
i
;

3900 
L¨geCacheRec‹d
 
l¸
;

3901 c⁄° 
mDNSu8
 *
±r
;

3902 
DNSQue°i⁄
 *
q
;

3903 
mSètus
 
îr
;

3905 i‡(
c⁄ãxt
->
°©e
 =
lookupP‹t
)

3907 i‡(!
msg
Ë{ 
	`LogMsg
("ERROR: hndlLookupUpd©eP‹à- NULL mesßge");  
smEº‹
; }

3908 
±r
 = 
	`LoˇãAnswîs
(
msg
, 
íd
);

3909 
i
 = 0; i < 
msg
->
h
.
numAnswîs
; i++)

3911 
±r
 = 
	`GëL¨geResour˚Rec‹d
(
c⁄ãxt
->
m
, 
msg
,Öå, 
íd
, 0, 
kDNSRec‹dTy≥PackëAns
, &
l¸
);

3912 i‡(!
±r
Ë{ 
	`LogMsg
("ERROR: hndlLookupUpd©eP‹à- GëL¨geResour˚Rec‹dÑëu∫ed NULL");  
smEº‹
; }

3913 i‡(
	`Resour˚Rec‹dAnswîsQue°i⁄
(&
l¸
.
r
.
ª§ec
, &
c⁄ãxt
->
que°i⁄
))

3915 *
p‹t
 = 
l¸
.
r
.
ª§ec
.
rd©a
->
u
.
§v
.port;

3916 
c⁄ãxt
->
°©e
 = 
foundP‹t
;

3917  
smC⁄töue
;

3920 
	`debugf
("hndlLookupUpd©eP‹à-Çÿ™swî f‹Åy≥ %s", 
p‹tName
);

3921 
p‹t
->
NŸAnI¡egî
 = 0;

3922 
c⁄ãxt
->
°©e
 = 
foundP‹t
;

3923  
smC⁄töue
;

3927 
c⁄ãxt
->
°©e
 = 
lookupP‹t
;

3928 
q
 = &
c⁄ãxt
->
que°i⁄
;

3929 
	`MakeDomaöNameFromDNSNameSåög
(&
q
->
q«me
, 
p‹tName
);

3930 
	`AµídDomaöName
(&
q
->
q«me
, &
c⁄ãxt
->
z⁄e
);

3931 
q
->
qty≥
 = 
kDNSTy≥_SRV
;

3932 
q
->
q˛ass
 = 
kDNSCœss_IN
;

3933 
îr
 = 
	`°¨tI¡î«lQuîy
(
q
, 
c⁄ãxt
->
m
, 
gëZ⁄eD©a
, context);

3934 
c⁄ãxt
->
que°i⁄A˘ive
 = 
mDNSåue
;

3935 i‡(
îr
Ë
	`LogMsg
("hndlLookupSOA: startInternalQueryÑeturnedÉrror %ld (breaking untilÇextÖeriodicÑetransmission)",Érr);

3936  
smBªak
;

3937 
	}
}

3939 
mDNSloˇl
 
smA˘i⁄
 
	$hndlLookupP‹ts
(
DNSMesßge
 *
msg
, c⁄° 
mDNSu8
 *
íd
, 
¡aC⁄ãxt
 *
c⁄ãxt
)

3941 
smA˘i⁄
 
a˘i⁄
;

3943 i‡(
c⁄ãxt
->
födUpd©eP‹t
 && !c⁄ãxt->
upd©eP‹t
.
NŸAnI¡egî
)

3945 
a˘i⁄
 = 
	`lookupDNSP‹t
(
msg
, 
íd
, 
c⁄ãxt
, 
UPDATE_PORT_NAME
, &c⁄ãxt->
upd©eP‹t
);

3946 i‡(
a˘i⁄
 !
smC⁄töue
) áction;

3948 i‡(
c⁄ãxt
->
födLLQP‹t
 && !c⁄ãxt->
ŒqP‹t
.
NŸAnI¡egî
)

3949  
	`lookupDNSP‹t
(
msg
, 
íd
, 
c⁄ãxt
, 
LLQ_PORT_NAME
, &c⁄ãxt->
ŒqP‹t
);

3951  
smC⁄töue
;

3952 
	}
}

3956 #i‡
COMPILER_LIKES_PRAGMA_MARK


3957 #¥agm®
m¨k
 - 
Trunˇti⁄
 
H™dlög


3962 
DNSQue°i⁄
 *
	mque°i⁄
;

3963 
DNSMesßge
 *
	mª∂y
;

3964 
mDNSu16
 
	mª∂yÀn
;

3965 
	mƒód
;

3966 
mDNS
 *
	mm
;

3967 } 
	tt˝Info_t
;

3970 
mDNSloˇl
 
	$c⁄QuîyCÆlback
(
sd
, *
c⁄ãxt
, 
mDNSBoﬁ
 
C⁄√˘i⁄E°ablished
)

3972 
mSètus
 
îr
 = 0;

3973 
msgbuf
[356];

3974 
DNSMesßge
 *
msg
;

3975 
mDNSu8
 *
íd
;

3976 
t˝Info_t
 *
öfo
 = (t˝Info_à*)
c⁄ãxt
;

3977 
DNSQue°i⁄
 *
que°i⁄
 = 
öfo
->question;

3978 
n
;

3979 
mDNS
 *
m
 = 
öfo
->m;

3981 
	`mDNS_Lock
(
m
);

3983 i‡(
C⁄√˘i⁄E°ablished
)

3986 
msg
 = (
DNSMesßge
 *)&
msgbuf
;

3987 
îr
 = 
	`c⁄°ru˘QuîyMsg
(
msg
, &
íd
, 
que°i⁄
);

3988 i‡(
îr
Ë{ 
	`LogMsg
("ERROR: c⁄QuîyCÆlback: c⁄°ru˘QuîyMsg - %ld",Éº); 
îr‹
; }

3989 
îr
 = 
	`mDNSSídDNSMesßge
(
m
, 
msg
, 
íd
, 
mDNSI¡îÁ˚_Any
, &
zîoAddr
, 
zîoIPP‹t
, 
sd
, 
mDNSNULL
);

3990 
que°i⁄
->
La°QTime
 = 
	`mDNSPœtf‹mTimeNow
(
m
);

3991 i‡(
îr
Ë{ 
	`debugf
("ERROR: c⁄QuîyCÆlback: mDNSSídDNSMesßge_t˝ - %ld",Éº); 
îr‹
; }

3995 i‡(!
öfo
->
ƒód
)

3998 
mDNSu8
 
Ànbuf
[2];

3999 
n
 = 
	`mDNSPœtf‹mRódTCP
(
sd
, 
Ànbuf
, 2);

4000 i‡(
n
 != 2)

4002 
	`LogMsg
("ERROR:c⁄QuîyCÆlback -áâem±Åÿªad mesßgêÀngth faûed (ªadÑëu∫ed %d)", 
n
);

4003 
îr‹
;

4005 
öfo
->
ª∂yÀn
 = (
mDNSu16
)((mDNSu16)
Ànbuf
[0] << 8 |Üenbuf[1]);

4006 i‡(
öfo
->
ª∂yÀn
 < (
DNSMesßgeHódî
))

4007 { 
	`LogMsg
("ERROR: c⁄QuîyCÆlback -ÜígthÅoÿsh‹à(%d byãs)", 
öfo
->
ª∂yÀn
); 
îr‹
; }

4008 
öfo
->
ª∂y
 = 
	`umÆloc
(öfo->
ª∂yÀn
);

4009 i‡(!
öfo
->
ª∂y
Ë{ 
	`LogMsg
("ERROR: c⁄QuîyCÆlback - mÆlo¯Áûed"); 
îr‹
; }

4011 
n
 = 
	`mDNSPœtf‹mRódTCP
(
sd
, ((*)
öfo
->
ª∂y
Ë+ info->
ƒód
, info->
ª∂yÀn
 - info->nread);

4012 i‡(
n
 < 0Ë{ 
	`LogMsg
("ERROR: c⁄QuîyCÆlback -ÑódÑëu∫ed %d",Ç); 
îr‹
; }

4013 
öfo
->
ƒód
 +
n
;

4014 i‡(
öfo
->
ƒód
 =öfo->
ª∂yÀn
)

4017 
DNSMesßge
 *
msg
 = 
öfo
->
ª∂y
;

4018 
mDNSu8
 *
±r
 = (mDNSu8 *)&
msg
->
h
.
numQue°i⁄s
;

4019 
msg
->
h
.
numQue°i⁄s
 = (
mDNSu16
)((mDNSu16)
±r
[0] << 8 |Ötr[1]);

4020 
msg
->
h
.
numAnswîs
 = (
mDNSu16
)((mDNSu16)
±r
[2] << 8 |Ötr[3]);

4021 
msg
->
h
.
numAuth‹ôõs
 = (
mDNSu16
)((mDNSu16)
±r
[4] << 8 |Ötr[5]);

4022 
msg
->
h
.
numAddôi⁄Æs
 = (
mDNSu16
)((mDNSu16)
±r
[6] << 8 |Ötr[7]);

4023 
	`uDNS_Re˚iveMsg
(
m
, 
msg
, (
mDNSu8
 *)msg + 
öfo
->
ª∂yÀn
, 
mDNSNULL
, 
zîoIPP‹t
, mDNSNULL, zîoIPP‹t, 
que°i⁄
->
I¡îÁ˚ID
);

4024 
	`mDNSPœtf‹mTCPClo£C⁄√˘i⁄
(
sd
);

4025 
	`u‰ì
(
öfo
->
ª∂y
);

4026 
	`u‰ì
(
öfo
);

4030 
	`mDNS_U∆ock
(
m
);

4033 
îr‹
:

4034 
	`mDNSPœtf‹mTCPClo£C⁄√˘i⁄
(
sd
);

4035 i‡(
öfo
->
ª∂y
Ë
	`u‰ì
(info->reply);

4036 
	`u‰ì
(
öfo
);

4037 
	`mDNS_U∆ock
(
m
);

4038 
	}
}

4040 
mDNSloˇl
 
	$hndlTrunˇãdAnswî
(
DNSQue°i⁄
 *
que°i⁄
, c⁄° 
mDNSAddr
 *
§c
, 
mDNS
 *
m
)

4042 
mSètus
 
c⁄√˘i⁄Sètus
;

4043 
uDNS_Que°i⁄Info
 *
öfo
 = &
que°i⁄
->
uDNS_öfo
;

4044 
sd
;

4045 
t˝Info_t
 *
c⁄ãxt
;

4047 i‡(!
§c
Ë{ 
	`LogMsg
("hndlTruncatedAnswer: TCP DNSÑesponse had TC bit set: ignoring"); ; }

4049 
c⁄ãxt
 = (
t˝Info_t
 *)
	`umÆloc
((tcpInfo_t));

4050 i‡(!
c⁄ãxt
Ë{ 
	`LogMsg
("ERROR: hndlTruncatedAnswer - memallocate failed"); ; }

4051 
	`ubzîo
(
c⁄ãxt
, (
t˝Info_t
));

4052 
c⁄ãxt
->
que°i⁄
 = question;

4053 
c⁄ãxt
->
m
 = m;

4054 
öfo
->
id
 = 
	`√wMesßgeID
(&
m
->
uDNS_öfo
);

4056 
c⁄√˘i⁄Sètus
 = 
	`mDNSPœtf‹mTCPC⁄√˘
(
§c
, 
Uniˇ°DNSP‹t
, 
que°i⁄
->
I¡îÁ˚ID
, 
c⁄QuîyCÆlback
, 
c⁄ãxt
, &
sd
);

4057 i‡(
c⁄√˘i⁄Sètus
 =
mSètus_C⁄nE°ablished
)

4059 
	`c⁄QuîyCÆlback
(
sd
, 
c⁄ãxt
, 
mDNSåue
);

4062 i‡(
c⁄√˘i⁄Sètus
 =
mSètus_C⁄nPídög
) ;

4063 
	`LogMsg
("hndlTruncatedAnswer: connection failed");

4064 
	`uDNS_St›Quîy
(
m
, 
que°i⁄
);

4065 
	}
}

4069 #i‡
COMPILER_LIKES_PRAGMA_MARK


4070 #¥agm®
m¨k
 - 
Dy«mic
 
Upd©es


4073 
mDNSloˇl
 
	$£ndRec‹dRegi°øti⁄
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *
º
)

4075 
DNSMesßge
 
msg
;

4076 
mDNSu8
 *
±r
 = 
msg
.
d©a
;

4077 
mDNSu8
 *
íd
 = (mDNSu8 *)&
msg
 + (
DNSMesßge
);

4078 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

4079 
mDNSO∑que16
 
id
;

4080 
uDNS_RegInfo
 *
ªgInfo
 = &
º
->
uDNS_öfo
;

4081 
mSètus
 
îr
 = 
mSètus_UnknownEº
;

4083 
id
 = 
	`√wMesßgeID
(
u
);

4084 
	`InôülizeDNSMesßge
(&
msg
.
h
, 
id
, 
Upd©eReqFœgs
);

4085 
º
->
uDNS_öfo
.
id
 = id;

4088 
±r
 = 
	`putZ⁄e
(&
msg
,Öå, 
íd
, &
ªgInfo
->
z⁄e
, 
	`mDNSO∑que16‰omI¡VÆ
(
º
->
ª§ec
.
º˛ass
));

4089 i‡(!
±r
Ë
îr‹
;

4091 i‡(
ªgInfo
->
°©e
 =
ªgSèã_Upd©ePídög
)

4094 
	`SëNewRD©a
(&
º
->
ª§ec
, 
ªgInfo
->
OrigRD©a
,ÑegInfo->
OrigRDLí
);

4095 i‡(!(
±r
 = 
	`putDñëi⁄Rec‹d
(&
msg
,Öå, &
º
->
ª§ec
))Ë
îr‹
;

4098 
	`SëNewRD©a
(&
º
->
ª§ec
, 
ªgInfo
->
InFlightRD©a
,ÑegInfo->
InFlightRDLí
);

4099 i‡(!(
±r
 = 
	`PutResour˚Rec‹dTTLJumbo
(&
msg
,Öå, &msg.
h
.
mDNS_numUpd©es
, &
º
->
ª§ec
,Ñr->ª§ec.
º‹igöÆâl
))Ë
îr‹
;

4104 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 =
kDNSRec‹dTy≥KnownUnique
)

4107 
±r
 = 
	`putDñëeRRSë
(&
msg
,Öå, 
º
->
ª§ec
.
«me
,Ñr->ª§ec.
ºty≥
);

4108 i‡(!
±r
Ë
îr‹
;

4111 i‡(
º
->
ª§ec
.
Rec‹dTy≥
 !
kDNSRec‹dTy≥Sh¨ed
)

4113 
±r
 = 
	`putPªªqNameNŸInU£
(
º
->
ª§ec
.
«me
, &
msg
,Öå, 
íd
);

4114 i‡(!
±r
Ë
îr‹
;

4117 
±r
 = 
	`PutResour˚Rec‹dTTLJumbo
(&
msg
,Öå, &msg.
h
.
mDNS_numUpd©es
, &
º
->
ª§ec
,Ñr->ª§ec.
º‹igöÆâl
);

4118 i‡(!
±r
Ë
îr‹
;

4121 i‡(
º
->
uDNS_öfo
.
Àa£
)

4122 { 
±r
 = 
	`putUpd©eLó£
(&
msg
,Öå, 
DEFAULT_UPDATE_LEASE
); i‡(!±rË
îr‹
; }

4124 
îr
 = 
	`mDNSSídDNSMesßge
(
m
, &
msg
, 
±r
, 
mDNSI¡îÁ˚_Any
, &
ªgInfo
->
ns
,ÑegInfo->
p‹t
, -1, 
	`GëAuthInfoF‹Name
(
u
, 
º
->
ª§ec
.
«me
));

4125 i‡(
îr
Ë
	`debugf
("ERROR: sendRecordRegistration - mDNSSendDNSMessage - %ld",Érr);

4127 
	`SëRec‹dRëry
(
m
, 
º
, 
îr
);

4129 i‡(
ªgInfo
->
°©e
 !
ªgSèã_Re‰esh
 &&ÑegInfo->°©ê!
ªgSèã_DîegDe„ºed
 &&ÑegInfo->°©ê!
ªgSèã_Upd©ePídög
)

4130 
ªgInfo
->
°©e
 = 
ªgSèã_Pídög
;

4134 
îr‹
:

4135 
	`LogMsg
("sendRecordRegistration: Error formatting message");

4136 i‡(
º
->
uDNS_öfo
.
°©e
 !
ªgSèã_Uƒegi°îed
)

4138 
	`u∆ökAR
(&
u
->
Rec‹dRegi°øti⁄s
, 
º
);

4139 
º
->
uDNS_öfo
.
°©e
 = 
ªgSèã_Uƒegi°îed
;

4141 
m
->
mDNS_ªíå™cy
++;

4142 i‡(
º
->
Rec‹dCÆlback
Ëº->
	`Rec‹dCÆlback
(
m
,Ñr, 
îr
);

4143 
m
->
mDNS_ªíå™cy
--;

4145 
	}
}

4147 
mDNSloˇl
 
	$Rec‹dRegi°øti⁄CÆlback
(
mSètus
 
îr
, 
mDNS
 *c⁄° 
m
, *
authPå
, c⁄° 
AsyncOpResu…
 *
ªsu…
)

4149 
AuthRec‹d
 *
√wRR
 = (AuthRec‹d*)
authPå
;

4150 c⁄° 
z⁄eD©a_t
 *
z⁄eD©a
 = 
mDNSNULL
;

4151 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

4152 
AuthRec‹d
 *
±r
;

4155 
±r
 = 
u
->
Rec‹dRegi°øti⁄s
;Öå;Öå =Öå->
√xt
)

4156 i‡(
±r
 =
√wRR
) ;

4157 i‡(!
±r
Ë{ 
	`LogMsg
("RecordRegistrationCallback - RRÇoÜonger inÜist. Discarding."); ; }

4160 i‡(
îr
Ë{ 
	`LogMsg
("Rec‹dRegi°øti⁄CÆlback:Éº‹ %ld",Éº); 
îr‹
; }

4161 i‡(!
ªsu…
Ë{ 
	`LogMsg
("ERROR: Rec‹dRegi°øti⁄CÆlback invoked wôh NULLÑesu…ándÇÿîr‹"); 
îr‹
; }

4162 
z⁄eD©a
 = &
ªsu…
->zoneData;

4164 i‡(
√wRR
->
uDNS_öfo
.
°©e
 =
ªgSèã_C™˚Œed
)

4167 
	`debugf
("Registration of %##sÅype %d cancelledÖriorÅo update",

4168 
√wRR
->
ª§ec
.
«me
->
c
,ÇewRR->ª§ec.
ºty≥
);

4169 
√wRR
->
uDNS_öfo
.
°©e
 = 
ªgSèã_Uƒegi°îed
;

4170 
	`u∆ökAR
(&
u
->
Rec‹dRegi°øti⁄s
, 
√wRR
);

4174 i‡(
ªsu…
->
ty≥
 !
z⁄eD©aResu…
)

4176 
	`LogMsg
("ERROR: buûdUpd©ePackëÖas£d inc‹ª˘Ñesu…Åy≥ %d", 
ªsu…
->
ty≥
);

4177 
îr‹
;

4180 i‡(
√wRR
->
ª§ec
.
º˛ass
 !
z⁄eD©a
->
z⁄eCœss
)

4182 
	`LogMsg
("ERROR: NewÑesourceÑecord's class (%d) doesÇot match zone class (%d)",

4183 
√wRR
->
ª§ec
.
º˛ass
, 
z⁄eD©a
->
z⁄eCœss
);

4184 
îr‹
;

4190 i‡(
z⁄eD©a
->
z⁄eName
.
c
[0] == 0)

4192 
	`LogMsg
("ERROR: OnlyÇame server claimingÑesponsibility for \"%##s\" is \"%##s\"!",

4193 
√wRR
->
ª§ec
.
«me
->
c
, 
z⁄eD©a
->
z⁄eName
.c);

4194 
îr
 = 
mSètus_NoSuchNameEº
;

4195 
îr‹
;

4199 
	`AssignDomaöName
(&
√wRR
->
uDNS_öfo
.
z⁄e
, &
z⁄eD©a
->
z⁄eName
);

4200 
√wRR
->
uDNS_öfo
.
ns
 = 
z⁄eD©a
->
¥im¨yAddr
;

4201 i‡(
z⁄eD©a
->
upd©eP‹t
.
NŸAnI¡egî
Ë
√wRR
->
uDNS_öfo
.
p‹t
 = zoneData->updatePort;

4204 
	`debugf
("UpdateÖortÇotádvertised via SRV - guessingÖort 53,ÇoÜease option");

4205 
√wRR
->
uDNS_öfo
.
p‹t
 = 
Uniˇ°DNSP‹t
;

4206 
√wRR
->
uDNS_öfo
.
Àa£
 = 
mDNSÁl£
;

4209 
	`£ndRec‹dRegi°øti⁄
(
m
, 
√wRR
);

4212 
îr‹
:

4213 i‡(
√wRR
->
uDNS_öfo
.
°©e
 !
ªgSèã_Uƒegi°îed
)

4215 
	`u∆ökAR
(&
u
->
Rec‹dRegi°øti⁄s
, 
√wRR
);

4216 
√wRR
->
uDNS_öfo
.
°©e
 = 
ªgSèã_Uƒegi°îed
;

4218 
m
->
mDNS_ªíå™cy
++;

4219 i‡(
√wRR
->
Rec‹dCÆlback
)

4220 
√wRR
->
	`Rec‹dCÆlback
(
m
,ÇewRR, 
îr
);

4221 
m
->
mDNS_ªíå™cy
--;

4223 
	}
}

4225 
mDNSloˇl
 
	$SídSîvi˚Regi°øti⁄
(
mDNS
 *
m
, 
Sîvi˚Rec‹dSë
 *
§s
)

4227 
DNSMesßge
 
msg
;

4228 
mDNSu8
 *
±r
 = 
msg
.
d©a
;

4229 
mDNSu8
 *
íd
 = (mDNSu8 *)&
msg
 + (
DNSMesßge
);

4230 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

4231 
mDNSO∑que16
 
id
;

4232 
uDNS_RegInfo
 *
rInfo
 = &
§s
->
uDNS_öfo
;

4233 
mSètus
 
îr
 = 
mSètus_UnknownEº
;

4234 
mDNSIPP‹t
 
¥ivp‹t
;

4235 
NATTøvîßlInfo
 *
«t
 = 
§s
->
uDNS_öfo
.
NATöfo
;

4236 
mDNSBoﬁ
 
m≠≥d
 = 
mDNSÁl£
;

4237 
domaö«me
 
èrgë
;

4238 
AuthRec‹d
 *
§v
 = &
§s
->
RR_SRV
;

4239 
mDNSu32
 
i
;

4241 
¥ivp‹t
 = 
zîoIPP‹t
;

4243 i‡(!
rInfo
->
ns
.
ù
.
v4
.
NŸAnI¡egî
Ë{ 
	`LogMsg
("SendServiceRegistration - NSÇot set!"); ; }

4245 
id
 = 
	`√wMesßgeID
(
u
);

4246 
	`InôülizeDNSMesßge
(&
msg
.
h
, 
id
, 
Upd©eReqFœgs
);

4249 
	`SëNewRD©a
(&
§s
->
RR_PTR
.
ª§ec
, 
mDNSNULL
, 0);

4250 
	`SëNewRD©a
(&
§s
->
RR_TXT
.
ª§ec
, 
mDNSNULL
, 0);

4253 i‡(
«t
 &&Ç©->
PublicP‹t
.
NŸAnI¡egî
 &&

4254 (
«t
->
°©e
 =
NATSèã_E°ablished
 ||Ç©->°©ê=
NATSèã_Re‰esh
 ||Ç©->°©ê=
NATSèã_Legacy
))

4256 
¥ivp‹t
 = 
§v
->
ª§ec
.
rd©a
->
u
.§v.
p‹t
;

4257 
§v
->
ª§ec
.
rd©a
->
u
.§v.
p‹t
 = 
«t
->
PublicP‹t
;

4258 
m≠≥d
 = 
mDNSåue
;

4263 
±r
 = 
	`putZ⁄e
(&
msg
,Öå, 
íd
, &
rInfo
->
z⁄e
, 
	`mDNSO∑que16‰omI¡VÆ
(
§v
->
ª§ec
.
º˛ass
));

4264 i‡(!
±r
Ë
îr‹
;

4266 i‡(
§s
->
uDNS_öfo
.
Te°F‹SñfC⁄Êi˘
)

4269 i‡(!(
±r
 = 
	`PutResour˚Rec‹dTTLJumbo
(&
msg
,Öå, &msg.
h
.
mDNS_numPªªqs
, &
§s
->
RR_SRV
.
ª§ec
, 0))Ë
îr‹
;

4270 i‡(!(
±r
 = 
	`putDñëeRRSë
(&
msg
,Öå, 
§s
->
RR_TXT
.
ª§ec
.
«me
, srs->RR_TXT.ª§ec.
ºty≥
))Ë
îr‹
;

4273 i‡(
§s
->
uDNS_öfo
.
°©e
 !
ªgSèã_Re‰esh
 && srs->uDNS_öfo.°©ê!
ªgSèã_Upd©ePídög
)

4276 
±r
 = 
	`putPªªqNameNŸInU£
(
§v
->
ª§ec
.
«me
, &
msg
,Öå, 
íd
);

4277 i‡(!
±r
Ë
îr‹
;

4281 i‡(!(
±r
 = 
	`PutResour˚Rec‹dTTLJumbo
(&
msg
,Öå, &msg.
h
.
mDNS_numUpd©es
, &
§s
->
RR_PTR
.
ª§ec
, srs->RR_PTR.ª§ec.
º‹igöÆâl
))Ë
îr‹
;

4283 
i
 = 0; i < 
§s
->
NumSubTy≥s
; i++)

4284 i‡(!(
±r
 = 
	`PutResour˚Rec‹dTTLJumbo
(&
msg
,Öå, &msg.
h
.
mDNS_numUpd©es
, &
§s
->
SubTy≥s
[
i
].
ª§ec
, srs->SubTy≥s[i].ª§ec.
º‹igöÆâl
))Ë
îr‹
;

4286 i‡(
rInfo
->
°©e
 =
ªgSèã_Upd©ePídög
)

4288 
AuthRec‹d
 *
txt
 = &
§s
->
RR_TXT
;

4289 
uDNS_RegInfo
 *
txtInfo
 = &
txt
->
uDNS_öfo
;

4291 
	`SëNewRD©a
(&
txt
->
ª§ec
, 
txtInfo
->
OrigRD©a
,ÅxtInfo->
OrigRDLí
);

4292 i‡(!(
±r
 = 
	`putDñëi⁄Rec‹d
(&
msg
,Öå, &
§s
->
RR_TXT
.
ª§ec
))Ë
îr‹
;

4295 
	`SëNewRD©a
(&
txt
->
ª§ec
, 
txtInfo
->
InFlightRD©a
,ÅxtInfo->
InFlightRDLí
);

4296 i‡(!(
±r
 = 
	`PutResour˚Rec‹dTTLJumbo
(&
msg
,Öå, &msg.
h
.
mDNS_numUpd©es
, &
§s
->
RR_TXT
.
ª§ec
, srs->RR_TXT.ª§ec.
º‹igöÆâl
))Ë
îr‹
;

4299 i‡(!(
±r
 = 
	`PutResour˚Rec‹dTTLJumbo
(&
msg
,Öå, &msg.
h
.
mDNS_numUpd©es
, &
§s
->
RR_TXT
.
ª§ec
, srs->RR_TXT.ª§ec.
º‹igöÆâl
))Ë
îr‹
;

4301 i‡(!
	`GëSîvi˚T¨gë
(
u
, 
§v
, &
èrgë
))

4303 
	`debugf
("Couldn'àgëÅ¨gë f‹ sîvi˚ %##s", 
§v
->
ª§ec
.
«me
->
c
);

4304 
rInfo
->
°©e
 = 
ªgSèã_NoT¨gë
;

4308 i‡(!
	`SameDomaöName
(&
èrgë
, &
§v
->
ª§ec
.
rd©a
->
u
.srv.target))

4310 
	`AssignDomaöName
(&
§v
->
ª§ec
.
rd©a
->
u
.§v.
èrgë
, &target);

4311 
	`SëNewRD©a
(&
§v
->
ª§ec
, 
mDNSNULL
, 0);

4314 
±r
 = 
	`PutResour˚Rec‹dTTLJumbo
(&
msg
,Öå, &msg.
h
.
mDNS_numUpd©es
, &
§v
->
ª§ec
, srv->ª§ec.
º‹igöÆâl
);

4315 i‡(!
±r
Ë
îr‹
;

4317 i‡(
§s
->
uDNS_öfo
.
Àa£
)

4318 { 
±r
 = 
	`putUpd©eLó£
(&
msg
,Öå, 
DEFAULT_UPDATE_LEASE
); i‡(!±rË
îr‹
; }

4320 
îr
 = 
	`mDNSSídDNSMesßge
(
m
, &
msg
, 
±r
, 
mDNSI¡îÁ˚_Any
, &
rInfo
->
ns
,ÑInfo->
p‹t
, -1, 
	`GëAuthInfoF‹Name
(
u
, 
§s
->
RR_SRV
.
ª§ec
.
«me
));

4321 i‡(
îr
Ë
	`debugf
("ERROR: SendServiceRegistration - mDNSSendDNSMessage - %ld",Érr);

4323 i‡(
rInfo
->
°©e
 !
ªgSèã_Re‰esh
 &&ÑInfo->°©ê!
ªgSèã_DîegDe„ºed
 && 
§s
->
uDNS_öfo
.°©ê!
ªgSèã_Upd©ePídög
)

4324 
rInfo
->
°©e
 = 
ªgSèã_Pídög
;

4326 
	`SëRec‹dRëry
(
m
, &
§s
->
RR_SRV
, 
îr
);

4327 
rInfo
->
id
 = id;

4328 i‡(
m≠≥d
Ë
§v
->
ª§ec
.
rd©a
->
u
.§v.
p‹t
 = 
¥ivp‹t
;

4331 
îr‹
:

4332 
	`LogMsg
("SendServiceRegistration - Error formatting message");

4333 i‡(
m≠≥d
Ë
§v
->
ª§ec
.
rd©a
->
u
.§v.
p‹t
 = 
¥ivp‹t
;

4334 
	`u∆ökSRS
(
m
, 
§s
);

4335 
rInfo
->
°©e
 = 
ªgSèã_Uƒegi°îed
;

4336 
m
->
mDNS_ªíå™cy
++;

4337 
§s
->
	`Sîvi˚CÆlback
(
m
, srs, 
îr
);

4338 
m
->
mDNS_ªíå™cy
--;

4341 
	}
}

4343 
mDNSloˇl
 
	$£rvi˚Regi°øti⁄CÆlback
(
mSètus
 
îr
, 
mDNS
 *c⁄° 
m
, *
§sPå
, c⁄° 
AsyncOpResu…
 *
ªsu…
)

4345 
Sîvi˚Rec‹dSë
 *
§s
 = (Sîvi˚Rec‹dSë *)
§sPå
;

4346 c⁄° 
z⁄eD©a_t
 *
z⁄eD©a
 = 
mDNSNULL
;

4348 i‡(
îr
Ë
îr‹
;

4349 i‡(!
ªsu…
Ë{ 
	`LogMsg
("ERROR: sîvi˚Regi°øti⁄CÆlback invoked wôh NULLÑesu…ándÇÿîr‹"); 
îr‹
; }

4350 
z⁄eD©a
 = &
ªsu…
->zoneData;

4352 i‡(
ªsu…
->
ty≥
 !
z⁄eD©aResu…
)

4354 
	`LogMsg
("ERROR: buûdUpd©ePackëÖas£d inc‹ª˘Ñesu…Åy≥ %d", 
ªsu…
->
ty≥
);

4355 
îr‹
;

4358 i‡(
§s
->
uDNS_öfo
.
°©e
 =
ªgSèã_C™˚Œed
)

4361 
§s
->
uDNS_öfo
.
°©e
 = 
ªgSèã_Uƒegi°îed
;

4362 
	`u∆ökSRS
(
m
, 
§s
);

4363 
m
->
mDNS_ªíå™cy
++;

4364 
§s
->
	`Sîvi˚CÆlback
(
m
, srs, 
mSètus_MemFªe
);

4365 
m
->
mDNS_ªíå™cy
--;

4369 i‡(
§s
->
RR_SRV
.
ª§ec
.
º˛ass
 !
z⁄eD©a
->
z⁄eCœss
)

4371 
	`LogMsg
("Sîvi˚ %##†- cœs†d€†nŸ m©ch z⁄e", 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
);

4372 
îr‹
;

4376 
	`AssignDomaöName
(&
§s
->
uDNS_öfo
.
z⁄e
, &
z⁄eD©a
->
z⁄eName
);

4377 
§s
->
uDNS_öfo
.
ns
.
ty≥
 = 
mDNSAddrTy≥_IPv4
;

4378 
§s
->
uDNS_öfo
.
ns
 = 
z⁄eD©a
->
¥im¨yAddr
;

4379 i‡(
z⁄eD©a
->
upd©eP‹t
.
NŸAnI¡egî
Ë
§s
->
uDNS_öfo
.
p‹t
 = zoneData->updatePort;

4382 
	`debugf
("UpdateÖortÇotádvertised via SRV - guessingÖort 53,ÇoÜease option");

4383 
§s
->
uDNS_öfo
.
p‹t
 = 
Uniˇ°DNSP‹t
;

4384 
§s
->
uDNS_öfo
.
Àa£
 = 
mDNSÁl£
;

4387 i‡(
§s
->
RR_SRV
.
ª§ec
.
rd©a
->
u
.
§v
.
p‹t
.
NŸAnI¡egî
 && 
	`IsPriv©eV4Addr
(&
m
->
uDNS_öfo
.
Advîti£dV4
))

4388 { 
§s
->
uDNS_öfo
.
°©e
 = 
ªgSèã_NATM≠
; 
	`SèπNATP‹tM≠
(
m
, srs); }

4389 
	`SídSîvi˚Regi°øti⁄
(
m
, 
§s
);

4392 
îr‹
:

4393 
	`u∆ökSRS
(
m
, 
§s
);

4394 
§s
->
uDNS_öfo
.
°©e
 = 
ªgSèã_Uƒegi°îed
;

4395 
m
->
mDNS_ªíå™cy
++;

4396 
§s
->
	`Sîvi˚CÆlback
(
m
, srs, 
îr
);

4397 
m
->
mDNS_ªíå™cy
--;

4399 
	}
}

4401 
mDNSloˇl
 
mSètus
 
	$SëupRec‹dRegi°øti⁄
(
mDNS
 *
m
, 
AuthRec‹d
 *
º
)

4403 
domaö«me
 *
èrgë
 = 
	`GëRRDomaöNameT¨gë
(&
º
->
ª§ec
);

4404 
AuthRec‹d
 *
±r
 = 
m
->
uDNS_öfo
.
Rec‹dRegi°øti⁄s
;

4406 
±r
 &&Öå !
º
Ë±∏±r->
√xt
;

4407 i‡(
±r
Ë{ 
	`LogMsg
("Eº‹: SëupRec‹dRegi°øti⁄ -Ñec‹d %##†Æªady i¿li°!", 
º
->
ª§ec
.
«me
->
c
);  
mSètus_AÃódyRegi°îed
; }

4409 i‡(
º
->
uDNS_öfo
.
°©e
 =
ªgSèã_FëchögZ⁄eD©a
 ||

4410 
º
->
uDNS_öfo
.
°©e
 =
ªgSèã_Pídög
 ||

4411 
º
->
uDNS_öfo
.
°©e
 =
ªgSèã_Regi°îed
)

4413 
	`LogMsg
("Requested double-registration ofÖhysicalÑecord %##sÅype %d",

4414 
º
->
ª§ec
.
«me
->
c
,Ñr->ª§ec.
ºty≥
);

4415  
mSètus_AÃódyRegi°îed
;

4418 
º
->
ª§ec
.
rdÀngth
 = 
	`GëRDLígth
(&º->ª§ec, 
mDNSÁl£
);

4419 
º
->
ª§ec
.
rde°im©e
 = 
	`GëRDLígth
(&º->ª§ec, 
mDNSåue
);

4421 i‡(!
	`VÆid©eDomaöName
(
º
->
ª§ec
.
«me
))

4423 
	`LogMsg
("Aâem±Åÿªgi°îÑec‹d wôh invÆidÇame: %s", 
	`ARDi•œySåög
(
m
, 
º
));

4424  
mSètus_InvÆid
;

4428 i‡(!
	`VÆid©eRD©a
(
º
->
ª§ec
.
ºty≥
,Ñr->ª§ec.
rdÀngth
,Ñr->ª§ec.
rd©a
))

4430 
	`LogMsg
("Aâem±Åÿªgi°îÑec‹d wôh invÆidÑd©a: %s", 
	`ARDi•œySåög
(
m
, 
º
));

4431  
mSètus_InvÆid
;

4434 
º
->
ª§ec
.
«mehash
 = 
	`DomaöNameHashVÆue
‘r->ª§ec.
«me
);

4435 
º
->
ª§ec
.
rd©ahash
 = 
èrgë
 ? 
	`DomaöNameHashVÆue
—¨gëË: 
	`RD©aHashVÆue
‘r->ª§ec.
rdÀngth
, &º->ª§ec.
rd©a
->
u
);

4437 
º
->
uDNS_öfo
.
°©e
 = 
ªgSèã_FëchögZ⁄eD©a
;

4438 
º
->
√xt
 = 
m
->
uDNS_öfo
.
Rec‹dRegi°øti⁄s
;

4439 
m
->
uDNS_öfo
.
Rec‹dRegi°øti⁄s
 = 
º
;

4440 
º
->
uDNS_öfo
.
Àa£
 = 
mDNSåue
;

4442  
mSètus_NoEº‹
;

4443 
	}
}

4445 
mDNSexp‹t
 
mSètus
 
	$uDNS_Regi°îRec‹d
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
)

4447 
mSètus
 
îr
 = 
	`SëupRec‹dRegi°øti⁄
(
m
, 
º
);

4448 i‡(
îr
) Érr;

4449  
	`°¨tGëZ⁄eD©a
(
º
->
ª§ec
.
«me
, 
m
, 
mDNSåue
, 
mDNSÁl£
, 
Rec‹dRegi°øti⁄CÆlback
,Ñr);

4450 
	}
}

4452 
mDNSloˇl
 
	$SídRec‹dDîegi°øti⁄
(
mDNS
 *
m
, 
AuthRec‹d
 *
º
)

4454 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

4455 
DNSMesßge
 
msg
;

4456 
mDNSu8
 *
±r
 = 
msg
.
d©a
;

4457 
mDNSu8
 *
íd
 = (mDNSu8 *)&
msg
 + (
DNSMesßge
);

4458 
mSètus
 
îr
;

4460 
	`InôülizeDNSMesßge
(&
msg
.
h
, 
º
->
uDNS_öfo
.
id
, 
Upd©eReqFœgs
);

4462 
±r
 = 
	`putZ⁄e
(&
msg
,Öå, 
íd
, &
º
->
uDNS_öfo
.
z⁄e
, 
	`mDNSO∑que16‰omI¡VÆ
‘r->
ª§ec
.
º˛ass
));

4463 i‡(!
±r
Ë
îr‹
;

4464 i‡(!(
±r
 = 
	`putDñëi⁄Rec‹d
(&
msg
,Öå, &
º
->
ª§ec
))Ë
îr‹
;

4466 
îr
 = 
	`mDNSSídDNSMesßge
(
m
, &
msg
, 
±r
, 
mDNSI¡îÁ˚_Any
, &
º
->
uDNS_öfo
.
ns
,Ñr->uDNS_öfo.
p‹t
, -1, 
	`GëAuthInfoF‹Name
(
u
,Ñr->
ª§ec
.
«me
));

4467 i‡(
îr
Ë
	`debugf
("ERROR: SendRecordDeregistration - mDNSSendDNSMessage - %ld",Érr);

4469 
	`SëRec‹dRëry
(
m
, 
º
, 
îr
);

4470 
º
->
uDNS_öfo
.
°©e
 = 
ªgSèã_DîegPídög
;

4473 
îr‹
:

4474 
	`LogMsg
("Error: SendRecordDeregistration - couldÇot contruct deregistrationÖacket");

4475 
	`u∆ökAR
(&
u
->
Rec‹dRegi°øti⁄s
, 
º
);

4476 
º
->
uDNS_öfo
.
°©e
 = 
ªgSèã_Uƒegi°îed
;

4477 
	}
}

4481 
mDNSexp‹t
 
mSètus
 
	$uDNS_Dîegi°îRec‹d
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
)

4483 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

4484 
NATTøvîßlInfo
 *
n
 = 
º
->
uDNS_öfo
.
NATöfo
;

4486 
º
->
uDNS_öfo
.
°©e
)

4488 
ªgSèã_NATM≠
:

4490 
º
->
uDNS_öfo
.
NATöfo
 = 
mDNSNULL
;

4491 i‡(!
n
Ë
	`LogMsg
("uDNS_DeregisterRecord:Ço NAT info context");

4492 
	`FªeNATInfo
(
m
, 
n
);

4496 
º
->
uDNS_öfo
.
°©e
 = 
ªgSèã_Uƒegi°îed
;

4498 
ªgSèã_ExåaQueued
:

4499 
º
->
uDNS_öfo
.
°©e
 = 
ªgSèã_Uƒegi°îed
;

4501 
ªgSèã_FëchögZ⁄eD©a
:

4502 
º
->
uDNS_öfo
.
°©e
 = 
ªgSèã_C™˚Œed
;

4503  
mSètus_NoEº‹
;

4504 
ªgSèã_Re‰esh
:

4505 
ªgSèã_Pídög
:

4506 
ªgSèã_Upd©ePídög
:

4507 
º
->
uDNS_öfo
.
°©e
 = 
ªgSèã_DîegDe„ºed
;

4508 
	`LogMsg
("De„ºög dîegi°øti⁄ o‡ªc‹d %##†u¡ûÑegi°øti⁄ com∂ëes", 
º
->
ª§ec
.
«me
->
c
);

4509  
mSètus_NoEº‹
;

4510 
ªgSèã_Regi°îed
:

4511 
ªgSèã_DîegPídög
:

4513 
ªgSèã_DîegDe„ºed
:

4514 
ªgSèã_C™˚Œed
:

4515 
	`LogMsg
("Double deregistration ofÑecord %##sÅype %d",

4516 
º
->
ª§ec
.
«me
->
c
,Ñr->ª§ec.
ºty≥
);

4517  
mSètus_UnknownEº
;

4518 
ªgSèã_Uƒegi°îed
:

4519 
	`LogMsg
("Requested deregistration of unregisteredÑecord %##sÅype %d",

4520 
º
->
ª§ec
.
«me
->
c
,Ñr->ª§ec.
ºty≥
);

4521  
mSètus_UnknownEº
;

4522 
ªgSèã_NATEº‹
:

4523 
ªgSèã_NoT¨gë
:

4524 
	`LogMsg
("ERROR: uDNS_Dîegi°îRec‹d cÆÀd f‹Ñec‹d %##†wôh bad sèã %s", 
º
->
ª§ec
.
«me
->
c
,Ñr->
uDNS_öfo
.
°©e
 =
ªgSèã_NoT¨gë
 ? "regState_NoTarget" : "regState_NATError");

4525  
mSètus_UnknownEº
;

4528 i‡(
º
->
uDNS_öfo
.
°©e
 =
ªgSèã_Uƒegi°îed
)

4532 
	`u∆ökAR
(&
u
->
Rec‹dRegi°øti⁄s
, 
º
);

4533 
m
->
mDNS_ªíå™cy
++;

4534 i‡(
º
->
Rec‹dCÆlback
Ëº->
	`Rec‹dCÆlback
(
m
,Ñr, 
mSètus_MemFªe
);

4535 
m
->
mDNS_ªíå™cy
--;

4536  
mSètus_NoEº‹
;

4539 
º
->
uDNS_öfo
.
NATöfo
 = 
mDNSNULL
;

4540 i‡(
n
Ë
	`FªeNATInfo
(
m
,Ç);

4542 
	`SídRec‹dDîegi°øti⁄
(
m
, 
º
);

4543  
mSètus_NoEº‹
;

4544 
	}
}

4546 
mDNSexp‹t
 
mSètus
 
	$uDNS_Regi°îSîvi˚
(
mDNS
 *c⁄° 
m
, 
Sîvi˚Rec‹dSë
 *
§s
)

4548 
mDNSu32
 
i
;

4549 
domaö«me
 
èrgë
;

4550 
uDNS_RegInfo
 *
öfo
 = &
§s
->
uDNS_öfo
;

4551 
Sîvi˚Rec‹dSë
 **
p
 = &
m
->
uDNS_öfo
.
Sîvi˚Regi°øti⁄s
;

4552 *
p
 && *∞!
§s
Ëp=&(*p)->
√xt
;

4553 i‡(*
p
Ë{ 
	`LogMsg
("uDNS_Regi°îSîvi˚: %∞%##†Æªady i¿li°", 
§s
, srs->
RR_SRV
.
ª§ec
.
«me
->
c
); (
mSètus_AÃódyRegi°îed
); }

4554 
	`ubzîo
(
öfo
, (*info));

4555 *
p
 = 
§s
;

4556 
§s
->
√xt
 = 
mDNSNULL
;

4558 
§s
->
RR_SRV
.
ª§ec
.
º‹igöÆâl
 = 
kWideAªaTTL
;

4559 
§s
->
RR_TXT
.
ª§ec
.
º‹igöÆâl
 = 
kWideAªaTTL
;

4560 
§s
->
RR_PTR
.
ª§ec
.
º‹igöÆâl
 = 
kWideAªaTTL
;

4561 
i
 = 0; i < 
§s
->
NumSubTy≥s
;i++Ë§s->
SubTy≥s
[i].
ª§ec
.
º‹igöÆâl
 = 
kWideAªaTTL
;

4563 
öfo
->
Àa£
 = 
mDNSåue
;

4565 
§s
->
RR_SRV
.
ª§ec
.
rd©a
->
u
.
§v
.
èrgë
.
c
[0] = 0;

4566 i‡(!
	`GëSîvi˚T¨gë
(&
m
->
uDNS_öfo
, &
§s
->
RR_SRV
, &
èrgë
))

4569 
	`debugf
("uDNS_Regi°îSîvi˚ -Çÿèrgë f‹ %##s", 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
);

4570 
öfo
->
°©e
 = 
ªgSèã_NoT¨gë
;

4571  
mSètus_NoEº‹
;

4574 
öfo
->
°©e
 = 
ªgSèã_FëchögZ⁄eD©a
;

4575  
	`°¨tGëZ⁄eD©a
(
§s
->
RR_SRV
.
ª§ec
.
«me
, 
m
, 
mDNSåue
, 
mDNSÁl£
, 
£rvi˚Regi°øti⁄CÆlback
, srs);

4576 
	}
}

4578 
mDNSloˇl
 
	$SídSîvi˚Dîegi°øti⁄
(
mDNS
 *
m
, 
Sîvi˚Rec‹dSë
 *
§s
)

4580 
uDNS_RegInfo
 *
öfo
 = &
§s
->
uDNS_öfo
;

4581 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

4582 
DNSMesßge
 
msg
;

4583 
mDNSO∑que16
 
id
;

4584 
mDNSu8
 *
±r
 = 
msg
.
d©a
;

4585 
mDNSu8
 *
íd
 = (mDNSu8 *)&
msg
 + (
DNSMesßge
);

4586 
mSètus
 
îr
 = 
mSètus_UnknownEº
;

4587 
mDNSu32
 
i
;

4589 
id
 = 
	`√wMesßgeID
(
u
);

4590 
	`InôülizeDNSMesßge
(&
msg
.
h
, 
id
, 
Upd©eReqFœgs
);

4593 
±r
 = 
	`putZ⁄e
(&
msg
,Öå, 
íd
, &
öfo
->
z⁄e
, 
	`mDNSO∑que16‰omI¡VÆ
(
§s
->
RR_SRV
.
ª§ec
.
º˛ass
));

4594 i‡(!
±r
Ë{ 
	`LogMsg
("ERROR: SídSîvi˚Dîegi°øti⁄ -ÖutZ⁄e"); 
îr‹
; }

4596 i‡(!(
±r
 = 
	`putDñëeAŒRRSës
(&
msg
,Öå, 
§s
->
RR_SRV
.
ª§ec
.
«me
))Ë
îr‹
;

4597 i‡(!(
±r
 = 
	`putDñëi⁄Rec‹d
(&
msg
,Öå, &
§s
->
RR_PTR
.
ª§ec
))Ë
îr‹
;

4598 
i
 = 0; i < 
§s
->
NumSubTy≥s
; i++)

4599 i‡(!(
±r
 = 
	`putDñëi⁄Rec‹d
(&
msg
,Öå, &
§s
->
SubTy≥s
[
i
].
ª§ec
))Ë
îr‹
;

4602 
îr
 = 
	`mDNSSídDNSMesßge
(
m
, &
msg
, 
±r
, 
mDNSI¡îÁ˚_Any
, &
öfo
->
ns
, info->
p‹t
, -1, 
	`GëAuthInfoF‹Name
(
u
, 
§s
->
RR_SRV
.
ª§ec
.
«me
));

4603 i‡(
îr
 &&Éº !
mSètus_Tønsõ¡Eº
Ë{ 
	`debugf
("ERROR: SídSîvi˚Dîegi°øti⁄ - mDNSSídDNSMesßgê- %ld",Éº); 
îr‹
; }

4605 
	`SëRec‹dRëry
(
m
, &
§s
->
RR_SRV
, 
îr
);

4606 
öfo
->
id
 = id;

4607 
öfo
->
°©e
 = 
ªgSèã_DîegPídög
;

4611 
îr‹
:

4612 
	`u∆ökSRS
(
m
, 
§s
);

4613 
öfo
->
°©e
 = 
ªgSèã_Uƒegi°îed
;

4614 
	}
}

4616 
mDNSexp‹t
 
mSètus
 
	$uDNS_Dîegi°îSîvi˚
(
mDNS
 *c⁄° 
m
, 
Sîvi˚Rec‹dSë
 *
§s
)

4618 
NATTøvîßlInfo
 *
«t
 = 
§s
->
uDNS_öfo
.
NATöfo
;

4619 *
îrmsg
 = "Unknown State";

4622 
§s
->
uDNS_öfo
.
SRVCh™ged
 = srs->uDNS_öfo.
SRVUpd©eDe„ºed
 = 
mDNSÁl£
;

4624 i‡(
«t
)

4626 i‡(
«t
->
°©e
 =
NATSèã_E°ablished
 ||Ç©->°©ê=
NATSèã_Re‰esh
 ||Ç©->°©ê=
NATSèã_Legacy
)

4627 
	`DñëeNATP‹tM≠pög
(
m
, 
«t
, 
§s
);

4628 
«t
->
ªg
.
Sîvi˚Regi°øti⁄
 = 
mDNSNULL
;

4629 
§s
->
uDNS_öfo
.
NATöfo
 = 
mDNSNULL
;

4630 
	`FªeNATInfo
(
m
, 
«t
);

4633 
§s
->
uDNS_öfo
.
°©e
)

4635 
ªgSèã_Uƒegi°îed
:

4636 
	`debugf
("uDNS_Dîegi°îSîvi˚ - sîvi˚ %##†nŸÑegi°îed", 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
);

4637  
mSètus_BadRe„ªn˚Eº
;

4638 
ªgSèã_FëchögZ⁄eD©a
:

4640 
§s
->
uDNS_öfo
.
°©e
 = 
ªgSèã_C™˚Œed
;

4641  
mSètus_NoEº‹
;

4642 
ªgSèã_Pídög
:

4643 
ªgSèã_Re‰esh
:

4644 
ªgSèã_Upd©ePídög
:

4646 
§s
->
uDNS_öfo
.
°©e
 = 
ªgSèã_DîegDe„ºed
;

4647  
mSètus_NoEº‹
;

4648 
ªgSèã_DîegPídög
:

4649 
ªgSèã_DîegDe„ºed
:

4650 
ªgSèã_C™˚Œed
:

4651 
	`debugf
("DoubÀ dîegi°øti⁄ o‡£rvi˚ %##s", 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
);

4652  
mSètus_NoEº‹
;

4653 
ªgSèã_NATEº‹
:

4654 
ªgSèã_NATM≠
:

4655 
ªgSèã_NoT¨gë
:

4656 
	`u∆ökSRS
(
m
, 
§s
);

4657 
§s
->
uDNS_öfo
.
°©e
 = 
ªgSèã_Uƒegi°îed
;

4658 
m
->
mDNS_ªíå™cy
++;

4659 
§s
->
	`Sîvi˚CÆlback
(
m
, srs, 
mSètus_MemFªe
);

4660 
m
->
mDNS_ªíå™cy
--;

4661  
mSètus_NoEº‹
;

4662 
ªgSèã_Regi°îed
:

4663 
§s
->
uDNS_öfo
.
°©e
 = 
ªgSèã_DîegPídög
;

4664 
	`SídSîvi˚Dîegi°øti⁄
(
m
, 
§s
);

4665  
mSètus_NoEº‹
;

4666 
ªgSèã_ExåaQueued
:

4667 
îrmsg
 = "bad state (regState_ExtraQueued)";

4668 
îr‹
;

4671 
îr‹
:

4672 
	`LogMsg
("Eº‹, uDNS_Dîegi°îSîvi˚: %s", 
îrmsg
);

4673  
mSètus_BadRe„ªn˚Eº
;

4674 
	}
}

4676 
mDNSexp‹t
 
mSètus
 
	$uDNS_AddRec‹dToSîvi˚
(
mDNS
 *c⁄° 
m
, 
Sîvi˚Rec‹dSë
 *
§
, 
ExåaResour˚Rec‹d
 *
exåa
)

4678 
mSètus
 
îr
 = 
mSètus_UnknownEº
;

4680 
exåa
->
r
.
ª§ec
.
Rec‹dTy≥
 = 
kDNSRec‹dTy≥Sh¨ed
;

4681 
exåa
->
r
.
Rec‹dCÆlback
 = 
mDNSNULL
;

4683 i‡(
§
->
uDNS_öfo
.
°©e
 =
ªgSèã_Regi°îed
 || sr->uDNS_öfo.°©ê=
ªgSèã_Re‰esh
)

4684 
îr
 = 
	`uDNS_Regi°îRec‹d
(
m
, &
exåa
->
r
);

4687 
îr
 = 
	`SëupRec‹dRegi°øti⁄
(
m
, &
exåa
->
r
);

4688 
exåa
->
r
.
uDNS_öfo
.
°©e
 = 
ªgSèã_ExåaQueued
;

4691 i‡(!
îr
)

4693 
exåa
->
√xt
 = 
§
->
Exåas
;

4694 
§
->
Exåas
 = 
exåa
;

4696  
îr
;

4697 
	}
}

4699 
mDNSexp‹t
 
mSètus
 
	$uDNS_Upd©eRec‹d
(
mDNS
 *
m
, 
AuthRec‹d
 *
º
)

4701 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

4702 
Sîvi˚Rec‹dSë
 *
∑ª¡
 = 
mDNSNULL
;

4703 
AuthRec‹d
 *
Ωå
;

4704 
uDNS_RegInfo
 *
öfo
 = &
º
->
uDNS_öfo
;

4705 
ªgSèã_t
 *
°©ïå
 = 
mDNSNULL
;

4708 
∑ª¡
 = 
u
->
Sîvi˚Regi°øti⁄s
;Ö¨ít;Ö¨íà∑ª¡->
√xt
)

4709 i‡(&
∑ª¡
->
RR_TXT
 =
º
Ë{ 
°©ïå
 = &∑ª¡->
uDNS_öfo
.
°©e
; ; }

4711 i‡(!
∑ª¡
)

4714 
Ωå
 = 
u
->
Rec‹dRegi°øti⁄s
;Ñ±r;Ñ±∏Ωå->
√xt
)

4715 i‡(
Ωå
 =
º
Ë{ 
°©ïå
 = &º->
uDNS_öfo
.
°©e
; ; }

4716 i‡(!
Ωå
Ë
uƒeg_îr‹
;

4719 *
°©ïå
)

4721 
ªgSèã_DîegPídög
:

4722 
ªgSèã_DîegDe„ºed
:

4723 
ªgSèã_C™˚Œed
:

4724 
ªgSèã_Uƒegi°îed
:

4726 
uƒeg_îr‹
;

4728 
ªgSèã_FëchögZ⁄eD©a
:

4729 
ªgSèã_NATM≠
:

4730 
ªgSèã_ExåaQueued
:

4731 
ªgSèã_NoT¨gë
:

4733 i‡(
öfo
->
Upd©eRDCÆlback
Ëöfo->
	`Upd©eRDCÆlback
(
m
, 
º
,Ñr->
ª§ec
.
rd©a
);

4734 
	`SëNewRD©a
(&
º
->
ª§ec
,Ñr->
NewRD©a
,Ñr->
√wrdÀngth
);

4735 
º
->
NewRD©a
 = 
mDNSNULL
;

4736  
mSètus_NoEº‹
;

4738 
ªgSèã_Pídög
:

4739 
ªgSèã_Re‰esh
:

4740 
ªgSèã_Upd©ePídög
:

4742 i‡(
öfo
->
QueuedRD©a
 && info->
Upd©eRDCÆlback
)

4744 
öfo
->
	`Upd©eRDCÆlback
(
m
, 
º
, info->
QueuedRD©a
);

4745 
öfo
->
QueuedRD©a
 = 
º
->
NewRD©a
;

4746 
öfo
->
QueuedRDLí
 = 
º
->
√wrdÀngth
;

4747 
º
->
NewRD©a
 = 
mDNSNULL
;

4748  
mSètus_NoEº‹
;

4750 
ªgSèã_Regi°îed
:

4751 
öfo
->
OrigRD©a
 = 
º
->
ª§ec
.
rd©a
;

4752 
öfo
->
OrigRDLí
 = 
º
->
ª§ec
.
rdÀngth
;

4753 
öfo
->
InFlightRD©a
 = 
º
->
NewRD©a
;

4754 
öfo
->
InFlightRDLí
 = 
º
->
√wrdÀngth
;

4755 
º
->
NewRD©a
 = 
mDNSNULL
;

4756 *
°©ïå
 = 
ªgSèã_Upd©ePídög
;

4757 i‡(
∑ª¡
Ë
	`SídSîvi˚Regi°øti⁄
(
m
,Öarent);

4758 
	`£ndRec‹dRegi°øti⁄
(
m
, 
º
);

4759  
mSètus_NoEº‹
;

4761 
ªgSèã_NATEº‹
:

4762 
	`LogMsg
("ERROR: uDNS_Upd©eRec‹d cÆÀd f‹Ñec‹d %##†wôh bad sèãÑegSèã_NATEº‹", 
º
->
ª§ec
.
«me
->
c
);

4763  
mSètus_UnknownEº
;

4766 
uƒeg_îr‹
:

4767 
	`LogMsg
("Requested update ofÑecord %##sÅype %d,Öart of serviceÇot currentlyÑegistered",

4768 
º
->
ª§ec
.
«me
->
c
,Ñr->ª§ec.
ºty≥
);

4769  
mSètus_InvÆid
;

4770 
	}
}

4774 #i‡
COMPILER_LIKES_PRAGMA_MARK


4775 #¥agm®
m¨k
 - 
Pîiodic
 
Executi⁄
 
Routöes


4779 
mDNSloˇl
 
mDNSs32
 
	$CheckNATM≠pögs
(
mDNS
 *
m
, 
mDNSs32
 
timíow
)

4781 
NATTøvîßlInfo
 *
±r
 = 
m
->
uDNS_öfo
.
NATTøvîßls
;

4782 
mDNSs32
 
√xãvít
 = 
timíow
 + 
MIN_UCAST_PERIODIC_EXEC
;

4784 
±r
)

4786 
NATTøvîßlInfo
 *
cur
 = 
±r
;

4787 
±r
 =Öå->
√xt
;

4788 i‡(
cur
->
›
 !
NATOp_AddrReque°
 || cur->
°©e
 !
NATSèã_E°ablished
)

4790 i‡(
cur
->
ªåy
 - 
timíow
 < 0)

4792 i‡(
cur
->
°©e
 =
NATSèã_E°ablished
Ë
	`Re‰eshNATM≠pög
(cur, 
m
);

4793 i‡(
cur
->
°©e
 =
NATSèã_Reque°
 || cur->°©ê=
NATSèã_Re‰esh
)

4795 i‡(
cur
->
¡rõs
 >
NATMAP_MAX_TRIES
Ëcur->
	`Re˚iveRe•⁄£
(cur, 
m
, 
mDNSNULL
, 0);

4796 
	`SídNATMsg
(
cur
, 
m
);

4799 i‡(
cur
->
ªåy
 - 
√xãvít
 < 0)Çextevent = cur->retry;

4802  
√xãvít
;

4803 
	}
}

4805 
mDNSloˇl
 
mDNSs32
 
	$CheckQuîõs
(
mDNS
 *
m
, 
mDNSs32
 
timíow
)

4807 
DNSQue°i⁄
 *
q
;

4808 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

4809 
LLQ_Info
 *
Œq
;

4810 
mDNSs32
 
£ndtime
;

4811 
mDNSs32
 
√xãvít
 = 
timíow
 + 
MIN_UCAST_PERIODIC_EXEC
;

4812 
DNSMesßge
 
msg
;

4813 
mSètus
 
îr
 = 
mSètus_NoEº‹
;

4814 
mDNSu8
 *
íd
;

4815 
uDNS_Que°i⁄Info
 *
öfo
;

4817 
u
->
CuºítQuîy
 = u->
A˘iveQuîõs
;

4818 
u
->
CuºítQuîy
)

4820 
q
 = 
u
->
CuºítQuîy
;

4821 
öfo
 = &
q
->
uDNS_öfo
;

4822 
Œq
 = 
öfo
->llq;

4824 i‡(!
öfo
->
öã∫Æ
 && ((!
q
->
L⁄gLived
 && !öfo->
Answîed
Ë|| (
Œq
 &&Ülq->
°©e
 < 
LLQ_E°ablished
)) &&

4825 
öfo
->
Re°¨tTime
 + 
RESTART_GOODBYE_DELAY
 - 
timíow
 < 0)

4828 
öfo
->
knownAnswîs
)

4830 
CacheRec‹d
 *
¸
 = 
öfo
->
knownAnswîs
;

4831 
öfo
->
knownAnswîs
 = info->knownAnswîs->
√xt
;

4833 
m
->
mDNS_ªíå™cy
++;

4834 
q
->
	`Que°i⁄CÆlback
(
m
, q, &
¸
->
ª§ec
, 
mDNSÁl£
);

4835 
m
->
mDNS_ªíå™cy
--;

4836 
	`u‰ì
(
¸
);

4837 i‡(
q
 !
u
->
CuºítQuîy
Ë{ 
	`debugf
("CheckQueries - questionÑemoved via callback."); ; }

4840 i‡(
q
 !
u
->
CuºítQuîy
) ;

4842 i‡(
q
->
L⁄gLived
 && 
Œq
->
°©e
 !
LLQ_Pﬁl
)

4844 i‡(
Œq
->
°©e
 >
LLQ_InôülReque°
 &&Ülq->°©ê<
LLQ_E°ablished
)

4846 i‡(
Œq
->
ªåy
 - 
timíow
 < 0)

4849 i‡(!
Œq
->
ªåy
)

4850 
	`LogMsg
("ERROR:ÑëryÅimîÇŸ së f‹ LLQ %##†ö sèã %d", 
q
->
q«me
.
c
, 
Œq
->
°©e
);

4851 i‡(
Œq
->
°©e
 =
LLQ_E°ablished
 ||Ülq->°©ê=
LLQ_Re‰esh
)

4852 
	`£ndLLQRe‰esh
(
m
, 
q
, 
Œq
->
‹igLó£
);

4853 i‡(
Œq
->
°©e
 =
LLQ_InôülReque°
)

4854 
	`°¨tLLQH™dshake
(
m
, 
Œq
, 
mDNSÁl£
);

4855 i‡(
Œq
->
°©e
 =
LLQ_Sec⁄d¨yReque°
)

4856 
	`£ndChÆÀngeRe•⁄£
(
m
, 
q
, 
mDNSNULL
);

4857 i‡(
Œq
->
°©e
 =
LLQ_Rëry
)

4858 { 
Œq
->
¡rõs
 = 0; 
	`°¨tLLQH™dshake
(
m
,Ülq, 
mDNSÁl£
); }

4860 i‡(
Œq
->
ªåy
 - 
√xãvít
 < 0)Çextevent =Ülq->retry;

4865 
£ndtime
 = 
q
->
La°QTime
 + q->
ThisQI¡îvÆ
;

4866 i‡(
m
->
SuµªssStdP‹t53Quîõs
 &&

4867 
£ndtime
 - 
m
->
SuµªssStdP‹t53Quîõs
 < 0)

4868 
£ndtime
 = 
m
->
SuµªssStdP‹t53Quîõs
;

4869 i‡(
£ndtime
 - 
timíow
 < 0)

4871 
DNSSîvî
 *
£rvî
 = 
	`GëSîvîF‹Name
(&
m
->
uDNS_öfo
, &
q
->
q«me
);

4872 i‡(
£rvî
)

4874 i‡(
£rvî
->
ã°°©e
 =
DNSSîvî_U¡e°ed
)

4876 
	`InôülizeDNSMesßge
(&
msg
.
h
, 
	`√wMesßgeID
(&
m
->
uDNS_öfo
), 
uQuîyFœgs
);

4877 
íd
 = 
	`putQue°i⁄
(&
msg
, msg.
d©a
, msg.d©®+ 
AbsﬁuãMaxDNSMesßgeD©a
, 
DNSRñayTe°Que°i⁄
, 
kDNSTy≥_PTR
, 
kDNSCœss_IN
);

4880 
îr
 = 
	`c⁄°ru˘QuîyMsg
(&
msg
, &
íd
, 
q
);

4881 i‡(
îr
Ë
	`LogMsg
("Eº‹: uDNS_IdÀ - c⁄°ru˘QuîyMsg. Skùpög que°i⁄ %##s", 
q
->
q«me
.
c
);

4884 i‡(
£rvî
->
ã°°©e
 !
DNSSîvî_Faûed
)

4885 
îr
 = 
	`mDNSSídDNSMesßge
(
m
, &
msg
, 
íd
, 
mDNSI¡îÁ˚_Any
, &
£rvî
->
addr
, 
Uniˇ°DNSP‹t
, -1, 
mDNSNULL
);

4886 
m
->
SuµªssStdP‹t53Quîõs
 = 
	`N⁄ZîoTime
(m->
timíow
 + (
mDNSPœtf‹mO√Sec⁄d
+99)/100);

4887 
q
->
La°QTime
 = 
timíow
;

4888 i‡(
îr
Ë
	`debugf
("ERROR: uDNS_idle - mDNSSendDNSMessage - %ld",Érr);

4889 i‡(
q
->
ThisQI¡îvÆ
 < 
MAX_UCAST_POLL_INTERVAL
) q->ThisQInterval = q->ThisQInterval * 2;

4893 i‡(
£ndtime
 - 
√xãvít
 < 0)Çextevent = sendtime;

4895 
u
->
CuºítQuîy
 = u->CuºítQuîy->
√xt
;

4897  
√xãvít
;

4898 
	}
}

4900 
mDNSloˇl
 
mDNSs32
 
	$CheckRec‹dRegi°øti⁄s
(
mDNS
 *
m
, 
mDNSs32
 
timíow
)

4902 
AuthRec‹d
 *
º
;

4903 
uDNS_RegInfo
 *
rInfo
;

4904 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

4905 
mDNSs32
 
√xãvít
 = 
timíow
 + 
MIN_UCAST_PERIODIC_EXEC
;

4908 
º
 = 
u
->
Rec‹dRegi°øti⁄s
;Ñr;Ñ∏º->
√xt
)

4910 
rInfo
 = &
º
->
uDNS_öfo
;

4911 i‡(
rInfo
->
°©e
 =
ªgSèã_Pídög
 ||ÑInfo->°©ê=
ªgSèã_DîegPídög
 ||ÑInfo->°©ê=
ªgSèã_Upd©ePídög
 ||ÑInfo->°©ê=
ªgSèã_DîegDe„ºed
 ||ÑInfo->°©ê=
ªgSèã_Re‰esh
)

4913 i‡(
º
->
La°APTime
 +Ñr->
ThisAPI¡îvÆ
 - 
timíow
 < 0)

4915 #i‡
MDNS_DEBUGMSGS


4916 *
›
 = "(unknown operation)";

4917 i‡(
rInfo
->
°©e
 =
ªgSèã_Pídög
Ë
›
 = "registration";

4918 i‡(
rInfo
->
°©e
 =
ªgSèã_DîegPídög
Ë
›
 = "deregistration";

4919 i‡(
rInfo
->
°©e
 =
ªgSèã_Re‰esh
Ë
›
 = "refresh";

4920 
	`debugf
("RëønsmôÑec‹d %†%##s", 
›
, 
º
->
ª§ec
.
«me
->
c
);

4923 i‡(
rInfo
->
°©e
 =
ªgSèã_DîegPídög
Ë
	`SídRec‹dDîegi°øti⁄
(
m
, 
º
);

4924 
	`£ndRec‹dRegi°øti⁄
(
m
, 
º
);

4926 i‡(
º
->
La°APTime
 +Ñr->
ThisAPI¡îvÆ
 - 
√xãvít
 < 0)Çextevent =Ñr->LastAPTime +Ñr->ThisAPInterval;

4928 i‡(
rInfo
->
Àa£
 &&ÑInfo->
°©e
 =
ªgSèã_Regi°îed
)

4930 i‡(
rInfo
->
expúe
 - 
timíow
 < 0)

4932 
	`debugf
("ª‰eshögÑec‹d %##s", 
º
->
ª§ec
.
«me
->
c
);

4933 
rInfo
->
°©e
 = 
ªgSèã_Re‰esh
;

4934 
	`£ndRec‹dRegi°øti⁄
(
m
, 
º
);

4936 i‡(
rInfo
->
expúe
 - 
√xãvít
 < 0)Çextevent =ÑInfo->expire;

4939  
√xãvít
;

4940 
	}
}

4942 
mDNSloˇl
 
mDNSs32
 
	$CheckSîvi˚Regi°øti⁄s
(
mDNS
 *
m
, 
mDNSs32
 
timíow
)

4944 
Sîvi˚Rec‹dSë
 *
s
 = 
m
->
uDNS_öfo
.
Sîvi˚Regi°øti⁄s
;

4945 
uDNS_RegInfo
 *
rInfo
;

4946 
mDNSs32
 
√xãvít
 = 
timíow
 + 
MIN_UCAST_PERIODIC_EXEC
;

4949 
s
)

4951 
Sîvi˚Rec‹dSë
 *
§s
 = 
s
;

4954 
s
 = s->
√xt
;

4956 
rInfo
 = &
§s
->
uDNS_öfo
;

4957 i‡(
rInfo
->
°©e
 =
ªgSèã_Pídög
 ||ÑInfo->°©ê=
ªgSèã_DîegPídög
 ||ÑInfo->°©ê=
ªgSèã_DîegDe„ºed
 ||ÑInfo->°©ê=
ªgSèã_Re‰esh
 ||ÑInfo->°©ê=
ªgSèã_Upd©ePídög
)

4959 i‡(
§s
->
RR_SRV
.
La°APTime
 + srs->RR_SRV.
ThisAPI¡îvÆ
 - 
timíow
 < 0)

4961 #i‡
MDNS_DEBUGMSGS


4962 *
›
 = "unknown";

4963 i‡(
rInfo
->
°©e
 =
ªgSèã_Pídög
Ë
›
 = "registration";

4964 i‡(
rInfo
->
°©e
 =
ªgSèã_DîegPídög
Ë
›
 = "deregistration";

4965 i‡(
rInfo
->
°©e
 =
ªgSèã_Re‰esh
Ë
›
 = "refresh";

4966 i‡(
rInfo
->
°©e
 =
ªgSèã_Upd©ePídög
Ë
›
 = "txtÑecord update";

4967 
	`debugf
("Rëønsmô sîvi˚ %†%##s", 
›
, 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
);

4969 i‡(
rInfo
->
°©e
 =
ªgSèã_DîegPídög
Ë{ 
	`SídSîvi˚Dîegi°øti⁄
(
m
, 
§s
); ; }

4970 
	`SídSîvi˚Regi°øti⁄
 (
m
, 
§s
);

4972 i‡(
√xãvít
 - 
§s
->
RR_SRV
.
La°APTime
 + srs->RR_SRV.
ThisAPI¡îvÆ
 > 0)

4973 
√xãvít
 = 
§s
->
RR_SRV
.
La°APTime
 + srs->RR_SRV.
ThisAPI¡îvÆ
;

4976 i‡(
rInfo
->
Àa£
 &&ÑInfo->
°©e
 =
ªgSèã_Regi°îed
)

4978 i‡(
rInfo
->
expúe
 - 
timíow
 < 0)

4980 
	`debugf
("ª‰eshög sîvi˚ %##s", 
§s
->
RR_SRV
.
ª§ec
.
«me
->
c
);

4981 
rInfo
->
°©e
 = 
ªgSèã_Re‰esh
;

4982 
	`SídSîvi˚Regi°øti⁄
(
m
, 
§s
);

4984 i‡(
rInfo
->
expúe
 - 
√xãvít
 < 0)Çextevent =ÑInfo->expire;

4987  
√xãvít
;

4988 
	}
}

4990 
mDNSexp‹t
 
	$uDNS_Execuã
(
mDNS
 *c⁄° 
m
)

4992 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

4993 
mDNSs32
 
√xã
, 
timíow
 = 
	`mDNSPœtf‹mTimeNow
(
m
);

4995 
u
->
√xãvít
 = 
timíow
 + 
MIN_UCAST_PERIODIC_EXEC
;

4997 i‡(
u
->
DñaySRVUpd©e
 && u->
NextSRVUpd©e
 - 
timíow
 < 0)

4999 
u
->
DñaySRVUpd©e
 = 
mDNSÁl£
;

5000 
	`Upd©eSRVRec‹ds
(
m
);

5003 
√xã
 = 
	`CheckNATM≠pögs
(
m
, 
timíow
);

5004 i‡(
√xã
 - 
u
->
√xãvít
 < 0) u->nextevent =Çexte;

5006 i‡(
m
->
SuµªssStdP‹t53Quîõs
 && m->
timíow
 - m->SuppressStdPort53Queries >= 0)

5007 
m
->
SuµªssStdP‹t53Quîõs
 = 0;

5009 
√xã
 = 
	`CheckQuîõs
(
m
, 
timíow
);

5010 i‡(
√xã
 - 
u
->
√xãvít
 < 0) u->nextevent =Çexte;

5012 
√xã
 = 
	`CheckRec‹dRegi°øti⁄s
(
m
, 
timíow
);

5013 i‡(
√xã
 - 
u
->
√xãvít
 < 0) u->nextevent =Çexte;

5015 
√xã
 = 
	`CheckSîvi˚Regi°øti⁄s
(
m
, 
timíow
);

5016 i‡(
√xã
 - 
u
->
√xãvít
 < 0) u->nextevent =Çexte;

5018 
	}
}

5021 #i‡
COMPILER_LIKES_PRAGMA_MARK


5022 #¥agm®
m¨k
 - 
Sèπup
, 
Shutdown
, 
™d
 
SÀï


5029 
mDNSloˇl
 
	$Su•ídLLQs
(
mDNS
 *
m
, 
mDNSBoﬁ
 
Dîegi°îA˘ive
)

5031 
DNSQue°i⁄
 *
q
;

5032 
LLQ_Info
 *
Œq
;

5033 
q
 = 
m
->
uDNS_öfo
.
A˘iveQuîõs
; q; q = q->
√xt
)

5035 
Œq
 = 
q
->
uDNS_öfo
.llq;

5036 i‡(
q
->
L⁄gLived
 && 
Œq
)

5038 i‡(
Œq
->
°©e
 =
LLQ_GëZ⁄eInfo
)

5040 
	`debugf
("M¨kög %##†su•íd-de„ºed", 
q
->
q«me
.
c
);

5041 
Œq
->
°©e
 = 
LLQ_Su•ídDe„ºed
;

5043 i‡(
Œq
->
°©e
 < 
LLQ_Su•íded
)

5045 i‡(
Dîegi°îA˘ive
 && (
Œq
->
°©e
 =
LLQ_E°ablished
 ||Ülq->°©ê=
LLQ_Re‰esh
))

5046 { 
	`debugf
("Dñëög LLQ %##s", 
q
->
q«me
.
c
); 
	`£ndLLQRe‰esh
(
m
, q, 0); }

5047 
	`debugf
("M¨kög %##†su•íded", 
q
->
q«me
.
c
);

5048 
Œq
->
°©e
 = 
LLQ_Su•íded
;

5049 
	`ubzîo
(
Œq
->
id
, 8);

5051 i‡(
Œq
->
°©e
 =
LLQ_Pﬁl
Ë{ 
	`debugf
("M¨kög %##†su•íded-pﬁl", 
q
->
q«me
.
c
);Ülq->°©ê
LLQ_Su•ídedPﬁl
; }

5052 i‡(
Œq
->
NATM≠
ËŒq->NATM≠ = 
mDNSÁl£
;

5055 
	`CheckF‹Uƒe„ªn˚dLLQM≠pög
(
m
);

5056 
	}
}

5058 
mDNSloˇl
 
	$Re°¨tQuîõs
(
mDNS
 *
m
)

5060 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

5061 
DNSQue°i⁄
 *
q
;

5062 
LLQ_Info
 *
ŒqInfo
;

5063 
mDNSs32
 
timíow
 = 
	`mDNSPœtf‹mTimeNow
(
m
);

5065 
u
->
CuºítQuîy
 = u->
A˘iveQuîõs
;

5066 
u
->
CuºítQuîy
)

5068 
q
 = 
u
->
CuºítQuîy
;

5069 
u
->
CuºítQuîy
 = u->CuºítQuîy->
√xt
;

5070 
ŒqInfo
 = 
q
->
uDNS_öfo
.
Œq
;

5071 
q
->
uDNS_öfo
.
Re°¨tTime
 = 
timíow
;

5072 
q
->
uDNS_öfo
.
Answîed
 = 
mDNSÁl£
;

5073 i‡(
q
->
L⁄gLived
)

5075 i‡(!
ŒqInfo
Ë{ 
	`LogMsg
("Eº‹: Re°¨tQuîõ†- %##†l⁄g-lived wôh NULL info", 
q
->
q«me
.
c
); ; }

5076 i‡(
ŒqInfo
->
°©e
 =
LLQ_Su•íded
 ||ÜlqInfo->°©ê=
LLQ_N©M≠Waô
)

5078 
ŒqInfo
->
¡rõs
 = -1;

5079 
ŒqInfo
->
dîiveRemovesOnResume
 = 
mDNSåue
;

5080 
	`°¨tLLQH™dshake
(
m
, 
ŒqInfo
, 
mDNSåue
);

5082 i‡(
ŒqInfo
->
°©e
 =
LLQ_Su•ídDe„ºed
)

5083 
ŒqInfo
->
°©e
 = 
LLQ_GëZ⁄eInfo
;

5084 i‡(
ŒqInfo
->
°©e
 =
LLQ_Su•ídedPﬁl
)

5087 
ŒqInfo
->
¡rõs
 = 0;

5088 
ŒqInfo
->
dîiveRemovesOnResume
 = 
mDNSåue
;

5089 
ŒqInfo
->
°©e
 = 
LLQ_GëZ⁄eInfo
;

5090 
	`°¨tGëZ⁄eD©a
(&
q
->
q«me
, 
m
, 
mDNSÁl£
, 
mDNSåue
, 
°¨tLLQH™dshakeCÆlback
, 
ŒqInfo
);

5093 { 
q
->
La°QTime
 = 
timíow
; q->
ThisQI¡îvÆ
 = 
INIT_UCAST_POLL_INTERVAL
; }

5095 
	}
}

5097 
mDNSexp‹t
 
	$mDNS_Upd©eLLQs
(
mDNS
 *
m
)

5099 
uDNS_GlobÆInfo
 *
u
 = &
m
->
uDNS_öfo
;

5101 
	`mDNS_Lock
(
m
);

5102 i‡(
u
->
LLQN©Info
)

5104 
	`DñëeNATP‹tM≠pög
(
m
, 
u
->
LLQN©Info
, 
mDNSNULL
);

5105 
	`FªeNATInfo
(
m
, 
u
->
LLQN©Info
);

5107 
	`Su•ídLLQs
(
m
, 
mDNSåue
);

5108 
	`Re°¨tQuîõs
(
m
);

5109 
	`mDNS_U∆ock
(
m
);

5110 
	}
}

5119 
mDNSloˇl
 
	$SÀïRec‹dRegi°øti⁄s
(
mDNS
 *
m
)

5121 
DNSMesßge
 
msg
;

5122 
AuthRec‹d
 *
º
 = 
m
->
uDNS_öfo
.
Rec‹dRegi°øti⁄s
;

5123 
mDNSs32
 
timíow
 = 
	`mDNSPœtf‹mTimeNow
(
m
);

5125 
º
)

5127 i‡(
º
->
uDNS_öfo
.
°©e
 =
ªgSèã_Regi°îed
 ||

5128 
º
->
uDNS_öfo
.
°©e
 =
ªgSèã_Re‰esh
)

5130 
mDNSu8
 *
±r
 = 
msg
.
d©a
, *
íd
 = (mDNSu8 *)&msg + (
DNSMesßge
);

5131 
	`InôülizeDNSMesßge
(&
msg
.
h
, 
	`√wMesßgeID
(&
m
->
uDNS_öfo
), 
Upd©eReqFœgs
);

5134 
±r
 = 
	`putZ⁄e
(&
msg
,Öå, 
íd
, &
º
->
uDNS_öfo
.
z⁄e
, 
	`mDNSO∑que16‰omI¡VÆ
‘r->
ª§ec
.
º˛ass
));

5135 i‡(!
±r
Ë{ 
	`LogMsg
("Error: SleepRecordRegistrations - couldÇotÖut zone"); ; }

5136 
±r
 = 
	`putDñëi⁄Rec‹d
(&
msg
,Öå, &
º
->
ª§ec
);

5137 i‡(!
±r
Ë{ 
	`LogMsg
("Error: SleepRecordRegistrations - couldÇotÖut deletionÑecord"); ; }

5139 
	`mDNSSídDNSMesßge
(
m
, &
msg
, 
±r
, 
mDNSI¡îÁ˚_Any
, &
º
->
uDNS_öfo
.
ns
,Ñr->uDNS_öfo.
p‹t
, -1, 
	`GëAuthInfoF‹Name
(&m->uDNS_öfo,Ñr->
ª§ec
.
«me
));

5140 
º
->
uDNS_öfo
.
°©e
 = 
ªgSèã_Re‰esh
;

5141 
º
->
La°APTime
 = 
timíow
;

5142 
º
->
ThisAPI¡îvÆ
 = 300 * 
mDNSPœtf‹mO√Sec⁄d
;

5144 
º
 =Ñr->
√xt
;

5146 
	}
}

5148 
mDNSloˇl
 
	$WakeRec‹dRegi°øti⁄s
(
mDNS
 *
m
)

5150 
mDNSs32
 
timíow
 = 
	`mDNSPœtf‹mTimeNow
(
m
);

5151 
AuthRec‹d
 *
º
 = 
m
->
uDNS_öfo
.
Rec‹dRegi°øti⁄s
;

5153 
º
)

5155 i‡(
º
->
uDNS_öfo
.
°©e
 =
ªgSèã_Re‰esh
)

5158 
º
->
La°APTime
 = 
timíow
;

5159 
º
->
ThisAPI¡îvÆ
 = 
INIT_UCAST_POLL_INTERVAL
;

5161 
º
 =Ñr->
√xt
;

5163 
	}
}

5165 
mDNSloˇl
 
	$SÀïSîvi˚Regi°øti⁄s
(
mDNS
 *
m
)

5167 
Sîvi˚Rec‹dSë
 *
§s
 = 
m
->
uDNS_öfo
.
Sîvi˚Regi°øti⁄s
;

5168 
§s
)

5170 
uDNS_RegInfo
 *
öfo
 = &
§s
->
uDNS_öfo
;

5171 
NATTøvîßlInfo
 *
«t
 = 
öfo
->
NATöfo
;

5173 i‡(
«t
)

5175 i‡(
«t
->
°©e
 =
NATSèã_E°ablished
 ||Ç©->°©ê=
NATSèã_Re‰esh
 ||Ç©->°©ê=
NATSèã_Legacy
)

5176 
	`DñëeNATP‹tM≠pög
(
m
, 
«t
, 
§s
);

5177 
«t
->
ªg
.
Sîvi˚Regi°øti⁄
 = 
mDNSNULL
;

5178 
§s
->
uDNS_öfo
.
NATöfo
 = 
mDNSNULL
;

5179 
	`FªeNATInfo
(
m
, 
«t
);

5182 i‡(
öfo
->
°©e
 =
ªgSèã_Upd©ePídög
)

5185 
AuthRec‹d
 *
txt
 = &
§s
->
RR_TXT
;

5186 
uDNS_RegInfo
 *
txtInfo
 = &
txt
->
uDNS_öfo
;

5187 
öfo
->
°©e
 = 
ªgSèã_Regi°îed
;

5189 i‡(
txtInfo
->
Upd©eRDCÆlback
ËtxtInfo->
	`Upd©eRDCÆlback
(
m
, 
txt
,ÅxtInfo->
OrigRD©a
);

5190 
	`SëNewRD©a
(&
txt
->
ª§ec
, 
txtInfo
->
InFlightRD©a
,ÅxtInfo->
InFlightRDLí
);

5191 
txtInfo
->
OrigRD©a
 = 
mDNSNULL
;

5192 
txtInfo
->
InFlightRD©a
 = 
mDNSNULL
;

5195 i‡(
öfo
->
°©e
 =
ªgSèã_Regi°îed
 || info->°©ê=
ªgSèã_Re‰esh
)

5197 
mDNSO∑que16
 
‹igid
 = 
§s
->
uDNS_öfo
.
id
;

5198 
öfo
->
°©e
 = 
ªgSèã_DîegPídög
;

5199 
	`SídSîvi˚Dîegi°øti⁄
(
m
, 
§s
);

5200 
öfo
->
id
 = 
‹igid
;

5201 
öfo
->
°©e
 = 
ªgSèã_NoT¨gë
;

5202 
§s
->
RR_SRV
.
ª§ec
.
rd©a
->
u
.
§v
.
èrgë
.
c
[0] = 0;

5204 
§s
 = srs->
√xt
;

5206 
	}
}

5208 
mDNSloˇl
 
	$WakeSîvi˚Regi°øti⁄s
(
mDNS
 *
m
)

5210 
mDNSs32
 
timíow
 = 
	`mDNSPœtf‹mTimeNow
(
m
);

5211 
Sîvi˚Rec‹dSë
 *
§s
 = 
m
->
uDNS_öfo
.
Sîvi˚Regi°øti⁄s
;

5212 
§s
)

5214 i‡(
§s
->
uDNS_öfo
.
°©e
 =
ªgSèã_Re‰esh
)

5217 
§s
->
RR_SRV
.
La°APTime
 = 
timíow
;

5218 
§s
->
RR_SRV
.
ThisAPI¡îvÆ
 = 
INIT_UCAST_POLL_INTERVAL
;

5220 
§s
 = srs->
√xt
;

5222 
	}
}

5224 
mDNSexp‹t
 
	$uDNS_Inô
(
mDNS
 *c⁄° 
m
)

5226 
	`mDNSPœtf‹mMemZîo
(&
m
->
uDNS_öfo
, (
uDNS_GlobÆInfo
));

5227 
m
->
uDNS_öfo
.
√xãvít
 = m->
timíow_œ°
 + 0x78000000;

5228 
	}
}

5230 
mDNSexp‹t
 
	$uDNS_SÀï
(
mDNS
 *c⁄° 
m
)

5232 
	`Su•ídLLQs
(
m
, 
mDNSåue
);

5233 
	`SÀïSîvi˚Regi°øti⁄s
(
m
);

5234 
	`SÀïRec‹dRegi°øti⁄s
(
m
);

5235 
	}
}

5237 
mDNSexp‹t
 
	$uDNS_Wake
(
mDNS
 *c⁄° 
m
)

5239 
	`Re°¨tQuîõs
(
m
);

5240 
	`WakeSîvi˚Regi°øti⁄s
(
m
);

5241 
	`WakeRec‹dRegi°øti⁄s
(
m
);

5242 
	}
}

	@mdns/uDNS.h

128 #i‚de‡
__UDNS_H_


129 
	#__UDNS_H_


	)

131 
	~"mDNSEmbeddedAPI.h
"

132 
	~"DNSComm⁄.h
"

134 #ifdef 
__˝lu•lus


138 
	#RESTART_GOODBYE_DELAY
 (6 * 
mDNSPœtf‹mO√Sec⁄d
)

139 
	#MIN_UCAST_PERIODIC_EXEC
 (5 * 
mDNSPœtf‹mO√Sec⁄d
)

	)

140 
	#INIT_UCAST_POLL_INTERVAL
 (3 * 
mDNSPœtf‹mO√Sec⁄d
)

142 
	#MAX_UCAST_POLL_INTERVAL
 (60 * 60 * 
mDNSPœtf‹mO√Sec⁄d
)

	)

143 
	#LLQ_POLL_INTERVAL
 (15 * 60 * 
mDNSPœtf‹mO√Sec⁄d
)

144 
	#RESPONSE_WINDOW
 (60 * 
mDNSPœtf‹mO√Sec⁄d
)

145 
	#UPDATE_PORT_NAME
 "_dns-upd©e._udp."

	)

146 
	#LLQ_PORT_NAME
 "_dns-Œq._udp"

	)

147 
	#DEFAULT_UPDATE_LEASE
 7200

	)

151 
mSètus
 
uDNS_SèπQuîy
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *c⁄° 
que°i⁄
);

152 
mDNSBoﬁ
 
uDNS_IsA˘iveQuîy
(
DNSQue°i⁄
 *c⁄° 
que°i⁄
, 
uDNS_GlobÆInfo
 *
u
);

153 
mSètus
 
uDNS_St›Quîy
(
mDNS
 *c⁄° 
m
, 
DNSQue°i⁄
 *c⁄° 
que°i⁄
);

155 
uDNS_Inô
(
mDNS
 *c⁄° 
m
);

156 
uDNS_SÀï
(
mDNS
 *c⁄° 
m
);

157 
uDNS_Wake
(
mDNS
 *c⁄° 
m
);

158 
	#uDNS_Clo£
 
uDNS_SÀï


	)

166 
mSètus
 
uDNS_AddRec‹dToSîvi˚
(
mDNS
 *c⁄° 
m
, 
Sîvi˚Rec‹dSë
 *
§
, 
ExåaResour˚Rec‹d
 *
exåa
);

167 
mSètus
 
uDNS_Upd©eRec‹d
(
mDNS
 *
m
, 
AuthRec‹d
 *
º
);

169 
mSètus
 
uDNS_Regi°îRec‹d
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
);

170 
mSètus
 
uDNS_Dîegi°îRec‹d
(
mDNS
 *c⁄° 
m
, 
AuthRec‹d
 *c⁄° 
º
);

172 
mSètus
 
uDNS_Regi°îSîvi˚
(
mDNS
 *c⁄° 
m
, 
Sîvi˚Rec‹dSë
 *
§s
);

173 
mSètus
 
uDNS_Dîegi°îSîvi˚
(
mDNS
 *c⁄° 
m
, 
Sîvi˚Rec‹dSë
 *
§s
);

176 
uDNS_Re˚iveMsg
(
mDNS
 *c⁄° 
m
, 
DNSMesßge
 *c⁄° 
msg
, c⁄° 
mDNSu8
 *c⁄° 
íd
,

177 c⁄° 
mDNSAddr
 *c⁄° 
§ˇddr
, c⁄° 
mDNSIPP‹t
 
§˝‹t
, c⁄° mDNSAdd∏*c⁄° 
d°addr
,

178 c⁄° 
mDNSIPP‹t
 
d°p‹t
, c⁄° 
mDNSI¡îÁ˚ID
 
I¡îÁ˚ID
);

180 
uDNS_Re˚iveNATM≠
(
mDNS
 *
m
, 
mDNSu8
 *
pkt
, 
mDNSu16
 
Àn
);

183 
uDNS_Execuã
(
mDNS
 *c⁄° 
m
);

186 #ifdef 
__˝lu•lus


	@memdebug.c

5 #ifde‡
HAVE_CONFIG_H


6 
	~"c⁄fig.h
"

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

12 #ifde‡
HAVE_STDINT_H


13 
	~<°döt.h
>

16 
	~"îr.h
"

17 
	~"utû.h
"

19 #ifde‡
DEBUG_MEM


20 
	sdebugnode_t
 {

21 *
	mfûe
;

22 
	mlöe
;

23 
	msize
;

24 *
	m±r
;

25 
debugnode_t
 *
	m√xt
;

26 } 
	tDEBUGNODE
;

28 
DEBUGNODE
 
	g_debug_memli°
 = { 
NULL
, 0, 0, NULL, NULL };

30 
debug_‰ì
(*
fûe
, 
löe
, *
±r
);

31 *
debug_mÆloc
(*
fûe
, 
löe
, 
size_t
 
size
);

32 *
debug_ªÆloc
(*
fûe
, 
löe
, *
±r
, 
size_t
 
size
);

33 *
debug_ˇŒoc
(*
fûe
, 
löe
, 
size_t
 
cou¡
, size_à
size
);

34 *
debug_°rdup
(*
fûe
, 
löe
, c⁄° *
°r
);

35 
debug_dump
();

38 *
_debug_Æloc_nﬁock
(*
fûe
, 
löe
, 
size_t
 
size
);

39 
DEBUGNODE
 *
_debug_föd_±r
(*
±r
);

40 
_debug_ªgi°î_±r
(*
fûe
, 
löe
, *
±r
, 
size_t
 
size
);

46 
DEBUGNODE
 *
	$_debug_föd_±r
(*
±r
) {

47 
DEBUGNODE
 *
¥ev
, *
cuºít
;

49 
¥ev
 = &
_debug_memli°
;

50 
cuºít
 = 
¥ev
->
√xt
;

52 
cuºít
) {

53 if(
cuºít
->
±r
 ==Ötr)

54  
cuºít
;

55 
¥ev
 = 
cuºít
;

56 
cuºít
 = cuºít->
√xt
;

59  
NULL
;

60 
	}
}

62 *
	$_debug_Æloc_nﬁock
(*
fûe
, 
löe
, 
size_t
 
size
) {

63 *
±r
;

65 
±r
 = 
	`mÆloc
(
size
);

66 if(!
±r
)

67 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"Malloc failed in _debug_alloc\n");

69 
	`_debug_ªgi°î_±r
(
fûe
, 
löe
, 
±r
, 
size
);

70  
±r
;

71 
	}
}

73 
	$_debug_ªgi°î_±r
(*
fûe
, 
löe
, *
±r
, 
size_t
 
size
) {

74 
DEBUGNODE
 *
≤ew
;

76 
≤ew
 = (
DEBUGNODE
 *)
	`mÆloc
((DEBUGNODE));

77 if(!
≤ew
)

78 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"Malloc failed in _debug_alloc\n");

80 
≤ew
->
fûe
 = 
	`°rdup
(file);

81 
≤ew
->
löe
 =Üine;

82 
≤ew
->
size
 = size;

83 
≤ew
->
±r
 =Ötr;

85 
≤ew
->
√xt
 = 
_debug_memli°
.next;

86 
_debug_memli°
.
√xt
 = 
≤ew
;

87 
	}
}

89 
	$debug_ªgi°î
(*
fûe
, 
löe
, *
±r
, 
size_t
 
size
) {

90 
	`utû_muãx_lock
(
l_memdebug
);

91 
	`_debug_ªgi°î_±r
(
fûe
, 
löe
, 
±r
, 
size
);

92 
	`utû_muãx_u∆ock
(
l_memdebug
);

93 
	}
}

95 *
	$_debug_Æloc
(*
fûe
, 
löe
, 
size
) {

96 *
±r
;

98 
	`utû_muãx_lock
(
l_memdebug
);

99 
±r
 = 
	`_debug_Æloc_nﬁock
(
fûe
, 
löe
, 
size
);

100 
	`utû_muãx_u∆ock
(
l_memdebug
);

102  
±r
;

103 
	}
}

105 
	$debug_dump
() {

106 
DEBUGNODE
 *
cuºít
;

107 
uöt32_t
 
size
 = 0;

108 
blocks
 = 0;

110 if(!
_debug_memli°
.
√xt
) {

111 
	`DPRINTF
(
E_LOG
,
L_MISC
,"NoÜeaked memory!\n");

115 
cuºít
 = 
_debug_memli°
.
√xt
;

116 
cuºít
) {

117 
size
 +
cuºít
->size;

118 
blocks
++;

119 
cuºít
 = cuºít->
√xt
;

122 
	`DPRINTF
(
E_WARN
,
L_MISC
,"Lóked %d byã†ö %d blocks\n",
size
, 
blocks
);

123 
cuºít
 = 
_debug_memli°
.
√xt
;

124 
cuºít
) {

125 
	`DPRINTF
(
E_WARN
,
L_MISC
,"%d byãs: %s,Üöê%d\n", 
cuºít
->
size
,

126 
cuºít
->
fûe
, cuºít->
löe
);

127 
	`utû_hexdump
(
cuºít
->
±r
,cuºít->
size
);

128 
cuºít
 = cuºít->
√xt
;

131 
	}
}

133 
	$debug_‰ì
(*
fûe
, 
löe
, *
±r
) {

134 
DEBUGNODE
 *
¥ev
, *
cuºít
;

136 
	`utû_muãx_lock
(
l_memdebug
);

137 
¥ev
 = &
_debug_memli°
;

138 
cuºít
 = 
¥ev
->
√xt
;

140 
cuºít
) {

141 if(
cuºít
->
±r
 ==Ötr) {

145 
¥ev
 = 
cuºít
;

146 
cuºít
 = cuºít->
√xt
;

149 if(!
cuºít
) {

150 
	`utû_muãx_u∆ock
(
l_memdebug
);

151 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"AttemptÅo freeán unallocatedÖtr: %s, %d\n",

152 
fûe
, 
löe
);

155 
¥ev
->
√xt
 = 
cuºít
->next;

156 
	`utû_muãx_u∆ock
(
l_memdebug
);

158 if(
cuºít
) {

159 if(
cuºít
->
fûe
)

160 
	`‰ì
(
cuºít
->
fûe
);

161 if(
cuºít
->
±r
)

162 
	`‰ì
(
cuºít
->
±r
);

163 
	`‰ì
(
cuºít
);

166 
	}
}

168 *
	$debug_mÆloc
(*
fûe
, 
löe
, 
size_t
 
size
) {

169 *
±r
;

171 
±r
 = 
	`_debug_Æloc
(
fûe
,
löe
,
size
);

172  
±r
;

173 
	}
}

175 *
	$debug_ªÆloc
(*
fûe
, 
löe
, *
±r
, 
size_t
 
size
) {

176 *
√w_±r
;

177 
DEBUGNODE
 *
ﬁd_node
;

178 
c›y_size
;

180 
	`utû_muãx_lock
(
l_memdebug
);

181 
ﬁd_node
 = 
	`_debug_föd_±r
(
±r
);

182 if(!
ﬁd_node
) {

183 
	`utû_muãx_u∆ock
(
l_memdebug
);

184 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"AttemptÅoÑealloc invalidÖtr: %s, %d\n",

185 
fûe
, 
löe
);

188 
√w_±r
 = 
	`_debug_Æloc_nﬁock
(
fûe
, 
löe
, 
size
);

189 
	`utû_muãx_u∆ock
(
l_memdebug
);

191 
c›y_size
 = 
ﬁd_node
->
size
;

192 if(
size
 < 
c›y_size
)

193 
c›y_size
=
size
;

195 
	`mem˝y
(
√w_±r
,
ﬁd_node
->
±r
,
c›y_size
);

196 
	`debug_‰ì
(
fûe
, 
löe
, 
ﬁd_node
->
±r
);

198  
√w_±r
;

199 
	}
}

201 *
	$debug_ˇŒoc
(*
fûe
, 
löe
, 
size_t
 
cou¡
, size_à
size
) {

202 *
±r
;

204 
±r
 = 
	`debug_mÆloc
(
fûe
, 
löe
, 
cou¡
 * 
size
);

205 
	`mem£t
(
±r
,0,
cou¡
 *
size
);

206  
±r
;

207 
	}
}

209 *
	$debug_°rdup
(*
fûe
, 
löe
, c⁄° *
°r
) {

210 *
±r
;

211 
size
;

213 
size
 = 
	`°æí
(
°r
);

214 
±r
 = 
	`debug_mÆloc
(
fûe
, 
löe
, 
size
 + 1);

215 
	`°r˝y
(
±r
,
°r
);

217  
±r
;

218 
	}
}

	@memdebug.h

5 #ifde‡
DEBUG_MEM


6 
	#‰ì
(
±r
Ë
	`debug_‰ì
(
__FILE__
,
__LINE__
,’å))

	)

7 
	#mÆloc
(
size
Ë
	`debug_mÆloc
(
__FILE__
,
__LINE__
,(size))

	)

8 
	#ªÆloc
(
±r
, 
size
Ë
	`debug_ªÆloc
(
__FILE__
,
__LINE__
,’å),(size))

	)

9 
	#ˇŒoc
(
cou¡
,
size
Ë
	`debug_ˇŒoc
(
__FILE__
,
__LINE__
,(cou¡),(size))

	)

10 
	#°rdup
(
°r
Ë
	`debug_°rdup
(
__FILE__
,
__LINE__
,(°r))

	)

11 
	#mem_dump
(Ë
	`debug_dump
()

	)

12 
	#mem_ªgi°î
(
±r
, 
size
Ë
	`debug_ªgi°î
(
__FILE__
,
__LINE__
,’å),(size))

	)

14 
debug_‰ì
(*
fûe
, 
löe
, *
±r
);

15 *
debug_mÆloc
(*
fûe
, 
löe
, 
size_t
 
size
);

16 *
debug_ªÆloc
(*
fûe
, 
löe
, *
±r
, 
size_t
 
size
);

17 *
debug_ˇŒoc
(*
fûe
, 
löe
, 
size_t
 
cou¡
, size_à
size
);

18 *
debug_°rdup
(*
fûe
, 
löe
, c⁄° *
°r
);

19 
debug_dump
();

20 
debug_ªgi°î
(*
fûe
, 
löe
, *
±r
, 
size_t
 
size
);

23 
	#mem_dump
();

	)

24 
	#mem_ªgi°î
(
±r
, 
size
);

	)

	@mp3-scanner.c

29 #ifde‡
HAVE_CONFIG_H


30 
	~"c⁄fig.h
"

33 
	~<˘y≥.h
>

34 
	~<î∫o.h
>

35 
	~<f˙é.h
>

36 
	~<id3èg.h
>

37 
	~<limôs.h
>

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

41 
	~<ic⁄v.h
>

43 #ifde‡
HAVE_DIRENT_H


44 
	~<dúít.h
>

46 #i‚de‡
WIN32


47 
	~<√töë/ö.h
>

49 
	~<sys/°©.h
>

50 
	~<dlf˙.h
>

52 
	~"dØpd.h
"

53 
	~"c⁄f.h
"

54 
	~"db-gíîic.h
"

55 
	~"îr.h
"

56 
	~"io.h
"

57 
	~"mp3-sˇ¬î.h
"

58 
	~"os.h
"

59 
	~"ª°¨t.h
"

60 
	~"utû.h
"

61 
	~"ch¨dëe˘.h
"

66 *
	msuffix
;

67 (*
	msˇ¬î
)(* 
	mfûe
, 
MP3FILE
* 
	mpmp3
);

68 *
	mty≥
;

69 *
	mcode˘y≥
;

70 
	mhas_video
;

71 *
	mdes¸ùti⁄
;

72 } 
	tTAGHANDLER
;

75 
	#MAYBEFREE
(
a
Ë{ if(◊)Ë
	`‰ì
(◊)); };

	)

76 #i‚de‡
S_ISDIR


77 
	#S_ISDIR
(
a
Ë((◊Ë& 
S_IFMT
Ë=
S_IFDIR
)

	)

79 #i‚de‡
S_ISLNK


80 
	#S_ISLNK
(
a
Ë((◊Ë& 
S_IFMT
Ë=
S_IFLNK
)

	)

87 
sˇn_∑th
(*
∑th
, *
code_∑ge
);

88 
sˇn_gë_öfo
(*
fûe
, 
MP3FILE
 *
pmp3
);

89 
sˇn_‰ìègs
(
MP3FILE
 *
pmp3
);

90 
sˇn_music_fûe
(*
∑th
, *
‚ame
,
°©
 *
psb
, 
is_compdú
, *
code_∑ge
);

92 
TAGHANDLER
 *
sˇn_gëh™dÀr
(*
ty≥
);

93 
	gmp3_cou¡î
;

97 #ifde‡
OGGVORBIS


98 
sˇn_gë_oggöfo
(*
fûíame
, 
MP3FILE
 *
pmp3
);

101 #ifde‡
FLAC


102 
sˇn_gë_Êacöfo
(*
fûíame
, 
MP3FILE
 *
pmp3
);

105 #ifde‡
MUSEPACK


106 
sˇn_gë_mpcöfo
(*
fûíame
, 
MP3FILE
 *
pmp3
);

109 
sˇn_gë_wmaöfo
(*
fûíame
, 
MP3FILE
 *
pmp3
);

110 
sˇn_gë_Øcöfo
(*
fûíame
, 
MP3FILE
 *
pmp3
);

111 
sˇn_gë_wavöfo
(*
fûíame
, 
MP3FILE
 *
pmp3
);

112 
sˇn_gë_uæöfo
(*
fûíame
, 
MP3FILE
 *
pmp3
);

113 
sˇn_gë_mp3öfo
(*
fûíame
, 
MP3FILE
 *
pmp3
);

114 
sˇn_gë_mp4öfo
(*
fûíame
, 
MP3FILE
 *
pmp3
);

115 
sˇn_gë_aiföfo
(*
fûíame
, 
MP3FILE
 *
pmp3
);

118 
sˇn_xml_∂ayli°
(*
fûíame
);

119 
sˇn_°©ic_∂ayli°
(*
∑th
);

142 
TAGHANDLER
 
	gègh™dÀrs
[] = {

143 { "Øc", 
sˇn_gë_Øcöfo
, "m4a", "mp4a", 0, "AACáudio file" },

144 { "mp4", 
sˇn_gë_Øcöfo
, "m4a", "mp4a", 0, "AACáudio file" },

145 { "m4b", 
sˇn_gë_Øcöfo
, "m4a", "mp4a", 0, "Protected AACáudio file" },

146 { "m4a", 
sˇn_gë_Øcöfo
, "m4a", "mp4a", 0, "AACáudio file" },

147 { "m4p", 
sˇn_gë_Øcöfo
, "m4p", "mp4a", 0, "AACáudio file" },

148 { "mp3", 
sˇn_gë_mp3öfo
, "mp3", "mpeg", 0, "MPEGáudio file" },

149 { "wav", 
sˇn_gë_wavöfo
, "wav", "wav", 0, "WAVáudio file" },

150 { "aif", 
sˇn_gë_aiföfo
, "aif", "aif", 0, "AIFFáudio file" },

151 { "aiff",
sˇn_gë_aiföfo
, "aif", "aif", 0, "AIFFáudio file" },

152 { "wma", 
sˇn_gë_wmaöfo
, "wma", "wma", 0, "WMAáudio file" },

153 { "uæ", 
sˇn_gë_uæöfo
, "∂s", 
NULL
, 0, "Playlist URL" },

154 { "∂s", 
sˇn_gë_uæöfo
, "∂s", 
NULL
, 0, "Playlist URL" },

155 { "m4v", 
sˇn_gë_Øcöfo
, "m4v", "mp4v", 1, "MPEG-4 video file" },

156 { "mp4", 
sˇn_gë_Øcöfo
, "m4v", "mp4v", 1, "MPEG-4 video file" },

157 { "mov", 
sˇn_gë_Øcöfo
, "m4v", "mp4v", 1, "MPEG-4 video file" },

158 { "m≥g4", 
sˇn_gë_Øcöfo
, "m4v", "mp4v", 1, "MPEG-4 video file" },

159 #ifde‡
OGGVORBIS


160 { "ogg", 
sˇn_gë_oggöfo
, "ogg", "ogg", 0, "Ogg Vorbisáudio file" },

162 #ifde‡
FLAC


163 { "Êac", 
sˇn_gë_Êacöfo
, "flac","flac", 0, "FLACáudio file" },

164 { "Êa", 
sˇn_gë_Êacöfo
, "flac","flac", 0, "FLACáudio file" },

166 #ifde‡
MUSEPACK


167 { "mpc", 
sˇn_gë_mpcöfo
, "mpc", "mpc", 0, "Musepackáudio file" },

168 { "mµ", 
sˇn_gë_mpcöfo
, "mpc", "mpc", 0, "Musepackáudio file" },

169 { "mp+", 
sˇn_gë_mpcöfo
, "mpc", "mpc", 0, "Musepackáudio file" },

171 { 
NULL
, NULL, NULL, NULL, 0, NULL }

174 
	sèg_∂ayli°li°
 {

175 *
	m∑th
;

176 
èg_∂ayli°li°
 *
	m√xt
;

177 } 
	tPLAYLISTLIST
;

179 
PLAYLISTLIST
 
	gsˇn_∂ayli°li°
 = { 
NULL
, NULL };

181 
	$ªsize_id3_èg
(
MP3FILE
 *
mp3fûe
){

182 
èg_Àngth
 = 0;

184 if(
mp3fûe
->
‚ame
)

185 
èg_Àngth
 = 
	`°æí
(
mp3fûe
->
‚ame
);

187 if(
èg_Àngth
 > 255)

188 *(
mp3fûe
->
‚ame
+255)=0;

190 
èg_Àngth
 = 0;

191 if(
mp3fûe
->
tôÀ
)

192 
èg_Àngth
 = 
	`°æí
(
mp3fûe
->
tôÀ
);

193 if(
èg_Àngth
 > 255)

194 *(
mp3fûe
->
tôÀ
+255)=0;

196 
èg_Àngth
 = 0;

197 if(
mp3fûe
->
¨ti°
)

198 
èg_Àngth
 = 
	`°æí
(
mp3fûe
->
¨ti°
);

199 if(
èg_Àngth
 > 255)

200 *(
mp3fûe
->
¨ti°
+255)=0;

202 
èg_Àngth
 = 0;

203 if(
mp3fûe
->
Æbum
)

204 
èg_Àngth
 = 
	`°æí
(
mp3fûe
->
Æbum
);

205 if(
èg_Àngth
 > 255)

206 *(
mp3fûe
->
Æbum
+255)=0;

208 
èg_Àngth
 = 0;

209 if(
mp3fûe
->
gíª
)

210 
èg_Àngth
 = 
	`°æí
(
mp3fûe
->
gíª
);

211 if(
èg_Àngth
 > 255)

212 *(
mp3fûe
->
gíª
+255)=0;

214 
èg_Àngth
 = 0;

215 if(
mp3fûe
->
ty≥
)

216 
èg_Àngth
 = 
	`°æí
(
mp3fûe
->
ty≥
);

217 if(
èg_Àngth
 > 255)

218 *(
mp3fûe
->
ty≥
+255)=0;

220 
èg_Àngth
 = 0;

221 if(
mp3fûe
->
groupög
)

222 
èg_Àngth
 = 
	`°æí
(
mp3fûe
->
groupög
);

223 if(
èg_Àngth
 > 255)

224 *(
mp3fûe
->
groupög
+255)=0;

226 
èg_Àngth
 = 0;

227 if(
mp3fûe
->
commít
)

228 
èg_Àngth
 = 
	`°æí
(
mp3fûe
->
commít
);

229 if(
èg_Àngth
 > 255)

230 *(
mp3fûe
->
commít
+255)=0;

231 
	}
}

233 
	$ch¨£t_c⁄vît‹
(*
‰omcode
, 
MP3FILE
 *
mp3fûe
)

235 *
tôÀ_ªsu…
 = 
NULL
;

236 *
¨ti°_ªsu…
 = 
NULL
;

237 *
Æbum_ªsu…
 = 
NULL
;

238 *
gíª_ªsu…
 = 
NULL
;

241 if–
mp3fûe
->
tôÀ
 !
NULL
 ) {

242 
	`DBG_FILE_SCAN
(
	`¥ötf
("mp3-scanner.c: charset_convertor(): convert songÅitle\n");)

243 if–
	`ic⁄v_°rög
("UTF-8",
‰omcode
, 
mp3fûe
->
tôÀ
, mp3fûe->tôÀ+
	`°æí
(mp3file->title)+1,

244 &
tôÀ_ªsu…
, 
NULL
) < 0 ) {

245 
	`DBG_FILE_SCAN
(
	`¥ötf
("----Åitle iconv_string failed ----\n");)

248 
mp3fûe
->
tôÀ
 = 
tôÀ_ªsu…
;

252 if–
mp3fûe
->
¨ti°
 !
NULL
 ) {

253 
	`DBG_FILE_SCAN
(
	`¥ötf
("mp3-scanner.c: charset_convertor(): convert songártist\n");)

254 if–
	`ic⁄v_°rög
("UTF-8",
‰omcode
, 
mp3fûe
->
¨ti°
, mp3fûe->¨ti°+
	`°æí
(mp3file->artist)+1,

255 &
¨ti°_ªsu…
, 
NULL
) < 0 ) {

256 
	`DBG_FILE_SCAN
(
	`¥ötf
("----ártist iconv_string failed ----\n");)

259 
mp3fûe
->
¨ti°
=
¨ti°_ªsu…
;

263 i‡–
mp3fûe
->
Æbum
 !
NULL
 ) {

264 
	`DBG_FILE_SCAN
(
	`¥ötf
("mp3-scanner.c: charset_convertor(): convert songálbum\n");)

265 if–
	`ic⁄v_°rög
("UTF-8",
‰omcode
, 
mp3fûe
->
Æbum
, mp3fûe->Æbum+
	`°æí
(mp3file->album)+1,

266 &
Æbum_ªsu…
, 
NULL
) < 0 ) {

267 
	`DBG_FILE_SCAN
(
	`¥ötf
("----álbum iconv_string failed ----\n");)

270 
mp3fûe
->
Æbum
=
Æbum_ªsu…
;

274 if–
mp3fûe
->
gíª
 !
NULL
 ) {

275 
	`DBG_FILE_SCAN
(
	`¥ötf
("mp3-scanner.c: charset_convertor(): convert song genre\n");)

276 if–
	`ic⁄v_°rög
("UTF-8",
‰omcode
, 
mp3fûe
->
gíª
, mp3fûe->gíª+
	`°æí
(mp3file->genre)+1,

277 &
gíª_ªsu…
, 
NULL
) < 0 ) {

278 
	`DBG_FILE_SCAN
(
	`¥ötf
("---- genre iconv_string failed ----\n");)

281 
mp3fûe
->
gíª
=
gíª_ªsu…
;

285 
	}
}

294 
	$sˇn_add_∂ayli°li°
(*
∑th
) {

295 
PLAYLISTLIST
 *
∂i°
;

297 
	`DPRINTF
(
E_SPAM
,
L_SCAN
,"AddögÖœyli° %s\n",
∑th
);

299 if(!
	`c⁄f_gë_öt
("scanning","process_playlists",1)) {

300 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"SkùpögÖœyli° %†’ro˚ss_∂ayli°s)\n",
∑th
);

304 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Addög %†f‹ de„ºedÖro˚ssög.\n",
∑th
);

306 
∂i°
=(
PLAYLISTLIST
*)
	`mÆloc
((PLAYLISTLIST));

307 if(!
∂i°
) {

308 
	`DPRINTF
(
E_FATAL
,
L_SCAN
,"MallocÉrror\n");

312 
∂i°
->
∑th
=
	`°rdup
(path);

313 
∂i°
->
√xt
=
sˇn_∂ayli°li°
.next;

314 
sˇn_∂ayli°li°
.
√xt
=
∂i°
;

315 
	}
}

321 
	$sˇn_¥o˚ss_∂ayli°li°
() {

322 
PLAYLISTLIST
 *
≤ext
;

323 *
ext
;

324 *
fûe
;

326 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"StartingÖlaylist scan\n");

328 
sˇn_∂ayli°li°
.
√xt
) {

329 
≤ext
=
sˇn_∂ayli°li°
.
√xt
;

331 if(!
	`utû_mu°_exô
()) {

332 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Abouàtÿsˇ¿%s\n",
≤ext
->
∑th
);

333 
ext
=
≤ext
->
∑th
;

334 if(
	`°ºchr
(
≤ext
->
∑th
,'.')) {

335 
ext
 = 
	`°ºchr
(
≤ext
->
∑th
,'.');

338 
fûe
=
≤ext
->
∑th
;

339 if(
	`°ºchr
(
≤ext
->
∑th
,
PATHSEP
)) {

340 
fûe
 = 
	`°ºchr
(
≤ext
->
∑th
,
PATHSEP
) + 1;

343 if((!
	`°rˇ£cmp
(
fûe
,"iTunes Music Library.xml")) ||

344 (!
	`°rˇ£cmp
(
fûe
,"iTunes Library.xml"))) {

345 if(
	`c⁄f_gë_öt
("scanning","process_itunes",1)) {

346 
	`DPRINTF
(
E_INF
,
L_SCAN
,"Sˇ¬ög %s\n",
≤ext
->
∑th
);

347 
	`sˇn_xml_∂ayli°
(
≤ext
->
∑th
);

348 
	`DPRINTF
(
E_INF
,
L_SCAN
,"D⁄êSˇ¬ög %s\n",
≤ext
->
∑th
);

350 } if(!
	`°rˇ£cmp
(
ext
,".m3u")) {

351 if(
	`c⁄f_gë_öt
("scanning","process_m3u",0)) {

352 
	`DPRINTF
(
E_INF
,
L_SCAN
,"Sˇ¬ög %s\n",
≤ext
->
∑th
);

353 
	`sˇn_°©ic_∂ayli°
(
≤ext
->
∑th
);

354 
	`DPRINTF
(
E_INF
,
L_SCAN
,"D⁄êSˇ¬ög %s\n",
≤ext
->
∑th
);

359 
	`‰ì
(
≤ext
->
∑th
);

360 
sˇn_∂ayli°li°
.
√xt
=
≤ext
->next;

361 
	`‰ì
(
≤ext
);

363 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"FinishedÖlaylistÜoop\n");

364 
	}
}

379 
	$sˇn_öô
(**
∑th¨øy
,*
code_∑ge
) {

380 
îr
=0;

381 
ödex
=0;

382 
ªsﬁved_∑th
[
PATH_MAX
];

383 *
c⁄vîsi⁄_codïage
;

385 
mp3_cou¡î
=0;

388 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Starting scan_init\n");

390 if(
	`db_°¨t_sˇn
()) {

391 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Error in db_start_scan()\n");

395 
sˇn_∂ayli°li°
.
√xt
=
NULL
;

397 
c⁄vîsi⁄_codïage
 = 
	`c⁄f_Æloc_°rög
("scanning","mp3_tag_codepage",

398 
code_∑ge
);

399 
	`¥ötf
("mp3-sˇ¬î.c: sˇn-öô: c⁄vîsi⁄_codïage=%s\n",
c⁄vîsi⁄_codïage
);

402 (
∑th¨øy
[
ödex
] !
NULL
Ë&& (!
	`utû_mu°_exô
())) {

404 i‡(
	`°æí
(
∑th¨øy
[
ödex
]) >4 ){

405 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Sˇ¬ög f‹ MP3†ö %s\n",
∑th¨øy
[
ödex
]);

406 
	`ªÆ∑th
(
∑th¨øy
[
ödex
],
ªsﬁved_∑th
);

407 
îr
=
	`sˇn_∑th
(
ªsﬁved_∑th
, 
c⁄vîsi⁄_codïage
);

410 
	`¥ötf
("mp3-sˇ¬î.c: sˇn_öô():Éº‹Ö©h=%s\n",
∑th¨øy
[
ödex
]);

412 
ödex
++;

415 if(
	`utû_mu°_exô
(Ë|| 
	`db_íd_s⁄g_sˇn
())

418 if(!
	`utû_mu°_exô
()) {

419 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"ProcessingÖlaylists\n");

420 
	`sˇn_¥o˚ss_∂ayli°li°
();

423 if(
	`db_íd_sˇn
())

425 
	`‰ì
(
c⁄vîsi⁄_codïage
);

426  
îr
;

427 
	}
}

435 
	$sˇn_is_compdú
(*
∑th
) {

436 
cuºít
=0;

437 **
compdús
;

439 if(!
	`c⁄f_gë_¨øy
("gíîÆ","compdús",&
compdús
))

440  
FALSE
;

442 
compdús
[
cuºít
]) {

443 if(
	`°rˇ£°r
(
∑th
,
compdús
[
cuºít
])) {

444 
	`c⁄f_di•o£_¨øy
(
compdús
);

445  
TRUE
;

447 
cuºít
++;

449 
	`c⁄f_di•o£_¨øy
(
compdús
);

450  
FALSE
;

451 
	}
}

459 
	$sˇn_∑th
(*
∑th
, *
code_∑ge
) {

460 
DIR
 *
cuºít_dú
;

461 
de
[(
dúít
Ë+ 
MAXNAMLEN
 + 1];

462 
dúít
 *
pde
;

463 
îr
;

464 
ªœtive_∑th
[
PATH_MAX
];

465 
mp3_∑th
[
PATH_MAX
];

466 
°©
 
sb
;

467 *
exãnsi⁄s
;

468 
is_compdú
;

469 
fﬁlow_symlöks
 = 0;

470 
dúÀvñ
 = 0;

471 
fﬁlow_symlöks
 = 
	`c⁄f_gë_öt
("scanning","follow_symlinks",1);

472 
exãnsi⁄s
 = 
	`c⁄f_Æloc_°rög
("general","extensions",".mp3,.m4a,.m4p");

474 if((
cuºít_dú
=
	`›ídú
(
∑th
)Ë=
NULL
) {

475 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"›ídú: %s\n",
	`°ªº‹
(
î∫o
));

476 
	`‰ì
(
exãnsi⁄s
);

480 
is_compdú
=
	`sˇn_is_compdú
(
∑th
);

481 
dúÀvñ
++;

482 
	`DPRINTF
(
E_INF
,
L_SCAN
,"›í dú %s\n",
∑th
);

484 if(
	`utû_mu°_exô
()) {

485 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"St›Ñeq. Ab‹tög sˇ¿o‡%s.\n",
∑th
);

486 
	`˛o£dú
(
cuºít_dú
);

487 
	`‰ì
(
exãnsi⁄s
);

488 
dúÀvñ
--;

492 
pde
=(
dúít
 *)&
de
;

494 
	`DPRINTF
(
E_INF
,
L_SCAN
,"cc ");

495 
îr
=
	`ªaddú_r
(
cuºít_dú
,(
dúít
 *)&
de
,&
pde
);

496 
	`DPRINTF
(
E_INF
,
L_SCAN
,"ee ");

497 if(
îr
 == -1) {

498 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Eº‹ o¿ªaddú_r: %s\n",
	`°ªº‹
(
î∫o
));

499 
îr
=
î∫o
;

500 
	`˛o£dú
(
cuºít_dú
);

501 
	`‰ì
(
exãnsi⁄s
);

502 
î∫o
=
îr
;

503 
	`DPRINTF
(
E_INF
,
L_SCAN
,"aa\n");

507 if(!
pde
)

510 if(!
	`°rcmp
(
pde
->
d_«me
,".") || !strcmp(pde->d_name,".."))

513 
	`DPRINTF
(
E_INF
,
L_SCAN
,"dd ");

514 
	`¢¥ötf
(
ªœtive_∑th
,
PATH_MAX
,"%s/%s",
∑th
,
pde
->
d_«me
);

516 if(!
	`os_l°©
(
ªœtive_∑th
,&
sb
)) {

518 if(
	`S_ISLNK
(
sb
.
°_mode
Ë&& !
fﬁlow_symlöks
 && 
dúÀvñ
!=0)

522 
mp3_∑th
[0] = '\x0';

523 
	`ªÆ∑th
(
ªœtive_∑th
,
mp3_∑th
);

524 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Found %s\n",
ªœtive_∑th
);

525 if(
	`os_°©
(
mp3_∑th
,&
sb
)) {

526 
	`DPRINTF
(
E_INF
,
L_SCAN
,"Eº‹ sèâög %s: %s\n",
mp3_∑th
,
	`°ªº‹
(
î∫o
));

528 if(
	`S_ISDIR
(
sb
.
°_mode
)) {

529 if(
	`c⁄f_gë_öt
("scanning","ignore_appledouble",1) &&

530 ((
	`°rˇ£cmp
(
pde
->
d_«me
,".AppleDouble") == 0) ||

531 (
	`°rˇ£cmp
(
pde
->
d_«me
,".AppleDesktop") == 0))) {

532 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Skippingáppledouble folder\n");

533 } if(
	`c⁄f_gë_öt
("scanning","ignore_dotfiles",0) &&

534 
pde
->
d_«me
[0] == '.') {

535 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Skipping dotfile\n");

537 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Found %s..Ñecursög\n",
pde
->
d_«me
);

538 
	`sˇn_∑th
(
mp3_∑th
, 
code_∑ge
);

541 
	`sˇn_fûíame
(
mp3_∑th
, 
is_compdú
, 
exãnsi⁄s
, 
code_∑ge
);

545 
dúÀvñ
--;

546 
	`˛o£dú
(
cuºít_dú
);

547 
	`‰ì
(
exãnsi⁄s
);

548 
	`DPRINTF
(
E_INF
,
L_SCAN
,"scan_pathÉnd\n");

550 
	}
}

558 
	$sˇn_°©ic_∂ayli°
(*
∑th
) {

559 
ba£_∑th
[
PATH_MAX
];

560 
fûe_∑th
[
PATH_MAX
];

561 
ªÆ_∑th
[
PATH_MAX
];

562 
löebuf„r
[
PATH_MAX
];

563 
IOHANDLE
 
hfûe
;

565 
∂ayli°id
;

566 
M3UFILE
 *
pm3u
;

567 
MP3FILE
 *
pmp3
;

568 
°©
 
sb
;

569 *
cuºít
;

570 *
≥º
;

571 *
±r
;

572 
uöt32_t
 
Àn
;

574 
	`DPRINTF
(
E_WARN
,
L_SCAN
|
L_PL
,"Pro˚ssög sèti¯∂ayli°: %s\n",
∑th
);

575 if(
	`os_°©
(
∑th
,&
sb
)) {

576 
	`DPRINTF
(
E_INF
,
L_SCAN
,"Eº‹ sèâög %s: %s\n",
∑th
,
	`°ªº‹
(
î∫o
));

577  
FALSE
;

580 if(((
cuºít
=
	`°ºchr
(
∑th
,'/')Ë=
NULL
) &&

581 ((
cuºít
=
	`°ºchr
(
∑th
,'\\')Ë=
NULL
)) {

582 
cuºít
 = 
∑th
;

584 
cuºít
++;

588 
	`°r˝y
(
ba£_∑th
,
cuºít
);

589 if((
cuºít
=
	`°ºchr
(
ba£_∑th
,'.'))) {

590 *
cuºít
='\x0';

593 
pm3u
 = 
	`db_„tch_∂ayli°
(
NULL
,
∑th
,0);

594 if(
pm3u
 && (pm3u->
db_time°amp
 > 
sb
.
°_mtime
)) {

596 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Playlistálready up-to-date\n");

597 
	`db_di•o£_∂ayli°
(
pm3u
);

598  
TRUE
;

601 if(
pm3u
) {

602 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"PlaylistÇeeds updated\n");

604 
	`db_dñëe_∂ayli°
(
NULL
,
pm3u
->
id
);

607 if(!(
hfûe
 = 
	`io_√w
())) {

608 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"Cannot create file handle\n");

609  
FALSE
;

612 if(
	`io_›í
(
hfûe
,"fûe://%U?ascii=1",
∑th
)) {

613 if(
	`db_add_∂ayli°
(&
≥º
,
ba£_∑th
,
PL_STATICFILE
,
NULL
,
∑th
,

614 0,&
∂ayli°id
Ë!
DB_E_SUCCESS
) {

615 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"Eº‹áddög m3u %s: %s\n",
∑th
,
≥º
);

616 
	`‰ì
(
≥º
);

617 
	`db_di•o£_∂ayli°
(
pm3u
);

618 
	`io_di•o£
(
hfûe
);

619  
FALSE
;

622 
	`°r˝y
(
ba£_∑th
,
∑th
);

623 
±r
 = 
ba£_∑th
;

624 *
±r
) {

625 if((*
±r
 == '/') || (*ptr == '\\'))

626 *
±r
 = 
PATHSEP
;

627 
±r
++;

630 if((
cuºít
=
	`°ºchr
(
ba£_∑th
,
PATHSEP
))){

631 *(
cuºít
+1) = '\x0';

634 
	`DPRINTF
(
E_INF
,
L_SCAN
|
L_PL
,"AddedÖœyli°á†id %d\n",
∂ayli°id
);

636 
	`mem£t
(
löebuf„r
,0x00,(linebuffer));

637 
	`io_buf„r
(
hfûe
);

639 
Àn
 = (
löebuf„r
);

640 
	`io_ªadlöe
(
hfûe
,(*)
löebuf„r
,&
Àn
) &&Üen) {

641 (
löebuf„r
[
	`°æí
(linebuffer)-1] == '\n') ||

642 (
löebuf„r
[
	`°æí
(linebuffer)-1] == '\r'))

643 
löebuf„r
[
	`°æí
(linebuffer)-1] = '\0';

645 if((
löebuf„r
[0] == ';') || (linebuffer[0] == '#')) {

646 
Àn
 = (
löebuf„r
);

650 
±r
 = 
löebuf„r
;

651 *
±r
) {

652 if((*
±r
 == '/') || (*ptr == '\\'))

653 *
±r
 = 
PATHSEP
;

654 
±r
++;

659 if((
löebuf„r
[0] =
PATHSEP
) || (linebuffer[1] == ':')) {

660 
	`°r˝y
(
fûe_∑th
,
löebuf„r
);

662 
	`¢¥ötf
(
fûe_∑th
,(fûe_∑th),"%s%s",
ba£_∑th
,
löebuf„r
);

665 
	`ªÆ∑th
(
fûe_∑th
,
ªÆ_∑th
);

666 
	`DPRINTF
(
E_DBG
,
L_SCAN
|
L_PL
,"Checkög %s\n",
ªÆ_∑th
);

669 if((
pmp3
=
	`db_„tch_∑th
(&
≥º
,
ªÆ_∑th
,0))) {

671 
	`DPRINTF
(
E_DBG
,
L_SCAN
|
L_PL
,"Resﬁved %†tÿ%d\n",
ªÆ_∑th
,

672 
pmp3
->
id
);

673 
	`db_add_∂ayli°_ôem
(
NULL
,
∂ayli°id
,
pmp3
->
id
);

674 
	`db_di•o£_ôem
(
pmp3
);

676 
	`DPRINTF
(
E_WARN
,
L_SCAN
|
L_PL
,"PlaylistÉntry %s bad: %s\n",

677 
löebuf„r
,
≥º
);

678 
	`‰ì
(
≥º
);

681 
Àn
 = (
löebuf„r
);

683 if(!
Àn
)

684 
	`DPRINTF
(
L_SCAN
,
E_LOG
,"Eº‹ÑódögÖœyli°: %s\n",
	`io_îr°r
(
hfûe
));

686 
	`DPRINTF
(
L_SCAN
,
E_LOG
,"FöishedÖro˚ssögÖœyli°. Lí: %d\n",
Àn
);

687 
	`io_˛o£
(
hfûe
);

690 
	`io_di•o£
(
hfûe
);

691 
	`db_di•o£_∂ayli°
(
pm3u
);

692 
	`DPRINTF
(
E_WARN
,
L_SCAN
|
L_PL
,"DoneÖrocessingÖlaylist\n");

693  
TRUE
;

694 
	}
}

706 
	$sˇn_fûíame
(*
∑th
, 
compdú
, *
exãnsi⁄s
, *
code_∑ge
) {

707 
is_compdú
=
compdú
;

708 
mp3_∑th
[
PATH_MAX
];

709 
°©
 
sb
;

710 *
‚ame
;

711 *
ext
;

712 *
Æl_ext
 = 
exãnsi⁄s
;

713 
mod_time
;

714 
MP3FILE
 *
pmp3
;

715 
	`DPRINTF
(
E_INF
,
L_SCAN
,"scan_filename beg\n");

717 if(
compdú
 == 2) {

719 
is_compdú
 = 
	`sˇn_is_compdú
(
∑th
);

722 if(!
Æl_ext
) {

723 
Æl_ext
 = 
	`c⁄f_Æloc_°rög
("general","extensions",".mp3,.m4a,.m4p");

726 
	`ªÆ∑th
(
∑th
,
mp3_∑th
);

727 
‚ame
 = 
	`°ºchr
(
mp3_∑th
,
PATHSEP
);

728 if(!
‚ame
) {

729 
‚ame
 = 
mp3_∑th
;

731 
‚ame
++;

734 if(
	`c⁄f_gë_öt
("scanning","ignore_dotfiles",0)) {

735 if(
‚ame
[0] == '.')

737 if(
	`°∫cmp
(
‚ame
,":2e",3) == 0)

741 if(
	`c⁄f_gë_öt
("scanning","ignore_appledouble",1)) {

742 if(
	`°∫cmp
(
‚ame
,"._",2) == 0)

747 if(
	`os_°©
(
mp3_∑th
,&
sb
)) {

748 
	`DPRINTF
(
E_INF
,
L_SCAN
,"Eº‹ sèâög: %s\n",
	`°ªº‹
(
î∫o
));

751 if(
	`°æí
(
‚ame
) > 2) {

752 
ext
 = 
	`°ºchr
(
‚ame
, '.');

753 if(
ext
 && (()
	`°æí
(ext) > 1)) {

754 if(
	`°rˇ£cmp
(".m3u",
ext
) == 0) {

755 
	`sˇn_add_∂ayli°li°
(
mp3_∑th
);

756 } if(
	`°rˇ£cmp
(".xml",
ext
) == 0) {

757 
	`sˇn_add_∂ayli°li°
(
mp3_∑th
);

758 } if(
	`°rˇ£°r
(
Æl_ext
, 
ext
)) {

759 
mod_time
 = ()
sb
.
°_mtime
;

760 
pmp3
 = 
	`db_„tch_∑th
(
NULL
,
mp3_∑th
,0);

762 if((!
pmp3
Ë|| (pmp3->
db_time°amp
 < 
mod_time
) ||

763 (
pmp3
->
f‹˚_upd©e
)) {

764 
	`sˇn_music_fûe
(
∑th
,
‚ame
,&
sb
,
is_compdú
, 
code_∑ge
);

766 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Skipping file,Çot modified\n");

768 
	`db_di•o£_ôem
(
pmp3
);

774 if((
Æl_ext
Ë&& (!
exãnsi⁄s
)Ë
	`‰ì
(all_ext);

775 
	`DPRINTF
(
E_INF
,
L_SCAN
,"scan_filenameÉnd\n");

777 
	}
}

785 
	$sˇn_music_fûe
(*
∑th
, *
‚ame
,

786 
°©
 *
psb
, 
is_compdú
, *
code_∑ge
) {

787 
MP3FILE
 
mp3fûe
;

788 *
cuºít
=
NULL
;

789 *
ty≥
;

790 
TAGHANDLER
 *
±agh™dÀr
;

791 
fdes¸
[50];

794 
	`DPRINTF
(
E_INF
,
L_SCAN
,"Found musi¯fûe: %s\n",
‚ame
);

796 
	`mem£t
((*)&
mp3fûe
,0,(mp3file));

797 
mp3fûe
.
∑th
=
	`°rdup
(path);

798 
mp3fûe
.
‚ame
=
	`°rdup
(fname);

799 
mp3fûe
.
fûe_size
 = 
psb
->
°_size
;

801 if((
‚ame
Ë&& (
	`°æí
(fname) > 1) && (fname[strlen(fname)-1] != '.')) {

802 
ty≥
 = 
	`°ºchr
(
‚ame
, '.') + 1;

803 if(
ty≥
 && *type) {

805 
±agh™dÀr
=
	`sˇn_gëh™dÀr
(
ty≥
);

806 if(
±agh™dÀr
) {

808 
mp3fûe
.
ty≥
=
	`°rdup
(
±agh™dÀr
->type);

809 if(
±agh™dÀr
->
des¸ùti⁄
)

810 
mp3fûe
.
des¸ùti⁄
=
	`°rdup
(
±agh™dÀr
->description);

812 if(
±agh™dÀr
->
code˘y≥
)

813 
mp3fûe
.
code˘y≥
=
	`°rdup
(
±agh™dÀr
->codectype);

815 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Code¯ty≥: %s\n",
mp3fûe
.
code˘y≥
);

818 
mp3fûe
.
ty≥
=
	`°rdup
(type);

819 
mp3fûe
.
code˘y≥
 = 
	`°rdup
("unkn");

820 
mp3fûe
.
s⁄g_Àngth
 = 10 * 60 * 1000;

823 
cuºít
=
mp3fûe
.
ty≥
;

824 *
cuºít
) {

825 *
cuºít
=
	`tﬁowî
(*current);

826 
cuºít
++;

829 
	`•rötf
(
fdes¸
,"%†audiÿfûe",
mp3fûe
.
ty≥
);

830 
mp3fûe
.
des¸ùti⁄
 = 
	`°rdup
(
fdes¸
);

837 if(
	`sˇn_gë_öfo
(
mp3fûe
.
∑th
,&mp3file)) {

838 if(
is_compdú
)

839 
mp3fûe
.
compû©i⁄
 = 1;

845 i‡(!
unicode16_ãxt
)

846 
	`ch¨£t_c⁄vît‹
(
code_∑ge
, &
mp3fûe
);

847 
	`make_composôe_ègs
(&
mp3fûe
);

852 
mp3fûe
.
time_added
=(Ë
psb
->
°_mtime
;

853 if(
psb
->
°_˘ime
 < 
mp3fûe
.
time_added
)

854 
mp3fûe
.
time_added
=(Ë
psb
->
°_˘ime
;

855 
mp3fûe
.
time_modifõd
=(Ë
psb
->
°_mtime
;

856 
	`DPRINTF
(
E_DBG
,
L_SCAN
," D©êAdded: %d\n",
mp3fûe
.
time_added
);

857 
	`DPRINTF
(
E_DBG
,
L_SCAN
," Codec: %s\n",
mp3fûe
.
code˘y≥
);

860 
	`ªsize_id3_èg
(&
mp3fûe
);

861 
	`db_add
(
NULL
,&
mp3fûe
,NULL);

862 
mp3_cou¡î
++;

866 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"Skùpög %†- sˇ¿Áûed\n",
mp3fûe
.
∑th
);

868 
	`sˇn_‰ìègs
(&
mp3fûe
);

869 
	}
}

874 
TAGHANDLER
 *
	$sˇn_gëh™dÀr
(*
ty≥
) {

875 
TAGHANDLER
 *
phdl
 = 
ègh™dÀrs
;

877 (
phdl
->
suffix
Ë&& (
	`°rˇ£cmp
’hdl->suffix,
ty≥
)))

878 
phdl
++;

880 if(
phdl
->
suffix
)

881  
phdl
;

883  
NULL
;

884 
	}
}

891 
	$sˇn_‰ìègs
(
MP3FILE
 *
pmp3
) {

892 
	`MAYBEFREE
(
pmp3
->
∑th
);

893 
	`MAYBEFREE
(
pmp3
->
‚ame
);

894 
	`MAYBEFREE
(
pmp3
->
tôÀ
);

895 
	`MAYBEFREE
(
pmp3
->
¨ti°
);

896 
	`MAYBEFREE
(
pmp3
->
Æbum
);

897 
	`MAYBEFREE
(
pmp3
->
gíª
);

898 
	`MAYBEFREE
(
pmp3
->
commít
);

899 
	`MAYBEFREE
(
pmp3
->
ty≥
);

900 
	`MAYBEFREE
(
pmp3
->
compo£r
);

901 
	`MAYBEFREE
(
pmp3
->
‹che°ø
);

902 
	`MAYBEFREE
(
pmp3
->
c⁄du˘‹
);

903 
	`MAYBEFREE
(
pmp3
->
groupög
);

904 
	`MAYBEFREE
(
pmp3
->
des¸ùti⁄
);

905 
	`MAYBEFREE
(
pmp3
->
code˘y≥
);

906 
	`MAYBEFREE
(
pmp3
->
Æbum_¨ti°
);

909 
	}
}

924 
	$sˇn_gë_öfo
(*
fûe
, 
MP3FILE
 *
pmp3
) {

925 
TAGHANDLER
 *
hdl
;

926 
ªtvÆ
;

929 
hdl
 = 
	`sˇn_gëh™dÀr
(
pmp3
->
ty≥
);

930 if(
hdl
 && hdl->
sˇ¬î
) {

931 
ªtvÆ
 = 
hdl
->
	`sˇ¬î
(
fûe
,
pmp3
);

932 if(
ªtvÆ
 && 
hdl
->
has_video
) {

933 
pmp3
->
has_video
 = 1;

935  
ªtvÆ
;

938  
TRUE
;

939 
	}
}

948 
	$make_composôe_ègs
(
MP3FILE
 *
s⁄g
) {

949 
Àn
;

950 *
±mp
;

951 *
£p
 = " - ";

952 *
va_¨ti°
 = "Various Artists";

954 if(
s⁄g
->
gíª
 && (
	`°æí
(song->genre) == 0)) {

955 
	`‰ì
(
s⁄g
->
gíª
);

956 
s⁄g
->
gíª
 = 
NULL
;

959 if(
s⁄g
->
¨ti°
 && (
	`°æí
(song->artist) == 0)) {

960 
	`‰ì
(
s⁄g
->
¨ti°
);

961 
s⁄g
->
¨ti°
 = 
NULL
;

964 if(
s⁄g
->
tôÀ
 && (
	`°æí
(song->title) == 0)) {

965 
	`‰ì
(
s⁄g
->
tôÀ
);

966 
s⁄g
->
tôÀ
 = 
NULL
;

969 if(!
s⁄g
->
¨ti°
) {

970 i‡(
s⁄g
->
‹che°ø
 && s⁄g->
c⁄du˘‹
) {

971 
Àn
 = ()
	`°æí
(
s⁄g
->
‹che°ø
) +

972 ()
	`°æí
(
£p
) +

973 ()
	`°æí
(
s⁄g
->
c⁄du˘‹
);

974 
±mp
 = (*)
	`mÆloc
(
Àn
 + 1);

975 if(
±mp
) {

976 
	`•rötf
(
±mp
,"%s%s%s",
s⁄g
->
‹che°ø
, 
£p
, s⁄g->
c⁄du˘‹
);

977 
s⁄g
->
¨ti°
 = 
±mp
;

979 } if(
s⁄g
->
‹che°ø
) {

980 
s⁄g
->
¨ti°
 = 
	`°rdup
(s⁄g->
‹che°ø
);

981 } i‡(
s⁄g
->
c⁄du˘‹
) {

982 
s⁄g
->
¨ti°
 = 
	`°rdup
(s⁄g->
c⁄du˘‹
);

986 if(
s⁄g
->
compû©i⁄
 && s⁄g->
¨ti°
 && s⁄g->
tôÀ
 &&

987 (
	`c⁄f_gë_öt
("scanning","concat_compilations",0))) {

988 
Àn
 = ()
	`°æí
(
s⁄g
->
¨ti°
) +

989 ()
	`°æí
(
£p
) +

990 ()
	`°æí
(
s⁄g
->
tôÀ
);

991 
±mp
 = (*)
	`mÆloc
(
Àn
 + 1);

992 if(
±mp
) {

993 
	`•rötf
(
±mp
,"%s%s%s",
s⁄g
->
¨ti°
, 
£p
, s⁄g->
tôÀ
);

994 
	`‰ì
(
s⁄g
->
tôÀ
);

995 
s⁄g
->
tôÀ
 = 
±mp
;

997 if(
va_¨ti°
) {

998 
±mp
 = 
	`°rdup
(
va_¨ti°
);

999 if(
±mp
) {

1000 
	`‰ì
(
s⁄g
->
¨ti°
);

1001 
s⁄g
->
¨ti°
 = 
±mp
;

1008 if(
	`c⁄f_gë_öt
("daap","empty_strings",0)) {

1009 if(!
s⁄g
->
¨ti°
Ës⁄g->¨ti° = 
	`°rdup
("Unknown");

1010 if(!
s⁄g
->
Æbum
Ës⁄g->Æbum = 
	`°rdup
("Unknown");

1011 if(!
s⁄g
->
gíª
Ës⁄g->gíª = 
	`°rdup
("Unknown");

1013 if(!
s⁄g
->
tôÀ
Ës⁄g->tôÀ = 
	`°rdup
(s⁄g->
‚ame
);

1015 if(
s⁄g
->
uæ
)

1016 
s⁄g
->
d©a_köd
=1;

1018 
s⁄g
->
d©a_köd
=0;

1020 
s⁄g
->
ôem_köd
 = 2;

1021 
	}
}

	@mp3-scanner.h

22 #i‚de‡
_MP3_SCANNER_H_


23 
	#_MP3_SCANNER_H_


	)

26 
	~<sys/ty≥s.h
>

27 
	~"ff-db°ru˘.h
"

30 
	#SCAN_NOT_COMPDIR
 0

	)

31 
	#SCAN_IS_COMPDIR
 1

	)

32 
	#SCAN_TEST_COMPDIR
 2

	)

34 
	#WINAMP_GENRE_UNKNOWN
 148

	)

37 
	#CHAR_SET_LIST_LEN
 30

	)

38 
	#CHAR_SET_LEN
 30

	)

42 #ifde‡
FILE_SCAN


43 
	#DBG_FILE_SCAN
(
x
Ë
	)
x

45 
	#DBG_FILE_SCAN
(
x
)

	)

48 
	gtŸÆ_mp3
;

49 
	gunicode16_ãxt
;

51 
sˇn_fûíame
(*
∑th
, 
compdú
, *
exãnsi⁄s
, *
code_∑ge
);

53 *
sˇn_wöamp_gíª
[];

54 
sˇn_öô
(**
∑th¨øy
,*
code_∑ge
);

55 
make_composôe_ègs
(
MP3FILE
 *
s⁄g
);

57 #i‚de‡
TRUE


58 
	#TRUE
 1

	)

59 
	#FALSE
 0

	)

	@os-unix.c

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 
	~<dlf˙.h
>

27 
	~<î∫o.h
>

28 
	~<f˙é.h
>

29 
	~<gΩ.h
>

30 
	~<limôs.h
>

31 
	~<±hªad.h
>

32 
	~<pwd.h
>

33 
	~<sig«l.h
>

34 
	~<°d¨g.h
>

35 
	~<°dlib.h
>

36 
	~<°dio.h
>

37 
	~<sy¶og.h
>

38 
	~<°rög.h
>

40 #ifde‡
HAVE_UNISTD_H


41 
	~<uni°d.h
>

43 
	~<sys/ty≥s.h
>

44 
	~<sys/°©.h
>

45 #ifde‡
HAVE_SYS_WAIT_H


46 
	~<sys/waô.h
>

48 
	~<sys/time.h
>

49 
	~<sys/ªsour˚.h
>

51 #ifde‡
MAC


52 
	~"C‹eFound©i⁄/C‹eFound©i⁄.h
"

55 
	~"dØpd.h
"

56 
	~"c⁄f.h
"

57 
	~"îr.h
"

58 
	~"os.h
"

61 #i‚de‡
SIGCLD


62 
	#SIGCLD
 
SIGCHLD


	)

66 #i‚de‡
PIDFILE


67 
	#PIDFILE
 "/v¨/run/mt-dØpd.pid"

	)

71 
_os_d´m⁄_°¨t
();

72 
_os_°¨t_sig«l_h™dÀr
();

75 *
	g_os_pidfûe
 = 
PIDFILE
;

84 
	$os_öô
(
f‹eground
, *
ru«s
) {

85 
pid_fd
;

86 
FILE
 *
pid_Â
=
NULL
;

89 
	`DPRINTF
(
E_LOG
,
L_MAIN
,"Starting signal handler\n");

90 if(
	`_os_°¨t_sig«l_h™dÀr
()) {

91 
	`DPRINTF
(
E_FATAL
,
L_MAIN
,"Eº‹ sèπög sig«»h™dÀ∏%s\n",
	`°ªº‹
(
î∫o
));

95 if(!
f‹eground
) {

96 if(-1 =(
pid_fd
 = 
	`›í
(
_os_pidfûe
,
O_CREAT
 | 
O_WRONLY
 | 
O_TRUNC
, 0644))) {

97 
	`DPRINTF
(
E_LOG
,
L_MAIN
,"Error openingÖidfile (%s): %s\n",

98 
_os_pidfûe
,
	`°ªº‹
(
î∫o
));

100 if(0 =(
pid_Â
 = 
	`fd›í
(
pid_fd
, "w")))

101 
	`DPRINTF
(
E_LOG
,
L_MAIN
,"fd›í: %s\n",
	`°ªº‹
(
î∫o
));

103 
	`_os_d´m⁄_°¨t
();

104 
	`Ârötf
(
pid_Â
,"%d\n",
	`gëpid
());

105 
	`f˛o£
(
pid_Â
);

106 
	`DPRINTF
(
E_DBG
,
L_MAIN
,"Pid: %d\n",
	`gëpid
());

110 if(
	`os_dr›_¥ivs
(
ru«s
)) {

111 
	`DPRINTF
(
E_FATAL
,
L_MAIN
,"Eº‹ i¿dr›_¥ivs: %s\n",
	`°ªº‹
(
î∫o
));

114  
TRUE
;

115 
	}
}

120 
	$os_deöô
() {

121 
	}
}

128 
	$os_›ísy¶og
() {

129 
	`›ílog
(
PACKAGE
,
LOG_PID
,
LOG_DAEMON
);

130  
TRUE
;

131 
	}
}

139 
	$os_˛o£sy¶og
() {

140 
	`˛o£log
();

141  
TRUE
;

142 
	}
}

151 
	$os_sy¶og
(
Àvñ
, *
msg
) {

152 
¥i‹ôy
;

154 
Àvñ
) {

157 
¥i‹ôy
 = 
LOG_ALERT
;

162 
¥i‹ôy
 = 
LOG_NOTICE
;

168 
¥i‹ôy
 = 
LOG_INFO
;

173 
¥i‹ôy
 = 
LOG_DEBUG
;

177 
	`sy¶og
(
¥i‹ôy
,"%s",
msg
);

178  
TRUE
;

179 
	}
}

187 
	$os_chown
(*
∑th
, *
u£r
) {

188 
∑sswd
 *
pw
=
NULL
;

190 
	`DPRINTF
(
E_DBG
,
L_MISC
,"Chownög %†tÿ%s\n",
∑th
,
u£r
);

193 if(
	`gëuid
(Ë=(
uid_t
)0) {

194 if(
	`©oi
(
u£r
)) {

195 
pw
=
	`gëpwuid
((
uid_t
)
	`©oi
(
u£r
));

197 
pw
=
	`gëpw«m
(
u£r
);

200 if(
pw
) {

201 if(
	`öôgroups
(
u£r
,
pw
->
pw_gid
) != 0 ||

202 
	`chown
(
∑th
, 
pw
->
pw_uid
,Öw->
pw_gid
) != 0) {

203 
	`DPRINTF
(
E_LOG
,
L_MISC
,"Couldn't chown %s, gid=%d, uid=%d\n",

204 
u£r
,
pw
->
pw_gid
,Öw->
pw_uid
);

205  
FALSE
;

208 
	`DPRINTF
(
E_LOG
,
L_MISC
,"Couldn'àlooku∞u£∏%†f‹ chown\n",
u£r
);

209  
FALSE
;

213 
	`DPRINTF
(
E_DBG
,
L_MISC
,"Success!\n");

214  
TRUE
;

215 
	}
}

220 
	$os_sig«l_£rvî
(
wh©
) {

221 
FILE
 *
pid_Â
;

222 
pid
;

223 
ªsu…
 = 
TRUE
;

224 
sig«l
 = 0;

226 if(
NULL
 =(
pid_Â
 = 
	`f›í
(
_os_pidfûe
, "r"))) {

227 
	`DPRINTF
(
E_LOG
,
L_MAIN
,"fd›í: %s\n",
	`°ªº‹
(
î∫o
));

228  
FALSE
;

231 if(
	`fsˇnf
(
pid_Â
,"%d\n",&
pid
)) {

232 
	`kûl
(
pid
,
SIGTERM
);

234 
	`DPRINTF
(
E_LOG
,
L_MAIN
,"os_service_kill: can't getÖid fromÖidfile\n");

235 
ªsu…
 = 
FALSE
;

238 
	`f˛o£
(
pid_Â
);

240 
wh©
) {

241 
S_SCAN
:

242 
sig«l
=
SIGUSR1
;

244 
S_FULL
:

245 
sig«l
=
SIGUSR2
;

247 
S_STOP
:

248 
sig«l
=
SIGTERM
;

254 if(
	`kûl
(
pid
,
sig«l
)) {

255 
	`≥º‹
("kill");

256 
ªsu…
 = 
FALSE
;

258  
ªsu…
;

259 
	}
}

267 
	$_os_d´m⁄_°¨t
() {

268 
chûdpid
, 
fd
;

270 
	`sig«l
(
SIGTTOU
, 
SIG_IGN
);

271 
	`sig«l
(
SIGTTIN
, 
SIG_IGN
);

272 
	`sig«l
(
SIGTSTP
, 
SIG_IGN
);

275 i‡((
chûdpid
 = 
	`f‹k
()) < 0) {

276 
	`Ârötf
(
°dîr
, "Can't fork!\n");

278 } i‡(
chûdpid
 > 0)

279 
	`exô
(0);

281 #ifde‡
SETPGRP_VOID


287 #ifde‡
TIOCNOTTY


288 i‡((
fd
 = 
	`›í
("/dev/ây", 
O_RDWR
)) >= 0) {

289 
	`io˘l
(
fd
, 
TIOCNOTTY
, (*Ë
NULL
);

290 
	`˛o£
(
fd
);

294 if((
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
, 0)) != -1) {

295 
	`dup2
(
fd
, 
STDIN_FILENO
);

296 
	`dup2
(
fd
, 
STDOUT_FILENO
);

297 
	`dup2
(
fd
, 
STDERR_FILENO
);

298 i‡(
fd
 > 2)

299 
	`˛o£
(
fd
);

307 
î∫o
 = 0;

309 
	`chdú
("/");

310 
	`umask
(0);

313 
	}
}

324 
	$os_dr›_¥ivs
(*
u£r
) {

325 
îr
;

326 
∑sswd
 *
pw
=
NULL
;

329 if(
	`gëuid
(Ë=(
uid_t
)0) {

330 if(
	`©oi
(
u£r
)) {

331 
pw
=
	`gëpwuid
((
uid_t
)
	`©oi
(
u£r
));

333 
pw
=
	`gëpw«m
(
u£r
);

336 if(
pw
) {

337 if(
	`öôgroups
(
u£r
,
pw
->
pw_gid
) != 0 ||

338 
	`£tgid
(
pw
->
pw_gid
) != 0 ||

339 
	`£tuid
(
pw
->
pw_uid
) != 0) {

340 
îr
=
î∫o
;

341 
	`Ârötf
(
°dîr
,"Couldn't changeÅo %s, gid=%d, uid=%d\n",

342 
u£r
,
pw
->
pw_gid
,Öw->
pw_uid
);

343 
î∫o
=
îr
;

347 
îr
=
î∫o
;

348 
	`Ârötf
(
°dîr
,"Couldn'àlooku∞u£∏%s\n",
u£r
);

349 
î∫o
=
îr
;

355 
	}
}

361 
	$os_waô
(
£c⁄ds
) {

362 
sig£t_t
 
ötmask
;

363 
°©us
;

364 
siga˘i⁄
 
ß_ign
;

365 
siga˘i⁄
 
ß_dÊ
;

366 
	`¶ìp
(
£c⁄ds
);

368 
	`sig≥ndög
(&
ötmask
);

370 
ß_ign
.
ß_h™dÀr
=
SIG_IGN
;

371 
ß_ign
.
ß_Êags
=0;

372 
	`sigem±y£t
(&
ß_ign
.
ß_mask
);

374 
ß_dÊ
.
ß_h™dÀr
=
SIG_DFL
;

375 
ß_dÊ
.
ß_Êags
=0;

376 
	`sigem±y£t
(&
ß_dÊ
.
ß_mask
);

379 if(
	`sigismembî
(&
ötmask
, 
SIGCLD
)) {

380 
	`DPRINTF
(
E_LOG
,
L_MAIN
,"Got CLD signal. Reaping\n");

381 
	`waô3
(&
°©us
, 
WNOHANG
, 
NULL
) > 0) {};

383 
	`siga˘i⁄
(
SIGCLD
,&
ß_ign
,
NULL
);

384 
	`siga˘i⁄
(
SIGCLD
,&
ß_dÊ
,
NULL
);

387 if((
	`sigismembî
(&
ötmask
, 
SIGTERM
)) ||

388 (
	`sigismembî
(&
ötmask
, 
SIGINT
))) {

389 
	`DPRINTF
(
E_LOG
,
L_MAIN
,"Got shutdown signal.\n");

390 
c⁄fig
.
°›
=1;

392 
	`siga˘i⁄
(
SIGTERM
,&
ß_ign
,
NULL
);

393 
	`siga˘i⁄
(
SIGTERM
,&
ß_dÊ
,
NULL
);

395 
	`siga˘i⁄
(
SIGINT
,&
ß_ign
,
NULL
);

396 
	`siga˘i⁄
(
SIGINT
,&
ß_dÊ
,
NULL
);

399 if(
	`sigismembî
(&
ötmask
, 
SIGHUP
)) {

400 
	`DPRINTF
(
E_LOG
,
L_MAIN
,"Got HUP signal.\n");

403 
	`c⁄f_ªlﬂd
();

404 
	`îr_ª›í
();

406 
c⁄fig
.
ªlﬂd
=1;

408 
	`siga˘i⁄
(
SIGHUP
,&
ß_ign
,
NULL
);

409 
	`siga˘i⁄
(
SIGHUP
,&
ß_dÊ
,
NULL
);

411 
	}
}

430 
	$_os_°¨t_sig«l_h™dÀr
() {

431 
sig£t_t
 
£t
;

433 if((
	`sigem±y£t
(&
£t
) == -1) ||

434 (
	`sigadd£t
(&
£t
,
SIGINT
) == -1) ||

435 (
	`sigadd£t
(&
£t
,
SIGHUP
) == -1) ||

436 (
	`sigadd£t
(&
£t
,
SIGCLD
) == -1) ||

437 (
	`sigadd£t
(&
£t
,
SIGTERM
) == -1) ||

438 (
	`sigadd£t
(&
£t
,
SIGPIPE
) == -1) ||

439 (
	`±hªad_sigmask
(
SIG_BLOCK
, &
£t
, 
NULL
) == -1)) {

440 
	`DPRINTF
(
E_LOG
,
L_MAIN
,"Error setting signal set\n");

445 
	}
}

452 
	$os_£t_pidfûe
(*
fûe
) {

453 
_os_pidfûe
 = 
fûe
;

454 
	}
}

461 *
	$os_lﬂdlib
(**
≥
, *
∑th
) {

462 *
ªtvÆ
;

464 if(!(
ªtvÆ
 = 
	`dl›í
(
∑th
,
RTLD_NOW
)))

465 *
≥
 = 
	`°rdup
(
	`dÀº‹
());

467  
ªtvÆ
;

468 
	}
}

470 *
	$os_libfunc
(**
≥
, *
h™dÀ
, *
fun˘i⁄
) {

471 *
ªtvÆ
;

473 if((!(
ªtvÆ
 = 
	`dlsym
(
h™dÀ
,
fun˘i⁄
))Ë&& (
≥
))

474 *
≥
 = 
	`°rdup
(
	`dÀº‹
());

476  
ªtvÆ
;

477 
	}
}

479 
	$os_u∆ﬂd
(*
h™dÀ
) {

480  
	`dl˛o£
(
h™dÀ
);

481 
	}
}

488 
	$os_i¶oˇœddr
(*
ho°addr
) {

491 if(
	`°∫cmp
(
ho°addr
,"127.",4) == 0)

492  
TRUE
;

494  
FALSE
;

495 
	}
}

497 #ifde‡
MAC


498 *
	$os_≠µ©h
(*
∑rm
) {

499 
CFURLRef
 
∂ugöRef
 = 
	`CFBundÀC›yBundÀURL
(
	`CFBundÀGëMaöBundÀ
());

500 
CFSåögRef
 
macP©h
 = 
	`CFURLC›yFûeSy°emP©h
(
∂ugöRef
,

501 
kCFURLPOSIXP©hStyÀ
);

502 c⁄° *
∑thPå
 = 
	`CFSåögGëCSåögPå
(
macP©h
,

503 
	`CFSåögGëSy°emEncodög
());

505  
	`°rdup
(
∑thPå
);

506 
	}
}

508 *
	$os_≠µ©h
(*
∑rm
) {

509 
∑th
[
PATH_MAX
];

511 
	`ªÆ∑th
(
∑rm
,
∑th
);

512 if(
	`°ºchr
(
∑th
,'/')) {

513 *
	`°ºchr
(
∑th
,'/') = '\0';

516  
	`°rdup
(
∑th
);

517 
	}
}

523 
	$os_°©
(c⁄° *
∑th
, 
°©
 *
sb
) {

524  
	`°©
(
∑th
, 
sb
);

525 
	}
}

527 
	$os_l°©
(c⁄° *
∑th
, 
°©
 *
sb
) {

528  
	`l°©
(
∑th
, 
sb
);

529 
	}
}

	@os-unix.h

7 #i‚de‡
_OS_UNIX_H_


8 
	#_OS_UNIX_H_


	)

10 
	#PATHSEP
 '/'

	)

11 
	#PATHSEP_STR
 "/"

	)

12 
	#OS_SOCKETTYPE
 

	)

15 
os_dr›_¥ivs
(*
u£r
);

16 
os_£t_pidfûe
(*
fûe
);

	@os-win32.c

4 #ifde‡
HAVE_CONFIG_H


5 
	~"c⁄fig.h
"

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<time.h
>

12 
	~<±hªad.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<sys/°©.h
>

16 
	~"dØpd.h
"

17 
	~"wö32.h
"

18 
	~"îr.h
"

19 
	~"os-wö32.h
"

20 
	~"∂ugö.h
"

21 
	~"w32-evíéog.h
"

22 
	~"w32-£rvi˚.h
"

23 
	~"utû.h
"

26 
WSADATA
 
	gw32_wßd©a
;

27 
	gos_£rvi˚Êag
 = 0;

28 
±hªad_t
 
	gos_£rvi˚_tid
;

29 
	gos_öôülized
=0;

30 
±hªad_muãx_t
 
	gos_muãx
=
PTHREAD_MUTEX_INITIALIZER
;

31 *
	gos_drive_m≠s
[26];

32 
	gos_m≠s_öô
=0;

36 
_os_sockë_°¨tup
();

37 
_os_sockë_shutdown
();

38 
_os_lock
();

39 
_os_u∆ock
();

40 
BOOL
 
WINAPI
 
_os_ˇn˚lh™dÀr
(
DWORD
 
dwCålTy≥
);

41 *
_os_fûï©h
(*
fûe
);

44 
gëtimeout
(
timevÆ
 
íd
,timevÆ *
timeouç
);

47 
	gos_c⁄fig_fûe
[
PATH_MAX
];

59 
	$os_öô
(
f‹eground
, *
ru«s
) {

60 
îr
;

61 *
öifûe
;

62 
drive_buf„r
[4];

63 
drive_m≠
[
PATH_MAX
];

64 
drive_Àâî
;

66 
öifûe
=
	`_os_fûï©h
("mapping.ini");

67 
	`DPRINTF
(
E_LOG
,
L_MISC
,"Buûdög drivêm≠pögÅabÀ from %s\n",
öifûe
);

68 
drive_Àâî
 = 'a'; drive_letter <= 'z'; drive_letter++) {

69 
	`•rötf
(
drive_buf„r
,"%c",
drive_Àâî
);

70 
	`GëPriv©eProfûeSåög
("m≠pög",
drive_buf„r
,"",
drive_m≠
,
PATH_MAX
,
öifûe
);

71 if(
	`°æí
(
drive_m≠
)) {

72 
os_drive_m≠s
[
drive_Àâî
 - 'a'] = 
	`°rdup
(
drive_m≠
);

73 
	`DPRINTF
(
E_LOG
,
L_MISC
,"M≠≥d %¯tÿ%s\n",
drive_Àâî
,
drive_m≠
);

75 
os_drive_m≠s
[
drive_Àâî
 - 'a'] = 
NULL
;

78 
os_m≠s_öô
=1;

79 
	`‰ì
(
öifûe
);

81 if(!
f‹eground
) {

83 
os_£rvi˚Êag
 = 1;

84 if((
îr
=
	`±hªad_¸óã
(&
os_£rvi˚_tid
,
NULL
,
£rvi˚_°¨tup
,NULL))) {

85 
	`DPRINTF
(
E_LOG
,
L_MISC
,"CouldÇŸ s∑w¿thªad: %s\n",
	`°ªº‹
(
îr
));

86  
FALSE
;

90 
	`SëC⁄sﬁeCålH™dÀr
(
_os_ˇn˚lh™dÀr
,
TRUE
);

92  
TRUE
;

93 
	}
}

100 
	$os_waô
(
£c⁄ds
) {

101 
	`SÀï
(
£c⁄ds
 * 1000);

102 
	}
}

106 
	$os_deöô
() {

107 if(
os_£rvi˚Êag
) {

109 
	`SëC⁄sﬁeCålH™dÀr
(
_os_ˇn˚lh™dÀr
,
FALSE
);

110 
	`£rvi˚_shutdown
(0);

112 
	}
}

117 
	$os_›ísy¶og
() {

118 
	`ñog_ªgi°î
();

119  
	`ñog_öô
();

120 
	}
}

125 
	$os_˛o£sy¶og
() {

126  
	`ñog_deöô
();

127 
	}
}

136 
	$os_sy¶og
(
Àvñ
, *
msg
) {

137  
	`ñog_mesßge
(
Àvñ
, 
msg
);

138 
	}
}

144 
	$os_chown
(*
∑th
, *
u£r
) {

145  
TRUE
;

146 
	}
}

149 
	$os_sig«l_£rvî
(
wh©
) {

151 
	`Ârötf
(
°dîr
,"This function is unimplemented on win32\n");

152 
	`exô
(-1);

153 
	}
}

155 
	$os_ªgi°î
() {

156 
	`£rvi˚_ªgi°î
();

157 
	`ñog_ªgi°î
();

159  
TRUE
;

160 
	}
}

162 
	$os_uƒegi°î
() {

163 
	`£rvi˚_uƒegi°î
();

164 
	`ñog_uƒegi°î
();

166  
TRUE
;

167 
	}
}

169 
BOOL
 
WINAPI
 
	$_os_ˇn˚lh™dÀr
(
DWORD
 
dwCålTy≥
) {

170 
	`DPRINTF
(
E_LOG
,
L_MISC
,"Shutting down withá consoleÉvent\n");

171 
c⁄fig
.
°›
 = 1;

172  
TRUE
;

173 
	}
}

176 *
	$os_°r£p
(**
°rögp
, c⁄° *
dñim
) {

177 *
begö
, *
íd
;

179 
begö
 = *
°rögp
;

180 i‡(
begö
 =
NULL
)

181  
NULL
;

186 i‡(
dñim
[0] == '\0' || delim[1] == '\0') {

187 
ch
 = 
dñim
[0];

189 i‡(
ch
 == '\0') {

190 
íd
 = 
NULL
;

192 i‡(*
begö
 =
ch
)

193 
íd
 = 
begö
;

194 i‡(*
begö
 == '\0')

195 
íd
 = 
NULL
;

197 
íd
 = 
	`°rchr
 (
begö
 + 1, 
ch
);

201 
íd
 = 
	`°Ωbrk
 (
begö
, 
dñim
);

204 i‡(
íd
) {

206 *
íd
++ = '\0';

207 *
°rögp
 = 
íd
;

210 *
°rögp
 = 
NULL
;

212  
begö
;

213 
	}
}

220 
	$os_gëuid
() {

222 
	}
}

225 
	$os_gëtimeofday
 (
timevÆ
 *
tv
, 
timez⁄e
* 
tz
) {

227 
ns100
;

228 
FILETIME
 
·
;

229 } 
now
;

231 
	`GëSy°emTimeAsFûeTime
 (&
now
.
·
);

232 
tv
->
tv_u£c
 = (Ë((
now
.
ns100
 / 10LL) % 1000000LL);

233 
tv
->
tv_£c
 = (Ë((
now
.
ns100
 - 116444736000000000LL) / 10000000LL);

235 if(
tz
) {

236 
tz
->
tz_möuãswe°
 = 
_timez⁄e
;

239 
	}
}

245 
	$_os_sockë_°¨tup
() {

246 
WORD
 
mövî
;

247 
îr
;

249 
mövî
 = 
	`MAKEWORD
( 2, 2 );

251 
îr
 = 
	`WSASèπup
–
mövî
, &
w32_wßd©a
 );

252 i‡–
îr
 != 0 ) {

253 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"CouldÇot initialize winsock\n");

255 
	}
}

260 
	$_os_sockë_shutdown
() {

261 
	`WSACÀ™up
();

262 
	}
}

268 *
	$os_°ªº‹
 (
îr‹_no
) {

269 
buf
[500];

271 i‡(
îr‹_no
 == 0)

272 
îr‹_no
 = 
	`GëLa°Eº‹
 ();

274 
buf
[0] = '\0';

275 i‡(!
	`F‹m©Mesßge
 (
FORMAT_MESSAGE_FROM_SYSTEM
, 
NULL
,

276 
îr‹_no
,

278 
buf
,  (buf), 
NULL
))

279 
	`•rötf
 (
buf
, "w32Éº‹ %u", 
îr‹_no
);

280  
buf
;

281 
	}
}

290 *
	$os_c⁄fig∑th
() {

291 *
c⁄fig_∑th
 = 
	`_os_fûï©h
("mt-daapd.conf");

292 *
w‹kög_∑th
 = 
	`_os_fûï©h
("");

294 
	`°r˝y
(
os_c⁄fig_fûe
,
c⁄fig_∑th
);

295 
	`‰ì
(
c⁄fig_∑th
);

297 if(
	`_chdú
(
w‹kög_∑th
) == -1) {

298 
	`DPRINTF
(
E_LOG
,
L_MISC
,"CouldÇŸ chdúÅÿ%s... usög c:\\\n",
w‹kög_∑th
);

299 if(
	`_chdú
("c:\\") == -1) {

300 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"CouldÇot chdirÅo c:\\...áborting\n");

303 
	`‰ì
(
w‹kög_∑th
);

305 
	`DPRINTF
(
E_DBG
,
L_MISC
,"Usög c⁄fig fûê%s\n",
os_c⁄fig_fûe
);

306  
os_c⁄fig_fûe
;

307 
	}
}

309 *
	$_os_fûï©h
(*
fûe
) {

310 
drive
[
_MAX_DRIVE
];

311 
dú
[
_MAX_DIR
];

312 
∑th
[
PATH_MAX
];

314 
	`GëModuÀFûeName
(
NULL
,
∑th
,
PATH_MAX
);

315 
	`_•lô∑th
(
∑th
,
drive
,
dú
,
NULL
,NULL);

316 
	`_makï©h
(
∑th
,
drive
,
dú
,
NULL
,NULL);

317 
	`°rˇt
(
∑th
,
fûe
);

318  
	`°rdup
(
∑th
);

319 
	}
}

326 *
	$os_≠µ©h
(*
junk
) {

327 
≠p_∑th
[
PATH_MAX
];

329 
	`GëModuÀFûeName
(
NULL
,
≠p_∑th
,
PATH_MAX
);

330  
	`°rdup
(
≠p_∑th
);

331 
	}
}

339 
	$os_i¶oˇœddr
(*
ho°addr
) {

340 
ho°«me
[256];

341 
ho°ít
 *
ht
;

342 
ödex
;

344 
	`DPRINTF
(
E_DBG
,
L_MISC
,"Checkög i‡%†i†loˇl\n",
ho°addr
);

345 if(
	`°∫cmp
(
ho°addr
,"127.",4) == 0)

346  
TRUE
;

348 
	`gëho°«me
(
ho°«me
, (hostname));

349 
ht
=
	`gëho°by«me
(
ho°«me
);

351 
ödex
=0;

352 
ht
->
h_addr_li°
[
ödex
] !
NULL
) {

357 if(
	`°rcmp
(
	`öë_¡ﬂ
(*(
ö_addr
 *)
ht
->
h_addr_li°
[
ödex
]),
ho°addr
) == 0) {

358 
	`DPRINTF
(
E_DBG
,
L_MISC
,"Yup!\n");

359  
TRUE
;

361 
ödex
++;

364 
	`DPRINTF
(
E_DBG
,
L_MISC
,"Nope!\n");

365  
FALSE
;

366 
	}
}

373 
	$_os_lock
() {

374 
îr
;

376 if((
îr
=
	`±hªad_muãx_lock
(&
os_muãx
))) {

377 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"CannotÜock mutex\n");

379 
	}
}

384 
	$_os_u∆ock
() {

385 
îr
;

387 if((
îr
=
	`±hªad_muãx_u∆ock
(&
os_muãx
))) {

388 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"Cannot unlock mutex\n");

390 
	}
}

395 *
	$os_lﬂdlib
(**
≥
, *
∑th
) {

396 *
ªtvÆ
;

397 
UINT
 
ﬁd_mode
;

399 
ﬁd_mode
 = 
	`SëEº‹Mode
(
SEM_NOOPENFILEERRORBOX
 | 
SEM_FAILCRITICALERRORS
);

400 
ªtvÆ
 = (*)
	`LﬂdLibøry
(
∑th
);

401 if(!
ªtvÆ
) {

402 if(
≥
Ë*≥ = 
	`°rdup
(
	`os_°ªº‹
(0));

404 
	`SëEº‹Mode
(
ﬁd_mode
);

405  
ªtvÆ
;

406 
	}
}

408 *
	$os_libfunc
(**
≥
, *
h™dÀ
, *
fun˘i⁄
) {

409 *
ªtvÆ
;

410 *
e
;

412 
ªtvÆ
 = 
	`GëProcAddªss
((
HMODULE
)
h™dÀ
, 
fun˘i⁄
);

413 if(!
ªtvÆ
) {

414 if(
≥
) {

415 *
≥
 = 
	`°rdup
(
	`os_°ªº‹
(0));

416 
e
 = *
≥
;

417 (
e
[
	`°æí
(e) - 1] == '\n') || (e[strlen(e)-1] == '\r'))

418 
e
[
	`°æí
(e)-1] = '\0';

421  
ªtvÆ
;

422 
	}
}

424 
	$os_u∆ﬂd
(*
h™dÀ
) {

425 
	`FªeLibøry
(
h™dÀ
);

426  
TRUE
;

427 
	}
}

432 
DIR
 *
	$os_›ídú
(*
fûíame
) {

433 
DIR
 *
dúp
;

438 i‡(!(
dúp
 = (
DIR
 *Ë
	`mÆloc
 ( (DIR))))

439  
NULL
;

441 
dúp
->
dú_föd_h™dÀ
 = 
INVALID_HANDLE_VALUE
;

442 
dúp
->
dd_fd
 = 0;

443 
dúp
->
dd_loc
 = 0;

444 
dúp
->
dd_size
 = 0;

446 
	`°∫˝y
 (
dúp
->
dú_∑th«me
, 
fûíame
,
PATH_MAX
);

447 
dúp
->
dú_∑th«me
[
PATH_MAX
] = '\0';

449  
dúp
;

450 
	}
}

452 
	$os_˛o£dú
(
DIR
 *
dúp
) {

454 i‡(
dúp
->
dú_föd_h™dÀ
 !
INVALID_HANDLE_VALUE
) {

455 
	`FödClo£
(
dúp
->
dú_föd_h™dÀ
);

457 
	`‰ì
((*Ë
dúp
);

458 
	}
}

461 
	$os_ªaddú_r
(
DIR
 *
dúp
, 
dúít
 *
íåy
, dúíà**
ªsu…
) {

462 
fûíame
[
PATH_MAX
 + 1];

463 
WCHAR
 
utf16
[
PATH_MAX
 + 1];

464 
 
;

466 i‡(
dúp
->
dú_föd_h™dÀ
 =
INVALID_HANDLE_VALUE
) {

468 
	`°∫˝y
 (
fûíame
, 
dúp
->
dú_∑th«me
,
PATH_MAX
 - 3);

469 
 
 = (Ë
	`°æí
 (
fûíame
) - 1;

470 if(
fûíame
[
 
] != '\\')

471 
	`°rˇt
 (
fûíame
, "\\");

472 
	`°rˇt
 (
fûíame
, "*");

475 
	`utû_utf8toutf16
((*)&
utf16
,(utf16),
fûíame
,()
	`°æí
(filename));

477 
dúp
->
dú_föd_h™dÀ
 = 
	`FödFú°FûeW
(
utf16
, &dúp->
dú_föd_d©a
);

479 i‡(
dúp
->
dú_föd_h™dÀ
 =
INVALID_HANDLE_VALUE
) {

480 *
ªsu…
=
NULL
;

484 i‡(!
	`FödNextFûeW
(
dúp
->
dú_föd_h™dÀ
, &dúp->
dú_föd_d©a
)) {

485 *
ªsu…
 = 
NULL
;

492 
íåy
->
d_öo
 = 1;

494 
	`mem£t
(
íåy
->
d_«me
,0,
MAXNAMLEN
+1);

495 
	`utû_utf16toutf8
(
íåy
->
d_«me
,
MAXNAMLEN
+1,

496 (*)&
dúp
->
dú_föd_d©a
.
cFûeName
,

497 ()
	`wc¶í
(
dúp
->
dú_föd_d©a
.
cFûeName
)*2);

498 
íåy
->
d_«mÀn
 = (Ë
	`°æí
 (íåy->
d_«me
);

500 
íåy
->
d_ª˛í
 =  (
dúít
Ë- 
MAXNAMLEN
 + 3 +

501 
íåy
->
d_«mÀn
 -Éntry->d_namlen % 4;

503 
íåy
->
d_ty≥
 = 0;

504 if(
dúp
->
dú_föd_d©a
.
dwFûeAâribuãs
 & 
FILE_ATTRIBUTE_DIRECTORY
) {

505 
íåy
->
d_ty≥
 |
DT_DIR
;

506 } if(
dúp
->
dú_föd_d©a
.
dwFûeAâribuãs
 & 
FILE_ATTRIBUTE_NORMAL
) {

507 
íåy
->
d_ty≥
 |
DT_REG
;

522 *
ªsu…
 = 
íåy
;

524 
	}
}

529 *
	$os_ªÆ∑th
(c⁄° *
∑th«me
, *
ªsﬁved_∑th
) {

530 *
±r
;

531 
WCHAR
 
utf16_ªl_∑th
[
PATH_MAX
+1];

532 
WCHAR
 
utf16_∑th
[
PATH_MAX
+1];

533 *
m≠≥d_∑th
;

536 
	`utû_utf8toutf16
((*)&
utf16_ªl_∑th
,
PATH_MAX
 * (
WCHAR
),(*)
∑th«me
,()
	`°æí
(pathname));

537 if(!
	`_wfuŒ∑th
(
utf16_∑th
,
utf16_ªl_∑th
,
PATH_MAX
)) {

538 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"CouldÇŸÑóÕ©h %s\n",
∑th«me
);

540 
	`utû_utf16toutf8
((*)
ªsﬁved_∑th
,
PATH_MAX
,(*)&
utf16_∑th
,

541 
	`utû_utf16_byã_Àn
((*)
utf16_∑th
));

543 
±r
 = 
ªsﬁved_∑th
;

544 *
±r
) {

546 if(*
±r
 == '/')

547 *
±r
 = '\\';

548 
±r
++;

551 
ªsﬁved_∑th
[
	`°æí
(resolved_path)-1] == '\\') {

552 
ªsﬁved_∑th
[
	`°æí
(resolved_path)-1] = '\x0';

556 if((
ªsﬁved_∑th
[0] !'\\')&&(
os_m≠s_öô
)){

557 if((
m≠≥d_∑th
 = 
os_drive_m≠s
[
	`tﬁowî
(
ªsﬁved_∑th
[0]) - 'a'])) {

559 
	`memmove
(&
ªsﬁved_∑th
[
	`°æí
(
m≠≥d_∑th
)],&resolved_path[3],strlen(resolved_path)-2);

560 
	`mem˝y
(
ªsﬁved_∑th
,
m≠≥d_∑th
,
	`°æí
(mapped_path));

564  &
ªsﬁved_∑th
[0];

565 
	}
}

568 
	$os_°©
(c⁄° *
∑th
, 
_°©
 *
sb
) {

569 
WCHAR
 
utf16_∑th
[
PATH_MAX
+1];

571 
	`mem£t
(
utf16_∑th
,0,(utf16_path));

572 
	`utû_utf8toutf16
((*)&
utf16_∑th
,
PATH_MAX
 * 2,(*)
∑th
,()
	`°æí
(path));

574  
	`_w°©
(
utf16_∑th
,
sb
);

575 
	}
}

577 
	$os_l°©
(c⁄° *
∑th
, 
_°©
 *
sb
) {

578  
	`os_°©
(
∑th
,
sb
);

579 
	}
}

	@os-win32.h

8 #i‚de‡
_OS_WIN32_H_


9 
	#_OS_WIN32_H_


	)

11 
	~"°dlib.h
"

13 
	#MAXNAMLEN
 255

	)

14 
	#DIRBLKSIZ
 512

	)

15 
	#PATHSEP
 '\\'

	)

16 
	#PATHSEP_STR
 "\\"

	)

17 
	#S_ISDIR
(
a
Ë(◊Ë& 
S_IFDIR
)

	)

19 
	stimez⁄e
 {

20 
	mtz_möuãswe°
;

21 
	mtz_d°time
;

24 
	#DT_DIR
 1

	)

25 
	#DT_REG
 2

	)

26 
	#DT_LNK
 4

	)

28 
	#W_OK
 2

	)

29 
	#R_OK
 4

	)

31 
	sdúít
 {

33 
	md_öo
;

34 
	md_ª˛í
;

35 
	md_«mÀn
;

36 
	md_ty≥
;

37 
	md_«me
[
MAXNAMLEN
+1];

41 
	mdd_fd
;

42 
	mdd_loc
;

43 
	mdd_size
;

44 
	mdd_buf
[
DIRBLKSIZ
];

45 
HANDLE
 
	mdú_föd_h™dÀ
;

46 
	mdú_∑th«me
[
PATH_MAX
+1];

47 
WIN32_FIND_DATAW
 
	mdú_föd_d©a
;

48 } 
	tDIR
;

51 
os_ªgi°î
();

52 
os_uƒegi°î
();

53 *
os_c⁄fig∑th
();

54 
os_gëuid
();

57 *
os_°r£p
(**
°rögp
, c⁄° *
dñim
);

58 *
os_ªÆ∑th
(c⁄° *
∑th«me
, *
ªsﬁved_∑th
);

59 
os_gëtimeofday
 (
timevÆ
 *
tv
, 
timez⁄e
* 
tz
);

60 
os_ªaddú_r
(
DIR
 *
dúp
, 
dúít
 *
íåy
, dúíà**
ªsu…
);

61 
os_˛o£dú
(
DIR
 *
dúp
);

62 
DIR
 *
os_›ídú
(*
fûíame
);

63 *
os_°ªº‹
 (
îr‹_no
);

	@os.h

22 #i‚de‡
_OS_H_


23 
	#_OS_H_


	)

25 
	#S_STOP
 0

	)

26 
	#S_SCAN
 1

	)

27 
	#S_FULL
 2

	)

30 
os_öô
(
f‹eground
, *
ru«s
);

31 
os_deöô
();

32 
os_waô
(
£c⁄ds
);

35 
os_›ísy¶og
();

36 
os_˛o£sy¶og
();

37 
os_sy¶og
(
Àvñ
, *
msg
);

38 
os_chown
(*
∑th
, *
u£r
);

41 *
os_lﬂdlib
(**
≥
, *
∑th
);

42 *
os_libfunc
(**
≥
, *
h™dÀ
, *
fun˘i⁄
);

43 
os_u∆ﬂd
(*
h™dÀ
);

46 
os_°©
(c⁄° *
∑th
, 
°©
 *
sb
);

47 
os_l°©
(c⁄° *
∑th
, 
°©
 *
sb
);

48 
os_i¶oˇœddr
(*
ho°addr
);

49 *
os_≠µ©h
(*
∑rm
);

50 
os_sig«l_£rvî
(
wh©
);

52 #ifde‡
WIN32


53 
	~"os-wö32.h
"

55 
	~"os-unix.h
"

	@plugin.c

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 
	#_XOPEN_SOURCE
 500

	)

28 
	~<î∫o.h
>

29 
	~<f˙é.h
>

30 
	~<±hªad.h
>

31 
	~<°d¨g.h
>

32 
	~<°dlib.h
>

33 
	~<°dio.h
>

34 
	~<°rög.h
>

35 #ifde‡
HAVE_STDINT_H


36 
	~<°döt.h
>

38 #ifde‡
HAVE_STRINGS_H


39 
	~<°rögs.h
>

42 #ifde‡
HAVE_SYS_SELECT_H


43 
	~<sys/£À˘.h
>

45 
	~<sys/°©.h
>

46 
	~<sys/ty≥s.h
>

47 #ifde‡
HAVE_SYS_TIME_H


48 
	~<sys/time.h
>

50 #ifde‡
HAVE_UNISTD_H


51 
	~<uni°d.h
>

53 
	~"dØpd.h
"

54 
	~"c⁄f.h
"

55 
	~"c⁄figfûe.h
"

56 
	~"db-gíîic.h
"

57 
	~"îr.h
"

58 
	~"io.h
"

59 
	~"os.h
"

60 
	~"∂ugö.h
"

61 #i‚de‡
WITHOUT_MDNS


62 
	~"ªnd.h
"

64 
	~"ª°¨t.h
"

65 
	~"sm¨t-∑r£r.h
"

66 
	~"xml-Ωc.h
"

67 
	~"web£rvî.h
"

68 
	~"ff-∂ugös.h
"

69 
	~"io.h
"

71 
	sèg_∂ugöíåy
 {

72 *
	mph™dÀ
;

73 
PLUGIN_INFO
 *
	mpöfo
;

74 
èg_∂ugöíåy
 *
	m√xt
;

75 } 
	tPLUGIN_ENTRY
;

78 
PLUGIN_ENTRY
 
	g_∂ugö_li°
;

79 
	g_∂ugö_öôülized
 = 0;

80 *
	g_∂ugö_ssc_codecs
 = 
NULL
;

82 * 
	g_∂ugö_îr‹_li°
[] = {

89 
_∂ugö_ªadlock
();

90 
_∂ugö_wrôñock
();

91 
_∂ugö_u∆ock
();

92 
_∂ugö_îr‹
(**
≥
, 
îr‹
, ...);

93 
_∂ugö_‰ì
(*
pi
);

94 
_∂ugö_ªˇlc_codecs
();

95 
_∂ugö_ssc_å™scode
(
WS_CONNINFO
 *
pwsc
, 
MP3FILE
 *
pmp3
, 
off£t
, 
hódîs
);

102 
	$∂ugö_öô
() {

103  
TRUE
;

104 
	}
}

109 
	$_∂ugö_‰ì
(*
pi
) {

110 if(
pi
)

111 
	`‰ì
(
pi
);

112 
	}
}

119 
	$∂ugö_deöô
() {

120  
TRUE
;

121 
	}
}

130 
	$_∂ugö_îr‹
(**
≥
, 
îr‹
, ...) {

131 
va_li°
 
≠
;

132 
îrbuf
[1024];

134 if(!
≥
)

135  
îr‹
;

137 
	`va_°¨t
(
≠
, 
îr‹
);

138 
	`v¢¥ötf
(
îrbuf
, ”ºbuf), 
_∂ugö_îr‹_li°
[
îr‹
], 
≠
);

139 
	`va_íd
(
≠
);

141 
	`DPRINTF
(
E_SPAM
,
L_PLUG
,"RaisögÉº‹: %s\n",
îrbuf
);

143 *
≥
 = 
	`°rdup
(
îrbuf
);

144  
îr‹
;

145 
	}
}

151 
	$_∂ugö_ªˇlc_codecs
() {

152 
PLUGIN_ENTRY
 *
µi
;

153 
size_t
 
size
=0;

155 
µi
 = 
_∂ugö_li°
.
√xt
;

156 
µi
) {

157 if(
µi
->
pöfo
->
ty≥
 & 
PLUGIN_TRANSCODE
) {

158 if(
size
) size++;

159 
size
 +
	`°æí
(
µi
->
pöfo
->
code˛i°
);

161 
µi
ıpi->
√xt
;

164 if(
_∂ugö_ssc_codecs
) {

165 
	`‰ì
(
_∂ugö_ssc_codecs
);

168 
_∂ugö_ssc_codecs
 = (*)
	`mÆloc
(
size
+1);

169 if(!
_∂ugö_ssc_codecs
) {

170 
	`DPRINTF
(
E_FATAL
,
L_PLUG
,"_plugin_recalc_codecs: malloc\n");

173 
	`mem£t
(
_∂ugö_ssc_codecs
,0,
size
+1);

175 
µi
 = 
_∂ugö_li°
.
√xt
;

176 
µi
) {

177 if(
µi
->
pöfo
->
ty≥
 & 
PLUGIN_TRANSCODE
) {

178 if(
	`°æí
(
_∂ugö_ssc_codecs
)) {

179 
	`°rˇt
(
_∂ugö_ssc_codecs
,",");

181 
	`°rˇt
(
_∂ugö_ssc_codecs
,
µi
->
pöfo
->
code˛i°
);

183 
µi
ıpi->
√xt
;

186 
	`DPRINTF
(
E_DBG
,
L_PLUG
,"NewÅønscodêcode¯li°: %s\n",
_∂ugö_ssc_codecs
);

189 
	}
}

194 *
	$∂ugö_gë_des¸ùti⁄
(*
which
) {

195 
PLUGIN_ENTRY
 *
µi
 = (PLUGIN_ENTRY *)
which
;

197  
µi
->
pöfo
->
£rvî
;

198 
	}
}

204 *
	$∂ugö_íum
(*
whîe
) {

205 
PLUGIN_ENTRY
 *
µi
 = (PLUGIN_ENTRY *)
whîe
;

207 if(!
µi
) {

209  (*Ë
_∂ugö_li°
.
√xt
;

212 if(!
µi
->
√xt
) {

214  
NULL
;

217  (*Ë
µi
->
√xt
;

218 
	}
}

228 
	$∂ugö_lﬂd
(**
≥
, *
∑th
) {

229 
PLUGIN_ENTRY
 *
µi
;

230 *
ph™dÀ
;

231 
PLUGIN_INFO
 *(*
öfo_func
)();

232 
PLUGIN_INFO
 *
pöfo
;

234 
	`DPRINTF
(
E_DBG
,
L_PLUG
,"Aâem±ögÅÿlﬂdÖlugö %s\n",
∑th
);

236 
ph™dÀ
 = 
	`os_lﬂdlib
(
≥
, 
∑th
);

237 if(!
ph™dÀ
) {

238 
	`DPRINTF
(
E_INF
,
L_PLUG
,"Couldn'àgëÜib h™dÀ f‹ %s\n",
∑th
);

239  
PLUGIN_E_NOLOAD
;

242 
µi
 = (
PLUGIN_ENTRY
*)
	`mÆloc
((PLUGIN_ENTRY));

243 
	`mem£t
(
µi
,0x00,(
PLUGIN_ENTRY
));

245 
µi
->
ph™dÀ
 =Öhandle;

247 
öfo_func
 = (
PLUGIN_INFO
*(*)()Ë
	`os_libfunc
(
≥
, 
ph™dÀ
,"plugin_info");

248 if(
öfo_func
 =
NULL
) {

249 
	`DPRINTF
(
E_INF
,
L_PLUG
,"Couldn'àgë info_fun¯f‹ %s\n",
∑th
);

250 
	`os_u∆ﬂd
(
ph™dÀ
);

251 
	`‰ì
(
µi
);

252  
PLUGIN_E_BADFUNCS
;

255 
pöfo
 = 
	`öfo_func
();

256 
µi
->
pöfo
 =Öinfo;

258 if(!
pöfo
) {

259 if(
≥
Ë*≥ = 
	`°rdup
("plugin declinedÅoÜoad");

260 
	`os_u∆ﬂd
(
ph™dÀ
);

261 
	`‰ì
(
µi
);

262  
PLUGIN_E_NOLOAD
;

265 if(
pöfo
->
vîsi⁄
 !
PLUGIN_VERSION
) {

266 
	`DPRINTF
(
E_INF
,
L_PLUG
,"Plugin isÅoo old: version %d,Éxpecting %d\n",

267 
pöfo
->
vîsi⁄
, 
PLUGIN_VERSION
);

268 
	`os_u∆ﬂd
(
ph™dÀ
);

269 
	`‰ì
(
µi
);

270  
PLUGIN_E_NOLOAD
;

273 
	`DPRINTF
(
E_INF
,
L_PLUG
,"LﬂdedÖlugö %†(%s)\n",
∑th
,
pöfo
->
£rvî
);

275 if(!
_∂ugö_öôülized
) {

276 
_∂ugö_öôülized
 = 1;

277 
	`mem£t
((*)&
_∂ugö_li°
,0,(_plugin_list));

280 
µi
->
√xt
 = 
_∂ugö_li°
.next;

281 
_∂ugö_li°
.
√xt
 = 
µi
;

283 
	`_∂ugö_ªˇlc_codecs
();

284  
PLUGIN_E_SUCCESS
;

285 
	}
}

293 
	$∂ugö_uæ_ˇndi•©ch
(
WS_CONNINFO
 *
pwsc
) {

294 
PLUGIN_ENTRY
 *
µi
;

296 
µi
 = 
_∂ugö_li°
.
√xt
;

297 
µi
) {

298 if(
µi
->
pöfo
->
ty≥
 & 
PLUGIN_OUTPUT
) {

299 if((
µi
->
pöfo
->
ouçut_‚s
)->
	`ˇn_h™dÀ
(
pwsc
)) {

300  
TRUE
;

303 
µi
 =Öpi->
√xt
;

306  
FALSE
;

307 
	}
}

315 
	$∂ugö_uæ_h™dÀ
(
WS_CONNINFO
 *
pwsc
) {

316 
PLUGIN_ENTRY
 *
µi
;

317 (*
di•_‚
)(
WS_CONNINFO
 *
pwsc
);

319 
µi
 = 
_∂ugö_li°
.
√xt
;

320 
µi
) {

321 if(
µi
->
pöfo
->
ty≥
 & 
PLUGIN_OUTPUT
) {

322 if((
µi
->
pöfo
->
ouçut_‚s
)->
	`ˇn_h™dÀ
(
pwsc
)) {

324 
	`DPRINTF
(
E_DBG
,
L_PLUG
,"Di•©chög %†tÿ%s\n", 
	`ws_uri
(
pwsc
),

325 
µi
->
pöfo
->
£rvî
);

328 
di•_‚
=(
µi
->
pöfo
->
ouçut_‚s
)->
h™dÀr
;

329 
	`di•_‚
(
pwsc
);

333 
µi
 =Öpi->
√xt
;

337 
	`ws_ªtu∫îr‹
(
pwsc
, 500, "Can't findÖlugin handler");

339 
	}
}

341 #i‚de‡
WITHOUT_MDNS


346 
	$∂ugö_ªnd_ªgi°î
(*
«me
, 
p‹t
, *
iÁ˚
, *
txt
) {

347 
PLUGIN_ENTRY
 *
µi
;

348 
PLUGIN_REND_INFO
 *
¥i
;

349 *
suµlõd_txt
;

351 
µi
 = 
_∂ugö_li°
.
√xt
;

353 
µi
) {

354 
	`DPRINTF
(
E_DBG
,
L_PLUG
,"Checkög %s\n",
µi
->
pöfo
->
£rvî
);

355 if(
µi
->
pöfo
->
ªnd_öfo
) {

356 
¥i
 = 
µi
->
pöfo
->
ªnd_öfo
;

357 
¥i
->
ty≥
) {

358 
suµlõd_txt
 = 
¥i
->
txt
;

359 if(!
¥i
->
txt
)

360 
suµlõd_txt
 = 
txt
;

362 
	`DPRINTF
(
E_DBG
,
L_PLUG
,"Regi°îög %s\n",
¥i
->
ty≥
);

363 
	`ªnd_ªgi°î
(
«me
,
¥i
->
ty≥
,
p‹t
,
iÁ˚
,
suµlõd_txt
);

364 
¥i
++;

367 
µi
ıpi->
√xt
;

370  
TRUE
;

371 
	}
}

382 
	$∂ugö_auth_h™dÀ
(
WS_CONNINFO
 *
pwsc
, *
u£∫ame
, *
pw
) {

383 
PLUGIN_ENTRY
 *
µi
;

384 (*
auth_‚
)(
WS_CONNINFO
 *
pwsc
, *
u£∫ame
, *
pw
);

385 
ªsu…
;

387 
µi
 = 
_∂ugö_li°
.
√xt
;

388 
µi
) {

389 if(
µi
->
pöfo
->
ty≥
 & 
PLUGIN_OUTPUT
) {

390 if((
µi
->
pöfo
->
ouçut_‚s
)->
	`ˇn_h™dÀ
(
pwsc
)) {

392 
	`DPRINTF
(
E_DBG
,
L_PLUG
,"Di•©chög %†tÿ%s\n", 
	`ws_uri
(
pwsc
),

393 
µi
->
pöfo
->
£rvî
);

396 
auth_‚
=(
µi
->
pöfo
->
ouçut_‚s
)->
auth
;

397 if(
auth_‚
) {

398 
ªsu…
=
	`auth_‚
(
pwsc
,
u£∫ame
,
pw
);

399  
ªsu…
;

401  
TRUE
;

405 
µi
 =Öpi->
√xt
;

409 
	`ws_ªtu∫îr‹
(
pwsc
, 500, "Can't findÖlugin handler");

410  
FALSE
;

411 
	}
}

416 
	$∂ugö_evít_di•©ch
(
evít_id
, 
ötvÆ
, *
vp
, 
Àn
) {

417 
PLUGIN_ENTRY
 *
µi
;

419 
µi
 = 
_∂ugö_li°
.
√xt
;

420 
µi
) {

421 if(
µi
->
pöfo
->
ty≥
 & 
PLUGIN_EVENT
) {

425 if((
µi
->
pöfo
->
evít_‚s
Ë&& (µi->pöfo->evít_‚s->
h™dÀr
)) {

426 
µi
->
pöfo
->
evít_‚s
->
	`h™dÀr
(
evít_id
, 
ötvÆ
, 
vp
, 
Àn
);

429 
µi
ıpi->
√xt
;

431 
	}
}

437 
	$__∂ugö_ssc_c›y
(
WS_CONNINFO
 *
pwsc
, 
PLUGIN_TRANSCODE_FN
 *
p‚
,

438 *
vp
,
off£t
) {

439 
byãs_ªad
;

440 
byãs_to_ªad
;

441 
tŸÆ_byãs_ªad
 = 0;

442 
buf„r
[1024];

445 
off£t
) {

446 
byãs_to_ªad
 = (
buf„r
);

447 if(
byãs_to_ªad
 > 
off£t
)

448 
byãs_to_ªad
 = 
off£t
;

450 
byãs_ªad
 = 
p‚
->
	`ssc_ªad
(
vp
,
buf„r
,
byãs_to_ªad
);

451 if(
byãs_ªad
 <= 0)

452  
byãs_ªad
;

454 
off£t
 -
byãs_ªad
;

457 (
byãs_ªad
=
p‚
->
	`ssc_ªad
(
vp
,
buf„r
,(buffer))) > 0) {

458 
tŸÆ_byãs_ªad
 +
byãs_ªad
;

459 if(
	`ws_wrôebö¨y
(
pwsc
,
buf„r
,
byãs_ªad
) != bytes_read) {

460  
tŸÆ_byãs_ªad
;

470  
tŸÆ_byãs_ªad
;

471 
	}
}

483 
	$∂ugö_ssc_å™scode
(
WS_CONNINFO
 *
pwsc
, 
MP3FILE
 *
pmp3
, 
off£t
, 
hódîs
) {

484 
PLUGIN_ENTRY
 *
µi
, *
±c
=
NULL
;

485 
PLUGIN_TRANSCODE_FN
 *
p‚
 = 
NULL
;

486 *
vp_ssc
;

487 
po°_îr‹
 = 1;

488 
ªsu…
 = -1;

491 
µi
 = 
_∂ugö_li°
.
√xt
;

492 (
µi
Ë&& (!
p‚
)) {

493 if(
µi
->
pöfo
->
ty≥
 & 
PLUGIN_TRANSCODE
) {

494 if(
	`°r°r
(
µi
->
pöfo
->
code˛i°
,
pmp3
->
code˘y≥
)) {

495 
±c
 = 
µi
;

496 
p‚
 = 
µi
->
pöfo
->
å™scode_‚s
;

499 
µi
 =Öpi->
√xt
;

502 if(
p‚
) {

503 
	`DPRINTF
(
E_DBG
,
L_PLUG
,"Tønscodög %†wôh %s\n",
pmp3
->
∑th
,

504 
±c
->
pöfo
->
£rvî
);

506 
vp_ssc
 = 
p‚
->
	`ssc_öô
();

507 if(
vp_ssc
) {

508 if(
p‚
->
	`ssc_›í
(
vp_ssc
,
pmp3
)) {

510 if(
hódîs
) {

511 
	`ws_addª•⁄£hódî
(
pwsc
,"Content-Type","audio/wav");

512 
	`ws_addª•⁄£hódî
(
pwsc
,"Connection","Close");

513 if(!
off£t
) {

514 
	`ws_wrôefd
(
pwsc
,"HTTP/1.1 200 OK\r\n");

516 
	`ws_addª•⁄£hódî
(
pwsc
,"Content-Range",

518 ()
off£t
);

519 
	`ws_wrôefd
(
pwsc
,"HTTP/1.1 206 Partial Content\r\n");

521 
	`ws_emôhódîs
(
pwsc
);

525 
ªsu…
 = 
	`__∂ugö_ssc_c›y
(
pwsc
,
p‚
,
vp_ssc
,
off£t
);

526 
po°_îr‹
 = 0;

527 
p‚
->
	`ssc_˛o£
(
vp_ssc
);

529 
	`DPRINTF
(
E_LOG
,
L_PLUG
,"Error opening %s for ssc: %s\n",

530 
pmp3
->
∑th
,
p‚
->
	`ssc_îr‹
(
vp_ssc
));

532 
p‚
->
	`ssc_deöô
(
vp_ssc
);

534 
	`DPRINTF
(
E_LOG
,
L_PLUG
,"Error initializingÅranscoder: %s\n",

535 
±c
->
pöfo
->
£rvî
);

539 if(
po°_îr‹
) {

540 
pwsc
->
îr‹
 = 
EPERM
;

541 
	`ws_ªtu∫îr‹
(
pwsc
,500,"InternalÉrror");

544  
ªsu…
;

545 
	}
}

547 
	$∂ugö_ssc_should_å™scode
(
WS_CONNINFO
 *
pwsc
, *
codec
) {

548 
ªsu…
;

549 *
«tive_codecs
=
NULL
;

550 *
u£r_agít
=
NULL
;

551 *
√vî_å™scode
 = 
NULL
;

552 *
Æways_å™scode
 = 
NULL
;

554 
	`ASSERT
((
pwsc
Ë&& (
codec
));

556 if(!
pwsc
)

557  
FALSE
;

559 if(!
codec
) {

560 
	`DPRINTF
(
E_LOG
,
L_PLUG
,"testingÅranscode onÇull codec?\n");

561  
FALSE
;

564 
√vî_å™scode
 = 
	`c⁄f_Æloc_°rög
("gíîÆ","√vî_å™scode",
NULL
);

565 if(
√vî_å™scode
) {

566 if(
	`°r°r
(
√vî_å™scode
,
codec
)) {

567 
	`‰ì
(
√vî_å™scode
);

568  
FALSE
;

570 
	`‰ì
(
√vî_å™scode
);

573 if(
pwsc
) {

575 
«tive_codecs
 = 
	`ws_gëªque°hódî
(
pwsc
,"accept-codecs");

576 if(!
«tive_codecs
) {

577 
u£r_agít
 = 
	`ws_gëªque°hódî
(
pwsc
,"user-agent");

578 if(
u£r_agít
) {

579 if(
	`°∫cmp
(
u£r_agít
,"iTunes",6)==0) {

580 
«tive_codecs
 = "mpeg,mp4a,wav,mp4v,alac";

581 } if(
	`°∫cmp
(
u£r_agít
,"Roku",4)==0) {

582 
«tive_codecs
 = "mpeg,mp4a,wav,wma";

583 } if(
	`°∫cmp
(
u£r_agít
,"Hifidelio",9)==0) {

584  
FALSE
;

590 if(!
«tive_codecs
) {

591 
«tive_codecs
 = "mpeg,wav";

595 if(!
_∂ugö_ssc_codecs
)

596  
FALSE
;

598 
Æways_å™scode
 = 
	`c⁄f_Æloc_°rög
("gíîÆ","Æways_å™scode",
NULL
);

599 if(
Æways_å™scode
) {

600 if(
	`°r°r
(
Æways_å™scode
,
codec
)) {

601 
	`‰ì
(
Æways_å™scode
);

602  
TRUE
;

604 
	`‰ì
(
Æways_å™scode
);

607 if(
	`°r°r
(
«tive_codecs
,
codec
))

608  
FALSE
;

610 
ªsu…
 = 
FALSE
;

611 if(
	`°r°r
(
_∂ugö_ssc_codecs
,
codec
)) {

612 
ªsu…
 = 
TRUE
;

614  
ªsu…
;

615 
	}
}

	@plugin.h

22 #i‚de‡
_PLUGIN_H_


23 
	#_PLUGIN_H_


	)

25 
	~"web£rvî.h
"

26 
	~"xml-Ωc.h
"

27 
	~"db-gíîic.h
"

28 
	~"ff-∂ugö-evíts.h
"

30 
∂ugö_öô
();

31 
∂ugö_lﬂd
(**
≥
, *
∑th
);

32 
∂ugö_deöô
();

35 
∂ugö_uæ_ˇndi•©ch
(
WS_CONNINFO
 *
pwsc
);

36 
∂ugö_uæ_h™dÀ
(
WS_CONNINFO
 *
pwsc
);

37 
∂ugö_auth_h™dÀ
(
WS_CONNINFO
 *
pwsc
, *
u£∫ame
, *
pw
);

38 
∂ugö_ªnd_ªgi°î
(*
«me
, 
p‹t
, *
iÁ˚
, *
txt
);

39 
∂ugö_evít_di•©ch
(
evít_id
, 
ötvÆ
, *
vp
, 
Àn
);

41 *
∂ugö_íum
(*);

42 *
∂ugö_gë_des¸ùti⁄
(*);

44 
∂ugö_ssc_should_å™scode
(
WS_CONNINFO
 *
pwsc
, *
codec
);

45 
∂ugö_ssc_å™scode
(
WS_CONNINFO
 *
pwsc
, 
MP3FILE
 *
pmp3
, 
off£t
, 
hódîs
);

49 
	#PLUGIN_E_SUCCESS
 0

	)

50 
	#PLUGIN_E_NOLOAD
 1

	)

51 
	#PLUGIN_E_BADFUNCS
 2

	)

	@plugins/compat.c

1 #ifde‡
HAVE_CONFIG_H


2 
	~"c⁄fig.h
"

5 
	~<°rög.h
>

6 
	~<˘y≥.h
>

7 
	~<time.h
>

8 
	~<°rög.h
>

9 
	~<°dio.h
>

11 #i‡!
HAVE_STRCASESTR


14 * 
	$°rˇ£°r
(* 
hay°ack
, * 
√edÀ
) {

15 
i
;

16 
∆ígth
 = (Ë
	`°æí
 (
√edÀ
);

17 
hÀngth
 = (Ë
	`°æí
 (
hay°ack
);

19 i‡(
∆ígth
 > 
hÀngth
Ë 
NULL
;

20 i‡(
hÀngth
 <0Ë 
NULL
;

21 i‡(
∆ígth
 <0Ë 
hay°ack
;

23 
i
 = 0; i <(
hÀngth
 - 
∆ígth
); i++) {

24 i‡(
	`°∫ˇ£cmp
 (
hay°ack
 + 
i
, 
√edÀ
, 
∆ígth
) == 0) {

25  
hay°ack
 + 
i
;

29  
NULL
;

30 
	}
}

65 #i‚de‡
HAVE_STRPTIME


67 
	#asizeof
(
a
Ë( (aË/  (◊)[0]))

	)

70 #i‚de‡
sun


71 
	sdtc⁄v
 {

72 *
	mabbªv_m⁄th_«mes
[12];

73 *
	mm⁄th_«mes
[12];

74 *
	mabbªv_wìkday_«mes
[7];

75 *
	mwìkday_«mes
[7];

76 *
	mtime_f‹m©
;

77 *
	msd©e_f‹m©
;

78 *
	mdtime_f‹m©
;

79 *
	mam_°rög
;

80 *
	mpm_°rög
;

81 *
	mld©e_f‹m©
;

85 
dtc⁄v
 
	gEn_US
 = {

102 #ifde‡
SUNOS4


103 
°∫ˇ£cmp
();

106 
	$lowîˇ£_°rög
(*
buf„r
) {

107 *
buf„r
) {

108 *
buf„r
 = 
	`tﬁowî
(*buffer);

109 
buf„r
++;

111 
	}
}

113 *
	$°Ωtime
(*
buf
, *
fmt
, 
tm
 *tm) {

114 
c
,

115 *
±r
;

116 
i
, 
j
,

117 
Àn
;

118 
±r
 = 
fmt
;

119 *
±r
 != 0) {

120 i‡(*
buf
 == 0)

123 
c
 = *
±r
++;

125 i‡(
c
 != '%') {

126 i‡(
	`is•a˚
(
c
))

127 *
buf
 !0 && 
	`is•a˚
(*buf))

128 
buf
++;

129 i‡(
c
 !*
buf
++)

134 
c
 = *
±r
++;

135 
c
) {

138 i‡(*
buf
++ != '%')

143 
buf
 = 
	`°Ωtime
(buf, 
En_US
.
ld©e_f‹m©
, 
tm
);

144 i‡(
buf
 == 0)

149 
buf
 = 
	`°Ωtime
(buf, "%x %X", 
tm
);

150 i‡(
buf
 == 0)

155 
buf
 = 
	`°Ωtime
(buf, "%m/%d/%y", 
tm
);

156 i‡(
buf
 == 0)

161 
buf
 = 
	`°Ωtime
(buf, "%H:%M", 
tm
);

162 i‡(
buf
 == 0)

167 
buf
 = 
	`°Ωtime
(buf, "%I:%M:%S %p", 
tm
);

168 i‡(
buf
 == 0)

173 
buf
 = 
	`°Ωtime
(buf, "%H:%M:%S", 
tm
);

174 i‡(
buf
 == 0)

179 
buf
 = 
	`°Ωtime
(buf, 
En_US
.
time_f‹m©
, 
tm
);

180 i‡(
buf
 == 0)

185 
buf
 = 
	`°Ωtime
(buf, 
En_US
.
sd©e_f‹m©
, 
tm
);

186 i‡(
buf
 == 0)

191 i‡(!
	`isdigô
(*
buf
))

194 
i
 = 0; *
buf
 !0 && 
	`isdigô
(*buf); buf++) {

195 
i
 *= 10;

196 
i
 +*
buf
 - '0';

198 i‡(
i
 > 365)

201 
tm
->
tm_yday
 = 
i
;

206 i‡(*
buf
 =0 || 
	`is•a˚
(*buf))

209 i‡(!
	`isdigô
(*
buf
))

212 
j
=0,
i
 = 0; *
buf
 !0 && 
	`isdigô
(*buf) && j<2; j++,buf++) {

213 
i
 *= 10;

214 
i
 +*
buf
 - '0';

216 i‡(
i
 > 59)

219 i‡(
c
 == 'M')

220 
tm
->
tm_mö
 = 
i
;

222 
tm
->
tm_£c
 = 
i
;

224 i‡(*
buf
 !0 && 
	`is•a˚
(*buf))

225 *
±r
 !0 && !
	`is•a˚
(*ptr))

226 
±r
++;

233 i‡(!
	`isdigô
(*
buf
))

236 
j
=0,
i
 = 0; *
buf
 !0 && 
	`isdigô
(*buf) && j<2; j++,buf++) {

237 
i
 *= 10;

238 
i
 +*
buf
 - '0';

240 i‡(
c
 == 'H' || c == 'k') {

241 i‡(
i
 > 23)

243 } i‡(
i
 > 11)

246 
tm
->
tm_hour
 = 
i
;

248 i‡(*
buf
 !0 && 
	`is•a˚
(*buf))

249 *
±r
 !0 && !
	`is•a˚
(*ptr))

250 
±r
++;

254 
Àn
 = (Ë
	`°æí
(
En_US
.
am_°rög
);

255 
	`lowîˇ£_°rög
–
buf
 );

257 i‡(
	`°∫cmp
(
buf
, 
En_US
.
am_°rög
, 
Àn
) == 0) {

258 i‡(
tm
->
tm_hour
 > 12)

260 i‡(
tm
->
tm_hour
 == 12)

261 
tm
->
tm_hour
 = 0;

262 
buf
 +
Àn
;

266 
Àn
 = (Ë
	`°æí
(
En_US
.
pm_°rög
);

268 i‡(
	`°∫cmp
(
buf
, 
En_US
.
pm_°rög
, 
Àn
) == 0) {

269 i‡(
tm
->
tm_hour
 > 12)

271 i‡(
tm
->
tm_hour
 != 12)

272 
tm
->
tm_hour
 += 12;

273 
buf
 +
Àn
;

281 
i
 = 0; i < 
	`asizeof
(
En_US
.
wìkday_«mes
); i++) {

282 
Àn
 = (Ë
	`°æí
(
En_US
.
wìkday_«mes
[
i
]);

284 
	`lowîˇ£_°rög
–
buf
 );

286 i‡(
	`°∫cmp
(
buf
,

287 
En_US
.
wìkday_«mes
[
i
],

288 
Àn
) == 0)

291 
Àn
 = (Ë
	`°æí
(
En_US
.
abbªv_wìkday_«mes
[
i
]);

292 i‡(
	`°∫cmp
(
buf
,

293 
En_US
.
abbªv_wìkday_«mes
[
i
],

294 
Àn
) == 0)

297 i‡(
i
 =
	`asizeof
(
En_US
.
wìkday_«mes
))

300 
tm
->
tm_wday
 = 
i
;

301 
buf
 +
Àn
;

306 i‡(!
	`isdigô
(*
buf
))

309 
j
=0,
i
 = 0; *
buf
 !0 && 
	`isdigô
(*buf) && j<2; j++,buf++) {

310 
i
 *= 10;

311 
i
 +*
buf
 - '0';

313 i‡(
i
 > 31)

316 
tm
->
tm_mday
 = 
i
;

318 i‡(*
buf
 !0 && 
	`is•a˚
(*buf))

319 *
±r
 !0 && !
	`is•a˚
(*ptr))

320 
±r
++;

326 
i
 = 0; i < 
	`asizeof
(
En_US
.
m⁄th_«mes
); i++) {

327 
Àn
 = (Ë
	`°æí
(
En_US
.
m⁄th_«mes
[
i
]);

329 
	`lowîˇ£_°rög
–
buf
 );

330 i‡(
	`°∫cmp
(
buf
, 
En_US
.
m⁄th_«mes
[
i
],
Àn
) == 0)

333 
Àn
 = (Ë
	`°æí
(
En_US
.
abbªv_m⁄th_«mes
[
i
]);

334 i‡(
	`°∫cmp
(
buf
,

335 
En_US
.
abbªv_m⁄th_«mes
[
i
],

336 
Àn
) == 0)

339 i‡(
i
 =
	`asizeof
(
En_US
.
m⁄th_«mes
))

342 
tm
->
tm_m⁄
 = 
i
;

343 
buf
 +
Àn
;

347 i‡(!
	`isdigô
(*
buf
))

350 
j
=0,
i
 = 0; *
buf
 !0 && 
	`isdigô
(*buf) && j<2; j++,buf++) {

351 
i
 *= 10;

352 
i
 +*
buf
 - '0';

354 i‡(
i
 < 1 || i > 12)

357 
tm
->
tm_m⁄
 = 
i
 - 1;

359 i‡(*
buf
 !0 && 
	`is•a˚
(*buf))

360 *
±r
 !0 && !
	`is•a˚
(*ptr))

361 
±r
++;

366 i‡(*
buf
 =0 || 
	`is•a˚
(*buf))

369 i‡(!
	`isdigô
(*
buf
))

372 
j
=0,
i
 = 0; *
buf
 !0 && 
	`isdigô
(*bufË&& j<((
c
=='Y')?4:2); j++,buf++) {

373 
i
 *= 10;

374 
i
 +*
buf
 - '0';

377 i‡(
c
 == 'Y')

378 
i
 -= 1900;

379 i‡(
i
 < 69)

380 
i
 += 100;

382 i‡(
i
 < 0)

385 
tm
->
tm_yór
 = 
i
;

387 i‡(*
buf
 !0 && 
	`is•a˚
(*buf))

388 *
±r
 !0 && !
	`is•a˚
(*ptr))

389 
±r
++;

394  
buf
;

395 
	}
}

401 #i‡!
HAVE_STRSEP


402 *
	$°r£p
(**
°rögp
, c⁄° *
dñim
) {

403 *
ªt
 = *
°rögp
;

404 i‡(
ªt
 =
NULL
) (NULL);

405 i‡((*
°rögp
 = 
	`°Ωbrk
(*°rögp, 
dñim
)Ë!
NULL
) {

406 *((*
°rögp
)++) = '\0';

408 (
ªt
);

409 
	}
}

430 #i‚de‡
HAVE_STRTOK_R


432 
	~<°dio.h
>

444 *
	$°πok_r
(*
s
, *
dñim
, **
œ°
)

446 *
•™p
;

447 
c
, 
sc
;

448 *
tok
;

450 i‡(
s
 =
NULL
 && (†*
œ°
) == NULL) {

451  
NULL
;

457 
c⁄t
:

458 
c
 = *
s
++;

459 
•™p
 = (*)
dñim
; (
sc
 = *spanp++) != 0; ) {

460 i‡(
c
 =
sc
) {

461 
c⁄t
;

465 i‡(
c
 == 0) {

466 *
œ°
 = 
NULL
;

467  
NULL
;

469 
tok
 = 
s
 - 1;

476 
c
 = *
s
++;

477 
•™p
 = (*)
dñim
;

479 i‡((
sc
 = *
•™p
++Ë=
c
) {

480 i‡(
c
 == 0) {

481 
s
 = 
NULL
;

484 *
w
 = 
s
 - 1;

485 *
w
 = '\0';

487 *
œ°
 = 
s
;

488  
tok
;

491 
sc
 != 0);

494 
	}
}

497 #i‚de‡
HAVE_TIMEGM


498 
time_t
 
	$timegm
(
tm
 *tm) {

499 
time_t
 
ªt
;

500 *
tz
;

501 
buf„r
[255];

503 
tz
 = 
	`gëív
("TZ");

504 
	`_puãnv
("TZ=UTC0");

505 
	`_tz£t
();

506 
ªt
 = 
	`mktime
(
tm
);

508 if(
tz
)

509 
	`•rötf
(
buf„r
,"TZ=%s",
tz
);

511 
	`°r˝y
(
buf„r
,"TZ=");

512 
	`_puãnv
(
buf„r
);

513 
	`_tz£t
();

514  
ªt
;

515 
	}
}

	@plugins/compat.h

1 #i‚de‡
_COMPAT_H_


2 
	#_COMPAT_H_


	)

4 #ifde‡
HAVE_CONFIG_H


5 
	~"c⁄fig.h
"

8 #i‚de‡
HAVE_STRCASESTR


9 *
°rˇ£°r
(* 
hay°ack
, * 
√edÀ
);

12 #i‚de‡
HAVE_STRPTIME


13 *
°Ωtime
(*
buf
, *
fmt
, 
tm
 *tm );

16 #i‚de‡
HAVE_STRTOK_R


17 #unde‡
°πok_r


18 *
°πok_r
(*
s
, *
dñim
, **
œ°
);

21 #i‚de‡
HAVE_TIMEGM


22 
time_t
 
timegm
(
tm
 *tm);

	@plugins/out-daap-proto.c

5 #ifde‡
HAVE_CONFIG_H


6 
	~"c⁄fig.h
"

9 
	~<°dlib.h
>

10 
	~<°dio.h
>

11 
	~<°rög.h
>

12 #ifde‡
HAVE_STDINT_H


13 
	~<°döt.h
>

16 
	~"ff-db°ru˘.h
"

17 
	~"ff-∂ugös.h
"

18 
	~"out-dØp.h
"

19 
	~"out-dØp-¥Ÿo.h
"

21 
DAAP_ITEMS
 
	gègli°
[] = {

153 { 0x00, 
NULL
, NULL }

157 c⁄° * 
	mèg
;

158 
MëaFõldName_t
 
	mbô
;

159 } 
	tMETAMAP
;

162 
METAMAP
 
	gdb_mëam≠
[] = {

163 { "dm≠.ôemid", 
mëaIãmId
 },

164 { "dm≠.ôem«me", 
mëaIãmName
 },

165 { "dm≠.ôemköd", 
mëaIãmKöd
 },

166 { "dm≠.≥rsi°ítid", 
mëaPîsi°ítId
 },

167 { "dm≠.c⁄èöîôemid", 
mëaC⁄èöîIãmId
 },

168 { "dm≠.∑ª¡c⁄èöîid", 
mëaP¨ítC⁄èöîId
 },

170 { "dØp.s⁄gÆbum", 
mëaS⁄gAlbum
 },

171 { "dØp.s⁄g¨ti°", 
mëaS⁄gAπi°
 },

172 { "dØp.s⁄gbôøã", 
mëaS⁄gBôR©e
 },

173 { "dØp.s⁄gbót•îmöuã", 
mëaS⁄gBPM
 },

174 { "dØp.s⁄gcommít", 
mëaS⁄gCommít
 },

175 { "dØp.s⁄gcompû©i⁄", 
mëaS⁄gCompû©i⁄
 },

176 { "dØp.s⁄gcompo£r", 
mëaS⁄gCompo£r
 },

177 { "dØp.s⁄gd©aköd", 
mëaS⁄gD©aKöd
 },

178 { "dØp.s⁄gd©auæ", 
mëaS⁄gD©aURL
 },

179 { "dØp.s⁄gd©ódded", 
mëaS⁄gD©eAdded
 },

180 { "dØp.s⁄gd©emodifõd", 
mëaS⁄gD©eModifõd
 },

181 { "dØp.s⁄gdes¸ùti⁄", 
mëaS⁄gDes¸ùti⁄
 },

182 { "dØp.s⁄gdißbÀd", 
mëaS⁄gDißbÀd
 },

183 { "dØp.s⁄gdisccou¡", 
mëaS⁄gDiscCou¡
 },

184 { "dØp.s⁄gdis˙umbî", 
mëaS⁄gDiscNumbî
 },

185 { "dØp.s⁄geq¥e£t", 
mëaS⁄gEqPª£t
 },

186 { "dØp.s⁄gf‹m©", 
mëaS⁄gF‹m©
 },

187 { "dØp.s⁄ggíª", 
mëaS⁄gGíª
 },

188 { "dØp.s⁄ggroupög", 
mëaS⁄gGroupög
 },

189 { "dØp.s⁄gªœtivevﬁume", 
mëaS⁄gRñ©iveVﬁume
 },

190 { "dØp.s⁄gßm∂î©e", 
mëaS⁄gSam∂eR©e
 },

191 { "dØp.s⁄gsize", 
mëaS⁄gSize
 },

192 { "dØp.s⁄g°¨âime", 
mëaS⁄gSèπTime
 },

193 { "dØp.s⁄g°›time", 
mëaS⁄gSt›Time
 },

194 { "dØp.s⁄gtime", 
mëaS⁄gTime
 },

195 { "dØp.s⁄gåackcou¡", 
mëaS⁄gTøckCou¡
 },

196 { "dØp.s⁄gåacknumbî", 
mëaS⁄gTøckNumbî
 },

197 { "dØp.s⁄gu£º©ög", 
mëaS⁄gU£rR©ög
 },

198 { "dØp.s⁄gyór", 
mëaS⁄gYór
 },

201 { "dØp.s⁄gcode˘y≥", 
mëaS⁄gCodecTy≥
 },

202 { "dØp.s⁄gcodecsubty≥", 
mëaS⁄gCodecSubTy≥
 },

203 { "com.≠∂e.ôu√s.n‹m-vﬁume", 
mëaItu√sN‹mVﬁume
 },

204 { "com.≠∂e.ôu√s.ôms-s⁄gid", 
mëaItmsS⁄gId
 },

205 { "com.≠∂e.ôu√s.ôms-¨ti°id", 
mëaItmsAπi°Id
 },

206 { "com.≠∂e.ôu√s.ôms-∂ayli°id", 
mëaItmsPœyli°Id
 },

207 { "com.≠∂e.ôu√s.ôms-compo£rid", 
mëaItmsCompo£rId
 },

208 { "com.≠∂e.ôu√s.ôms-gíªid", 
mëaItmsGíªId
 },

209 { "com.≠∂e.ôu√s.ôms-°‹e‰⁄tid",
mëaItmsSt‹e‰⁄tId
 },

210 { "com.≠∂e.ôu√s.sm¨t-∂ayli°", 
mëaItu√sSm¨tPœyli°
 },

213 { "dØp.s⁄gc⁄ã¡øtög", 
mëaS⁄gC⁄ã¡R©ög
 },

214 { "dm≠.haschûdc⁄èöîs", 
mëaHasChûdC⁄èöîs
 },

217 { "com.≠∂e.ôu√s.has-video", 
mëaItu√sHasVideo
 },

220 { "‹g.mt-dØpd.sm¨t-∂ayli°-•ec", 
mëaMPœyli°S≥c
 },

221 { "‹g.mt-dØpd.∂ayli°-ty≥", 
mëaMPœyli°Ty≥
 },

226 
	gout_dØp_£ssi⁄
=0;

228 
	#DMAPLEN
(
a
Ë((◊Ë&& 
	`°æí
(a)) ? (8+()strlen((a))) : \

229 ((
pöfo
->
em±y_°rögs
Ë? 8 : 0))

	)

230 
	#EMIT
(
a
Ë(
pöfo
->
em±y_°rögs
 ? 1 : (◊Ë&& 
	`°æí
(◊))Ë? 1 : 0)

	)

233 
dØp_gë_size
(
PRIVINFO
 *
pöfo
, **
vÆ¨øy
);

234 
dØp_buûd_dm≠
(
PRIVINFO
 *
pöfo
, **
vÆ¨øy
, *
¥esu…
, 
Àn
);

241 
MëaFõld_t
 
	$dØp_ícode_mëa
(*
mëa
) {

242 
MëaFõld_t
 
bôs
 = 0;

243 *
°¨t
;

244 *
íd
;

245 
METAMAP
 *
m
;

247 
°¨t
 = 
mëa
 ; *°¨à; sèπ = 
íd
) {

248 
Àn
;

250 if(0 =(
íd
 = 
	`°rchr
(
°¨t
, ',')))

251 
íd
 = 
°¨t
 + 
	`°æí
(start);

253 
Àn
 = ()(
íd
 - 
°¨t
);

255 if(*
íd
 != 0)

256 
íd
++;

258 
m
 = 
db_mëam≠
 ; m->
èg
 ; ++m)

259 if(!
	`°∫cmp
(
m
->
èg
, 
°¨t
, 
Àn
))

262 if(
m
->
èg
)

263 
bôs
 |(((
MëaFõld_t
Ë1Ë<< 
m
->
bô
);

265 
	`pi_log
(
E_WARN
,"Unknow¿më®code: %.*s\n", 
Àn
, 
°¨t
);

268 
	`pi_log
(
E_DBG
, "më®codes: %Œu\n", 
bôs
);

270  
bôs
;

271 
	}
}

279 
	$dØp_w™tsmëa
(
MëaFõld_t
 
mëa
, 
MëaFõldName_t
 
fõldNo
) {

280  0 !(
mëa
 & (((
MëaFõld_t
Ë1Ë<< 
fõldNo
));

281 
	}
}

290 
	$dm≠_add_ch¨
(*
whîe
, *
èg
, 
vÆue
) {

292 
	`mem˝y
(
whîe
,
èg
,4);

295 
whîe
[4]=where[5]=where[6]=0;

296 
whîe
[7]=1;

299 
whîe
[8] = 
vÆue
;

301 
	}
}

310 
	$dm≠_add_sh‹t
(*
whîe
, *
èg
, 
vÆue
) {

312 
	`mem˝y
(
whîe
,
èg
,4);

315 
whîe
[4]=where[5]=where[6]=0;

316 
whîe
[7]=2;

319 
whîe
[8] = (
vÆue
 >> 8) & 0xFF;

320 
whîe
[9] = 
vÆue
 & 0xFF;

322 
	}
}

333 
	$dm≠_add_öt
(*
whîe
, *
èg
, 
vÆue
) {

335 
	`mem˝y
(
whîe
,
èg
,4);

337 
whîe
[4]=where[5]=where[6]=0;

338 
whîe
[7]=4;

341 
whîe
[8] = (
vÆue
 >> 24) & 0xFF;

342 
whîe
[9] = (
vÆue
 >> 16) & 0xFF;

343 
whîe
[10] = (
vÆue
 >> 8) & 0xFF;

344 
whîe
[11] = 
vÆue
 & 0xFF;

347 
	}
}

349 
	$dm≠_add_l⁄g
(*
whîe
, *
èg
, 
uöt64_t
 
vÆue
) {

350 
uöt32_t
 
v_hi
;

351 
uöt32_t
 
v_lo
;

354 
	`mem˝y
(
whîe
,
èg
,4);

356 
whîe
[4]=where[5]=where[6]=0;

357 
whîe
[7]=8;

359 
v_hi
 = (
uöt32_t
)((
vÆue
 >> 32) & 0xFFFFFFFF);

360 
v_lo
 = (
uöt32_t
)(
vÆue
 & 0xFFFFFFFF);

363 
whîe
[8] = (
v_hi
 >> 24) & 0xFF;

364 
whîe
[9] = (
v_hi
 >> 16) & 0xFF;

365 
whîe
[10] = (
v_hi
 >> 8) & 0xFF;

366 
whîe
[11] = 
v_hi
 & 0xFF;

368 
whîe
[12] = (
v_lo
 >> 24) & 0xFF;

369 
whîe
[13] = (
v_lo
 >> 16) & 0xFF;

370 
whîe
[14] = (
v_lo
 >> 8) & 0xFF;

371 
whîe
[15] = 
v_lo
 & 0xFF;

374 
	}
}

385 
	$dm≠_add_°rög
(*
whîe
, *
èg
, *
vÆue
) {

386 
Àn
=0;

388 if(
vÆue
)

389 
Àn
 = ()
	`°æí
(
vÆue
);

392 
	`mem˝y
(
whîe
,
èg
,4);

395 
whîe
[4]=(
Àn
 >> 24) & 0xFF;

396 
whîe
[5]=(
Àn
 >> 16) & 0xFF;

397 
whîe
[6]=(
Àn
 >> 8) & 0xFF;

398 
whîe
[7]=
Àn
 & 0xFF;

400 if(
Àn
)

401 
	`°∫˝y
((*)
whîe
+8,
vÆue
,
Àn
);

402  8 + 
Àn
;

403 
	}
}

413 
	$dm≠_add_lôîÆ
(*
whîe
, *
èg
,

414 *
vÆue
, 
size
) {

416 
	`mem˝y
(
whîe
,
èg
,4);

419 
whîe
[4]=(
size
 >> 24) & 0xFF;

420 
whîe
[5]=(
size
 >> 16) & 0xFF;

421 
whîe
[6]=(
size
 >> 8) & 0xFF;

422 
whîe
[7]=
size
 & 0xFF;

424 
	`mem˝y
(
whîe
+8,
vÆue
,
size
);

425  8+
size
;

426 
	}
}

437 
	$dm≠_add_c⁄èöî
(*
whîe
, *
èg
, 
size
) {

438 
Àn
=
size
;

441 
	`mem˝y
(
whîe
,
èg
,4);

444 
whîe
[4]=(
Àn
 >> 24) & 0xFF;

445 
whîe
[5]=(
Àn
 >> 16) & 0xFF;

446 
whîe
[6]=(
Àn
 >> 8) & 0xFF;

447 
whîe
[7]=
Àn
 & 0xFF;

450 
	}
}

459 
	$dØp_gë_√xt_£ssi⁄
() {

460 
£ssi⁄
;

462 
£ssi⁄
=++
out_dØp_£ssi⁄
;

464  
£ssi⁄
;

465 
	}
}

473 
	$dØp_íum_size
(**
≥
, 
PRIVINFO
 *
pöfo
, *
cou¡
, *
tŸÆ_size
) {

474 
îr
;

475 
ªc‹d_size
;

476 **
row
;

478 
	`pi_log
(
E_DBG
,"Enumerating size\n");

480 *
cou¡
=0;

481 *
tŸÆ_size
 = 0;

483 (!(
îr
=
	`pi_db_íum_„tch_row
(
≥
,&
row
,&
pöfo
->
dq
))) && (row)) {

484 if((
ªc‹d_size
 = 
	`dØp_gë_size
(
pöfo
,
row
))) {

485 *
tŸÆ_size
 +
ªc‹d_size
;

486 *
cou¡
 = *count + 1;

490 if(
îr
) {

491 
	`pi_db_íum_íd
(
NULL
);

492 
	`pi_db_íum_di•o£
(
NULL
,&
pöfo
->
dq
);

493  
îr
;

496 
îr
=
	`pi_db_íum_ª°¨t
(
≥
, &
pöfo
->
dq
);

498 
	`pi_log
(
E_DBG
,"GŸ size: %d\n",*
tŸÆ_size
);

499  
îr
;

500 
	}
}

505 
	$dØp_íum_„tch
(**
≥
, 
PRIVINFO
 *
pöfo
, *
size
, **
pdm≠
) {

506 
îr
;

507 
ªsu…_size
=0;

508 *
¥esu…
;

509 **
row
;

511 
îr
=
	`pi_db_íum_„tch_row
(
≥
, &
row
, &
pöfo
->
dq
);

512 if(
îr
) {

513 
	`pi_db_íum_íd
(
NULL
);

514 
	`pi_db_íum_di•o£
(
NULL
,&
pöfo
->
dq
);

515  
îr
;

518 if(
row
) {

519 
ªsu…_size
 = 
	`dØp_gë_size
(
pöfo
,
row
);

520 if(
ªsu…_size
) {

521 
¥esu…
 = (*)
	`mÆloc
(
ªsu…_size
);

522 if(!
¥esu…
) {

523 
	`pi_log
(
E_FATAL
,"MallocÉrror\n");

526 
	`dØp_buûd_dm≠
(
pöfo
,
row
,
¥esu…
,
ªsu…_size
);

527 *
pdm≠
=
¥esu…
;

528 *
size
 = 
ªsu…_size
;

531 *
size
 = 0;

535 
	}
}

540 
	$dØp_gë_size
(
PRIVINFO
 *
pöfo
, **
vÆ¨øy
) {

541 
size
;

542 
å™scode
;

544 
pöfo
->
dq
.
quîy_ty≥
) {

545 
QUERY_TYPE_DISTINCT
:

546  
vÆ¨øy
[0] ? (8 + (Ë
	`°æí
(valarray[0])) : 0;

547 
QUERY_TYPE_PLAYLISTS
:

548 
size
 = 8;

549 
size
 += 12;

550 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaIãmId
))

551 
size
 += 12;

552 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaItu√sSm¨tPœyli°
)) {

553 if(
vÆ¨øy
[
PL_TYPE
] && (
	`©oi
(valarray[PL_TYPE])==1) &&

554 (
	`©oi
(
vÆ¨øy
[
PL_ID
]) != 1))

555 
size
 += 9;

558 if(
	`©oi
(
vÆ¨øy
[
PL_ID
]) == 1) {

559 
size
 += 9;

562 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaIãmName
))

563 
size
 +(8 + (Ë
	`°æí
(
vÆ¨øy
[
PL_TITLE
]));

564 if(
vÆ¨øy
[
PL_TYPE
] && (
	`©oi
(valarray[PL_TYPE])==1) &&

565 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaMPœyli°S≥c
))

566 
size
 +(8 + (Ë
	`°æí
(
vÆ¨øy
[
PL_QUERY
]));

567 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaMPœyli°Ty≥
))

568 
size
 += 9;

569  
size
;

571 
QUERY_TYPE_ITEMS
:

573 
å™scode
 = 
	`pi_should_å™scode
(
pöfo
->
pwsc
,
vÆ¨øy
[
SG_CODECTYPE
]);

584 
size
 = 8;

585 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaIãmKöd
))

587 
size
 += 9;

588 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gD©aKöd
))

590 
size
 += 9;

591 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gD©aURL
))

593 
size
 +
	`DMAPLEN
(
vÆ¨øy
[
SG_URL
]);

594 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gAlbum
))

596 
size
 +
	`DMAPLEN
(
vÆ¨øy
[
SG_ALBUM
]);

597 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gAπi°
))

599 
size
 +
	`DMAPLEN
(
vÆ¨øy
[
SG_ARTIST
]);

600 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gBPM
))

602 
size
 += 10;

603 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gBôR©e
)) {

605 if(
å™scode
) {

606 if(
vÆ¨øy
[
SG_SAMPLERATE
] && 
	`©oi
(valarray[SG_SAMPLERATE])) {

607 
size
 += 10;

610 if(
vÆ¨øy
[
SG_BITRATE
] && 
	`©oi
(valarray[SG_BITRATE])) {

611 
size
 += 10;

615 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gCommít
))

617 
size
 +
	`DMAPLEN
(
vÆ¨øy
[
SG_COMMENT
]);

618 if(
vÆ¨øy
[
SG_COMPILATION
] && 
	`©oi
(valarray[SG_COMPILATION]) &&

619 
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaS⁄gCompû©i⁄
))

621 
size
 += 9;

622 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gCompo£r
))

624 
size
 +
	`DMAPLEN
(
vÆ¨øy
[
SG_COMPOSER
]);

625 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gGroupög
))

627 
size
 +
	`DMAPLEN
(
vÆ¨øy
[
SG_GROUPING
]);

628 if(
vÆ¨øy
[
SG_TIME_ADDED
] && 
	`©oi
(valarray[SG_TIME_ADDED]) &&

629 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gD©eAdded
))

631 
size
 += 12;

632 if(
vÆ¨øy
[
SG_TIME_MODIFIED
] && 
	`©oi
(valarray[SG_TIME_MODIFIED]) &&

633 
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaS⁄gD©eModifõd
))

635 
size
 += 12;

636 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gDiscCou¡
))

638 
size
 += 10;

639 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gDiscNumbî
))

641 
size
 += 10;

642 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gGíª
))

644 
size
 +
	`DMAPLEN
(
vÆ¨øy
[
SG_GENRE
]);

645 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaIãmId
))

647 
size
 += 12;

648 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaS⁄gF‹m©
)) {

650 if(
å™scode
) {

651 
size
 += 11;

653 
size
 +
	`DMAPLEN
(
vÆ¨øy
[
SG_TYPE
]);

656 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaS⁄gDes¸ùti⁄
)) {

658 if(
å™scode
) {

659 
size
 += 22;

661 
size
 +
	`DMAPLEN
(
vÆ¨øy
[
SG_DESCRIPTION
]);

664 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaIãmName
))

666 
size
 +
	`DMAPLEN
(
vÆ¨øy
[
SG_TITLE
]);

667 if(
vÆ¨øy
[
SG_DISABLED
] && 
	`©oi
(valarray[SG_DISABLED]) &&

668 
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaS⁄gDißbÀd
))

670 
size
 += 9;

671 if(
vÆ¨øy
[
SG_SAMPLERATE
] && 
	`©oi
(valarray[SG_SAMPLERATE]) &&

672 
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaS⁄gSam∂eR©e
))

674 
size
 += 12;

675 if(
vÆ¨øy
[
SG_FILE_SIZE
] && 
	`©oi
(valarray[SG_FILE_SIZE]) &&

676 
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaS⁄gSize
))

678 
size
 += 12;

685 if(
vÆ¨øy
[
SG_SONG_LENGTH
] && 
	`©oi
(valarray[SG_SONG_LENGTH]) &&

686 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gTime
))

688 
size
 += 12;

689 if(
vÆ¨øy
[
SG_TOTAL_TRACKS
] && 
	`©oi
(valarray[SG_TOTAL_TRACKS]) &&

690 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gTøckCou¡
))

692 
size
 += 10;

693 if(
vÆ¨øy
[
SG_TRACK
] && 
	`©oi
(valarray[SG_TRACK]) &&

694 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gTøckNumbî
))

696 
size
 += 10;

697 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gU£rR©ög
))

699 
size
 += 9;

700 if(
vÆ¨øy
[
SG_YEAR
] && 
	`©oi
(valarray[SG_YEAR]) &&

701 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gYór
))

703 
size
 += 10;

704 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaC⁄èöîIãmId
))

706 
size
 += 12;

708 if((
vÆ¨øy
[
SG_CODECTYPE
]Ë&& (
	`°æí
(valarray[SG_CODECTYPE])==4) &&

709 
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaS⁄gCodecTy≥
))

711 
size
 += 12;

712 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaS⁄gC⁄ã¡R©ög
))

714 
size
 += 9;

715 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaItu√sHasVideo
))

717 
size
 += 9;

719  
size
;

723 
	`pi_log
(
E_LOG
,"Unknow¿quîyÅy≥: %d\n",()
pöfo
->
dq
.
quîy_ty≥
);

727 
	}
}

729 
	$dØp_buûd_dm≠
(
PRIVINFO
 *
pöfo
, **
vÆ¨øy
, *
¥esu…
, 
Àn
) {

730 *
cuºít
 = 
¥esu…
;

731 
å™scode
;

732 
ßm∂î©e
=0;

734 
pöfo
->
dq
.
quîy_ty≥
) {

735 
QUERY_TYPE_DISTINCT
:

736  
	`dm≠_add_°rög
(
cuºít
,"mlô",
vÆ¨øy
[0]);

737 
QUERY_TYPE_PLAYLISTS
:

739 
cuºít
 +
	`dm≠_add_c⁄èöî
(cuºít,"mlô",
Àn
 - 8);

740 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaIãmId
))

741 
cuºít
 +
	`dm≠_add_öt
(cuºít,"miid",
	`©oi
(
vÆ¨øy
[
PL_ID
]));

742 
cuºít
 +
	`dm≠_add_öt
(cuºít,"mimc",
	`©oi
(
vÆ¨øy
[
PL_ITEMS
]));

743 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaItu√sSm¨tPœyli°
)) {

744 if(
vÆ¨øy
[
PL_TYPE
] && (
	`©oi
(valarray[PL_TYPE]) == 1) &&

745 (
	`©oi
(
vÆ¨øy
[
PL_ID
]) != 1))

746 
cuºít
 +
	`dm≠_add_ch¨
(current,"aeSP",1);

748 if(
	`©oi
(
vÆ¨øy
[
PL_ID
]) == 1) {

749 
cuºít
 +
	`dm≠_add_ch¨
(current,"abpl",1);

752 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaIãmName
))

753 
cuºít
 +
	`dm≠_add_°rög
(cuºít,"möm",
vÆ¨øy
[
PL_TITLE
]);

754 if((
vÆ¨øy
[
PL_TYPE
]Ë&& (
	`©oi
(valarray[PL_TYPE])==1) &&

755 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaMPœyli°S≥c
))

756 
cuºít
 +
	`dm≠_add_°rög
(cuºít,"MSPS",
vÆ¨øy
[
PL_QUERY
]);

757 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaMPœyli°Ty≥
))

758 
cuºít
 +
	`dm≠_add_ch¨
(cuºít,"MPTY",
	`©oi
(
vÆ¨øy
[
PL_TYPE
]));

760 
QUERY_TYPE_ITEMS
:

762 
å™scode
 = 
	`pi_should_å™scode
(
pöfo
->
pwsc
,
vÆ¨øy
[
SG_CODECTYPE
]);

773 
cuºít
 +
	`dm≠_add_c⁄èöî
(cuºít,"mlô",
Àn
-8);

774 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaIãmKöd
))

775 
cuºít
 +
	`dm≠_add_ch¨
(current,"mikd",

776 ()
	`©oi
(
vÆ¨øy
[
SG_ITEM_KIND
]));

777 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gD©aKöd
))

778 
cuºít
 +
	`dm≠_add_ch¨
(current,"asdk",

779 ()
	`©oi
(
vÆ¨øy
[
SG_DATA_KIND
]));

780 if(
	`EMIT
(
vÆ¨øy
[13]Ë&& 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gD©aURL
))

781 
cuºít
 +
	`dm≠_add_°rög
(cuºít,"asul",
vÆ¨øy
[
SG_URL
]);

782 if(
	`EMIT
(
vÆ¨øy
[5]Ë&& 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gAlbum
))

783 
cuºít
 +
	`dm≠_add_°rög
(cuºít,"aßl",
vÆ¨øy
[
SG_ALBUM
]);

784 if(
	`EMIT
(
vÆ¨øy
[4]Ë&& 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gAπi°
))

785 
cuºít
 +
	`dm≠_add_°rög
(cuºít,"aßr",
vÆ¨øy
[
SG_ARTIST
]);

786 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gBPM
))

787 
cuºít
 +
	`dm≠_add_sh‹t
(current,"asbt",

788 ()
	`©oi
(
vÆ¨øy
[
SG_BPM
]));

789 if(
vÆ¨øy
[
SG_BITRATE
] && 
	`©oi
(valarray[SG_BITRATE]) &&

790 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gBôR©e
)) {

791 if(
å™scode
) {

792 if(
vÆ¨øy
[
SG_SAMPLERATE
])

793 
ßm∂î©e
=
	`©oi
(
vÆ¨øy
[
SG_SAMPLERATE
]);

794 if(
ßm∂î©e
) {

795 
cuºít
 +
	`dm≠_add_sh‹t
(current,"asbr",

796 ()(
ßm∂î©e
 / 250 * 8));

799 
cuºít
 +
	`dm≠_add_sh‹t
(current,"asbr",

800 ()
	`©oi
(
vÆ¨øy
[
SG_BITRATE
]));

803 if(
	`EMIT
(
vÆ¨øy
[
SG_COMMENT
]) &&

804 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gCommít
))

805 
cuºít
 +
	`dm≠_add_°rög
(cuºít,"ascm",
vÆ¨øy
[
SG_COMMENT
]);

807 if(
vÆ¨øy
[
SG_COMPILATION
] && 
	`©oi
(valarray[SG_COMPILATION]) &&

808 
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaS⁄gCompû©i⁄
))

809 
cuºít
 +
	`dm≠_add_ch¨
(current,"asco",

810 ()
	`©oi
(
vÆ¨øy
[
SG_COMPILATION
]));

812 if(
	`EMIT
(
vÆ¨øy
[
SG_COMPOSER
]) &&

813 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gCompo£r
))

814 
cuºít
 +
	`dm≠_add_°rög
(current,"ascp",

815 
vÆ¨øy
[
SG_COMPOSER
]);

817 if(
	`EMIT
(
vÆ¨øy
[
SG_GROUPING
]) &&

818 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gGroupög
))

819 
cuºít
 +
	`dm≠_add_°rög
(current,"agrp",

820 
vÆ¨øy
[
SG_GROUPING
]);

822 if(
vÆ¨øy
[
SG_TIME_ADDED
] && 
	`©oi
(valarray[SG_TIME_ADDED]) &&

823 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gD©eAdded
))

824 
cuºít
 +
	`dm≠_add_öt
(current,"asda",

825 ()
	`©oi
(
vÆ¨øy
[
SG_TIME_ADDED
]));

827 if(
vÆ¨øy
[
SG_TIME_MODIFIED
] && 
	`©oi
(valarray[SG_TIME_MODIFIED]) &&

828 
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaS⁄gD©eModifõd
))

829 
cuºít
 +
	`dm≠_add_öt
(current,"asdm",

830 ()
	`©oi
(
vÆ¨øy
[
SG_TIME_MODIFIED
]));

832 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gDiscCou¡
))

833 
cuºít
 +
	`dm≠_add_sh‹t
(current,"asdc",

834 ()
	`©oi
(
vÆ¨øy
[
SG_TOTAL_DISCS
]));

835 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gDiscNumbî
))

836 
cuºít
 +
	`dm≠_add_sh‹t
(current,"asdn",

837 ()
	`©oi
(
vÆ¨øy
[
SG_DISC
]));

839 if(
	`EMIT
(
vÆ¨øy
[
SG_GENRE
]) &&

840 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gGíª
))

841 
cuºít
 +
	`dm≠_add_°rög
(cuºít,"asgn",
vÆ¨øy
[
SG_GENRE
]);

843 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaIãmId
))

844 
cuºít
 +
	`dm≠_add_öt
(current,"miid",

845 ()
	`©oi
(
vÆ¨øy
[
SG_ID
]));

847 if(
	`EMIT
(
vÆ¨øy
[
SG_TYPE
]) &&

848 
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaS⁄gF‹m©
)) {

849 if(
å™scode
) {

850 
cuºít
 +
	`dm≠_add_°rög
(current,"asfm","wav");

852 
cuºít
 +
	`dm≠_add_°rög
(current,"asfm",

853 
vÆ¨øy
[
SG_TYPE
]);

857 if(
	`EMIT
(
vÆ¨øy
[
SG_DESCRIPTION
]) &&

858 
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaS⁄gDes¸ùti⁄
)) {

859 if(
å™scode
) {

860 
cuºít
 +
	`dm≠_add_°rög
(current,"asdt","waváudio file");

862 
cuºít
 +
	`dm≠_add_°rög
(current,"asdt",

863 
vÆ¨øy
[
SG_DESCRIPTION
]);

866 if(
	`EMIT
(
vÆ¨øy
[
SG_TITLE
]) &&

867 
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaIãmName
))

868 
cuºít
 +
	`dm≠_add_°rög
(cuºít,"möm",
vÆ¨øy
[
SG_TITLE
]);

870 if(
vÆ¨øy
[
SG_DISABLED
] && 
	`©oi
(valarray[SG_DISABLED]) &&

871 
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaS⁄gDißbÀd
))

872 
cuºít
 +
	`dm≠_add_ch¨
(current,"asdb",

873 ()
	`©oi
(
vÆ¨øy
[
SG_DISABLED
]));

875 if(
vÆ¨øy
[
SG_SAMPLERATE
] && 
	`©oi
(valarray[SG_SAMPLERATE]) &&

876 
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaS⁄gSam∂eR©e
))

877 
cuºít
 +
	`dm≠_add_öt
(current,"assr",

878 
	`©oi
(
vÆ¨øy
[
SG_SAMPLERATE
]));

880 if(
vÆ¨øy
[
SG_FILE_SIZE
] && 
	`©oi
(valarray[SG_FILE_SIZE]) &&

881 
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaS⁄gSize
))

882 
cuºít
 +
	`dm≠_add_öt
(current,"assz",

883 
	`©oi
(
vÆ¨øy
[
SG_FILE_SIZE
]));

885 if(
vÆ¨øy
[
SG_SONG_LENGTH
] && 
	`©oi
(valarray[SG_SONG_LENGTH]) &&

886 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gTime
))

887 
cuºít
 +
	`dm≠_add_öt
(current,"astm",

888 
	`©oi
(
vÆ¨øy
[
SG_SONG_LENGTH
]));

890 if(
vÆ¨øy
[
SG_TOTAL_TRACKS
] && 
	`©oi
(valarray[SG_TOTAL_TRACKS]) &&

891 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gTøckCou¡
))

892 
cuºít
 +
	`dm≠_add_sh‹t
(current,"astc",

893 ()
	`©oi
(
vÆ¨øy
[
SG_TOTAL_TRACKS
]));

895 if(
vÆ¨øy
[
SG_TRACK
] && 
	`©oi
(valarray[SG_TRACK]) &&

896 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gTøckNumbî
))

897 
cuºít
 +
	`dm≠_add_sh‹t
(current,"astn",

898 ()
	`©oi
(
vÆ¨øy
[
SG_TRACK
]));

900 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gU£rR©ög
))

901 
cuºít
 +
	`dm≠_add_ch¨
(current,"asur",

902 ()
	`©oi
(
vÆ¨øy
[
SG_RATING
]));

904 if(
vÆ¨øy
[
SG_YEAR
] && 
	`©oi
(valarray[SG_YEAR]) &&

905 
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gYór
))

906 
cuºít
 +
	`dm≠_add_sh‹t
(current,"asyr",

907 ()
	`©oi
(
vÆ¨øy
[
SG_YEAR
]));

909 if((
vÆ¨øy
[
SG_CODECTYPE
]Ë&& (
	`°æí
(valarray[SG_CODECTYPE]) == 4) &&

910 
	`dØp_w™tsmëa
(
pöfo
->
mëa
,
mëaS⁄gCodecTy≥
))

911 
cuºít
 +
	`dm≠_add_lôîÆ
(current,"ascd",

912 
vÆ¨øy
[
SG_CODECTYPE
],4);

913 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaC⁄èöîIãmId
))

914 
cuºít
 +
	`dm≠_add_öt
(cuºít,"m˘i",
	`©oi
(
vÆ¨øy
[
SG_ID
]));

916 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaItu√sHasVideo
))

917 
cuºít
 +
	`dm≠_add_ch¨
(current,"aeHV",

918 
	`©oi
(
vÆ¨øy
[
SG_HAS_VIDEO
]));

920 if(
	`dØp_w™tsmëa
(
pöfo
->
mëa
, 
mëaS⁄gC⁄ã¡R©ög
))

921 
cuºít
 +
	`dm≠_add_ch¨
(current,"ascr",

922 
	`©oi
(
vÆ¨øy
[
SG_CONTENTRATING
]));

927 
	`pi_log
(
E_LOG
,"Unknow¿quîyÅy≥: %d\n",()
pöfo
->
dq
.
quîy_ty≥
);

931 
	}
}

	@plugins/out-daap-proto.h

5 #i‚de‡
_OUT_DAAP_PROTO_H_


6 
	#_OUT_DAAP_PROTO_H_


	)

8 
	~"out-dØp.h
"

10 
	sèg_dØp_ôems
 {

11 
	mty≥
;

12 *
	mèg
;

13 *
	mdes¸ùti⁄
;

14 } 
	tDAAP_ITEMS
;

16 
DAAP_ITEMS
 
ègli°
[];

19 
MëaFõld_t
 
dØp_ícode_mëa
(*
mëa
);

20 
dØp_w™tsmëa
(
MëaFõld_t
 
mëa
, 
MëaFõldName_t
 
fõldNo
);

23 
dm≠_add_ch¨
(*
whîe
, *
èg
, 
vÆue
);

24 
dm≠_add_sh‹t
(*
whîe
, *
èg
, 
vÆue
);

25 
dm≠_add_öt
(*
whîe
, *
èg
, 
vÆue
);

26 
dm≠_add_l⁄g
(*
whîe
, *
èg
, 
uöt64_t
 
vÆue
);

27 
dm≠_add_°rög
(*
whîe
, *
èg
, *
vÆue
);

28 
dm≠_add_lôîÆ
(*
whîe
, *
èg
, *
vÆue
, 
size
);

29 
dm≠_add_c⁄èöî
(*
whîe
, *
èg
, 
size
);

31 
dØp_gë_√xt_£ssi⁄
();

34 
dØp_íum_size
(**
≥
, 
PRIVINFO
 *
pöfo
, *
cou¡
, *
tŸÆ_size
);

35 
dØp_íum_„tch
(**
≥
, 
PRIVINFO
 *
pöfo
, *
size
, **
pdm≠
);

	@plugins/out-daap.c

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 
	~<î∫o.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 #ifde‡
HAVE_UNISTD_H


31 
	~<uni°d.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<sys/°©.h
>

36 #i‚de‡
WIN32


37 
	~<√töë/ö.h
>

40 
	~"com∑t.h
"

41 
	~"ff-db°ru˘.h
"

42 
	~"ff-∂ugös.h
"

43 
	~"out-dØp.h
"

44 
	~"out-dØp-¥Ÿo.h
"

51 
	sèg_xml_°ack
 {

52 
	mèg
[5];

53 
	mbyãs_À·
;

54 } 
	tXML_STACK
;

56 
	sèg_ouçut_öfo
 {

57 
	mxml_ouçut
;

58 
	mªadabÀ
;

59 
	mbrow£_ª•⁄£
;

60 
	mdm≠_ª•⁄£_Àngth
;

61 
	m°ack_height
;

62 
XML_STACK
 
	m°ack
[10];

63 } 
	tOUTPUT_INFO
;

66 
out_dØp_£rvî_öfo
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

67 
out_dØp_logö
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

68 
out_dØp_c⁄ã¡_codes
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

69 
out_dØp_upd©e
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

70 
out_dØp_dböfo
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

71 
out_dØp_∂ayli°ôems
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

72 
out_dØp_°ªam
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

73 
out_dØp_brow£
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

74 
out_dØp_∂ayli°s
(
WS_CONNINFO
 *
pqsc
, 
PRIVINFO
 *
µi
);

75 
out_dØp_add∂ayli°
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

76 
out_dØp_add∂ayli°ôems
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

77 
out_dØp_edô∂ayli°
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

78 
out_dØp_dñëïœyli°
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

79 
out_dØp_dñëïœyli°ôems
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

80 
out_dØp_ôems
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

81 
out_dØp_logout
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

82 
out_dØp_îr‹
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
, *
c⁄èöî
, *
îr‹
);

83 
out_dØp_ouçut_°¨t
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
, 
c⁄ã¡_Àngth
);

84 
out_dØp_ouçut_wrôe
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
, *
block
, 
Àn
);

85 
out_dØp_ouçut_íd
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

87 
DAAP_ITEMS
 *
out_dØp_xml_lookup_èg
(*
èg
);

88 *
out_dØp_xml_ícode
(*
‹igöÆ
, 
Àn
);

89 
out_dØp_ouçut_xml_wrôe
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
, *
block
, 
Àn
);

91 
out_dØp_˛ónup
(
PRIVINFO
 *
µi
);

93 
∂ugö_h™dÀr
(
WS_CONNINFO
 *
pwsc
);

94 
∂ugö_ˇn_h™dÀ
(
WS_CONNINFO
 *
pwsc
);

95 
∂ugö_auth
(
WS_CONNINFO
 *
pwsc
, *
u£∫ame
, *
∑ssw‹d
);

97 
PLUGIN_INFO
 *
∂ugö_öfo
();

98 
PLUGIN_OUTPUT_FN
 
	g_po‚
 = { 
∂ugö_ˇn_h™dÀ
, 
∂ugö_h™dÀr
, 
∂ugö_auth
 };

99 
PLUGIN_REND_INFO
 
	g_¥i
[] = {

100 { "_dØp._t˝", 
NULL
 },

101 { 
NULL
, NULL }

104 
PLUGIN_INFO
 
	g_pi
 = {

105 
PLUGIN_VERSION
,

106 
PLUGIN_OUTPUT
,

107 "dØp/" 
VERSION
,

108 &
_po‚
,

109 
NULL
,

110 
NULL
,

111 
_¥i
,

112 
NULL


116 
	sèg_ª•⁄£
 {

117 *
	muri
[10];

118 (*
	mdi•©ch
)(
	mWS_CONNINFO
 *, 
	mPRIVINFO
 *);

119 } 
	tPLUGIN_RESPONSE
;

121 
PLUGIN_RESPONSE
 
	gdØp_uri_m≠
[] = {

122 {{"£rvî-öfo", 
NULL
,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL },

123 
out_dØp_£rvî_öfo
 },

124 {{"c⁄ã¡-codes", 
NULL
,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL },

125 
out_dØp_c⁄ã¡_codes
 },

126 {{"logö", 
NULL
,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL },

127 
out_dØp_logö
 },

128 {{"upd©e", 
NULL
,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL },

129 
out_dØp_upd©e
 },

130 {{"logout", 
NULL
,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL },

131 
out_dØp_logout
 },

132 {{"d©aba£s", 
NULL
,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL },

133 
out_dØp_dböfo
 },

134 {{"d©aba£s","*","ôems", 
NULL
,NULL,NULL,NULL,NULL,NULL,NULL },

135 
out_dØp_ôems
 },

136 {{"d©aba£s","*","c⁄èöîs",
NULL
,NULL,NULL,NULL,NULL,NULL,NULL },

137 
out_dØp_∂ayli°s
 },

138 {{"d©aba£s","*","brow£","*",
NULL
,NULL,NULL,NULL,NULL,NULL },

139 
out_dØp_brow£
 },

140 {{"d©aba£s","*","ôems","*",
NULL
,NULL,NULL,NULL,NULL,NULL },

141 
out_dØp_°ªam
 },

142 {{"d©aba£s","*","c⁄èöîs","add",
NULL
,NULL,NULL,NULL,NULL,NULL },

143 
out_dØp_add∂ayli°
 },

144 {{"d©aba£s","*","c⁄èöîs","dñ",
NULL
,NULL,NULL,NULL,NULL,NULL },

145 
out_dØp_dñëïœyli°
 },

146 {{"d©aba£s","*","c⁄èöîs","edô",
NULL
,NULL,NULL,NULL,NULL,NULL },

147 
out_dØp_edô∂ayli°
 },

148 {{"d©aba£s","*","c⁄èöîs","*","ôems",
NULL
,NULL,NULL,NULL,NULL },

149 
out_dØp_∂ayli°ôems
 },

150 {{"d©aba£s","*","c⁄èöîs","*","dñ",
NULL
,NULL,NULL,NULL,NULL },

151 
out_dØp_dñëïœyli°ôems
 },

152 {{"d©aba£s","*","c⁄èöîs","*","ôems","add",
NULL
,NULL,NULL,NULL },

153 
out_dØp_add∂ayli°ôems
 },

154 {{"d©aba£s","*","c⁄èöîs","*","brow£","*",
NULL
,NULL,NULL,NULL },

155 
out_dØp_brow£
 }

163 
PLUGIN_INFO
 *
	$∂ugö_öfo
() {

164  &
_pi
;

165 
	}
}

170 
	$∂ugö_ˇn_h™dÀ
(
WS_CONNINFO
 *
pwsc
) {

171 *
uri
 = 
	`pi_ws_uri
(
pwsc
);

173 
	`pi_log
(
E_DBG
,"Checkög uæ %s\n",
uri
);

174 if(
	`°∫ˇ£cmp
(
uri
,"/databases",10) == 0)

175  
TRUE
;

176 if(
	`°∫ˇ£cmp
(
uri
,"/server-info",12) == 0)

177  
TRUE
;

178 if(
	`°∫ˇ£cmp
(
uri
,"/content-codes",14) == 0)

179  
TRUE
;

180 if(
	`°∫ˇ£cmp
(
uri
,"/login",6) == 0)

181  
TRUE
;

182 if(
	`°∫ˇ£cmp
(
uri
,"/update",7) == 0)

183  
TRUE
;

184 if(
	`°∫ˇ£cmp
(
uri
,"/logout",7) == 0)

185  
TRUE
;

186 if(
	`°∫ˇ£cmp
(
uri
,"/activity",9) == 0)

187  
TRUE
;

189  
FALSE
;

190 
	}
}

196 
	$∂ugö_auth
(
WS_CONNINFO
 *
pwsc
, *
u£∫ame
, *
∑ssw‹d
) {

197 *
uri
 = 
	`pi_ws_uri
(
pwsc
);

200 if(
	`°∫ˇ£cmp
(
uri
,"/server-info",12) == 0)

201  
TRUE
;

202 if(
	`°∫ˇ£cmp
(
uri
,"/logout",7) == 0)

203  
TRUE
;

204 if(
	`°∫ˇ£cmp
(
uri
,"/databases/1/items/",19) == 0)

205  
TRUE
;

206 if(
	`°∫ˇ£cmp
(
uri
,"/activity",9) == 0)

207  
TRUE
;

209  
	`pi_ws_m©che§ﬁe
(
pwsc
,
u£∫ame
,
∑ssw‹d
,"user");

210 
	}
}

216 
	$out_dØp_˛ónup
(
PRIVINFO
 *
µi
) {

217 if(!
µi
)

220 if(
µi
->
ouçut_öfo
)

221 
	`‰ì
(
µi
->
ouçut_öfo
);

223 
	`‰ì
(
µi
);

224 
	}
}

226 *
	$_°r£p
(**
°rögp
, c⁄° *
dñim
) {

227 *
ªt
 = *
°rögp
;

228 i‡(
ªt
 =
NULL
) (NULL);

229 i‡((*
°rögp
 = 
	`°Ωbrk
(*°rögp, 
dñim
)Ë!
NULL
) {

230 *((*
°rögp
)++) = '\0';

232 (
ªt
);

233 
	}
}

250 
	$dØp_auth
(
WS_CONNINFO
 *
pwsc
, *
u£∫ame
, *
∑ssw‹d
) {

251 *
ªad∑ssw‹d
;

252 
ªsu…
;

254 
ªad∑ssw‹d
 = 
	`pi_c⁄f_Æloc_°rög
("gíîÆ","∑ssw‹d",
NULL
);

256 if(
∑ssw‹d
 =
NULL
) {

257 if((
ªad∑ssw‹d
 =
NULL
)||(
	`°æí
(readpassword) == 0)) {

258 
ªsu…
 = 
TRUE
;

260 
ªsu…
 = 
FALSE
;

263 if(
	`°rˇ£cmp
(
∑ssw‹d
,
ªad∑ssw‹d
)) {

264 
ªsu…
 = 
FALSE
;

266 
ªsu…
 = 
TRUE
;

270 if(
ªad∑ssw‹d
Ë
	`pi_c⁄f_di•o£_°rög
(readpassword);

271  
ªsu…
;

272 
	}
}

277 
	$∂ugö_h™dÀr
(
WS_CONNINFO
 *
pwsc
) {

278 *
°rög
, *
ßve
, *
tokí
;

279 
PRIVINFO
 *
µi
;

280 
ñemíts
;

281 
ödex
, 
∑π
;

282 
found
;

283 *
ödex_ªq
 = 
NULL
;

284 
l
,
h
;

285 *
±r
;

287 
	`pi_log
(
E_DBG
,"Getting uri...\n");

289 
°rög
 = 
	`pi_ws_uri
(
pwsc
);

290 
°rög
++;

292 
	`pi_log
(
E_DBG
,"MallocingÖrivinfo...\n");

293 
µi
 = (
PRIVINFO
 *)
	`mÆloc
((PRIVINFO));

294 if(
µi
) {

295 
	`mem£t
(
µi
,0,(
PRIVINFO
));

298 if(!
µi
) {

299 
	`pi_ws_ªtu∫îr‹
(
pwsc
,500,"MallocÉrror inÖlugin_handler");

303 
	`mem£t
((*)&
µi
->
dq
,0,(
DB_QUERY
));

305 
µi
->
em±y_°rögs
 = 
	`pi_c⁄f_gë_öt
("daap","empty_strings",0);

306 
µi
->
pwsc
 =Öwsc;

308 
	`pi_ws_addª•⁄£hódî
(
pwsc
,"Accept-Ranges","bytes");

309 
	`pi_ws_addª•⁄£hódî
(
pwsc
,"DAAP-Sîvî","fúeÊy/" 
VERSION
);

310 
	`pi_ws_addª•⁄£hódî
(
pwsc
,"Content-Type","application/x-dmap-tagged");

311 
	`pi_ws_addª•⁄£hódî
(
pwsc
,"Cache-Control","no-cache");

312 
	`pi_ws_addª•⁄£hódî
(
pwsc
,"Expires","-1");

314 if(
	`pi_ws_gëv¨
(
pwsc
,"session-id"))

315 
µi
->
£ssi⁄_id
 = 
	`©oi
(
	`pi_ws_gëv¨
(
pwsc
,"session-id"));

317 
µi
->
dq
.
off£t
 = 0;

318 
µi
->
dq
.
limô
 = 999999;

320 
l
=
h
=0;

321 if(
	`pi_ws_gëv¨
(
pwsc
,"index")) {

322 
ödex_ªq
 = 
	`pi_ws_gëv¨
(
pwsc
,"index");

323 
l
 = 
	`°πﬁ
(
ödex_ªq
,&
±r
,10);

325 if(
l
<0) {

326 
	`pi_log
(
E_LOG
,"Unsuµ‹ãd indexÑ™ge: %s\n",
ödex_ªq
);

327 } if(*
±r
 == 0) {

329 
µi
->
dq
.
off£t
 = 
l
;

330 
µi
->
dq
.
limô
 = 1;

331 } if(*
±r
 == '-') {

332 
µi
->
dq
.
off£t
 = 
l
;

333 if(*++
±r
 != '\0') {

334 
h
 = 
	`°πﬁ
(
±r
, &ptr, 10);

335 
µi
->
dq
.
limô
 = (
h
 - 
l
) + 1;

339 
	`pi_log
(
E_DBG
,"Index %s: off£à%d,Üimô %d\n",
ödex_ªq
,

340 
µi
->
dq
.
off£t
,µi->dq.
limô
);

344 if(
	`pi_ws_gëv¨
(
pwsc
,"query")) {

345 
µi
->
dq
.
fûãr_ty≥
 = 
FILTER_TYPE_APPLE
;

346 
µi
->
dq
.
fûãr
 = 
	`pi_ws_gëv¨
(
pwsc
,"query");

349 
	`pi_log
(
E_DBG
,"Tokenizing url\n");

350 (
µi
->
uri_cou¡
 < 10Ë&& (
tokí
=
	`°πok_r
(
°rög
,"/",&
ßve
))) {

351 
°rög
=
NULL
;

352 
µi
->
uri_£˘i⁄s
[µi->
uri_cou¡
++] = 
tokí
;

355 
ñemíts
 = (
dØp_uri_m≠
Ë/ (
PLUGIN_RESPONSE
);

356 
	`pi_log
(
E_DBG
,"Found %dÉÀmíts\n",
ñemíts
);

358 
ödex
 = 0;

359 
found
 = 0;

361 (!
found
Ë&& (
ödex
 < 
ñemíts
)) {

363 
	`pi_log
(
E_DBG
,"CheckögÑï⁄£ %d\n",
ödex
);

364 
∑π
=0;

365 
∑π
 < 10) {

366 if((
dØp_uri_m≠
[
ödex
].
uri
[
∑π
]Ë&& (!
µi
->
uri_£˘i⁄s
[part]))

368 if((
µi
->
uri_£˘i⁄s
[
∑π
]Ë&& (!
dØp_uri_m≠
[
ödex
].
uri
[part]))

371 if((
dØp_uri_m≠
[
ödex
].
uri
[
∑π
]) &&

372 (
	`°rcmp
(
dØp_uri_m≠
[
ödex
].
uri
[
∑π
],"*") != 0)) {

373 if(
	`°rcmp
(
dØp_uri_m≠
[
ödex
].
uri
[
∑π
],

374 
µi
->
uri_£˘i⁄s
[
∑π
])!= 0)

377 
∑π
++;

380 if(
∑π
 == 10) {

381 
found
 = 1;

382 
	`pi_log
(
E_DBG
,"Found it! Index: %d\n",
ödex
);

384 
ödex
++;

388 if(
found
) {

389 
dØp_uri_m≠
[
ödex
].
	`di•©ch
(
pwsc
, 
µi
);

390 
	`out_dØp_˛ónup
(
µi
);

394 
	`pi_ws_ªtu∫îr‹
(
pwsc
,400,"BadÑequest");

395 
	`pi_ws_wûl_˛o£
(
pwsc
);

396 
	`out_dØp_˛ónup
(
µi
);

398 
	}
}

408 
	$out_dØp_ouçut_°¨t
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
, 
c⁄ã¡_Àngth
) {

409 
OUTPUT_INFO
 *
poi
;

411 
poi
=(
OUTPUT_INFO
*)
	`ˇŒoc
(1,(OUTPUT_INFO));

412 if(!
poi
) {

413 
	`pi_log
(
E_LOG
,"MallocÉrror in out_daap_ouput_start\n");

417 
µi
->
ouçut_öfo
 = (*Ë
poi
;

418 
poi
->
dm≠_ª•⁄£_Àngth
 = 
c⁄ã¡_Àngth
;

420 if(
	`pi_ws_gëv¨
(
pwsc
,"output")) {

421 if(
	`°rˇ£cmp
(
	`pi_ws_gëv¨
(
pwsc
,"output"),"readable") == 0)

422 
poi
->
ªadabÀ
=1;

424 
poi
->
xml_ouçut
=1;

425 
	`pi_ws_addª•⁄£hódî
(
pwsc
,"Content-Type","text/xml");

426 
	`pi_ws_addª•⁄£hódî
(
pwsc
,"Connection","Close");

427 
	`pi_ws_wûl_˛o£
(
pwsc
);

428 
	`pi_ws_wrôefd
(
pwsc
,"HTTP/1.1 200 OK\r\n");

429 
	`pi_ws_emôhódîs
(
pwsc
);

430 
	`pi_ws_wrôefd
(
pwsc
,"<?xml version=\"1.0\"Éncoding=\"UTF-8\" standalone=\"yes\"?>");

431 if(
poi
->
ªadabÀ
)

432 
	`pi_ws_wrôefd
(
pwsc
,"\n");

436 
	`pi_ws_addª•⁄£hódî
(
pwsc
,"Content-Length","%d",

437 
poi
->
dm≠_ª•⁄£_Àngth
);

438 
	`pi_ws_wrôefd
(
pwsc
,"HTTP/1.1 200 OK\r\n");

439 
	`pi_ws_emôhódîs
(
pwsc
);

443 
	}
}

456 
	$out_dØp_ouçut_wrôe
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
, *
block
, 
Àn
) {

457 
OUTPUT_INFO
 *
poi
=(
µi
->
ouçut_öfo
);

458 
ªsu…
;

460 if(
poi
->
xml_ouçut
)

461  
	`out_dØp_ouçut_xml_wrôe
(
pwsc
, 
µi
, 
block
, 
Àn
);

463 
ªsu…
=
	`pi_ws_wrôebö¨y
(
pwsc
,(*)
block
,
Àn
);

465 if(
ªsu…
 !
Àn
)

469 
	}
}

480 
	$out_dØp_ouçut_xml_wrôe
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
, *
block
, 
Àn
) {

481 
OUTPUT_INFO
 *
poi
 = 
µi
->
ouçut_öfo
;

482 *
cuºít
=
block
;

483 
block_èg
[5];

484 
block_Àn
;

485 
Àn_À·
;

486 
DAAP_ITEMS
 *
pôem
;

487 *
d©a
;

488 
ivÆue
;

489 
lvÆue
;

490 
block_d⁄e
=1;

491 
°ack_±r
;

492 *
ícoded_°rög
;

494 
cuºít
 < (
block
 + 
Àn
)) {

495 
block_d⁄e
=1;

496 
Àn_À·
=()((
block
+
Àn
Ë- 
cuºít
);

497 if(
Àn_À·
 < 8) {

498 
	`pi_log
(
E_FATAL
,"Badly f‹m©ãd dm≠ block - føg size: %d",
Àn_À·
);

502 
	`mem˝y
(
block_èg
,
cuºít
,4);

503 
block_èg
[4] = '\0';

504 
block_Àn
 = 
cuºít
[4] << 24 | current[5] << 16 |

505 
cuºít
[6] << 8 | current[7];

506 
d©a
 = &
cuºít
[8];

508 if(
	`°∫cmp
(
block_èg
,"abro",4) ==0 ) {

510 
poi
->
brow£_ª•⁄£
=1;

514 
	`pi_log
(
E_SPAM
,"%*†%s: %d\n",
poi
->
°ack_height
,"",
block_èg
,
block_Àn
);

515 
pôem
=
	`out_dØp_xml_lookup_èg
(
block_èg
);

516 if(
poi
->
ªadabÀ
)

517 
	`pi_ws_wrôefd
(
pwsc
,"%*s",
poi
->
°ack_height
,"");

518 
	`pi_ws_wrôefd
(
pwsc
,"<%s>",
pôem
->
des¸ùti⁄
);

519 
pôem
->
ty≥
) {

521 if(
block_Àn
 != 1) {

522 
	`pi_log
(
E_FATAL
,"èg %s, sizê%d, w™ãd 1\n",
block_èg
, 
block_Àn
);

524 
	`pi_ws_wrôefd
(
pwsc
,"%d",*((*)
d©a
));

528 if(
block_Àn
 != 1) {

529 
	`pi_log
(
E_FATAL
,"èg %s, sizê%d, w™ãd 1\n",
block_èg
, 
block_Àn
);

531 
	`pi_ws_wrôefd
(
pwsc
,"%ud",*((*)
d©a
));

535 if(
block_Àn
 != 2) {

536 
	`pi_log
(
E_FATAL
,"èg %s, sizê%d, w™ãd 2\n",
block_èg
, 
block_Àn
);

539 
ivÆue
 = 
d©a
[0] << 8 | data[1];

540 
	`pi_ws_wrôefd
(
pwsc
,"%d",
ivÆue
);

545 if(
block_Àn
 != 4) {

546 
	`pi_log
(
E_FATAL
,"èg %s, sizê%d, w™ãd 4\n",
block_èg
, 
block_Àn
);

548 
ivÆue
 = 
d©a
[0] << 24 |

549 
d©a
[1] << 16 |

550 
d©a
[2] << 8 |

551 
d©a
[3];

552 
	`pi_ws_wrôefd
(
pwsc
,"%d",
ivÆue
);

555 if(
block_Àn
 != 8) {

556 
	`pi_log
(
E_FATAL
,"èg %s, sizê%d, w™ãd 8\n",
block_èg
, 
block_Àn
);

559 
ivÆue
 = 
d©a
[0] << 24 |

560 
d©a
[1] << 16 |

561 
d©a
[2] << 8 |

562 
d©a
[3];

563 
lvÆue
=
ivÆue
;

564 
ivÆue
 = 
d©a
[4] << 24 |

565 
d©a
[5] << 16 |

566 
d©a
[6] << 8 |

567 
d©a
[7];

568 
lvÆue
 = (lvÆuê<< 32Ë| 
ivÆue
;

569 
	`pi_ws_wrôefd
(
pwsc
,"%Œ",
ivÆue
);

572 if(
block_Àn
) {

573 
ícoded_°rög
=
	`out_dØp_xml_ícode
((*)
d©a
,
block_Àn
);

574 
	`pi_ws_wrôefd
(
pwsc
,"%s",
ícoded_°rög
);

575 
	`‰ì
(
ícoded_°rög
);

579 if(
block_Àn
 != 4) {

580 
	`pi_log
(
E_FATAL
,"èg %s, sizê%d, w™ãd 4\n",
block_èg
, 
block_Àn
);

583 
ivÆue
=
d©a
[0] << 8 | data[1];

584 
	`pi_ws_wrôefd
(
pwsc
,"%d.%d.%d",
ivÆue
,
d©a
[2],data[3]);

588 if((
poi
->
brow£_ª•⁄£
)&&(
	`°rcmp
(
block_èg
,"mlit") ==0)) {

589 if(
block_Àn
) {

590 
ícoded_°rög
=
	`out_dØp_xml_ícode
((*)
d©a
,
block_Àn
);

591 
	`pi_ws_wrôefd
(
pwsc
,"%s",
ícoded_°rög
);

592 
	`‰ì
(
ícoded_°rög
);

600 
poi
->
°ack
[poi->
°ack_height
].
byãs_À·
=
block_Àn
 + 8;

601 
	`mem˝y
(
poi
->
°ack
[poi->
°ack_height
].
èg
,
block_èg
,5);

602 
poi
->
°ack_height
++;

603 if(
poi
->
°ack_height
 == 10) {

604 
	`pi_log
(
E_FATAL
,"Stack overflow\n");

606 
block_d⁄e
=0;

611 
	`pi_log
(
E_FATAL
,"Bad dmapÅype: %d, %s\n",

612 
pôem
->
ty≥
,Öôem->
des¸ùti⁄
);

616 if(
block_d⁄e
) {

617 
	`pi_ws_wrôefd
(
pwsc
,"</%s>",
pôem
->
des¸ùti⁄
);

618 if(
poi
->
ªadabÀ
)

619 
	`pi_ws_wrôefd
(
pwsc
,"\n");

621 
block_Àn
 += 8;

624 
block_Àn
 = 8;

625 if(
poi
->
ªadabÀ
)

626 
	`pi_ws_wrôefd
(
pwsc
,"\n");

629 
cuºít
 +
block_Àn
;

631 if(
poi
->
°ack_height
) {

632 
°ack_±r
=
poi
->
°ack_height
;

633 
°ack_±r
--) {

634 
poi
->
°ack
[
°ack_±r
].
byãs_À·
 -
block_Àn
;

635 if(
poi
->
°ack
[
°ack_±r
].
byãs_À·
 < 0) {

636 
	`pi_log
(
E_FATAL
,"negative container\n");

639 if(!
poi
->
°ack
[
°ack_±r
].
byãs_À·
) {

640 
poi
->
°ack_height
--;

641 
pôem
=
	`out_dØp_xml_lookup_èg
(
poi
->
°ack
[
°ack_±r
].
èg
);

642 if(
poi
->
ªadabÀ
)

643 
	`pi_ws_wrôefd
(
pwsc
,"%*s",
poi
->
°ack_height
,"");

644 
	`pi_ws_wrôefd
(
pwsc
,"</%s>",
pôem
->
des¸ùti⁄
);

645 if(
poi
->
ªadabÀ
)

646 
	`pi_ws_wrôefd
(
pwsc
,"\n");

653 
	}
}

663 
	$out_dØp_ouçut_íd
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

664 
OUTPUT_INFO
 *
poi
 = 
µi
->
ouçut_öfo
;

666 if((
poi
Ë&& (poi->
xml_ouçut
Ë&& (poi->
°ack_height
)) {

667 
	`pi_log
(
E_LOG
,"Badly formed xml -- still stack\n");

670 
	`pi_c⁄fig_£t_°©us
(
pwsc
,
µi
->
£ssi⁄_id
,
NULL
);

673 
	}
}

676 
DAAP_ITEMS
 *
	$out_dØp_xml_lookup_èg
(*
èg
) {

677 
DAAP_ITEMS
 *
pôem
;

679 
pôem
=
ègli°
;

680 (
pôem
->
èg
Ë&& (
	`°∫cmp
(tag,pitem->tag,4))) {

681 
pôem
++;

684 if(!
pôem
->
èg
)

685 
	`pi_log
(
E_FATAL
,"Unknow¿dØ∞èg: %c%c%c%c\n",
èg
[0],tag[1],tag[2],tag[3]);

687  
pôem
;

688 
	}
}

693 *
	$out_dØp_xml_ícode
(*
‹igöÆ
, 
Àn
) {

694 *
√w
;

695 *
s
, *
d
;

696 
de°size
;

697 
åuñí
;

700 if(
Àn
) {

701 
åuñí
=
Àn
;

703 
åuñí
=(Ë
	`°æí
(
‹igöÆ
);

706 
de°size
 = 6*
åuñí
+1;

707 
√w
=(*)
	`mÆloc
(
de°size
);

708 if(!
√w
Ë 
NULL
;

710 
	`mem£t
(
√w
,0x00,
de°size
);

712 
s
=
‹igöÆ
;

713 
d
=
√w
;

715 
s
 < (
‹igöÆ
+
åuñí
)) {

716 *
s
) {

718 
	`°rˇt
(
d
,"&gt;");

719 
d
 += 4;

720 
s
++;

723 
	`°rˇt
(
d
,"&lt;");

724 
d
 += 4;

725 
s
++;

728 
	`°rˇt
(
d
,"&quot;");

729 
d
 += 6;

730 
s
++;

733 
	`°rˇt
(
d
,"&apos;");

734 
d
 += 6;

735 
s
++;

738 
	`°rˇt
(
d
,"&amp;");

739 
d
 += 5;

740 
s
++;

743 *
d
++ = *
s
++;

747  
√w
;

748 
	}
}

750 
	$out_dØp_°ªam
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

752 
	`pi_°ªam
(
pwsc
, 
µi
->
uri_£˘i⁄s
[3]);

753 
	}
}

758 
	$out_dØp_add∂ayli°ôems
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

759 
∂ayli°_ª•⁄£
[20];

760 *
cuºít
;

761 *
ãmp°rög
;

762 *
tokí
;

763 
∂ayli°_id
;

765 
∂ayli°_id
 = 
	`©oi
(
µi
->
uri_£˘i⁄s
[3]);

767 if(!
	`pi_ws_gëv¨
(
pwsc
,"dmap.itemid")) {

768 
	`pi_log
(
E_LOG
,"AttemptÅoáddÖlaylist item w/o dmap.itemid\n");

769 
	`out_dØp_îr‹
(
pwsc
,
µi
,"MAPI","No item id specified (dmap.itemid)");

773 
ãmp°rög
=
	`°rdup
(
	`pi_ws_gëv¨
(
pwsc
,"dmap.itemid"));

774 
cuºít
=(*)
ãmp°rög
;

776 (
tokí
=
	`_°r£p
((**)(*)&
cuºít
,","))) {

777 if(
tokí
) {

779 
	`pi_db_add_∂ayli°_ôem
(
NULL
,
∂ayli°_id
,
	`©oi
(
tokí
));

783 
	`‰ì
(
ãmp°rög
);

786 
cuºít
 = 
∂ayli°_ª•⁄£
;

787 
cuºít
 +
	`dm≠_add_c⁄èöî
(current,"MAPI",12);

788 
cuºít
 +
	`dm≠_add_öt
(current,"mstt",200);

790 
	`out_dØp_ouçut_°¨t
(
pwsc
,
µi
,20);

791 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
∂ayli°_ª•⁄£
,20);

792 
	`out_dØp_ouçut_íd
(
pwsc
,
µi
);

794 
	`pi_ws_wûl_˛o£
(
pwsc
);

797 
	}
}

802 
	$out_dØp_dñëïœyli°
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

803 
∂ayli°_ª•⁄£
[20];

804 *
cuºít
;

806 if(!
	`pi_ws_gëv¨
(
pwsc
,"dmap.itemid")) {

807 
	`pi_log
(
E_LOG
,"AttemptÅo deleteÖlaylist w/o dmap.itemid\n");

808 
	`out_dØp_îr‹
(
pwsc
,
µi
,"MDPR","NoÖlaylist id specified");

813 
	`pi_db_dñëe_∂ayli°
(
NULL
,
	`©oi
(
	`pi_ws_gëv¨
(
pwsc
,"dmap.itemid")));

816 
cuºít
 = 
∂ayli°_ª•⁄£
;

817 
cuºít
 +
	`dm≠_add_c⁄èöî
(current,"MDPR",12);

818 
cuºít
 +
	`dm≠_add_öt
(current,"mstt",200);

820 
	`out_dØp_ouçut_°¨t
(
pwsc
,
µi
,20);

821 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
∂ayli°_ª•⁄£
,20);

822 
	`out_dØp_ouçut_íd
(
pwsc
,
µi
);

824 
	`pi_ws_wûl_˛o£
(
pwsc
);

827 
	}
}

832 
	$out_dØp_dñëïœyli°ôems
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

833 
∂ayli°_ª•⁄£
[20];

834 *
cuºít
;

835 *
ãmp°rög
;

836 *
tokí
;

837 
∂ayli°_id
;

839 if(!
	`pi_ws_gëv¨
(
pwsc
,"dmap.itemid")) {

840 
	`pi_log
(
E_LOG
,"DeleteÖlaylist item w/o dmap.itemid\n");

841 
	`out_dØp_îr‹
(
pwsc
,
µi
,"MDPI","NoÖlaylist item specified");

845 
∂ayli°_id
 = 
	`©oi
(
µi
->
uri_£˘i⁄s
[3]);

847 
ãmp°rög
=
	`°rdup
(
	`pi_ws_gëv¨
(
pwsc
,"dmap.itemid"));

848 
cuºít
=(*)
ãmp°rög
;

851 (
tokí
=
	`_°r£p
((**)(*)&
cuºít
,","))) {

852 if(
tokí
) {

854 
	`pi_db_dñëe_∂ayli°_ôem
(
NULL
,
∂ayli°_id
,
	`©oi
(
tokí
));

858 
	`‰ì
(
ãmp°rög
);

861 
cuºít
 = 
∂ayli°_ª•⁄£
;

862 
cuºít
 +
	`dm≠_add_c⁄èöî
(current,"MDPI",12);

863 
cuºít
 +
	`dm≠_add_öt
(current,"mstt",200);

865 
	`out_dØp_ouçut_°¨t
(
pwsc
,
µi
,20);

866 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
∂ayli°_ª•⁄£
,20);

867 
	`out_dØp_ouçut_íd
(
pwsc
,
µi
);

869 
	`pi_ws_wûl_˛o£
(
pwsc
);

872 
	}
}

877 
	$out_dØp_add∂ayli°
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

878 
∂ayli°_ª•⁄£
[32];

879 *
cuºít
=
∂ayli°_ª•⁄£
;

880 *
«me
, *
quîy
;

881 
ty≥
;

882 
ªtvÆ
, 
∂ayli°id
;

883 *
e°rög
 = 
NULL
;

885 if((!
	`pi_ws_gëv¨
(
pwsc
,"org.mt-daapd.playlist-type")) ||

886 (!
	`pi_ws_gëv¨
(
pwsc
,"dmap.itemname"))) {

887 
	`pi_log
(
E_LOG
,"attemptÅoáddÖlaylist with invalidÅype\n");

888 
	`out_dØp_îr‹
(
pwsc
,
µi
,"MAPR","badÖlaylist info specified");

892 
ty≥
=
	`©oi
(
	`pi_ws_gëv¨
(
pwsc
,"org.mt-daapd.playlist-type"));

893 
«me
=
	`pi_ws_gëv¨
(
pwsc
,"dmap.itemname");

894 
quîy
=
	`pi_ws_gëv¨
(
pwsc
,"org.mt-daapd.smart-playlist-spec");

896 
ªtvÆ
=
	`pi_db_add_∂ayli°
(&
e°rög
,
«me
,
ty≥
,
quîy
,
NULL
,0,&
∂ayli°id
);

897 if(
ªtvÆ
) {

898 
	`out_dØp_îr‹
(
pwsc
,
µi
,"MAPR",
e°rög
);

899 
	`pi_log
(
E_LOG
,"îr‹áddögÖœyli° %s: %s\n",
«me
,
e°rög
);

900 
	`‰ì
(
e°rög
);

905 
cuºít
 +
	`dm≠_add_c⁄èöî
(current,"MAPR",24);

906 
cuºít
 +
	`dm≠_add_öt
(current,"mstt",200);

907 
cuºít
 +
	`dm≠_add_öt
(cuºít,"miid",
∂ayli°id
);

909 
	`out_dØp_ouçut_°¨t
(
pwsc
,
µi
,32);

910 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
∂ayli°_ª•⁄£
,32);

911 
	`out_dØp_ouçut_íd
(
pwsc
,
µi
);

913 
	`pi_ws_wûl_˛o£
(
pwsc
);

915 
	}
}

920 
	$out_dØp_edô∂ayli°
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

921 
edô_ª•⁄£
[20];

922 *
cuºít
 = 
edô_ª•⁄£
;

923 *
≥
 = 
NULL
;

924 *
«me
, *
quîy
;

925 
id
;

927 
ªtvÆ
;

929 if(!
	`pi_ws_gëv¨
(
pwsc
,"dmap.itemid")) {

930 
	`pi_log
(
E_LOG
,"Missing itemid onÖlaylistÉdit");

931 
	`out_dØp_îr‹
(
pwsc
,
µi
,"MEPR","No itemid specified");

935 
«me
=
	`pi_ws_gëv¨
(
pwsc
,"dmap.itemname");

936 
quîy
=
	`pi_ws_gëv¨
(
pwsc
,"org.mt-daapd.smart-playlist-spec");

937 
id
=
	`©oi
(
	`pi_ws_gëv¨
(
pwsc
,"dmap.itemid"));

940 
ªtvÆ
=
	`pi_db_edô_∂ayli°
(&
≥
,
id
,
«me
,
quîy
);

941 if(
ªtvÆ
) {

942 
	`pi_log
(
E_LOG
,"errorÉditingÖlaylist.\n");

943 
	`out_dØp_îr‹
(
pwsc
,
µi
,"MEPR",
≥
);

944 if(
≥
Ë
	`‰ì
(pe);

948 
cuºít
 +
	`dm≠_add_c⁄èöî
(current,"MEPR",12);

949 
cuºít
 +
	`dm≠_add_öt
(current,"mstt",200);

951 
	`out_dØp_ouçut_°¨t
(
pwsc
,
µi
,20);

952 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
edô_ª•⁄£
,20);

953 
	`out_dØp_ouçut_íd
(
pwsc
,
µi
);

955 
	`pi_ws_wûl_˛o£
(
pwsc
);

957 
	}
}

963 
	$out_dØp_∂ayli°ôems
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

964 
ôems_ª•⁄£
[61];

965 *
cuºít
=
ôems_ª•⁄£
;

966 
s⁄g_cou¡
;

967 
li°_Àngth
;

968 *
block
;

969 *
≥
 = 
NULL
;

970 
mtco
;

972 if(
	`pi_ws_gëv¨
(
pwsc
,"meta")) {

973 
µi
->
mëa
 = 
	`dØp_ícode_mëa
(
	`pi_ws_gëv¨
(
pwsc
,"meta"));

975 
µi
->
mëa
 = ((1Œ << 
mëaIãmId
) |

976 (1Œ << 
mëaIãmName
) |

977 (1Œ << 
mëaIãmKöd
) |

978 (1Œ << 
mëaC⁄èöîIãmId
) |

979 (1Œ << 
mëaP¨ítC⁄èöîId
));

982 
µi
->
dq
.
quîy_ty≥
 = 
QUERY_TYPE_ITEMS
;

983 
µi
->
dq
.
∂ayli°_id
 = 
	`©oi
’pi->
uri_£˘i⁄s
[3]);

985 if(
	`pi_db_íum_°¨t
(&
≥
,&
µi
->
dq
)) {

986 
	`pi_log
(
E_LOG
,"CouldÇŸ sèπÉnum: %s\n",
≥
);

987 
	`out_dØp_îr‹
(
pwsc
,
µi
,"≠so",
≥
);

988 if(
≥
Ë
	`‰ì
(pe);

992 if(
	`dØp_íum_size
(&
≥
,
µi
,&
s⁄g_cou¡
,&
li°_Àngth
)) {

993 
	`pi_log
(
E_LOG
,"CouldÇŸÉnum size: %s\n",
≥
);

994 
	`out_dØp_îr‹
(
pwsc
,
µi
,"≠so",
≥
);

995 if(
≥
Ë
	`‰ì
(pe);

999 
	`pi_log
(
E_DBG
,"IãmÉnum: gŸ %d s⁄gs, dm≠ size: %d\n",
s⁄g_cou¡
,
li°_Àngth
);

1001 
mtco
 = 
s⁄g_cou¡
;

1002 if(
µi
->
dq
.
off£t
 ||Öpi->dq.
limô
)

1003 
mtco
 = 
µi
->
dq
.
tŸÆcou¡
;

1005 
cuºít
 +
	`dm≠_add_c⁄èöî
(cuºít,"≠so",
li°_Àngth
 + 53);

1006 
cuºít
 +
	`dm≠_add_öt
(current,"mstt",200);

1007 
cuºít
 +
	`dm≠_add_ch¨
(current,"muty",0);

1008 
cuºít
 +
	`dm≠_add_öt
(cuºít,"mtco",
mtco
);

1009 
cuºít
 +
	`dm≠_add_öt
(cuºít,"mrco",
s⁄g_cou¡
);

1010 
cuºít
 +
	`dm≠_add_c⁄èöî
(cuºít,"ml˛",
li°_Àngth
);

1012 
	`out_dØp_ouçut_°¨t
(
pwsc
,
µi
,61+
li°_Àngth
);

1013 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
ôems_ª•⁄£
,61);

1016 (
	`dØp_íum_„tch
(
NULL
,
µi
,&
li°_Àngth
,&
block
)==0) &&

1017 (
li°_Àngth
)) {

1018 
	`pi_log
(
E_SPAM
,"GŸ block o‡sizê%d\n",
li°_Àngth
);

1019 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
block
,
li°_Àngth
);

1020 
	`‰ì
(
block
);

1023 
	`pi_log
(
E_DBG
,"DoneÉnumerating.\n");

1025 
	`pi_db_íum_íd
(
NULL
);

1026 
	`pi_db_íum_di•o£
(
NULL
,&
µi
->
dq
);

1028 
	`out_dØp_ouçut_íd
(
pwsc
,
µi
);

1030 
	}
}

1032 
	$out_dØp_brow£
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

1033 
brow£_ª•⁄£
[52];

1034 *
cuºít
=
brow£_ª•⁄£
;

1035 
ôem_cou¡
;

1036 
li°_Àngth
;

1037 *
block
;

1038 *
ª•⁄£_ty≥
;

1039 
which_fõld
=5;

1040 *
≥
 = 
NULL
;

1041 
mtco
;

1043 if(
	`°rˇ£cmp
(
µi
->
uri_£˘i⁄s
[2],"browse") == 0) {

1044 
which_fõld
 = 3;

1047 
	`pi_log
(
E_DBG
,"Browsing by %s (field %d)\n",

1048 
µi
->
uri_£˘i⁄s
[
which_fõld
],which_field);

1050 
µi
->
dq
.
quîy_ty≥
 = 
QUERY_TYPE_DISTINCT
;

1051 
µi
->
dq
.
di°ö˘_fõld
 =Öpi->
uri_£˘i⁄s
[
which_fõld
];

1054 if(!
	`°rcmp
(
µi
->
uri_£˘i⁄s
[
which_fõld
],"artists")) {

1055 
ª•⁄£_ty≥
 = "abar";

1056 
µi
->
dq
.
di°ö˘_fõld
 = "artist";

1057 } if(!
	`°rcmp
(
µi
->
uri_£˘i⁄s
[
which_fõld
],"genres")) {

1058 
ª•⁄£_ty≥
 = "abgn";

1059 
µi
->
dq
.
di°ö˘_fõld
 = "genre";

1060 } if(!
	`°rcmp
(
µi
->
uri_£˘i⁄s
[
which_fõld
],"albums")) {

1061 
ª•⁄£_ty≥
 = "abal";

1062 
µi
->
dq
.
di°ö˘_fõld
 = "album";

1063 } if(!
	`°rcmp
(
µi
->
uri_£˘i⁄s
[
which_fõld
],"composers")) {

1064 
ª•⁄£_ty≥
 = "abcp";

1065 
µi
->
dq
.
di°ö˘_fõld
 = "composer";

1067 
	`pi_log
(
E_WARN
,"InvÆid brow£Ñeque°Åy≥ %s\n",
µi
->
uri_£˘i⁄s
[3]);

1068 
	`out_dØp_îr‹
(
pwsc
,
µi
,"abro","Invalid browseÅype");

1069 
	`pi_c⁄fig_£t_°©us
(
pwsc
,
µi
->
£ssi⁄_id
,
NULL
);

1073 if(
	`pi_db_íum_°¨t
(&
≥
,&
µi
->
dq
)) {

1074 
	`pi_log
(
E_LOG
,"CouldÇŸ sèπÉnum: %s\n",
≥
);

1075 
	`out_dØp_îr‹
(
pwsc
,
µi
,"abro",
≥
);

1076 if(
≥
Ë
	`‰ì
(pe);

1080 
	`pi_log
(
E_DBG
,"GettingÉnum size.\n");

1083 
	`dØp_íum_size
(
NULL
,
µi
,&
ôem_cou¡
,&
li°_Àngth
);

1085 
	`pi_log
(
E_DBG
,"ItemÉnum: got %d items, dmap size: %d\n",

1086 
ôem_cou¡
,
li°_Àngth
);

1088 
mtco
 = 
ôem_cou¡
;

1089 if((
µi
->
dq
.
off£t
Ë|| (µi->dq.
limô
))

1090 
mtco
 = 
µi
->
dq
.
tŸÆcou¡
;

1092 
cuºít
 +
	`dm≠_add_c⁄èöî
(cuºít,"abro",
li°_Àngth
 + 44);

1093 
cuºít
 +
	`dm≠_add_öt
(current,"mstt",200);

1094 
cuºít
 +
	`dm≠_add_öt
(cuºít,"mtco",
mtco
);

1095 
cuºít
 +
	`dm≠_add_öt
(cuºít,"mrco",
ôem_cou¡
);

1096 
cuºít
 +
	`dm≠_add_c⁄èöî
(cuºít,
ª•⁄£_ty≥
,
li°_Àngth
);

1098 
	`out_dØp_ouçut_°¨t
(
pwsc
,
µi
,52+
li°_Àngth
);

1099 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
brow£_ª•⁄£
,52);

1101 (
	`dØp_íum_„tch
(
NULL
,
µi
,&
li°_Àngth
,&
block
)==0) &&

1102 (
li°_Àngth
))

1104 
	`pi_log
(
E_SPAM
,"GŸ block o‡sizê%d\n",
li°_Àngth
);

1105 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
block
,
li°_Àngth
);

1106 
	`‰ì
(
block
);

1109 
	`pi_log
(
E_DBG
,"DoneÉnumerating\n");

1111 
	`pi_db_íum_íd
(
NULL
);

1112 
	`pi_db_íum_di•o£
(
NULL
,&
µi
->
dq
);

1114 
	`out_dØp_ouçut_íd
(
pwsc
,
µi
);

1116 
	}
}

1118 
	$out_dØp_∂ayli°s
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

1119 
∂ayli°_ª•⁄£
[61];

1120 *
cuºít
=
∂ayli°_ª•⁄£
;

1121 
∂_cou¡
;

1122 
li°_Àngth
;

1123 *
block
;

1124 *
≥
 = 
NULL
;

1125 
mtco
;

1128 if(
	`pi_ws_gëv¨
(
pwsc
,"meta")) {

1129 
µi
->
mëa
 = 
	`dØp_ícode_mëa
(
	`pi_ws_gëv¨
(
pwsc
,"meta"));

1131 
µi
->
mëa
 = ((1Œ << 
mëaIãmId
) |

1132 (1Œ << 
mëaIãmName
) |

1133 (1Œ << 
mëaPîsi°ítId
) |

1134 (1Œ << 
mëaItu√sSm¨tPœyli°
));

1138 
µi
->
dq
.
quîy_ty≥
 = 
QUERY_TYPE_PLAYLISTS
;

1140 if(
	`pi_db_íum_°¨t
(&
≥
,&
µi
->
dq
)) {

1141 
	`pi_log
(
E_LOG
,"CouldÇŸ sèπÉnum: %s\n",
≥
);

1142 
	`out_dØp_îr‹
(
pwsc
,
µi
,"≠ly",
≥
);

1143 if(
≥
Ë
	`‰ì
(pe);

1147 if(
	`dØp_íum_size
(
NULL
,
µi
,&
∂_cou¡
,&
li°_Àngth
)) {

1148 
	`pi_log
(
E_LOG
,"îr‹ i¿íumî©ög size: %s\n",
≥
);

1149 
	`out_dØp_îr‹
(
pwsc
,
µi
,"≠ly",
≥
);

1150 if(
≥
Ë
	`‰ì
(pe);

1154 
	`pi_log
(
E_DBG
,"IãmÉnum: gŸ %dÖœyli°s, dm≠ size: %d\n",
∂_cou¡
,
li°_Àngth
);

1156 
mtco
 = 
∂_cou¡
;

1157 if((
µi
->
dq
.
off£t
Ë|| (µi->dq.
limô
))

1158 
mtco
 = 
µi
->
dq
.
tŸÆcou¡
;

1160 
cuºít
 +
	`dm≠_add_c⁄èöî
(cuºít,"≠ly",
li°_Àngth
 + 53);

1161 
cuºít
 +
	`dm≠_add_öt
(current,"mstt",200);

1162 
cuºít
 +
	`dm≠_add_ch¨
(current,"muty",0);

1163 
cuºít
 +
	`dm≠_add_öt
(cuºít,"mtco",
mtco
);

1164 
cuºít
 +
	`dm≠_add_öt
(cuºít,"mrco",
∂_cou¡
);

1165 
cuºít
 +
	`dm≠_add_c⁄èöî
(cuºít,"ml˛",
li°_Àngth
);

1167 
	`out_dØp_ouçut_°¨t
(
pwsc
,
µi
,61+
li°_Àngth
);

1168 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
∂ayli°_ª•⁄£
,61);

1171 (
	`dØp_íum_„tch
(
NULL
,
µi
,&
li°_Àngth
,&
block
)==0) &&

1172 (
li°_Àngth
))

1174 
	`pi_log
(
E_SPAM
,"GŸ block o‡sizê%d\n",
li°_Àngth
);

1175 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
block
,
li°_Àngth
);

1176 
	`‰ì
(
block
);

1179 
	`pi_log
(
E_DBG
,"DoneÉnumerating.\n");

1181 
	`pi_db_íum_íd
(
NULL
);

1182 
	`pi_db_íum_di•o£
(
NULL
,&
µi
->
dq
);

1184 
	`out_dØp_ouçut_íd
(
pwsc
,
µi
);

1186 
	}
}

1188 
	$out_dØp_ôems
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

1189 
ôems_ª•⁄£
[61];

1190 *
cuºít
=
ôems_ª•⁄£
;

1191 
s⁄g_cou¡
;

1192 
li°_Àngth
;

1193 *
block
;

1194 *
≥
 = 
NULL
;

1195 
mtco
;

1197 if(
	`pi_ws_gëv¨
(
pwsc
,"meta")) {

1198 
µi
->
mëa
 = 
	`dØp_ícode_mëa
(
	`pi_ws_gëv¨
(
pwsc
,"meta"));

1200 
µi
->
mëa
 = (
MëaFõld_t
) -1ll;

1203 
µi
->
dq
.
quîy_ty≥
 = 
QUERY_TYPE_ITEMS
;

1205 if(
	`pi_db_íum_°¨t
(&
≥
,&
µi
->
dq
)) {

1206 
	`pi_log
(
E_LOG
,"CouldÇŸ sèπÉnum: %s\n",
≥
);

1207 
	`out_dØp_îr‹
(
pwsc
,
µi
,"adbs",
≥
);

1208 if(
≥
Ë
	`‰ì
(pe);

1213 if(
	`dØp_íum_size
(&
≥
,
µi
,&
s⁄g_cou¡
,&
li°_Àngth
)) {

1214 
	`pi_log
(
E_LOG
,"Eº‹ gëtög dm≠ size: %s\n",
≥
);

1215 
	`out_dØp_îr‹
(
pwsc
,
µi
,"adbs",
≥
);

1216 if(
≥
Ë
	`‰ì
(pe);

1220 
	`pi_log
(
E_DBG
,"IãmÉnum: gŸ %d s⁄gs, dm≠ size: %d\n",
s⁄g_cou¡
,

1221 
li°_Àngth
);

1223 
mtco
 = 
s⁄g_cou¡
;

1224 if((
µi
->
dq
.
off£t
Ë|| (µi->dq.
limô
))

1225 
mtco
 = 
µi
->
dq
.
tŸÆcou¡
;

1227 
cuºít
 +
	`dm≠_add_c⁄èöî
(cuºít,"adbs",
li°_Àngth
 + 53);

1228 
cuºít
 +
	`dm≠_add_öt
(current,"mstt",200);

1229 
cuºít
 +
	`dm≠_add_ch¨
(current,"muty",0);

1230 
cuºít
 +
	`dm≠_add_öt
(cuºít,"mtco",
mtco
);

1231 
cuºít
 +
	`dm≠_add_öt
(cuºít,"mrco",
s⁄g_cou¡
);

1232 
cuºít
 +
	`dm≠_add_c⁄èöî
(cuºít,"ml˛",
li°_Àngth
);

1234 
	`out_dØp_ouçut_°¨t
(
pwsc
,
µi
,61+
li°_Àngth
);

1235 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
ôems_ª•⁄£
,61);

1238 (
	`dØp_íum_„tch
(
NULL
,
µi
,&
li°_Àngth
,&
block
)==0) &&

1239 (
li°_Àngth
)) {

1240 
	`pi_log
(
E_SPAM
,"GŸ block o‡sizê%d\n",
li°_Àngth
);

1241 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
block
,
li°_Àngth
);

1242 
	`‰ì
(
block
);

1244 
	`pi_log
(
E_DBG
,"DoneÉnumerating.\n");

1245 
	`pi_db_íum_íd
(
NULL
);

1246 
	`pi_db_íum_di•o£
(
NULL
,&
µi
->
dq
);

1247 
	`out_dØp_ouçut_íd
(
pwsc
,
µi
);

1249 
	}
}

1251 
	$out_dØp_upd©e
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

1252 
upd©e_ª•⁄£
[32];

1253 *
cuºít
=
upd©e_ª•⁄£
;

1255 
	`pi_log
(
E_DBG
,"PreparingÅo send updateÑesponse\n");

1256 
	`pi_c⁄fig_£t_°©us
(
pwsc
,
µi
->
£ssi⁄_id
,"Waiting for DB update");

1258 if(!
	`pi_db_waô_upd©e
(
pwsc
)) {

1259 
	`pi_log
(
E_DBG
,"Update session stopped\n");

1264 
cuºít
 +
	`dm≠_add_c⁄èöî
(current,"mupd",24);

1265 
cuºít
 +
	`dm≠_add_öt
(current,"mstt",200);

1266 
cuºít
 +
	`dm≠_add_öt
(cuºít,"mu§",
	`pi_db_ªvisi⁄
());

1268 
	`out_dØp_ouçut_°¨t
(
pwsc
,
µi
,32);

1269 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
upd©e_ª•⁄£
,32);

1270 
	`out_dØp_ouçut_íd
(
pwsc
,
µi
);

1273 
	}
}

1275 
	$out_dØp_dböfo
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

1276 
dböfo_ª•⁄£
[255];

1277 *
cuºít
 = 
dböfo_ª•⁄£
;

1278 
«mñí
;

1279 
cou¡
;

1280 
£rvî«me
[256];

1281 
£rvî«me_size
;

1283 
£rvî«me_size
 = (
£rvî«me
);

1284 
	`pi_£rvî_«me
(
£rvî«me
,&
£rvî«me_size
);

1286 
«mñí
=(Ë
	`°æí
(
£rvî«me
);

1288 
cuºít
 +
	`dm≠_add_c⁄èöî
(cuºít,"avdb",121 + 
«mñí
);

1289 
cuºít
 +
	`dm≠_add_öt
(current,"mstt",200);

1290 
cuºít
 +
	`dm≠_add_ch¨
(current,"muty",0);

1291 
cuºít
 +
	`dm≠_add_öt
(current,"mtco",1);

1292 
cuºít
 +
	`dm≠_add_öt
(current,"mrco",1);

1293 
cuºít
 +
	`dm≠_add_c⁄èöî
(cuºít,"ml˛",68 + 
«mñí
);

1294 
cuºít
 +
	`dm≠_add_c⁄èöî
(cuºít,"mlô",60 + 
«mñí
);

1295 
cuºít
 +
	`dm≠_add_öt
(current,"miid",1);

1296 
cuºít
 +
	`dm≠_add_l⁄g
(current,"mper",1);

1297 
cuºít
 +
	`dm≠_add_°rög
(cuºít,"möm",
£rvî«me
);

1298 
cou¡
 = 
	`pi_db_cou¡_ôems
(
COUNT_SONGS
);

1299 
cuºít
 +
	`dm≠_add_öt
(cuºít,"mimc",
cou¡
);

1300 
cou¡
 = 
	`pi_db_cou¡_ôems
(
COUNT_PLAYLISTS
);

1301 
cuºít
 +
	`dm≠_add_öt
(cuºít,"m˘c",
cou¡
);

1303 
	`out_dØp_ouçut_°¨t
(
pwsc
,
µi
,129+
«mñí
);

1304 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
dböfo_ª•⁄£
,129+
«mñí
);

1305 
	`out_dØp_ouçut_íd
(
pwsc
,
µi
);

1308 
	}
}

1310 
	$out_dØp_logout
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

1311 
	`pi_c⁄fig_£t_°©us
(
pwsc
,
µi
->
£ssi⁄_id
,
NULL
);

1312 
	`pi_ws_ªtu∫îr‹
(
pwsc
,204,"Logout Successful");

1313 
	}
}

1316 
	$out_dØp_logö
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

1317 
logö_ª•⁄£
[32];

1318 *
cuºít
 = 
logö_ª•⁄£
;

1319 
£ssi⁄
;

1321 
£ssi⁄
 = 
	`dØp_gë_√xt_£ssi⁄
();

1323 
cuºít
 +
	`dm≠_add_c⁄èöî
(current,"mlog",24);

1324 
cuºít
 +
	`dm≠_add_öt
(current,"mstt",200);

1325 
cuºít
 +
	`dm≠_add_öt
(cuºít,"mlid",
£ssi⁄
);

1327 
	`out_dØp_ouçut_°¨t
(
pwsc
,
µi
,32);

1328 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
logö_ª•⁄£
,32);

1329 
	`out_dØp_ouçut_íd
(
pwsc
,
µi
);

1331 
	}
}

1333 
	$out_dØp_c⁄ã¡_codes
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

1334 
c⁄ã¡_codes
[20];

1335 *
cuºít
=
c⁄ã¡_codes
;

1336 
md˛
[256];

1337 
Àn
;

1338 
DAAP_ITEMS
 *
dicuºít
;

1340 
dicuºít
=
ègli°
;

1341 
Àn
=0;

1342 
dicuºít
->
ty≥
) {

1343 
Àn
 +(8 + 12 + 10 + 8 + (Ë
	`°æí
(
dicuºít
->
des¸ùti⁄
));

1344 
dicuºít
++;

1347 
cuºít
 +
	`dm≠_add_c⁄èöî
(cuºít,"mc¸",
Àn
 + 12);

1348 
cuºít
 +
	`dm≠_add_öt
(current,"mstt",200);

1350 
	`out_dØp_ouçut_°¨t
(
pwsc
,
µi
,
Àn
+20);

1351 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
c⁄ã¡_codes
,20);

1353 
dicuºít
=
ègli°
;

1354 
dicuºít
->
ty≥
) {

1355 
cuºít
=
md˛
;

1356 
Àn
 = 12 + 10 + 8 + (Ë
	`°æí
(
dicuºít
->
des¸ùti⁄
);

1357 
cuºít
 +
	`dm≠_add_c⁄èöî
(cuºít,"md˛",
Àn
);

1358 
cuºít
 +
	`dm≠_add_°rög
(cuºít,"m˙m",
dicuºít
->
èg
);

1359 
cuºít
 +
	`dm≠_add_°rög
(cuºít,"m˙a",
dicuºít
->
des¸ùti⁄
);

1360 
cuºít
 +
	`dm≠_add_sh‹t
(cuºít,"m˘y",
dicuºít
->
ty≥
);

1361 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
md˛
,
Àn
+8);

1362 
dicuºít
++;

1365 
	`out_dØp_ouçut_íd
(
pwsc
,
µi
);

1367 
	}
}

1370 
	$out_dØp_c⁄f_is£t
(*
£˘i⁄
, *
key
) {

1371 *
vÆue
;

1373 
vÆue
 = 
	`pi_c⁄f_Æloc_°rög
(
£˘i⁄
,
key
,
NULL
);

1374 if(
vÆue
) {

1375 
	`pi_c⁄f_di•o£_°rög
(
vÆue
);

1376  
TRUE
;

1379  
FALSE
;

1380 
	}
}

1382 
	$out_dØp_£rvî_öfo
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

1383 
£rvî_öfo
[256];

1384 
£rvî«me
[256];

1385 
size
;

1386 *
cuºít
 = 
£rvî_öfo
;

1387 *
˛õ¡_vîsi⁄
;

1388 
m¥o
 = 2 << 16;

1389 
≠ro
 = 3 << 16;

1390 
a˘uÆ_Àngth
;

1391 
suµ‹ts_upd©e
=0;

1393 
size
 = (
£rvî«me
);

1394 
	`pi_£rvî_«me
(
£rvî«me
,&
size
);

1396 
suµ‹ts_upd©e
 = 
	`c⁄f_gë_öt
("daap","supports_update",1);

1398 
a˘uÆ_Àngth
=139 + (Ë
	`°æí
(
£rvî«me
);

1402 if(
a˘uÆ_Àngth
 > (
£rvî_öfo
)) {

1403 
	`pi_log
(
E_FATAL
,"ServerÇameÅooÜong.\n");

1406 
˛õ¡_vîsi⁄
=
	`pi_ws_gëªque°hódî
(
pwsc
,"Client-DAAP-Version");

1408 
cuºít
 +
	`dm≠_add_c⁄èöî
(cuºít,"m§v",
a˘uÆ_Àngth
 - 8);

1409 
cuºít
 +
	`dm≠_add_öt
(current,"mstt",200);

1411 if((
˛õ¡_vîsi⁄
Ë&& (!
	`°rcmp
(client_version,"1.0"))) {

1412 
m¥o
 = 1 << 16;

1413 
≠ro
 = 1 << 16;

1416 if((
˛õ¡_vîsi⁄
Ë&& (!
	`°rcmp
(client_version,"2.0"))) {

1417 
m¥o
 = 1 << 16;

1418 
≠ro
 = 2 << 16;

1421 
cuºít
 +
	`dm≠_add_öt
(cuºít,"m¥o",
m¥o
);

1422 
cuºít
 +
	`dm≠_add_öt
(cuºít,"≠ro",
≠ro
);

1423 
cuºít
 +
	`dm≠_add_öt
(current,"mstm",1800);

1424 
cuºít
 +
	`dm≠_add_°rög
(cuºít,"möm",
£rvî«me
);

1427 
cuºít
 +
	`dm≠_add_ch¨
(current,"msau",

1428 
	`out_dØp_c⁄f_is£t
("general","password") ? 2 : 0);

1429 
cuºít
 +
	`dm≠_add_ch¨
(current,"msex",0);

1430 
cuºít
 +
	`dm≠_add_ch¨
(current,"msix",0);

1431 
cuºít
 +
	`dm≠_add_ch¨
(current,"msbr",0);

1432 
cuºít
 +
	`dm≠_add_ch¨
(current,"msqy",0);

1434 
cuºít
 +
	`dm≠_add_ch¨
(current,"mspi",0);

1435 
cuºít
 +
	`dm≠_add_öt
(current,"msdc",1);

1437 if(
suµ‹ts_upd©e
)

1438 
cuºít
 +
	`dm≠_add_ch¨
(current,"msup",1);

1440 
cuºít
 +
	`dm≠_add_ch¨
(current,"msup",0);

1441 
	`out_dØp_ouçut_°¨t
(
pwsc
,
µi
,
a˘uÆ_Àngth
);

1442 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
£rvî_öfo
,
a˘uÆ_Àngth
);

1443 
	`out_dØp_ouçut_íd
(
pwsc
,
µi
);

1446 
	}
}

1452 
	$out_dØp_îr‹
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
, *
c⁄èöî
, *
îr‹
) {

1453 *
block
, *
cuºít
;

1454 
Àn
;

1456 
Àn
 = 12 + 8 + 8 + (Ë
	`°æí
(
îr‹
);

1457 
block
 = (*)
	`mÆloc
(
Àn
);

1459 if(!
block
)

1460 
	`pi_log
(
E_FATAL
,"MallocÉrror\n");

1462 
cuºít
 = 
block
;

1463 
cuºít
 +
	`dm≠_add_c⁄èöî
(cuºít,
c⁄èöî
,
Àn
 - 8);

1464 
cuºít
 +
	`dm≠_add_öt
(current,"mstt",500);

1465 
cuºít
 +
	`dm≠_add_°rög
(cuºít,"m°s",
îr‹
);

1467 
	`out_dØp_ouçut_°¨t
(
pwsc
,
µi
,
Àn
);

1468 
	`out_dØp_ouçut_wrôe
(
pwsc
,
µi
,
block
,
Àn
);

1469 
	`out_dØp_ouçut_íd
(
pwsc
,
µi
);

1471 
	`‰ì
(
block
);

1473 
	`pi_ws_wûl_˛o£
(
pwsc
);

1474 
	}
}

	@plugins/out-daap.h

5 #i‚de‡
_OUT_DAAP_H_


6 
	#_OUT_DAAP_H_


	)

8 #i‚de‡
TRUE


9 
	#TRUE
 1

	)

10 
	#FALSE
 0

	)

13 
	~"ff-∂ugös.h
"

17 
	mmëaIãmId
,

18 
	mmëaIãmName
,

19 
	mmëaIãmKöd
,

20 
	mmëaPîsi°ítId
,

21 
	mmëaC⁄èöîIãmId
,

22 
	mmëaP¨ítC⁄èöîId
,

24 
	mfú°Ty≥S≥cificMëaId
,

27 
	mmëaS⁄gAlbum
 = 
fú°Ty≥S≥cificMëaId
,

28 
	mmëaS⁄gAπi°
,

29 
	mmëaS⁄gBPM
,

30 
	mmëaS⁄gBôR©e
,

31 
	mmëaS⁄gCommít
,

32 
	mmëaS⁄gCompû©i⁄
,

33 
	mmëaS⁄gCompo£r
,

34 
	mmëaS⁄gD©aKöd
,

35 
	mmëaS⁄gD©aURL
,

36 
	mmëaS⁄gD©eAdded
,

37 
	mmëaS⁄gD©eModifõd
,

38 
	mmëaS⁄gDes¸ùti⁄
,

39 
	mmëaS⁄gDißbÀd
,

40 
	mmëaS⁄gDiscCou¡
,

41 
	mmëaS⁄gDiscNumbî
,

42 
	mmëaS⁄gEqPª£t
,

43 
	mmëaS⁄gF‹m©
,

44 
	mmëaS⁄gGíª
,

45 
	mmëaS⁄gGroupög
,

46 
	mmëaS⁄gRñ©iveVﬁume
,

47 
	mmëaS⁄gSam∂eR©e
,

48 
	mmëaS⁄gSize
,

49 
	mmëaS⁄gSèπTime
,

50 
	mmëaS⁄gSt›Time
,

51 
	mmëaS⁄gTime
,

52 
	mmëaS⁄gTøckCou¡
,

53 
	mmëaS⁄gTøckNumbî
,

54 
	mmëaS⁄gU£rR©ög
,

55 
	mmëaS⁄gYór
,

58 
	mmëaS⁄gCodecTy≥
,

59 
	mmëaS⁄gCodecSubTy≥
,

60 
	mmëaItu√sN‹mVﬁume
,

61 
	mmëaItmsS⁄gId
,

62 
	mmëaItmsAπi°Id
,

63 
	mmëaItmsPœyli°Id
,

64 
	mmëaItmsCompo£rId
,

65 
	mmëaItmsGíªId
,

66 
	mmëaItmsSt‹e‰⁄tId
,

67 
	mmëaItu√sSm¨tPœyli°
,

70 
	mmëaS⁄gC⁄ã¡R©ög
,

71 
	mmëaHasChûdC⁄èöîs
,

74 
	mmëaItu√sHasVideo
,

77 
	mmëaMPœyli°S≥c
,

78 
	mmëaMPœyli°Ty≥


79 } 
	tMëaFõldName_t
;

81 
	tMëaFõld_t
;

82 
èg_ws_c⁄nöfo
 
	tWS_CONNINFO
;

84 
	sèg_dØp_¥ivöfo
 {

85 
DB_QUERY
 
	mdq
;

86 
	muri_cou¡
;

87 
MëaFõld_t
 
	mmëa
;

88 
	mem±y_°rögs
;

89 
èg_ouçut_öfo
 *
	mouçut_öfo
;

90 
	m£ssi⁄_id
;

91 *
	muri_£˘i⁄s
[10];

92 
WS_CONNINFO
 *
	mpwsc
;

93 } 
	tPRIVINFO
;

	@plugins/rsp.c

5 #ifde‡
HAVE_CONFIG_H


6 
	~"c⁄fig.h
"

9 #ifde‡
HAVE_STDINT_H


10 
	~<°döt.h
>

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

17 
	~"com∑t.h
"

18 
	~"ff-db°ru˘.h
"

19 
	~"ff-∂ugös.h
"

20 
	~"r•.h
"

21 
	~"xml-Ωc.h
"

23 
	sèg_r•_¥ivöfo
 {

24 
DB_QUERY
 
	mdq
;

25 
	muri_cou¡
;

26 *
	muri_£˘i⁄s
[10];

27 } 
	tPRIVINFO
;

30 
PLUGIN_INFO
 *
∂ugö_öfo
();

31 
∂ugö_h™dÀr
(
WS_CONNINFO
 *
pwsc
);

32 
∂ugö_ˇn_h™dÀ
(
WS_CONNINFO
 *
pwsc
);

33 
∂ugö_auth
(
WS_CONNINFO
 *
pwsc
, *
u£∫ame
, *
∑ssw‹d
);

34 
r•_öfo
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

35 
r•_db
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

36 
r•_∂ayli°
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

37 
r•_brow£
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

38 
r•_°ªam
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
);

39 
r•_îr‹
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
, 
ío
, *
e°r
);

42 
PLUGIN_OUTPUT_FN
 
	g_po‚
 = { 
∂ugö_ˇn_h™dÀ
, 
∂ugö_h™dÀr
, 
∂ugö_auth
 };

43 
PLUGIN_REND_INFO
 
	g_¥i
[] = {

44 { "_r•._t˝", 
NULL
 },

45 { 
NULL
, NULL }

48 
PLUGIN_INFO
 
	g_pi
 = {

49 
PLUGIN_VERSION
,

50 
PLUGIN_OUTPUT
,

51 "r•/" 
VERSION
,

52 &
_po‚
,

53 
NULL
,

54 
NULL
,

55 
_¥i
,

56 
NULL


59 
	sèg_ª•⁄£
 {

60 *
	muri
[10];

61 (*
	mdi•©ch
)(
	mWS_CONNINFO
 *, 
	mPRIVINFO
 *);

62 } 
	tPLUGIN_RESPONSE
;

65 
PLUGIN_RESPONSE
 
	gr•_uri_m≠
[] = {

66 {{"r•", "öfo",
NULL
,NULL,NULL,NULL,NULL,NULL,NULL,NULL }, 
r•_öfo
 },

67 {{"r•", "db" ,
NULL
,NULL,NULL,NULL,NULL,NULL,NULL,NULL }, 
r•_db
 },

68 {{"r•", "db" , "*",
NULL
,NULL,NULL,NULL,NULL,NULL,NULL }, 
r•_∂ayli°
 },

69 {{"r•", "db" , "*", "*",
NULL
,NULL,NULL,NULL,NULL,NULL }, 
r•_brow£
 },

70 {{"r•","°ªam", "*",
NULL
,NULL,NULL,NULL,NULL,NULL,NULL }, 
r•_°ªam
 }

73 
	#E_RSP
 0x0000

	)

74 
	#E_DB
 0x1000

	)

77 
	#T_STRING
 0

	)

78 
	#T_INT
 1

	)

79 
	#T_DATE
 2

	)

81 
	#F_FULL
 1

	)

82 
	#F_BROWSE
 2

	)

83 
	#F_ID
 4

	)

84 
	#F_DETAILED
 8

	)

86 
	sèg_fõld•ec
 {

87 *
	m«me
;

88 
	mÊags
;

89 
	mty≥
;

90 } 
	tFIELDSPEC
;

92 
FIELDSPEC
 
	gr•_∂ayli°_fõlds
[] = {

93 { "id" , 15, 
T_INT
 },

94 { "tôÀ" , 11, 
T_STRING
 },

95 { "ty≥" , 8, 
T_INT
 },

96 { "ôems" , 11, 
T_INT
 },

97 { "quîy" , 8, 
T_STRING
 },

98 { "db_time°amp" , 8, 
T_DATE
 },

99 { "∑th" , 8, 
T_STRING
 },

100 { "ödex" , 8, 
T_INT
 },

101 { 
NULL
 , 0, 0 }

104 
FIELDSPEC
 
	gr•_fõlds
[] = {

105 { "id" , 15, 
T_INT
 },

106 { "∑th" , 8, 
T_STRING
 },

107 { "‚ame" , 8, 
T_STRING
 },

108 { "tôÀ" , 15, 
T_STRING
 },

109 { "¨ti°" , 11, 
T_STRING
 },

110 { "Æbum" , 11, 
T_STRING
 },

111 { "gíª" , 9, 
T_STRING
 },

112 { "commít" , 9, 
T_STRING
 },

113 { "ty≥" , 15, 
T_STRING
 },

114 { "compo£r" , 9, 
T_STRING
 },

115 { "‹che°ø" , 9, 
T_STRING
 },

116 { "c⁄du˘‹" , 9, 
T_STRING
 },

117 { "groupög" , 0, 
T_STRING
 },

118 { "uæ" , 9, 
T_STRING
 },

119 { "bôøã" , 9, 
T_INT
 },

120 { "ßm∂î©e" , 9, 
T_INT
 },

121 { "s⁄g_Àngth" , 9, 
T_INT
 },

122 { "fûe_size" , 9, 
T_INT
 },

123 { "yór" , 9, 
T_INT
 },

124 { "åack" , 11, 
T_INT
 },

125 { "tŸÆ_åacks" , 9, 
T_INT
 },

126 { "disc" , 11, 
T_INT
 },

127 { "tŸÆ_discs" , 9, 
T_INT
 },

128 { "bpm" , 9, 
T_INT
 },

129 { "compû©i⁄" , 9, 
T_INT
 },

130 { "øtög" , 9, 
T_INT
 },

131 { "∂ay_cou¡" , 9, 
T_INT
 },

132 { "d©a_köd" , 8, 
T_INT
 },

133 { "ôem_köd" , 8, 
T_INT
 },

134 { "des¸ùti⁄" , 9, 
T_STRING
 },

135 { "time_added" , 9, 
T_DATE
 },

136 { "time_modifõd", 9, 
T_DATE
 },

137 { "time_∂ayed" , 9, 
T_DATE
 },

138 { "db_time°amp" , 8, 
T_DATE
 },

139 { "dißbÀd" , 15, 
T_INT
 },

140 { "ßm∂e_cou¡" , 8, 
T_INT
 },

141 { "f‹˚_upd©e" , 8, 
T_INT
 },

142 { "code˘y≥" , 15, 
T_INT
 },

143 { "idx" , 8, 
T_INT
 },

144 { "has_video" , 8, 
T_INT
 },

145 { "c⁄ã¡øtög", 8, 
T_INT
 },

146 { 
NULL
 , 0 }

152 
PLUGIN_INFO
 *
	$∂ugö_öfo
() {

153  &
_pi
;

154 
	}
}

159 
	$∂ugö_ˇn_h™dÀ
(
WS_CONNINFO
 *
pwsc
) {

160 
	`pi_log
(
E_DBG
,"Checkög uæ %s\n",
	`pi_ws_uri
(
pwsc
));

161 if(
	`°∫ˇ£cmp
(
	`pi_ws_uri
(
pwsc
),"/rsp/",5) == 0)

162  
TRUE
;

163  
FALSE
;

164 
	}
}

170 
	$∂ugö_auth
(
WS_CONNINFO
 *
pwsc
, *
u£∫ame
, *
∑ssw‹d
) {

171  
	`pi_ws_m©che§ﬁe
(
pwsc
,
u£∫ame
,
∑ssw‹d
,"user");

172 
	}
}

177 
	$∂ugö_h™dÀr
(
WS_CONNINFO
 *
pwsc
) {

178 *
°rög
, *
ßve
, *
tokí
;

179 
PRIVINFO
 *
µi
;

180 
ñemíts
;

181 
ödex
, 
∑π
;

182 
found
;

184 
	`pi_log
(
E_DBG
,"Getting uri...\n");

186 
°rög
 = 
	`pi_ws_uri
(
pwsc
);

187 
°rög
++;

189 
	`pi_log
(
E_DBG
,"MallocingÖrivinfo...\n");

190 
µi
 = (
PRIVINFO
 *)
	`mÆloc
((PRIVINFO));

191 if(
µi
) {

192 
	`mem£t
(
µi
,0,(
PRIVINFO
));

195 if(!
µi
) {

196 
	`pi_ws_ªtu∫îr‹
(
pwsc
,500,"MallocÉrror inÖlugin_handler");

200 
	`mem£t
((*)&
µi
->
dq
,0,(
DB_QUERY
));

202 
	`pi_log
(
E_DBG
,"Tokenizing url\n");

203 (
µi
->
uri_cou¡
 < 10Ë&& (
tokí
=
	`°πok_r
(
°rög
,"/",&
ßve
))) {

204 
°rög
=
NULL
;

205 
µi
->
uri_£˘i⁄s
[µi->
uri_cou¡
++] = 
tokí
;

208 
ñemíts
 = (
r•_uri_m≠
Ë/ (
PLUGIN_RESPONSE
);

209 
	`pi_log
(
E_DBG
,"Found %dÉÀmíts\n",
ñemíts
);

211 
ödex
 = 0;

212 
found
 = 0;

214 (!
found
Ë&& (
ödex
 < 
ñemíts
)) {

216 
	`pi_log
(
E_DBG
,"CheckögÑï⁄£ %d\n",
ödex
);

217 
∑π
=0;

218 
∑π
 < 10) {

219 if((
r•_uri_m≠
[
ödex
].
uri
[
∑π
]Ë&& (!
µi
->
uri_£˘i⁄s
[part]))

221 if((
µi
->
uri_£˘i⁄s
[
∑π
]Ë&& (!
r•_uri_m≠
[
ödex
].
uri
[part]))

224 if((
r•_uri_m≠
[
ödex
].
uri
[
∑π
]) &&

225 (
	`°rcmp
(
r•_uri_m≠
[
ödex
].
uri
[
∑π
],"*") != 0)) {

226 if(
	`°rcmp
(
r•_uri_m≠
[
ödex
].
uri
[
∑π
],

227 
µi
->
uri_£˘i⁄s
[
∑π
])!= 0)

230 
∑π
++;

233 if(
∑π
 == 10) {

234 
found
 = 1;

235 
	`pi_log
(
E_DBG
,"Found it! Index: %d\n",
ödex
);

237 
ödex
++;

241 if(
found
) {

242 
r•_uri_m≠
[
ödex
].
	`di•©ch
(
pwsc
, 
µi
);

243 
	`pi_ws_wûl_˛o£
(
pwsc
);

244 
	`‰ì
(
µi
);

248 
	`r•_îr‹
(
pwsc
, 
µi
, 1, "BadÖath");

249 
	`pi_ws_wûl_˛o£
(
pwsc
);

250 
	`‰ì
(
µi
);

252 
	}
}

257 
	$r•_öfo
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

258 
XMLSTRUCT
 *
pxml
;

259 
£rvî«me
[256];

260 
size
;

262 
	`pi_log
(
E_DBG
,"StartingÑsp_info\n");

263 
	`pi_c⁄fig_£t_°©us
(
pwsc
,0,"Getting server info");

265 
pxml
 = 
	`xml_öô
(
pwsc
,1);

267 
	`xml_push
(
pxml
,"response");

268 
	`xml_push
(
pxml
,"status");

269 
	`xml_ouçut
(
pxml
,"errorcode","0");

270 
	`xml_ouçut
(
pxml
,"errorstring","");

271 
	`xml_ouçut
(
pxml
,"records","0");

272 
	`xml_ouçut
(
pxml
,"totalrecords","0");

273 
	`xml_p›
(
pxml
);

276 
	`xml_push
(
pxml
,"info");

277 
	`xml_ouçut
(
pxml
,"cou¡","%d",
	`pi_db_cou¡_ôems
(
COUNT_SONGS
));

278 
	`xml_ouçut
(
pxml
,"r•-vîsi⁄","%s",
RSP_VERSION
);

280 
	`xml_ouçut
(
pxml
,"£rvî-vîsi⁄","%s",
	`pi_£rvî_vî
());

282 
size
 = (
£rvî«me
);

283 
	`pi_£rvî_«me
(
£rvî«me
,&
size
);

284 
	`xml_ouçut
(
pxml
,"«me","%s",
£rvî«me
);

285 
	`xml_p›
(
pxml
);

287 
	`xml_p›
(
pxml
);

288 
	`xml_deöô
(
pxml
);

289 
	`pi_c⁄fig_£t_°©us
(
pwsc
,0,
NULL
);

290 
	}
}

297 
	$r•_db
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

298 
XMLSTRUCT
 *
pxml
;

299 *
≥
;

300 
îr
;

301 **
row
;

302 
rowödex
;

304 
µi
->
dq
.
quîy_ty≥
 = 
QUERY_TYPE_PLAYLISTS
;

306 if((
îr
=
	`pi_db_íum_°¨t
(&
≥
,&
µi
->
dq
)) != 0) {

307 
	`r•_îr‹
(
pwsc
, 
µi
, 
îr
 | 
E_DB
, 
≥
);

308 
	`pi_db_íum_di•o£
(
NULL
,&
µi
->
dq
);

312 
	`pi_c⁄fig_£t_°©us
(
pwsc
,0,"FetchingÖlaylist info");

313 
pxml
 = 
	`xml_öô
(
pwsc
,1);

315 
	`xml_push
(
pxml
,"response");

316 
	`xml_push
(
pxml
,"status");

317 
	`xml_ouçut
(
pxml
,"errorcode","0");

318 
	`xml_ouçut
(
pxml
,"errorstring","");

319 
	`xml_ouçut
(
pxml
,"ªc‹ds","%d",
µi
->
dq
.
tŸÆcou¡
);

320 
	`xml_ouçut
(
pxml
,"tŸÆªc‹ds","%d",
µi
->
dq
.
tŸÆcou¡
);

321 
	`xml_p›
(
pxml
);

323 
	`xml_push
(
pxml
,"playlists");

325 (
	`pi_db_íum_„tch_row
(
NULL
,&
row
,&
µi
->
dq
) == 0) && (row)) {

326 
	`xml_push
(
pxml
,"playlist");

327 
rowödex
=0;

328 
r•_∂ayli°_fõlds
[
rowödex
].
«me
) {

329 if(
r•_∂ayli°_fõlds
[
rowödex
].
Êags
 & 
F_FULL
) {

330 
	`xml_ouçut
(
pxml
,
r•_∂ayli°_fõlds
[
rowödex
].
«me
,"%s",

331 
row
[
rowödex
]);

333 
rowödex
++;

335 
	`xml_p›
(
pxml
);

338 
	`pi_db_íum_íd
(
NULL
);

339 
	`pi_db_íum_di•o£
(
NULL
,&
µi
->
dq
);

341 
	`xml_p›
(
pxml
);

342 
	`xml_p›
(
pxml
);

343 
	`xml_deöô
(
pxml
);

344 
	`pi_c⁄fig_£t_°©us
(
pwsc
,0,
NULL
);

345 
	}
}

350 
	$r•_∂ayli°
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

351 
XMLSTRUCT
 *
pxml
;

352 *
≥
;

353 
îr
;

354 **
row
;

355 
rowödex
;

356 
ªtu∫ed
;

357 *
brow£_ty≥
;

358 
ty≥
;

359 
å™scode
;

360 
ßm∂î©e
;

361 
d⁄e
 = 0;

363 
µi
->
dq
.
fûãr
 = 
	`pi_ws_gëv¨
(
pwsc
,"query");

364 
µi
->
dq
.
fûãr_ty≥
 = 
FILTER_TYPE_FIREFLY
;

366 if(
	`pi_ws_gëv¨
(
pwsc
,"offset")) {

367 
µi
->
dq
.
off£t
 = 
	`©oi
(
	`pi_ws_gëv¨
(
pwsc
,"offset"));

369 if(
	`pi_ws_gëv¨
(
pwsc
,"limit")) {

370 
µi
->
dq
.
limô
 = 
	`©oi
(
	`pi_ws_gëv¨
(
pwsc
,"limit"));

373 
brow£_ty≥
 = 
	`pi_ws_gëv¨
(
pwsc
,"type");

374 
ty≥
 = 
F_FULL
;

376 if(
brow£_ty≥
) {

377 if(
	`°rˇ£cmp
(
brow£_ty≥
,"browse") == 0) {

378 
ty≥
 = 
F_BROWSE
;

379 } if(
	`°rˇ£cmp
(
brow£_ty≥
,"id") == 0) {

380 
ty≥
 = 
F_ID
;

381 } if(
	`°rˇ£cmp
(
brow£_ty≥
,"detailed") ==0) {

382 
ty≥
 = 
F_DETAILED
;

386 
µi
->
dq
.
quîy_ty≥
 = 
QUERY_TYPE_ITEMS
;

387 
µi
->
dq
.
∂ayli°_id
 = 
	`©oi
’pi->
uri_£˘i⁄s
[2]);

389 if((
îr
=
	`pi_db_íum_°¨t
(&
≥
,&
µi
->
dq
)) != 0) {

390 
	`r•_îr‹
(
pwsc
, 
µi
, 
îr
 | 
E_DB
, 
≥
);

391 
	`pi_db_íum_di•o£
(
NULL
,&
µi
->
dq
);

392 
	`‰ì
(
≥
);

396 
	`pi_c⁄fig_£t_°©us
(
pwsc
,0,"FetchingÖlaylist items");

397 
pxml
 = 
	`xml_öô
(
pwsc
,1);

399 if(
µi
->
dq
.
off£t
 >Öpi->dq.
tŸÆcou¡
) {

400 
ªtu∫ed
 = 0;

402 
ªtu∫ed
 = 
µi
->
dq
.
limô
;

403 if(
ªtu∫ed
 > (
µi
->
dq
.
tŸÆcou¡
 -Öpi->dq.
off£t
))

404 
ªtu∫ed
 = 
µi
->
dq
.
tŸÆcou¡
 -Öpi->dq.
off£t
;

407 
	`xml_push
(
pxml
,"response");

408 
	`xml_push
(
pxml
,"status");

409 
	`xml_ouçut
(
pxml
,"errorcode","0");

410 
	`xml_ouçut
(
pxml
,"errorstring","");

411 
	`xml_ouçut
(
pxml
,"ªc‹ds","%d",
ªtu∫ed
);

412 
	`xml_ouçut
(
pxml
,"tŸÆªc‹ds","%d",
µi
->
dq
.
tŸÆcou¡
);

413 
	`xml_p›
(
pxml
);

415 
	`xml_push
(
pxml
,"items");

417 (!
d⁄e
Ë&& (
	`pi_db_íum_„tch_row
(
NULL
,&
row
,&
µi
->
dq
) == 0) &&

418 (
row
)) {

419 
	`xml_push
(
pxml
,"item");

420 
rowödex
=0;

421 
å™scode
 = 0;

423 
å™scode
 = 
	`pi_should_å™scode
(
pwsc
,
row
[37]);

425 
	`pi_log
(
E_DBG
,"Tønscode: %d, %s: %s\n",
å™scode
,
row
[37],row[2]);

427 
r•_fõlds
[
rowödex
].
«me
) {

428 if((
r•_fõlds
[
rowödex
].
Êags
 & 
ty≥
) &&

429 (
row
[
rowödex
] && 
	`°æí
(row[rowindex]))) {

430 if(
å™scode
) {

431 
rowödex
) {

433 
	`xml_ouçut
(
pxml
,
r•_fõlds
[
rowödex
].
«me
,"%s","wav");

436 
	`xml_ouçut
(
pxml
,
r•_fõlds
[
rowödex
].
«me
,"%s",

440 
ßm∂î©e
 = 
	`©oi
(
row
[15]);

441 if(
ßm∂î©e
) {

442 
ßm∂î©e
 = (samplerate * 8) / 250;

444 
ßm∂î©e
 = 1411;

446 
	`xml_ouçut
(
pxml
,
r•_fõlds
[
rowödex
].
«me
,"%d",

447 
ßm∂î©e
);

450 
	`xml_ouçut
(
pxml
,
r•_fõlds
[
rowödex
].
«me
,"%s","wav");

451 
	`xml_ouçut
(
pxml
,"‹igöÆ_codec","%s",
row
[37]);

454 
	`xml_ouçut
(
pxml
,
r•_fõlds
[
rowödex
].
«me
,"%s",

455 
row
[
rowödex
]);

460 if(
	`xml_ouçut
(
pxml
,
r•_fõlds
[
rowödex
].
«me
,"%s",

461 
row
[
rowödex
]) == -1)

462 
d⁄e
=1;

466 
rowödex
++;

468 
	`xml_p›
(
pxml
);

471 
	`pi_db_íum_íd
(
NULL
);

473 
	`xml_p›
(
pxml
);

474 
	`xml_p›
(
pxml
);

475 
	`xml_deöô
(
pxml
);

476 
	`pi_c⁄fig_£t_°©us
(
pwsc
,0,
NULL
);

477 
	}
}

479 
	$r•_brow£
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

480 
XMLSTRUCT
 *
pxml
;

481 *
≥
;

482 
îr
;

483 **
row
;

484 
ªtu∫ed
;

487 
µi
->
dq
.
quîy_ty≥
 = 
QUERY_TYPE_DISTINCT
;

488 
µi
->
dq
.
di°ö˘_fõld
 =Öpi->
uri_£˘i⁄s
[3];

489 
µi
->
dq
.
fûãr
 = 
	`pi_ws_gëv¨
(
pwsc
,"query");

490 
µi
->
dq
.
fûãr_ty≥
 = 
FILTER_TYPE_FIREFLY
;

492 if(
	`pi_ws_gëv¨
(
pwsc
,"offset")) {

493 
µi
->
dq
.
off£t
 = 
	`©oi
(
	`pi_ws_gëv¨
(
pwsc
,"offset"));

496 if(
	`pi_ws_gëv¨
(
pwsc
,"limit")) {

497 
µi
->
dq
.
limô
 = 
	`©oi
(
	`pi_ws_gëv¨
(
pwsc
,"limit"));

500 
µi
->
dq
.
∂ayli°_id
 = 
	`©oi
’pi->
uri_£˘i⁄s
[2]);

502 if((
îr
=
	`pi_db_íum_°¨t
(&
≥
,&
µi
->
dq
)) != 0) {

503 
	`r•_îr‹
(
pwsc
, 
µi
, 
îr
 | 
E_DB
, 
≥
);

504 
	`pi_db_íum_di•o£
(
NULL
,&
µi
->
dq
);

508 
	`pi_c⁄fig_£t_°©us
(
pwsc
,0,"Browsing");

509 
pxml
 = 
	`xml_öô
(
pwsc
,1);

511 if(
µi
->
dq
.
off£t
 >Öpi->dq.
tŸÆcou¡
) {

512 
ªtu∫ed
 = 0;

514 
ªtu∫ed
 = 
µi
->
dq
.
limô
;

515 if(
ªtu∫ed
 > (
µi
->
dq
.
tŸÆcou¡
 -Öpi->dq.
off£t
))

516 
ªtu∫ed
 = 
µi
->
dq
.
tŸÆcou¡
 -Öpi->dq.
off£t
;

519 
	`xml_push
(
pxml
,"response");

520 
	`xml_push
(
pxml
,"status");

521 
	`xml_ouçut
(
pxml
,"errorcode","0");

522 
	`xml_ouçut
(
pxml
,"errorstring","");

523 
	`xml_ouçut
(
pxml
,"ªc‹ds","%d",
ªtu∫ed
);

524 
	`xml_ouçut
(
pxml
,"tŸÆªc‹ds","%d",
µi
->
dq
.
tŸÆcou¡
);

525 
	`xml_p›
(
pxml
);

527 
	`xml_push
(
pxml
,"items");

529 (
	`pi_db_íum_„tch_row
(
NULL
,&
row
,&
µi
->
dq
) == 0) && (row)) {

530 
	`xml_ouçut
(
pxml
,"ôem","%s",
row
[0]);

533 
	`pi_db_íum_íd
(
NULL
);

534 
	`pi_db_íum_di•o£
(
NULL
,&
µi
->
dq
);

536 
	`xml_p›
(
pxml
);

537 
	`xml_p›
(
pxml
);

538 
	`xml_deöô
(
pxml
);

539 
	`pi_c⁄fig_£t_°©us
(
pwsc
,0,
NULL
);

540 
	}
}

542 
	$r•_°ªam
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
) {

543 
	`pi_°ªam
(
pwsc
, 
µi
->
uri_£˘i⁄s
[2]);

545 
	}
}

547 
	$r•_îr‹
(
WS_CONNINFO
 *
pwsc
, 
PRIVINFO
 *
µi
, 
ío
, *
e°r
) {

548 
XMLSTRUCT
 *
pxml
;

550 
pxml
 = 
	`xml_öô
(
pwsc
, 1);

551 
	`xml_push
(
pxml
,"response");

552 
	`xml_push
(
pxml
,"status");

553 
	`xml_ouçut
(
pxml
,"îr‹code","%d",
ío
);

554 
	`xml_ouçut
(
pxml
,"îr‹°rög","%s",
e°r
);

555 
	`xml_ouçut
(
pxml
,"records","0");

556 
	`xml_ouçut
(
pxml
,"totalrecords","0");

557 
	`xml_p›
(
pxml
);

558 
	`xml_p›
(
pxml
);

559 
	`xml_deöô
(
pxml
);

560 
	`pi_ws_wûl_˛o£
(
pwsc
);

561 
	}
}

	@plugins/rsp.h

5 #i‚de‡
_RSP_H_


6 
	#_RSP_H_


	)

8 
	#RSP_VERSION
 "1.0"

	)

10 
PLUGIN_INFO
 
_pi
;

12 #i‚de‡
TRUE


13 
	#TRUE
 1

	)

14 
	#FALSE
 0

	)

	@plugins/ssc-ffmpeg.c

5 #ifde‡
HAVE_CONFIG_H


6 
	~"c⁄fig.h
"

9 #ifde‡
WIN32


10 
	~<wödows.h
>

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

17 
	~<avcodec.h
>

18 
	~<avf‹m©.h
>

20 
	~"ff-∂ugös.h
"

22 #i‡
__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 > 4)

23 
	#_PACKED
 
	`__©åibuã
((
∑cked
))

	)

25 
	#_PACKED


	)

28 
	sèg_sˇn_id3hódî
 {

29 
	mid
[3];

30 
	mvîsi⁄
[2];

31 
	mÊags
;

32 
	msize
[4];

33 } 
	t_PACKED
 
	tSCAN_ID3HEADER
;

34 #¥agm®
∑ck
()

36 #i‚de‡
TRUE


37 
	#TRUE
 1

	)

38 
	#FALSE
 0

	)

41 
	#BUFFER_SIZE
 (
AVCODEC_MAX_AUDIO_FRAME_SIZE
 * 3)/2

	)

43 
	sèg_ssc_h™dÀ
 {

44 
AVCodec
 *
	mpCodec
;

45 
AVCodecC⁄ãxt
 *
	mpCodecCtx
;

46 
AVF‹m©C⁄ãxt
 *
	mpFmtCtx
;

47 
AVFøme
 *
	mpFøme
;

48 
AVPackë
 
	m∑ckë
;

49 
AVI≈utF‹m©
 *
	mpF‹m©
;

51 
uöt8_t
 *
	m∑ckë_d©a
;

52 
	m∑ckë_size
;

53 
	maudio_°ªam
;

55 
	mbuf„r
[
BUFFER_SIZE
];

57 *
	mbuf_ªmaödî
;

58 
	mbuf_ªmaödî_Àn
;

59 
	mfú°_‰ame
;

61 
	mduøti⁄
;

63 
	mtŸÆ_decoded
;

64 
	mtŸÆ_wrôãn
;

66 
	mî∫um
;

67 
	mswab
;

69 *
	mîr‹
;

71 
	møw
;

73 
	mch™√ls
;

74 
	mßm∂e_øã
;

75 
	mbôs_≥r_ßm∂e
;

76 
uöt32_t
 
	mßm∂es
;

78 
FILE
 *
	mfö
;

79 
	mfûe_buf„r
[256];

80 *
	mfûe_buf„r_±r
;

81 
	mfûe_byãs_ªad
;

83 
	mwav_hódî
[44];

84 
	mwav_off£t
;

85 } 
	tSSCHANDLE
;

87 
	#SSC_FFMPEG_E_SUCCESS
 0

	)

88 
	#SSC_FFMPEG_E_BADCODEC
 1

	)

89 
	#SSC_FFMPEG_E_CODECOPEN
 2

	)

90 
	#SSC_FFMPEG_E_FILEOPEN
 3

	)

91 
	#SSC_FFMPEG_E_NOSTREAM
 4

	)

92 
	#SSC_FFMPEG_E_NOAUDIO
 5

	)

94 *
	gssc_ffm≥g_îr‹s
[] = {

106 *
ssc_ffm≥g_öô
();

107 
ssc_ffm≥g_deöô
(*
pv
);

108 
ssc_ffm≥g_›í
(*
pv
, 
MP3FILE
 *
pmp3
);

109 
ssc_ffm≥g_˛o£
(*
pv
);

110 
ssc_ffm≥g_ªad
(*
pv
, *
buf„r
, 
Àn
);

111 *
ssc_ffm≥g_îr‹
(*
pv
);

114 
PLUGIN_TRANSCODE_FN
 
	g_±‚
 = {

115 
ssc_ffm≥g_öô
,

116 
ssc_ffm≥g_deöô
,

117 
ssc_ffm≥g_›í
,

118 
ssc_ffm≥g_˛o£
,

119 
ssc_ffm≥g_ªad
,

120 
ssc_ffm≥g_îr‹


123 
PLUGIN_INFO
 
	g_pi
 = {

124 
PLUGIN_VERSION
,

125 
PLUGIN_TRANSCODE
,

126 "ssc-ffm≥g/" 
VERSION
,

127 
NULL
,

128 
NULL
,

129 &
_±‚
,

130 
NULL
,

134 *
	$ssc_ffm≥g_îr‹
(*
pv
) {

135 
SSCHANDLE
 *
h™dÀ
 = (SSCHANDLE*)
pv
;

137  
ssc_ffm≥g_îr‹s
[
h™dÀ
->
î∫um
];

138 
	}
}

140 
PLUGIN_INFO
 *
	$∂ugö_öfo
() {

141 
	`av_ªgi°î_Æl
();

143  &
_pi
;

144 
	}
}

146 *
	$ssc_ffm≥g_öô
() {

147 
SSCHANDLE
 *
h™dÀ
;

149 
h™dÀ
=(
SSCHANDLE
 *)
	`mÆloc
((SSCHANDLE));

150 if(
h™dÀ
) {

151 
	`mem£t
(
h™dÀ
,0,(
SSCHANDLE
));

154  (*)
h™dÀ
;

155 
	}
}

157 
	$ssc_ffm≥g_deöô
(*
vp
) {

158 
SSCHANDLE
 *
h™dÀ
 = (SSCHANDLE *)
vp
;

159 
	`ssc_ffm≥g_˛o£
(
h™dÀ
);

160 if(
h™dÀ
) {

161 
	`‰ì
(
h™dÀ
);

165 
	}
}

167 
	$ssc_ffm≥g_›í
(*
vp
, 
MP3FILE
 *
pmp3
) {

168 
i
;

169 
CodecID
 
id
=
CODEC_ID_FLAC
;

170 
SSCHANDLE
 *
h™dÀ
 = (SSCHANDLE*)
vp
;

171 #ifde‡
WIN32


172 
WCHAR
 
utf16_∑th
[
_MAX_PATH
+1];

173 
WCHAR
 
utf16_mode
[3];

175 
SCAN_ID3HEADER
 
id3
;

176 
size
 = 0;

177 *
fûe
;

178 *
codec
;

179 
duøti⁄
;

181 
fûe
 = 
pmp3
->
∑th
;

182 
codec
 = 
pmp3
->
code˘y≥
;

183 
duøti⁄
 = 
pmp3
->
s⁄g_Àngth
;

185 if(!
h™dÀ
)

186  
FALSE
;

188 
h™dÀ
->
duøti⁄
 = duration;

189 
h™dÀ
->
fú°_‰ame
 = 1;

190 
h™dÀ
->
øw
=0;

192 
	`pi_log
(
E_DBG
,"›íög %s\n",
fûe
);

194 if(
	`°rˇ£cmp
(
codec
,"flac") == 0) {

195 
h™dÀ
->
øw
=1;

196 
id
=
CODEC_ID_FLAC
;

199 if(
h™dÀ
->
øw
) {

200 
h™dÀ
->
bôs_≥r_ßm∂e
 = 16;

201 
h™dÀ
->
ßm∂e_øã
 = 44100;

203 if(
pmp3
->
bôs_≥r_ßm∂e
)

204 
h™dÀ
->
bôs_≥r_ßm∂e
 = 
pmp3
->bits_per_sample;

205 
h™dÀ
->
ch™√ls
 = 2;

206 
h™dÀ
->
ßm∂es
 = (
uöt32_t
)
pmp3
->
ßm∂e_cou¡
;

207 
h™dÀ
->
ßm∂e_øã
 = 
pmp3
->
ßm∂î©e
;

209 
	`pi_log
(
E_DBG
,"opening fileÑaw\n");

210 
h™dÀ
->
pCodec
 = 
	`avcodec_föd_decodî
(
id
);

211 if(!
h™dÀ
->
pCodec
) {

212 
h™dÀ
->
î∫um
 = 
SSC_FFMPEG_E_BADCODEC
;

213  
FALSE
;

216 
h™dÀ
->
pCodecCtx
 = 
	`avcodec_Æloc_c⁄ãxt
();

217 if(
	`avcodec_›í
(
h™dÀ
->
pCodecCtx
,h™dÀ->
pCodec
) < 0) {

218 
h™dÀ
->
î∫um
 = 
SSC_FFMPEG_E_CODECOPEN
;

219  
FALSE
;

222 #ifde‡
WIN32


226 
	`Mu…iByãToWideCh¨
(
CP_UTF8
,0,
fûe
,-1,
utf16_∑th
,(utf16_path)/(utf16_path[0]));

227 
	`Mu…iByãToWideCh¨
(
CP_ACP
,0,"rb",-1,
utf16_mode
,(utf16_mode)/(utf16_mode[0]));

228 
h™dÀ
->
fö
 = 
	`_wf›í
(
utf16_∑th
, 
utf16_mode
);

230 
h™dÀ
->
fö
 = 
	`f›í
(
fûe
,"rb");

232 if(!
h™dÀ
->
fö
) {

233 
	`pi_log
(
E_DBG
,"couldÇot open file\n");

234 
h™dÀ
->
î∫um
 = 
SSC_FFMPEG_E_FILEOPEN
;

235  
FALSE
;

239 if(
	`‰ód
((*)&
id3
,1,(id3),
h™dÀ
->
fö
) != (id3)) {

240 if(
	`„º‹
(
h™dÀ
->
fö
)) {

241 
	`pi_log
(
E_LOG
,"Eº‹Ñódög fûe: %s\n",
fûe
);

243 
	`pi_log
(
E_LOG
,"Sh‹àfûe: %s\n",
fûe
);

245 
h™dÀ
->
î∫um
 = 
SSC_FFMPEG_E_FILEOPEN
;

246 
	`f˛o£
(
h™dÀ
->
fö
);

247  
FALSE
;

251 if(
	`°∫cmp
(
id3
.
id
,"ID3",3)==0) {

253 
	`pi_log
(
E_DBG
,"Found ID3 header\n");

254 
size
 = (
id3
.size[0] << 21 | id3.size[1] << 14 |

255 
id3
.
size
[2] << 7 | id3.size[3]);

256 
	`f£ek
(
h™dÀ
->
fö
,
size
 + (
SCAN_ID3HEADER
),
SEEK_SET
);

257 
	`pi_log
(
E_DBG
,"HódîÜígth: %d\n",
size
);

259 
	`f£ek
(
h™dÀ
->
fö
,0,
SEEK_SET
);

262  
TRUE
;

265 
	`pi_log
(
E_DBG
,"opening file with format\n");

266 if(
	`av_›í_öput_fûe
(&
h™dÀ
->
pFmtCtx
,
fûe
,h™dÀ->
pF‹m©
,0,
NULL
) < 0) {

267 
h™dÀ
->
î∫um
 = 
SSC_FFMPEG_E_FILEOPEN
;

268  
FALSE
;

272 if(
	`av_föd_°ªam_öfo
(
h™dÀ
->
pFmtCtx
) < 0) {

273 
h™dÀ
->
î∫um
 = 
SSC_FFMPEG_E_NOSTREAM
;

274  
FALSE
;

279 
h™dÀ
->
audio_°ªam
 = -1;

280 
i
=0; i < 
h™dÀ
->
pFmtCtx
->
nb_°ªams
; i++) {

281 if(
h™dÀ
->
pFmtCtx
->
°ªams
[
i
]->
codec
->
codec_ty≥
==
CODEC_TYPE_AUDIO
) {

282 
h™dÀ
->
audio_°ªam
 = 
i
;

287 if(
h™dÀ
->
audio_°ªam
 == -1) {

288 
h™dÀ
->
î∫um
 = 
SSC_FFMPEG_E_NOAUDIO
;

289  
FALSE
;

292 
h™dÀ
->
pCodecCtx
 = h™dÀ->
pFmtCtx
->
°ªams
[h™dÀ->
audio_°ªam
]->
codec
;

294 
h™dÀ
->
pCodec
 = 
	`avcodec_föd_decodî
(h™dÀ->
pCodecCtx
->
codec_id
);

295 if(!
h™dÀ
->
pCodec
) {

296 
h™dÀ
->
î∫um
 = 
SSC_FFMPEG_E_BADCODEC
;

297  
FALSE
;

300 if(
h™dÀ
->
pCodec
->
ˇ∑bûôõs
 & 
CODEC_CAP_TRUNCATED
)

301 
h™dÀ
->
pCodecCtx
->
Êags
 |
CODEC_FLAG_TRUNCATED
;

303 if(
	`avcodec_›í
(
h™dÀ
->
pCodecCtx
, h™dÀ->
pCodec
) < 0) {

304 
h™dÀ
->
î∫um
 = 
SSC_FFMPEG_E_CODECOPEN
;

305  
FALSE
;

308 
h™dÀ
->
pFøme
 = 
	`avcodec_Æloc_‰ame
();

310  
TRUE
;

311 
	}
}

313 
	$ssc_ffm≥g_˛o£
(*
vp
) {

314 
SSCHANDLE
 *
h™dÀ
 = (SSCHANDLE *)
vp
;

316 if(!
h™dÀ
)

317  
TRUE
;

319 if(
h™dÀ
->
fö
)

320 
	`f˛o£
(
h™dÀ
->
fö
);

322 if(
h™dÀ
->
pFøme
)

323 
	`av_‰ì
(
h™dÀ
->
pFøme
);

325 if(
h™dÀ
->
øw
) {

326 if(
h™dÀ
->
pCodecCtx
)

327 
	`avcodec_˛o£
(
h™dÀ
->
pCodecCtx
);

330 if(
h™dÀ
->
pFmtCtx
)

331 
	`av_˛o£_öput_fûe
(
h™dÀ
->
pFmtCtx
);

333 
	`mem£t
(
h™dÀ
,0,(
SSCHANDLE
));

334  
TRUE
;

335 
	}
}

338 
	$_ssc_ffm≥g_ªad_‰ame
(*
vp
, *
buf„r
, 
Àn
) {

339 
SSCHANDLE
 *
h™dÀ
 = (SSCHANDLE *)
vp
;

340 
d©a_size
;

341 
Àn1
;

342 
out_size
;

344 if(
h™dÀ
->
øw
) {

346 if(!
h™dÀ
->
fûe_byãs_ªad
) {

348 
h™dÀ
->
fûe_buf„r_±r
 = h™dÀ->
fûe_buf„r
;

349 
h™dÀ
->
fûe_byãs_ªad
 = ()
	`‰ód
(h™dÀ->
fûe_buf„r
,

350 1, (
h™dÀ
->
fûe_buf„r
),

351 
h™dÀ
->
fö
);

352 
h™dÀ
->
fûe_buf„r_±r
 = h™dÀ->
fûe_buf„r
;

355 if(!
h™dÀ
->
fûe_byãs_ªad
)

358 
Àn1
 = 
	`avcodec_decode_audio
(
h™dÀ
->
pCodecCtx
,(*)
buf„r
,

359 &
out_size
,

360 (
uöt8_t
*)
h™dÀ
->
fûe_buf„r_±r
,

361 
h™dÀ
->
fûe_byãs_ªad
);

363 if(
Àn1
 < 0)

366 
h™dÀ
->
fûe_byãs_ªad
 -
Àn1
;

367 
h™dÀ
->
fûe_buf„r_±r
 +
Àn1
;

369 if(
out_size
 > 0) {

370  
out_size
;

376 if(
h™dÀ
->
fú°_‰ame
) {

377 
h™dÀ
->
fú°_‰ame
 = 0;

378 
h™dÀ
->
∑ckë
.
d©a
 = 
NULL
;

382 
h™dÀ
->
∑ckë_size
 > 0) {

383 
Àn1
=
	`avcodec_decode_audio
(
h™dÀ
->
pCodecCtx
,

384 (
öt16_t
*)
buf„r
,

385 &
d©a_size
,

386 
h™dÀ
->
∑ckë_d©a
,

387 
h™dÀ
->
∑ckë_size
);

389 if(
Àn1
 < 0) {

391 
h™dÀ
->
∑ckë_size
=0;

395 
h™dÀ
->
∑ckë_d©a
 +
Àn1
;

396 
h™dÀ
->
∑ckë_size
 -
Àn1
;

398 if(
d©a_size
 <= 0)

401 
h™dÀ
->
tŸÆ_decoded
 +
d©a_size
;

402  
d©a_size
;

406 if(
h™dÀ
->
∑ckë
.
d©a
)

407 
	`av_‰ì_∑ckë
(&
h™dÀ
->
∑ckë
);

409 if(
	`av_ªad_∑ckë
(
h™dÀ
->
pFmtCtx
, &h™dÀ->
∑ckë
) < 0)

411 } 
h™dÀ
->
∑ckë
.
°ªam_ödex
 !h™dÀ->
audio_°ªam
);

413 
h™dÀ
->
∑ckë_size
 = h™dÀ->
∑ckë
.
size
;

414 
h™dÀ
->
∑ckë_d©a
 = h™dÀ->
∑ckë
.
d©a
;

416 
	}
}

418 
	$_ssc_ffm≥g_swab
(*
buf„r
, 
byãs_ªtu∫ed
) {

419 
blocks
 = 
byãs_ªtu∫ed
 / 2;

420 
ödex
;

421 
tmp
;

423 
ödex
 = 0; index < 
blocks
; index++) {

424 
tmp
 = 
buf„r
[
ödex
*2];

425 
buf„r
[
ödex
*2] = buffer[index*2 + 1];

426 
buf„r
[
ödex
*2 + 1] = 
tmp
;

428 
	}
}

430 
	$_ssc_ffm≥g_À32
(*
d°
, 
vÆue
) {

431 
d°
[0] = 
vÆue
 & 0xFF;

432 
d°
[1] = (
vÆue
 >> 8) & 0xFF;

433 
d°
[2] = (
vÆue
 >> 16) & 0xFF;

434 
d°
[3] = (
vÆue
 >> 24) & 0xFF;

435 
	}
}

437 
	$_ssc_ffm≥g_À16
(*
d°
, 
vÆue
) {

438 
d°
[0] = 
vÆue
 & 0xFF;

439 
d°
[1] = (
vÆue
 >> 8) & 0xFF;

440 
	}
}

442 
	$ssc_ffm≥g_ªad
(*
vp
, *
buf„r
, 
Àn
) {

443 
SSCHANDLE
 *
h™dÀ
 = (SSCHANDLE *)
vp
;

444 
byãs_ªtu∫ed
 = 0;

445 
byãs_to_c›y
;

446 
size
;

448 
ch™√ls
;

449 
ßm∂e_øã
;

450 
bôs_≥r_ßm∂e
;

451 
byã_øã
;

452 
duøti⁄
 = 180000;

453 
d©a_Àn
;

454 
block_Æign
;

455 
uöt16_t
 
ã°1
 = 0xaabb;

456 
ã°2
[2] = { 0xaa, 0xbb };

459 if(
h™dÀ
->
wav_off£t
 !(h™dÀ->
wav_hódî
)) {

461 if(!
h™dÀ
->
wav_off£t
) {

463 if(
h™dÀ
->
øw
) {

464 
ch™√ls
 = 
h™dÀ
->channels;

465 
ßm∂e_øã
 = 
h™dÀ
->sample_rate;

466 
bôs_≥r_ßm∂e
 = 
h™dÀ
->bits_per_sample;

468 
ch™√ls
 = 
h™dÀ
->
pCodecCtx
->channels;

469 
ßm∂e_øã
 = 
h™dÀ
->
pCodecCtx
->sample_rate;

470 
h™dÀ
->
pCodecCtx
->
ßm∂e_fmt
) {

471 
SAMPLE_FMT_S16
:

472 
bôs_≥r_ßm∂e
 = 16;

474 
SAMPLE_FMT_S32
:

476 
bôs_≥r_ßm∂e
 = 32;

479 
bôs_≥r_ßm∂e
 = 16;

484 
h™dÀ
->
swab
 = (
bôs_≥r_ßm∂e
 == 16) &&

485 (
	`memcmp
((*)&
ã°1
,
ã°2
,2) == 0);

487 if(
h™dÀ
->
duøti⁄
)

488 
duøti⁄
 = 
h™dÀ
->duration;

490 if(
h™dÀ
->
ßm∂es
) {

491 
d©a_Àn
 = ((
bôs_≥r_ßm∂e
 * 
ch™√ls
 / 8Ë* 
h™dÀ
->
ßm∂es
);

493 
d©a_Àn
 = ((
bôs_≥r_ßm∂e
 * 
ßm∂e_øã
 * 
ch™√ls
 / 8Ë* (
duøti⁄
/1000));

496 
byã_øã
 = 
ßm∂e_øã
 * 
ch™√ls
 * 
bôs_≥r_ßm∂e
 / 8;

497 
block_Æign
 = 
ch™√ls
 * 
bôs_≥r_ßm∂e
 / 8;

499 
	`pi_log
(
E_DBG
,"Ch™√ls.......: %d\n",
ch™√ls
);

500 
	`pi_log
(
E_DBG
,"Sam∂êøã....: %d\n",
ßm∂e_øã
);

501 
	`pi_log
(
E_DBG
,"Bôs/Sam∂e....: %d\n",
bôs_≥r_ßm∂e
);

502 
	`pi_log
(
E_DBG
,"Swab...........: %d\n",
h™dÀ
->
swab
);

504 
	`mem˝y
(&
h™dÀ
->
wav_hódî
[0],"RIFF",4);

505 
	`_ssc_ffm≥g_À32
(&
h™dÀ
->
wav_hódî
[4],36 + 
d©a_Àn
);

506 
	`mem˝y
(&
h™dÀ
->
wav_hódî
[8],"WAVE",4);

507 
	`mem˝y
(&
h™dÀ
->
wav_hódî
[12],"fmt ",4);

508 
	`_ssc_ffm≥g_À32
(&
h™dÀ
->
wav_hódî
[16],16);

509 
	`_ssc_ffm≥g_À16
(&
h™dÀ
->
wav_hódî
[20],1);

510 
	`_ssc_ffm≥g_À16
(&
h™dÀ
->
wav_hódî
[22],
ch™√ls
);

511 
	`_ssc_ffm≥g_À32
(&
h™dÀ
->
wav_hódî
[24],
ßm∂e_øã
);

512 
	`_ssc_ffm≥g_À32
(&
h™dÀ
->
wav_hódî
[28],
byã_øã
);

513 
	`_ssc_ffm≥g_À16
(&
h™dÀ
->
wav_hódî
[32],
block_Æign
);

514 
	`_ssc_ffm≥g_À16
(&
h™dÀ
->
wav_hódî
[34],
bôs_≥r_ßm∂e
);

515 
	`mem˝y
(&
h™dÀ
->
wav_hódî
[36],"data",4);

516 
	`_ssc_ffm≥g_À32
(&
h™dÀ
->
wav_hódî
[40],
d©a_Àn
);

519 
byãs_to_c›y
 = (
h™dÀ
->
wav_hódî
Ë- h™dÀ->
wav_off£t
;

520 if(
Àn
 < 
byãs_to_c›y
)

521 
byãs_to_c›y
 = 
Àn
;

523 
	`mem˝y
(
buf„r
,&
h™dÀ
->
wav_hódî
[h™dÀ->
wav_off£t
],
byãs_to_c›y
);

524 
h™dÀ
->
wav_off£t
 +
byãs_to_c›y
;

525  
byãs_to_c›y
;

531 if(
h™dÀ
->
buf_ªmaödî_Àn
) {

533 
byãs_to_c›y
 = 
h™dÀ
->
buf_ªmaödî_Àn
;

534 if(
h™dÀ
->
buf_ªmaödî_Àn
 > 
Àn
) {

535 
byãs_to_c›y
 = 
Àn
;

538 
	`mem˝y
(
buf„r
,
h™dÀ
->
buf_ªmaödî
,
byãs_to_c›y
);

539 
byãs_ªtu∫ed
 = 
byãs_to_c›y
;

540 
h™dÀ
->
buf_ªmaödî_Àn
 -
byãs_to_c›y
;

541 if(
h™dÀ
->
buf_ªmaödî_Àn
) {

542 
h™dÀ
->
buf_ªmaödî
 +
byãs_ªtu∫ed
;

547 
byãs_ªtu∫ed
 < 
Àn
) {

548 
size
 = 
	`_ssc_ffm≥g_ªad_‰ame
(
h™dÀ
,h™dÀ->
buf„r
,
BUFFER_SIZE
);

549 if(
size
 == 0) {

551 if(
h™dÀ
->
swab
)

552 
	`_ssc_ffm≥g_swab
(
buf„r
,
byãs_ªtu∫ed
);

553  
byãs_ªtu∫ed
;

556 if(
size
 < 0) {

560 
byãs_to_c›y
 = 
Àn
 - 
byãs_ªtu∫ed
;

561 if(
size
 < 
byãs_to_c›y
)

562 
byãs_to_c›y
 = 
size
;

564 
	`mem˝y
(
buf„r
 + 
byãs_ªtu∫ed
, 
h™dÀ
->buf„r, 
byãs_to_c›y
);

565 
byãs_ªtu∫ed
 +
byãs_to_c›y
;

567 if(
size
 > 
byãs_to_c›y
) {

568 
h™dÀ
->
buf_ªmaödî
 = h™dÀ->
buf„r
 + 
byãs_to_c›y
;

569 
h™dÀ
->
buf_ªmaödî_Àn
 = 
size
 - 
byãs_to_c›y
;

574 if(
h™dÀ
->
swab
)

575 
	`_ssc_ffm≥g_swab
(
buf„r
,
byãs_ªtu∫ed
);

577  
byãs_ªtu∫ed
;

578 
	}
}

	@plugins/ssc-script.c

5 #ifde‡
HAVE_CONFIG_H


6 
	~"c⁄fig.h
"

9 #ifde‡
HAVE_STDINT_H


10 
	~<°döt.h
>

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

17 
	~"ff-db°ru˘.h
"

18 
	~"ff-∂ugös.h
"

20 #i‚de‡
TRUE


21 
	#TRUE
 1

	)

22 
	#FALSE
 0

	)

26 *
ssc_s¸ùt_öô
();

27 
ssc_s¸ùt_deöô
(*
vp
);

28 
ssc_s¸ùt_›í
(*
vp
, 
MP3FILE
 *
pmp3
);

29 
ssc_s¸ùt_˛o£
(*
vp
);

30 
ssc_s¸ùt_ªad
(*
vp
, *
buf„r
, 
Àn
);

31 *
ssc_s¸ùt_îr‹
(*
vp
);

33 
PLUGIN_INFO
 *
∂ugö_öfo
();

35 
	#ö‚
 ((
PLUGIN_INPUT_FN
 *)(
_pi
.
pi
))

	)

38 
PLUGIN_TRANSCODE_FN
 
	g_±‚
 = {

39 
ssc_s¸ùt_öô
,

40 
ssc_s¸ùt_deöô
,

41 
ssc_s¸ùt_›í
,

42 
ssc_s¸ùt_˛o£
,

43 
ssc_s¸ùt_ªad
,

44 
ssc_s¸ùt_îr‹


47 
PLUGIN_INFO
 
	g_pi
 = {

48 
PLUGIN_VERSION
,

49 
PLUGIN_TRANSCODE
,

50 "ssc-s¸ùt/" 
VERSION
,

51 
NULL
,

52 
NULL
,

53 &
_±‚
,

54 
NULL
,

55 
NULL


58 
	sèg_ssc_h™dÀ
 {

59 
FILE
 *
	mfö
;

60 } 
	tSSCHANDLE
;

62 *
	g_ssc_s¸ùt_¥ogøm
 = 
NULL
;

67 
PLUGIN_INFO
 *
	$∂ugö_öfo
() {

68 *
code˛i°
;

70 
_ssc_s¸ùt_¥ogøm
 = 
	`pi_c⁄f_Æloc_°rög
("gíîÆ","ssc_¥og",
NULL
);

71 if(!
_ssc_s¸ùt_¥ogøm
) {

72 
	`pi_log
(
E_INF
,"No sscÖrogram specified for scriptÅranscoder.\n");

73  
NULL
;

77 
code˛i°
 = 
	`pi_c⁄f_Æloc_°rög
("gíîÆ","ssc_code˘y≥s",
NULL
);

78 if(!
code˛i°
) {

79 
	`pi_log
(
E_INF
,"No codectypes specified for scriptÅranscoder.\n");

80  
NULL
;

83 
_pi
.
code˛i°
 = codeclist;

84  &
_pi
;

85 
	}
}

91 *
	$ssc_s¸ùt_öô
() {

92 
SSCHANDLE
 *
h™dÀ
;

94 
h™dÀ
 = (
SSCHANDLE
*)
	`mÆloc
((SSCHANDLE));

95 if(
h™dÀ
) {

96 
	`mem£t
(
h™dÀ
,0,(
SSCHANDLE
));

99  (*)
h™dÀ
;

100 
	}
}

105 *
	$ssc_s¸ùt_îr‹
(*
vp
) {

107 
	}
}

115 
	$ssc_s¸ùt_deöô
(*
vp
) {

116 
SSCHANDLE
 *
h™dÀ
 = (SSCHANDLE*)
vp
;

118 if(
h™dÀ
->
fö
) {

119 
	`p˛o£
(
h™dÀ
->
fö
);

122 if(
h™dÀ
)

123 
	`‰ì
(
h™dÀ
);

124 
	}
}

134 
	$ssc_s¸ùt_›í
(*
vp
, 
MP3FILE
 *
pmp3
) {

135 
SSCHANDLE
 *
h™dÀ
 = (SSCHANDLE*)
vp
;

136 *
cmd
;

137 *
√w∑th
;

138 *
mëach¨s
 = "\"\\!(){}#*?$&<>`";

139 
mëacou¡
 = 0;

140 *
§c
,*
d°
;

141 *
fûe
;

142 *
codec
;

143 
duøti⁄
;

145 
fûe
 = 
pmp3
->
∑th
;

146 
codec
 = 
pmp3
->
code˘y≥
;

147 
duøti⁄
 = 
pmp3
->
s⁄g_Àngth
;

150 
§c
=
fûe
;

151 *
§c
) {

152 if(
	`°rchr
(
mëach¨s
,*
§c
))

153 
mëacou¡
+=5;

154 
§c
++;

157 if(
mëach¨s
) {

158 
√w∑th
 = (*)
	`mÆloc
(
	`°æí
(
fûe
Ë+ 
mëacou¡
 + 1);

159 if(!
√w∑th
) {

160 
	`pi_log
(
E_FATAL
,"ssc_script_open: malloc\n");

162 
§c
=
fûe
;

163 
d°
=
√w∑th
;

165 *
§c
) {

166 if(
	`°rchr
(
mëach¨s
,*
§c
)) {

167 *
d°
++='"';

168 *
d°
++='\'';

169 *
d°
++=*
§c
++;

170 *
d°
++='\'';

171 *
d°
++='"';

173 *
d°
++=*
§c
++;

176 *
d°
='\0';

178 
√w∑th
 = 
	`°rdup
(
fûe
);

182 
cmd
=(*)
	`mÆloc
(
	`°æí
(
_ssc_s¸ùt_¥ogøm
) +

183 
	`°æí
(
fûe
) +

185 
	`•rötf
(
cmd
, "%s \"%s\" 0 %lu.%03lu \"%s\"",

186 
_ssc_s¸ùt_¥ogøm
, 
√w∑th
, (Ë
duøti⁄
 / 1000,

187 ()
duøti⁄
 % 1000, (
codec
 && *codec) ? codec : "*");

188 
	`pi_log
(
E_INF
,"Executög %s\n",
cmd
);

189 
h™dÀ
->
fö
 = 
	`p›í
(
cmd
, "r");

190 
	`‰ì
(
√w∑th
);

191 
	`‰ì
(
cmd
);

193  
TRUE
;

194 
	}
}

196 
	$ssc_s¸ùt_˛o£
(*
vp
) {

197 
SSCHANDLE
 *
h™dÀ
 = (SSCHANDLE*)
vp
;

199 if(
h™dÀ
->
fö
) {

200 
	`p˛o£
(
h™dÀ
->
fö
);

201 
h™dÀ
->
fö
=
NULL
;

204  
TRUE
;

205 
	}
}

207 
	$ssc_s¸ùt_ªad
(*
vp
, *
buf„r
, 
Àn
) {

208 
SSCHANDLE
 *
h™dÀ
 = (SSCHANDLE*)
vp
;

210  
	`‰ód
(
buf„r
,1,
Àn
,
h™dÀ
->
fö
);

211 
	}
}

	@plugins/xml-rpc.c

7 #ifde‡
HAVE_CONFIG_H


8 
	~"c⁄fig.h
"

11 #ifde‡
HAVE_STDINT_H


12 
	~<°döt.h
>

15 
	~<°dio.h
>

16 
	~<°d¨g.h
>

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

19 
	~<time.h
>

20 
	~<zlib.h
>

22 
	~"com∑t.h
"

23 
	~"ff-db°ru˘.h
"

24 
	~"ff-∂ugös.h
"

25 
	~"r•.h
"

26 
	~"xml-Ωc.h
"

30 
	sèg_xml°ack
 {

31 *
	mèg
;

32 
èg_xml°ack
 *
	m√xt
;

33 } 
	tXMLSTACK
;

35 
	#XML_STREAM_BLOCK
 4096

	)

36 
	sèg_xml_°ªambuf„r
 {

37 
z_°ªam
 
	m°rm
;

38 *
	mö_buf„r
;

39 *
	mout_buf„r
;

40 } 
	tXML_STREAMBUFFER
;

42 
	sèg_xml°ru˘
 {

43 
WS_CONNINFO
 *
	mpwsc
;

44 
	m°ack_Àvñ
;

45 
XMLSTACK
 
	m°ack
;

46 
XML_STREAMBUFFER
 *
	mpsb
;

50 
xml_gë_°©s
(
WS_CONNINFO
 *
pwsc
);

51 
xml_£t_c⁄fig
(
WS_CONNINFO
 *
pwsc
);

52 
xml_ªtu∫_îr‹
(
WS_CONNINFO
 *
pwsc
, 
î∫o
, *
îr°r
);

53 *
xml_ítôy_ícode
(*
‹igöÆ
);

55 
XML_STREAMBUFFER
 *
xml_°ªam_›í
();

56 
xml_°ªam_wrôe
(
XMLSTRUCT
 *
pxml
, *
out
);

57 
xml_°ªam_˛o£
(
XMLSTRUCT
 *
pxml
);

59 
	$xml_wrôe
(
XMLSTRUCT
 *
pxml
, *
fmt
, ...) {

60 
buf„r
[1024];

61 
va_li°
 
≠
;

62 
ªsu…
=0;

64 
	`va_°¨t
(
≠
, 
fmt
);

65 
	`v¢¥ötf
(
buf„r
, 1024, 
fmt
, 
≠
);

66 
	`va_íd
(
≠
);

68 if(
pxml
->
psb
) {

69 
ªsu…
=
	`xml_°ªam_wrôe
(
pxml
, 
buf„r
);

70 if(!
ªsu…
)

71 
ªsu…
 = -1;

73 
ªsu…
=
	`pi_ws_wrôefd
(
pxml
->
pwsc
,"%s",
buf„r
);

76  
ªsu…
;

77 
	}
}

79 
	$xml_ªtu∫_îr‹
(
WS_CONNINFO
 *
pwsc
, 
î∫o
, *
îr°r
) {

80 
XMLSTRUCT
 *
pxml
;

82 
pxml
=
	`xml_öô
(
pwsc
,
TRUE
);

83 
	`xml_push
(
pxml
,"results");

85 
	`xml_ouçut
(
pxml
,"°©us","%d",
î∫o
);

86 
	`xml_ouçut
(
pxml
,"°©us°rög","%s",
îr°r
);

88 
	`xml_p›
(
pxml
);

89 
	`xml_deöô
(
pxml
);

91 
	}
}

97 
XML_STREAMBUFFER
 *
	$xml_°ªam_›í
() {

98 
XML_STREAMBUFFER
 *
psb
;

100 
psb
 = (
XML_STREAMBUFFER
*Ë
	`mÆloc
((XML_STREAMBUFFER));

101 if(!
psb
) {

102 
	`pi_log
(
E_FATAL
,"xml_stream_open: malloc\n");

105 
psb
->
out_buf„r
 = (*Ë
	`mÆloc
(
XML_STREAM_BLOCK
);

106 
psb
->
ö_buf„r
 = (*Ë
	`mÆloc
(
XML_STREAM_BLOCK
);

108 if((!
psb
->
out_buf„r
Ë|| (!psb->
ö_buf„r
)) {

109 
	`pi_log
(
E_FATAL
,"xml_stream_open: malloc\n");

112 
psb
->
°rm
.
zÆloc
 = 
Z_NULL
;

113 
psb
->
°rm
.
z‰ì
 = 
Z_NULL
;

114 
psb
->
°rm
.
›aque
 = 
Z_NULL
;

116 
psb
->
°rm
.
√xt_ö
 =Ösb->
ö_buf„r
;

117 
psb
->
°rm
.
√xt_out
 =Ösb->
out_buf„r
;

119 
	`deÊ©eInô2
(&
psb
->
°rm
, 
Z_DEFAULT_COMPRESSION
, 
Z_DEFLATED
,

120 24, 8, 
Z_DEFAULT_STRATEGY
);

121  
psb
;

122 
	}
}

127 
	$xml_°ªam_wrôe
(
XMLSTRUCT
 *
pxml
, *
out
) {

128 
d⁄e
 = 0;

129 
ªsu…
;

130 
XML_STREAMBUFFER
 *
psb
 = 
pxml
->psb;

132 if((!
out
)||(!
	`°æí
(out)))

133  
TRUE
;

135 if(
	`°æí
(
out
) > 1024)

136  
TRUE
;

138 
	`mem˝y
(
psb
->
ö_buf„r
,
out
,()
	`°æí
(out));

139 
psb
->
°rm
.
avaû_ö
 = ()
	`°æí
(
out
);

140 
psb
->
°rm
.
√xt_ö
 =Ösb->
ö_buf„r
;

141 
psb
->
°rm
.
√xt_out
 =Ösb->
out_buf„r
;

142 
psb
->
°rm
.
avaû_out
 = 
XML_STREAM_BLOCK
;

144 !
d⁄e
) {

145 
ªsu…
 = 
	`deÊ©e
(&
psb
->
°rm
, 
Z_NO_FLUSH
);

146 if(
ªsu…
 !
Z_OK
) {

147 
	`pi_log
(
E_FATAL
,"Eº‹ i¿zlib: %d\n",
ªsu…
);

149 
	`pi_ws_wrôebö¨y
(
pxml
->
pwsc
,(*)
psb
->
out_buf„r
,

150 
XML_STREAM_BLOCK
-
psb
->
°rm
.
avaû_out
);

151 if(
psb
->
°rm
.
avaû_out
 != 0) {

152 
d⁄e
=1;

154 
psb
->
°rm
.
avaû_out
 = 
XML_STREAM_BLOCK
;

155 
psb
->
°rm
.
√xt_out
 =Ösb->
out_buf„r
;

158  
TRUE
;

159 
	}
}

164 
	$xml_°ªam_˛o£
(
XMLSTRUCT
 *
pxml
) {

165 
d⁄e
 = 0;

166 
XML_STREAMBUFFER
 *
psb
 = 
pxml
->psb;

169 !
d⁄e
) {

170 
psb
->
°rm
.
avaû_out
 = 
XML_STREAM_BLOCK
;

171 
psb
->
°rm
.
√xt_out
 =Ösb->
out_buf„r
;

172 
psb
->
°rm
.
avaû_ö
 = 0;

173 
psb
->
°rm
.
√xt_ö
 =Ösb->
ö_buf„r
;

175 
	`deÊ©e
(&
psb
->
°rm
,
Z_FINISH
);

176 
	`pi_ws_wrôebö¨y
(
pxml
->
pwsc
,(*)
psb
->
out_buf„r
,

177 
XML_STREAM_BLOCK
 - 
psb
->
°rm
.
avaû_out
);

179 if(
psb
->
°rm
.
avaû_out
 != 0)

180 
d⁄e
=1;

183 
	`pi_log
(
E_DBG
,"Done sending xml stream\n");

184 
	`deÊ©eEnd
(&
psb
->
°rm
);

185 if(
psb
->
out_buf„r
 !
NULL
)

186 
	`‰ì
(
psb
->
out_buf„r
);

187 if(
psb
->
ö_buf„r
 !
NULL
)

188 
	`‰ì
(
psb
->
ö_buf„r
);

189 
	`‰ì
(
psb
);

191  
TRUE
;

192 
	}
}

202 
XMLSTRUCT
 *
	$xml_öô
(
WS_CONNINFO
 *
pwsc
, 
emô_hódî
) {

203 
XMLSTRUCT
 *
pxml
;

204 *
ac˚±
;

205 *
nogzù
;

207 
pxml
=(
XMLSTRUCT
*)
	`mÆloc
((XMLSTRUCT));

208 if(!
pxml
) {

209 
	`pi_log
(
E_FATAL
,"MallocÉrror\n");

212 
	`mem£t
(
pxml
,0,(
XMLSTRUCT
));

214 
pxml
->
pwsc
 =Öwsc;

217 
nogzù
 = 
	`pi_ws_gëv¨
(
pwsc
,"nogzip");

218 
ac˚±
 = 
	`pi_ws_gëªque°hódî
(
pwsc
,"accept-encoding");

220 if((!
nogzù
Ë&& (
ac˚±
Ë&& (
	`°rˇ£°r
(accept,"gzip"))) {

221 
	`pi_log
(
E_DBG
,"Gzipping output\n");

222 
pxml
->
psb
 = 
	`xml_°ªam_›í
();

223 if(
pxml
->
psb
) {

224 
	`pi_ws_addª•⁄£hódî
(
pwsc
,"Content-Encoding","gzip");

225 
	`pi_ws_addª•⁄£hódî
(
pwsc
,"Vary","Accept-Encoding");

226 
	`pi_ws_addª•⁄£hódî
(
pwsc
,"Connection","Close");

231 
	`pi_ws_addª•⁄£hódî
(
pwsc
,"Cache-Control","no-cache");

232 
	`pi_ws_addª•⁄£hódî
(
pwsc
,"Expires","-1");

234 if(
emô_hódî
) {

235 
	`pi_ws_addª•⁄£hódî
(
pwsc
,"Content-Type","text/xml; charset=utf-8");

236 
	`pi_ws_wrôefd
(
pwsc
,"HTTP/1.0 200 OK\r\n");

237 
	`pi_ws_emôhódîs
(
pwsc
);

240 
	`xml_wrôe
(
pxml
,"<?xml version=\"1.0\"Éncoding=\"UTF-8\" standalone=\"yes\"?>");

243  
pxml
;

244 
	}
}

253 
	$xml_push
(
XMLSTRUCT
 *
pxml
, *
ãrm
) {

254 
XMLSTACK
 *
p°ack
;

256 
p°ack
 = (
XMLSTACK
 *)
	`mÆloc
((XMLSTACK));

257 
p°ack
->
√xt
=
pxml
->
°ack
.next;

258 
p°ack
->
èg
=
	`°rdup
(
ãrm
);

259 
pxml
->
°ack
.
√xt
=
p°ack
;

261 
pxml
->
°ack_Àvñ
++;

263 
	`xml_wrôe
(
pxml
,"<%s>",
ãrm
);

264 
	}
}

271 
	$xml_p›
(
XMLSTRUCT
 *
pxml
) {

272 
XMLSTACK
 *
p°ack
;

274 
p°ack
=
pxml
->
°ack
.
√xt
;

275 if(!
p°ack
) {

276 
	`pi_log
(
E_LOG
,"xml_pop:ÅriedÅoÖopánÉmpty stack\n");

280 
pxml
->
°ack
.
√xt
 = 
p°ack
->next;

282 
	`xml_wrôe
(
pxml
,"</%s>",
p°ack
->
èg
);

283 
	`‰ì
(
p°ack
->
èg
);

284 
	`‰ì
(
p°ack
);

286 
pxml
->
°ack_Àvñ
--;

287 
	}
}

294 
	$xml_ouçut
(
XMLSTRUCT
 *
pxml
, *
£˘i⁄
, *
fmt
, ...) {

295 
va_li°
 
≠
;

296 
buf
[256];

297 *
ouçut
;

298 
ªsu…
=0;

300 
	`va_°¨t
(
≠
, 
fmt
);

301 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

302 
	`va_íd
(
≠
);

304 
ouçut
 = 
	`xml_ítôy_ícode
(
buf
);

305 if(
£˘i⁄
) {

306 
	`xml_push
(
pxml
,
£˘i⁄
);

309 
ªsu…
 = 
	`xml_wrôe
(
pxml
,"%s",
ouçut
);

310 
	`‰ì
(
ouçut
);

311 if(
£˘i⁄
) {

312 
	`xml_p›
(
pxml
);

315  
ªsu…
;

316 
	}
}

323 
	$xml_deöô
(
XMLSTRUCT
 *
pxml
) {

324 
XMLSTACK
 *
p°ack
;

326 if(
pxml
->
°ack
.
√xt
) {

327 
	`pi_log
(
E_LOG
,"xml_deinit:Éntries still on stack (%s)\n",

328 
pxml
->
°ack
.
√xt
->
èg
);

331 (
p°ack
=
pxml
->
°ack
.
√xt
)) {

332 
pxml
->
°ack
.
√xt
=
p°ack
->next;

333 
	`‰ì
(
p°ack
->
èg
);

334 
	`‰ì
(
p°ack
);

337 if(
pxml
->
psb
) {

338 
	`xml_°ªam_˛o£
(
pxml
);

341 
	`‰ì
(
pxml
);

342 
	}
}

347 *
	$xml_ítôy_ícode
(*
‹igöÆ
) {

348 *
√w
;

349 *
s
, *
d
;

350 
de°size
;

352 
de°size
 = 6*()
	`°æí
(
‹igöÆ
)+1;

353 
√w
=(*)
	`mÆloc
(
de°size
);

354 if(!
√w
Ë 
NULL
;

356 
	`mem£t
(
√w
,0x00,
de°size
);

358 
s
=
‹igöÆ
;

359 
d
=
√w
;

361 *
s
) {

362 *
s
) {

364 
	`°rˇt
(
d
,"&gt;");

365 
d
 += 4;

366 
s
++;

369 
	`°rˇt
(
d
,"&lt;");

370 
d
 += 4;

371 
s
++;

374 
	`°rˇt
(
d
,"&quot;");

375 
d
 += 6;

376 
s
++;

379 
	`°rˇt
(
d
,"&apos;");

380 
d
 += 6;

381 
s
++;

384 
	`°rˇt
(
d
,"&amp;");

385 
d
 += 5;

386 
s
++;

389 *
d
++ = *
s
++;

393  
√w
;

394 
	}
}

	@plugins/xml-rpc.h

5 #i‚de‡
_XMLRPC_H_


6 
	#_XMLRPC_H_


	)

8 
	~"ff-∂ugös.h
"

10 
	gèg_xml°ru˘
;

11 
èg_xml°ru˘
 
	tXMLSTRUCT
;

12 
èg_ws_c⁄nöfo
 
	tWS_CONNINFO
;

14 
XMLSTRUCT
 *
xml_öô
(
WS_CONNINFO
 *
pwsc
, 
emô_hódî
);

15 
xml_push
(
XMLSTRUCT
 *
pxml
, *
ãrm
);

16 
xml_p›
(
XMLSTRUCT
 *
pxml
);

17 
xml_ouçut
(
XMLSTRUCT
 *
pxml
, *
£˘i⁄
, *
fmt
, ...);

18 
xml_deöô
(
XMLSTRUCT
 *
pxml
);

	@redblack.c

1 
	grcsid
[]="$Id:Ñedblack.c 1484 2007-01-17 01:06:16ZÑpedde $";

27 #ifde‡
HAVE_CONFIG_H


28 
	~"c⁄fig.h
"

31 
	~<°ddef.h
>

32 
	~<°dlib.h
>

33 #ifde‡
HAVE_UNISTD_H


34 
	~<uni°d.h
>

37 
	~"dØpd.h
"

38 
	~"ªdbœck.h
"

40 
	#as£π
(
ex¥
)

	)

48 
	enodecﬁour
 { 
	mBLACK
, 
	mRED
 };

50 
	$RB_ENTRY
(
node
)

52 
	`RB_ENTRY
(
node
Ë*
À·
;

53 
	`RB_ENTRY
(
node
Ë*
right
;

54 
	`RB_ENTRY
(
node
Ë*
up
;

55 
nodecﬁour
 
cﬁour
;

56 #ifde‡
RB_INLINE


57 
	`RB_ENTRY
(
d©a_t
Ë
key
;

58 
	#RB_GET
(
x
,
y
Ë&x->
	)
y

59 
	#RB_SET
(
x
,
y
,
v
Ëx->y = *(v)

	)

61 c⁄° 
	`RB_ENTRY
(
d©a_t
Ë*
key
;

62 
	#RB_GET
(
x
,
y
Ëx->
	)
y

63 
	#RB_SET
(
x
,
y
,
v
Ëx->y = 
	)
v

65 
	}
};

74 
	$RB_ENTRY
(
node
Ë
	`RB_ENTRY
(
_nuŒ
)={&RB_ENTRY(_nuŒ), &RB_ENTRY(_nuŒ), &RB_ENTRY(_nuŒ), 
BLACK
};

75 
	#RBNULL
 (&
	`RB_ENTRY
(
_nuŒ
))

	)

77 #i‡
deföed
(
USE_SBRK
)

79 
RB_ENTRY
(
node
Ë*RB_ENTRY(
_Æloc
)();

80 
	$RB_ENTRY
(
_‰ì
)(
	`RB_ENTRY
(
node
) *);

84 
	`RB_ENTRY
(
node
Ë*
	$RB_ENTRY
(
_Æloc
)(Ë{ (
	`RB_ENTRY
(
node
Ë*Ë
	`mÆloc
((RB_ENTRY“ode)));
	}
}

85 
	$RB_ENTRY
(
_‰ì
)(
	`RB_ENTRY
(
node
Ë*
x
Ë{
	`‰ì
(x);
	}
}

90 
	$RB_ENTRY
(
_À·_rŸ©e
)(
	`RB_ENTRY
(
node
) **, RB_ENTRY(node) *);

91 
	$RB_ENTRY
(
_right_rŸ©e
)(
	`RB_ENTRY
(
node
) **, RB_ENTRY(node) *);

92 
	`RB_ENTRY
(
node
Ë*
	$RB_ENTRY
(
_suc˚ss‹
)(c⁄° 
	`RB_ENTRY
(
node
) *);

93 
	`RB_ENTRY
(
node
Ë*
	$RB_ENTRY
(
_¥ede˚ss‹
)(c⁄° 
	`RB_ENTRY
(
node
) *);

94 
	`RB_ENTRY
(
node
Ë*
	$RB_ENTRY
(
_åavî£
)(, c⁄° 
	`RB_ENTRY
(
d©a_t
Ë* , RB_ENTRY(
åì
) *);

97 #i‚de‡
no_lookup


98 
	`RB_ENTRY
(
node
Ë*
	$RB_ENTRY
(
_lookup
)(, c⁄° 
	`RB_ENTRY
(
d©a_t
Ë* , RB_ENTRY(
åì
) *);

101 #i‚de‡
no_de°roy


102 
	$RB_ENTRY
(
_de°roy
)(
	`RB_ENTRY
(
node
) *);

105 #i‚de‡
no_dñëe


106 
	$RB_ENTRY
(
_dñëe
)(
	`RB_ENTRY
(
node
) **, RB_ENTRY(node) *);

107 
	$RB_ENTRY
(
_dñëe_fix
)(
	`RB_ENTRY
(
node
) **, RB_ENTRY(node) *);

110 #i‚de‡
no_wÆk


111 
	$RB_ENTRY
(
_wÆk
)(c⁄° 
	`RB_ENTRY
(
node
Ë*, (*)(c⁄° RB_ENTRY(
d©a_t
Ë*, c⁄° 
VISIT
, const , *), *, );

114 #i‚de‡
no_ªadli°


115 
RBLIST
 *
	$RB_ENTRY
(
_›íli°
)(c⁄° 
	`RB_ENTRY
(
node
) *);

116 c⁄° 
	`RB_ENTRY
(
d©a_t
Ë* 
	$RB_ENTRY
(
_ªadli°
)(
RBLIST
 *);

117 
	$RB_ENTRY
(
_˛o£li°
)(
RBLIST
 *);

143 #i‚de‡
RB_CUSTOMIZE


144 
RB_STATIC
 
	`RB_ENTRY
(
åì
) *

145 
	`rböô
((*
cmp
)(c⁄° *, c⁄° *, c⁄° *), c⁄° *
c⁄fig
)

147 
RB_STATIC
 
	`RB_ENTRY
(
åì
Ë*
	$RB_ENTRY
(
öô
)()

150 
	`RB_ENTRY
(
åì
Ë*
ªtvÆ
;

151 
c
;

153 
c
=
rcsid
[0];

155 i‡((
ªtvÆ
=(
	`RB_ENTRY
(
åì
Ë*Ë
	`mÆloc
((RB_ENTRY—ªe))))==
NULL
)

156 (
NULL
);

158 #i‚de‡
RB_CUSTOMIZE


159 
ªtvÆ
->
rb_cmp
=
cmp
;

160 
ªtvÆ
->
rb_c⁄fig
=
c⁄fig
;

162 
ªtvÆ
->
rb_roŸ
=
RBNULL
;

164 (
ªtvÆ
);

165 
	}
}

167 #i‚de‡
no_de°roy


168 
RB_STATIC
 

169 
	$RB_ENTRY
(
de°roy
)(
	`RB_ENTRY
(
åì
Ë*
rböfo
)

171 i‡(
rböfo
==
NULL
)

174 i‡(
rböfo
->
rb_roŸ
!=
RBNULL
)

175 
	`RB_ENTRY
(
_de°roy
)(
rböfo
->
rb_roŸ
);

177 
	`‰ì
(
rböfo
);

178 
	}
}

181 #i‚de‡
no_£¨ch


182 
RB_STATIC
 c⁄° 
RB_ENTRY
(
d©a_t
) *

183 
	$RB_ENTRY
(
£¨ch
)(c⁄° 
	`RB_ENTRY
(
d©a_t
Ë*
key
, RB_ENTRY(
åì
Ë*
rböfo
)

185 
	`RB_ENTRY
(
node
Ë*
x
;

187 i‡(
rböfo
==
NULL
)

188 (
NULL
);

190 
x
=
	`RB_ENTRY
(
_åavî£
)(1, 
key
, 
rböfo
);

192 ((
x
==
RBNULL
Ë? 
NULL
 : 
	`RB_GET
(x, 
key
));

193 
	}
}

196 #i‚de‡
no_föd


197 
RB_STATIC
 c⁄° 
RB_ENTRY
(
d©a_t
) *

198 
	$RB_ENTRY
(
föd
)(c⁄° 
	`RB_ENTRY
(
d©a_t
Ë*
key
, RB_ENTRY(
åì
Ë*
rböfo
)

200 
	`RB_ENTRY
(
node
Ë*
x
;

202 i‡(
rböfo
==
NULL
)

203 (
NULL
);

206 i‡(
rböfo
->
rb_roŸ
==
RBNULL
)

207 (
NULL
);

209 
x
=
	`RB_ENTRY
(
_åavî£
)(0, 
key
, 
rböfo
);

211 ((
x
==
RBNULL
Ë? 
NULL
 : 
	`RB_GET
(x, 
key
));

212 
	}
}

215 #i‚de‡
no_dñëe


216 
RB_STATIC
 c⁄° 
RB_ENTRY
(
d©a_t
) *

217 
	$RB_ENTRY
(
dñëe
)(c⁄° 
	`RB_ENTRY
(
d©a_t
Ë*
key
, RB_ENTRY(
åì
Ë*
rböfo
)

219 
	`RB_ENTRY
(
node
Ë*
x
;

220 c⁄° 
	`RB_ENTRY
(
d©a_t
Ë* 
y
;

222 i‡(
rböfo
==
NULL
)

223 (
NULL
);

225 
x
=
	`RB_ENTRY
(
_åavî£
)(0, 
key
, 
rböfo
);

227 i‡(
x
==
RBNULL
)

229 (
NULL
);

233 
y
=
	`RB_GET
(
x
, 
key
);

234 
	`RB_ENTRY
(
_dñëe
)(&
rböfo
->
rb_roŸ
, 
x
);

236 (
y
);

238 
	}
}

241 #i‚de‡
no_wÆk


242 
RB_STATIC
 

243 
	$RB_ENTRY
(
wÆk
)(c⁄° 
	`RB_ENTRY
(
åì
Ë*
rböfo
, (*
a˘i⁄
)(c⁄° RB_ENTRY(
d©a_t
Ë*, c⁄° 
VISIT
, c⁄° , *), *
¨g
)

245 i‡(
rböfo
==
NULL
)

248 
	`RB_ENTRY
(
_wÆk
)(
rböfo
->
rb_roŸ
, 
a˘i⁄
, 
¨g
, 0);

249 
	}
}

252 #i‚de‡
no_ªadli°


253 
RB_STATIC
 
RBLIST
 *

254 
	$RB_ENTRY
(
›íli°
)(c⁄° 
	`RB_ENTRY
(
åì
Ë*
rböfo
)

256 i‡(
rböfo
==
NULL
)

257 (
NULL
);

259 (
	`RB_ENTRY
(
_›íli°
)(
rböfo
->
rb_roŸ
));

260 
	}
}

262 
RB_STATIC
 c⁄° 
RB_ENTRY
(
d©a_t
) *

263 
	$RB_ENTRY
(
ªadli°
)(
RBLIST
 *
rbli°p
)

265 i‡(
rbli°p
==
NULL
)

266 (
NULL
);

268 (
	`RB_ENTRY
(
_ªadli°
)(
rbli°p
));

269 
	}
}

271 
RB_STATIC
 

272 
	$RB_ENTRY
(
˛o£li°
)(
RBLIST
 *
rbli°p
)

274 i‡(
rbli°p
==
NULL
)

277 
	`RB_ENTRY
(
_˛o£li°
)(
rbli°p
);

278 
	}
}

281 #i‚de‡
no_lookup


282 
RB_STATIC
 c⁄° 
RB_ENTRY
(
d©a_t
) *

283 
	$RB_ENTRY
(
lookup
)(
mode
, c⁄° 
	`RB_ENTRY
(
d©a_t
Ë*
key
, RB_ENTRY(
åì
Ë*
rböfo
)

285 
	`RB_ENTRY
(
node
Ë*
x
;

288 i‡(
rböfo
==
NULL
 ||Ñböfo->
rb_roŸ
==NULL)

289 (
NULL
);

291 
x
=
	`RB_ENTRY
(
_lookup
)(
mode
, 
key
, 
rböfo
);

293 ((
x
==
RBNULL
Ë? 
NULL
 : 
	`RB_GET
(x, 
key
));

294 
	}
}

302 
RB_ENTRY
(
node
) *

303 
	$RB_ENTRY
(
_åavî£
)(
ö£π
, c⁄° 
	`RB_ENTRY
(
d©a_t
Ë*
key
, RB_ENTRY(
åì
Ë*
rböfo
)

305 
	`RB_ENTRY
(
node
Ë*
x
,*
y
,*
z
;

306 
cmp
;

307 
found
=0;

308 
	`cmpmods
();

310 
y
=
RBNULL
;

311 
x
=
rböfo
->
rb_roŸ
;

314 
x
!=
RBNULL
 && 
found
==0)

316 
y
=
x
;

318 #i‚de‡
RB_CUSTOMIZE


319 
cmp
=
	`RB_CMP
(
key
, 
	`RB_GET
(
x
, key), 
rböfo
->
rb_c⁄fig
);

321 
cmp
=
	`RB_CMP
(
key
, 
	`RB_GET
(
x
, key));

324 i‡(
cmp
<0)

325 
x
=x->
À·
;

326 i‡(
cmp
>0)

327 
x
=x->
right
;

329 
found
=1;

332 i‡(
found
 || !
ö£π
)

333 (
x
);

335 i‡((
z
=
	`RB_ENTRY
(
_Æloc
)())==
NULL
)

338 (
RBNULL
);

341 
	`RB_SET
(
z
, 
key
, key);

342 
z
->
up
=
y
;

343 i‡(
y
==
RBNULL
)

345 
rböfo
->
rb_roŸ
=
z
;

349 #i‚de‡
RB_CUSTOMIZE


350 
cmp
=
	`RB_CMP
(
	`RB_GET
(
z
, 
key
), RB_GET(
y
, key), 
rböfo
->
rb_c⁄fig
);

352 
cmp
=
	`RB_CMP
(
	`RB_GET
(
z
, 
key
), RB_GET(
y
, key));

354 i‡(
cmp
<0)

355 
y
->
À·
=
z
;

357 
y
->
right
=
z
;

360 
z
->
À·
=
RBNULL
;

361 
z
->
right
=
RBNULL
;

364 
z
->
cﬁour
=
RED
;

369 
x
=
z
;

376 
x
 !
rböfo
->
rb_roŸ
 && (x->
up
->
cﬁour
 =
RED
))

379 i‡(
x
->
up
 =x->up->up->
À·
)

382 
y
=
x
->
up
->up->
right
;

383 i‡(
y
->
cﬁour
 =
RED
)

386 
x
->
up
->
cﬁour
 = 
BLACK
;

388 
y
->
cﬁour
 = 
BLACK
;

390 
x
->
up
->up->
cﬁour
 = 
RED
;

393 
x
=x->
up
->up;

398 i‡(
x
 =x->
up
->
right
)

401 
x
=x->
up
;

402 
	`RB_ENTRY
(
_À·_rŸ©e
)(&
rböfo
->
rb_roŸ
, 
x
);

406 
x
->
up
->
cﬁour
 = 
BLACK
;

408 
x
->
up
->up->
cﬁour
 = 
RED
;

410 
	`RB_ENTRY
(
_right_rŸ©e
)(&
rböfo
->
rb_roŸ
, 
x
->
up
->up);

419 
y
=
x
->
up
->up->
À·
;

420 i‡(
y
->
cﬁour
 =
RED
)

422 
x
->
up
->
cﬁour
 = 
BLACK
;

423 
y
->
cﬁour
 = 
BLACK
;

424 
x
->
up
->up->
cﬁour
 = 
RED
;

426 
x
=x->
up
->up;

430 i‡(
x
 =x->
up
->
À·
)

432 
x
=x->
up
;

433 
	`RB_ENTRY
(
_right_rŸ©e
)(&
rböfo
->
rb_roŸ
, 
x
);

436 
x
->
up
->
cﬁour
 = 
BLACK
;

437 
x
->
up
->up->
cﬁour
 = 
RED
;

438 
	`RB_ENTRY
(
_À·_rŸ©e
)(&
rböfo
->
rb_roŸ
, 
x
->
up
->up);

444 (
rböfo
->
rb_roŸ
)->
cﬁour
 = 
BLACK
;

446 (
z
);

447 
	}
}

449 #i‚de‡
no_lookup


452 
RB_ENTRY
(
node
) *

453 
	$RB_ENTRY
(
_lookup
)(
mode
, c⁄° 
	`RB_ENTRY
(
d©a_t
Ë*
key
, RB_ENTRY(
åì
Ë*
rböfo
)

455 
	`RB_ENTRY
(
node
Ë*
x
,*
y
;

456 
cmp
=0;

457 
found
=0;

459 
y
=
RBNULL
;

460 
x
=
rböfo
->
rb_roŸ
;

462 i‡(
mode
==
RB_LUFIRST
)

465 
x
!=
RBNULL
)

467 
y
=
x
;

468 
x
=x->
À·
;

471 (
y
);

473 i‡(
mode
==
RB_LULAST
)

476 
x
!=
RBNULL
)

478 
y
=
x
;

479 
x
=x->
right
;

482 (
y
);

486 
x
!=
RBNULL
 && 
found
==0)

488 
y
=
x
;

490 #i‚de‡
RB_CUSTOMIZE


491 
cmp
=
	`RB_CMP
(
key
, 
	`RB_GET
(
x
, key), 
rböfo
->
rb_c⁄fig
);

493 
cmp
=
	`RB_CMP
(
key
, 
	`RB_GET
(
x
, key));

497 i‡(
cmp
<0)

498 
x
=x->
À·
;

499 i‡(
cmp
>0)

500 
x
=x->
right
;

502 
found
=1;

505 i‡(
found
 && (
mode
==
RB_LUEQUAL
 || mode==
RB_LUGTEQ
 || mode==
RB_LULTEQ
))

506 (
x
);

508 i‡(!
found
 && (
mode
==
RB_LUEQUAL
 || mode==
RB_LUNEXT
 || mode==
RB_LUPREV
))

509 (
RBNULL
);

511 i‡(
mode
==
RB_LUGTEQ
 || (!
found
 && mode==
RB_LUGREAT
))

513 i‡(
cmp
>0)

514 (
	`RB_ENTRY
(
_suc˚ss‹
)(
y
));

516 (
y
);

519 i‡(
mode
==
RB_LULTEQ
 || (!
found
 && mode==
RB_LULESS
))

521 i‡(
cmp
<0)

522 (
	`RB_ENTRY
(
_¥ede˚ss‹
)(
y
));

524 (
y
);

527 i‡(
mode
==
RB_LUNEXT
 || (
found
 && mode==
RB_LUGREAT
))

528 (
	`RB_ENTRY
(
_suc˚ss‹
)(
x
));

530 i‡(
mode
==
RB_LUPREV
 || (
found
 && mode==
RB_LULESS
))

531 (
	`RB_ENTRY
(
_¥ede˚ss‹
)(
x
));

534 (
RBNULL
);

535 
	}
}

538 #i‚de‡
no_de°roy


544 
	$RB_ENTRY
(
_de°roy
)(
	`RB_ENTRY
(
node
Ë*
x
)

546 i‡(
x
!=
RBNULL
)

548 i‡(
x
->
À·
!=
RBNULL
)

549 
	`RB_ENTRY
(
_de°roy
)(
x
->
À·
);

550 i‡(
x
->
right
!=
RBNULL
)

551 
	`RB_ENTRY
(
_de°roy
)(
x
->
right
);

552 
	`RB_ENTRY
(
_‰ì
)(
x
);

554 
	}
}

572 
	$RB_ENTRY
(
_À·_rŸ©e
)(
	`RB_ENTRY
(
node
Ë**
roŸp
, RB_ENTRY“odeË*
x
)

574 
	`RB_ENTRY
(
node
Ë*
y
;

576 
	`as£π
(
x
!=
RBNULL
);

577 
	`as£π
(
x
->
right
!=
RBNULL
);

579 
y
=
x
->
right
;

582 
x
->
right
 = 
y
->
À·
;

585 i‡(
y
->
À·
 !
RBNULL
)

586 
y
->
À·
->
up
 = 
x
;

589 
y
->
up
 = 
x
->up;

592 i‡(
x
->
up
 =
RBNULL
)

594 *
roŸp
=
y
;

599 i‡(
x
 =x->
up
->
À·
)

601 
x
->
up
->
À·
=
y
;

605 
x
->
up
->
right
=
y
;

610 
y
->
À·
=
x
;

613 
x
->
up
 = 
y
;

614 
	}
}

617 
	$RB_ENTRY
(
_right_rŸ©e
)(
	`RB_ENTRY
(
node
Ë**
roŸp
, RB_ENTRY“odeË*
y
)

619 
	`RB_ENTRY
(
node
Ë*
x
;

621 
	`as£π
(
y
!=
RBNULL
);

622 
	`as£π
(
y
->
À·
!=
RBNULL
);

624 
x
=
y
->
À·
;

627 
y
->
À·
 = 
x
->
right
;

630 i‡(
x
->
right
 !
RBNULL
)

631 
x
->
right
->
up
 = 
y
;

634 
x
->
up
 = 
y
->up;

637 i‡(
y
->
up
 =
RBNULL
)

639 *
roŸp
=
x
;

644 i‡(
y
 =y->
up
->
À·
)

646 
y
->
up
->
À·
=
x
;

650 
y
->
up
->
right
=
x
;

655 
x
->
right
=
y
;

658 
y
->
up
 = 
x
;

659 
	}
}

663 
RB_ENTRY
(
node
) *

664 
	$RB_ENTRY
(
_suc˚ss‹
)(c⁄° 
	`RB_ENTRY
(
node
Ë*
x
)

666 
	`RB_ENTRY
(
node
Ë*
y
;

668 i‡(
x
->
right
!=
RBNULL
)

674 
y
=
x
->
right
; y->
À·
!=
RBNULL
; y=y->left);

682 
y
=
x
->
up
;

683 
y
!=
RBNULL
 && 
x
==y->
right
)

685 
x
=
y
;

686 
y
=y->
up
;

689 (
y
);

690 
	}
}

694 
RB_ENTRY
(
node
) *

695 
	$RB_ENTRY
(
_¥ede˚ss‹
)(c⁄° 
	`RB_ENTRY
(
node
Ë*
x
)

697 
	`RB_ENTRY
(
node
Ë*
y
;

699 i‡(
x
->
À·
!=
RBNULL
)

705 
y
=
x
->
À·
; y->
right
!=
RBNULL
; y=y->right);

713 
y
=
x
->
up
;

714 
y
!=
RBNULL
 && 
x
==y->
À·
)

716 
x
=
y
;

717 
y
=y->
up
;

720 (
y
);

721 
	}
}

723 #i‚de‡
no_dñëe


727 
	$RB_ENTRY
(
_dñëe
)(
	`RB_ENTRY
(
node
Ë**
roŸp
, RB_ENTRY“odeË*
z
)

729 
	`RB_ENTRY
(
node
Ë*
x
, *
y
;

731 i‡(
z
->
À·
 =
RBNULL
 || z->
right
 == RBNULL)

732 
y
=
z
;

734 
y
=
	`RB_ENTRY
(
_suc˚ss‹
)(
z
);

736 i‡(
y
->
À·
 !
RBNULL
)

737 
x
=
y
->
À·
;

739 
x
=
y
->
right
;

741 
x
->
up
 = 
y
->up;

743 i‡(
y
->
up
 =
RBNULL
)

745 *
roŸp
=
x
;

749 i‡(
y
==y->
up
->
À·
)

750 
y
->
up
->
À·
 = 
x
;

752 
y
->
up
->
right
 = 
x
;

755 i‡(
y
!=
z
)

757 
	`RB_SET
(
z
, 
key
, 
	`RB_GET
(
y
, key));

760 i‡(
y
->
cﬁour
 =
BLACK
)

761 
	`RB_ENTRY
(
_dñëe_fix
)(
roŸp
, 
x
);

763 
	`RB_ENTRY
(
_‰ì
)(
y
);

764 
	}
}

768 
	$RB_ENTRY
(
_dñëe_fix
)(
	`RB_ENTRY
(
node
Ë**
roŸp
, RB_ENTRY“odeË*
x
)

770 
	`RB_ENTRY
(
node
Ë*
w
;

772 
x
!=*
roŸp
 && x->
cﬁour
==
BLACK
)

774 i‡(
x
==x->
up
->
À·
)

776 
w
=
x
->
up
->
right
;

777 i‡(
w
->
cﬁour
==
RED
)

779 
w
->
cﬁour
=
BLACK
;

780 
x
->
up
->
cﬁour
=
RED
;

781 
	`rb_À·_rŸ©e
(
roŸp
, 
x
->
up
);

782 
w
=
x
->
up
->
right
;

785 i‡(
w
->
À·
->
cﬁour
==
BLACK
 && w->
right
->colour==BLACK)

787 
w
->
cﬁour
=
RED
;

788 
x
=x->
up
;

792 i‡(
w
->
right
->
cﬁour
 =
BLACK
)

794 
w
->
À·
->
cﬁour
=
BLACK
;

795 
w
->
cﬁour
=
RED
;

796 
	`RB_ENTRY
(
_right_rŸ©e
)(
roŸp
, 
w
);

797 
w
=
x
->
up
->
right
;

801 
w
->
cﬁour
=
x
->
up
->colour;

802 
x
->
up
->
cﬁour
 = 
BLACK
;

803 
w
->
right
->
cﬁour
 = 
BLACK
;

804 
	`RB_ENTRY
(
_À·_rŸ©e
)(
roŸp
, 
x
->
up
);

805 
x
=*
roŸp
;

810 
w
=
x
->
up
->
À·
;

811 i‡(
w
->
cﬁour
==
RED
)

813 
w
->
cﬁour
=
BLACK
;

814 
x
->
up
->
cﬁour
=
RED
;

815 
	`RB_ENTRY
(
_right_rŸ©e
)(
roŸp
, 
x
->
up
);

816 
w
=
x
->
up
->
À·
;

819 i‡(
w
->
right
->
cﬁour
==
BLACK
 && w->
À·
->colour==BLACK)

821 
w
->
cﬁour
=
RED
;

822 
x
=x->
up
;

826 i‡(
w
->
À·
->
cﬁour
 =
BLACK
)

828 
w
->
right
->
cﬁour
=
BLACK
;

829 
w
->
cﬁour
=
RED
;

830 
	`RB_ENTRY
(
_À·_rŸ©e
)(
roŸp
, 
w
);

831 
w
=
x
->
up
->
À·
;

834 
w
->
cﬁour
=
x
->
up
->colour;

835 
x
->
up
->
cﬁour
 = 
BLACK
;

836 
w
->
À·
->
cﬁour
 = 
BLACK
;

837 
	`RB_ENTRY
(
_right_rŸ©e
)(
roŸp
, 
x
->
up
);

838 
x
=*
roŸp
;

843 
x
->
cﬁour
=
BLACK
;

844 
	}
}

847 #i‚de‡
no_wÆk


849 
	$RB_ENTRY
(
_wÆk
)(c⁄° 
	`RB_ENTRY
(
node
Ë*
x
, (*
a˘i⁄
)(c⁄° RB_ENTRY(
d©a_t
Ë*, c⁄° 
VISIT
, c⁄° , *), *
¨g
, 
Àvñ
)

851 i‡(
x
==
RBNULL
)

854 i‡(
x
->
À·
==
RBNULL
 && x->
right
==RBNULL)

857 (*
a˘i⁄
)(
	`RB_GET
(
x
, 
key
), 
Àaf
, 
Àvñ
, 
¨g
);

861 (*
a˘i⁄
)(
	`RB_GET
(
x
, 
key
), 
¥e‹dî
, 
Àvñ
, 
¨g
);

863 
	`RB_ENTRY
(
_wÆk
)(
x
->
À·
, 
a˘i⁄
, 
¨g
, 
Àvñ
+1);

865 (*
a˘i⁄
)(
	`RB_GET
(
x
, 
key
), 
po°‹dî
, 
Àvñ
, 
¨g
);

867 
	`RB_ENTRY
(
_wÆk
)(
x
->
right
, 
a˘i⁄
, 
¨g
, 
Àvñ
+1);

869 (*
a˘i⁄
)(
	`RB_GET
(
x
, 
key
), 
íd‹dî
, 
Àvñ
, 
¨g
);

871 
	}
}

874 #i‚de‡
no_ªadli°


875 
RBLIST
 *

876 
	$RB_ENTRY
(
_›íli°
)(c⁄° 
	`RB_ENTRY
(
node
Ë*
roŸp
)

878 
RBLIST
 *
rbli°p
;

880 
rbli°p
=(
RBLIST
 *Ë
	`mÆloc
((RBLIST));

881 i‡(!
rbli°p
)

882 (
NULL
);

884 
rbli°p
->
roŸp
=rootp;

885 
rbli°p
->
√xç
=
roŸp
;

887 i‡(
roŸp
!=
RBNULL
)

889 
rbli°p
->
√xç
->
À·
!=
RBNULL
)

891 
rbli°p
->
√xç
Ùbli°p->√xç->
À·
;

895 (
rbli°p
);

896 
	}
}

898 c⁄° 
RB_ENTRY
(
d©a_t
) *

899 
	$RB_ENTRY
(
_ªadli°
)(
RBLIST
 *
rbli°p
)

901 c⁄° 
	`RB_ENTRY
(
d©a_t
Ë*
key
=
NULL
;

903 i‡(
rbli°p
!=
NULL
 &&Ñbli°p->
√xç
!=
RBNULL
)

905 
key
=
	`RB_GET
(
rbli°p
->
√xç
, key);

906 
rbli°p
->
√xç
=
	`RB_ENTRY
(
_suc˚ss‹
)(rblistp->nextp);

909 (
key
);

910 
	}
}

913 
	$rb_˛o£li°
(
RBLIST
 *
rbli°p
)

915 i‡(
rbli°p
)

916 
	`‰ì
(
rbli°p
);

917 
	}
}

920 #i‡
deföed
(
RB_USE_SBRK
)

924 
RB_ENTRY
(
node
Ë*
	grb‰ìp
=
NULL
;

926 
	#RB_ENTRY
(
NODE
)
ALLOC_CHUNK_SIZE
 1000

	)

927 
RB_ENTRY
(
node
) *

928 
	$RB_ENTRY
(
_Æloc
)()

930 
	`RB_ENTRY
(
node
Ë*
x
;

931 
i
;

933 i‡(
rb‰ìp
==
NULL
)

936 
rb‰ìp
=(
	`RB_ENTRY
(
node
Ë*Ë
	`sbrk
((RB_ENTRY“ode)Ë* RB_ENTRY(
NODE
)
ALLOC_CHUNK_SIZE
);

938 i‡(
rb‰ìp
==(
	`RB_ENTRY
(
node
) *) -1)

940 (
NULL
);

944 
i
=0, 
x
=
rb‰ìp
; i<
	`RB_ENTRY
(
NODE
)
ALLOC_CHUNK_SIZE
-1; i++, x++)

946 
x
->
up
 = (x+1);

948 
x
->
up
=
NULL
;

951 
x
=
rb‰ìp
;

952 
rb‰ìp
 =Ñb‰ìp->
up
;

953 #ifde‡
RB_ALLOC


954 
	`RB_ALLOC
(
	`ACCESS
(
x
, 
key
));

956 (
x
);

957 
	}
}

963 
	$RB_ENTRY
(
_‰ì
)(
	`RB_ENTRY
(
node
Ë*
x
)

965 #ifde‡
RB_FREE


966 
	`RB_FREE
(
	`ACCESS
(
x
, 
key
));

968 
x
->
up
=
rb‰ìp
;

969 
rb‰ìp
=
x
;

970 
	}
}

976 
	$RB_ENTRY
(
_check
)(
	`RB_ENTRY
(
node
Ë*
roŸp
)

978 i‡(
roŸp
==
NULL
 ||ÑoŸp==
RBNULL
)

981 i‡(
roŸp
->
up
!=
RBNULL
)

983 
	`Ârötf
(
°dîr
, "Root upÖointerÇot RBNULL");

984 
	`dum±ªe
(
roŸp
, 0);

988 i‡(
	`RB_ENTRY
(
_check
)1(
roŸp
))

990 
	`RB_ENTRY
(
dum±ªe
)(
roŸp
, 0);

994 i‡(
	`RB_ENTRY
(
cou¡_bœck
)(
roŸp
)==-1)

996 
	`RB_ENTRY
(
dum±ªe
)(
roŸp
, 0);

1001 
	}
}

1004 
	$RB_ENTRY
(
_check1
)(
	`RB_ENTRY
(
node
Ë*
x
)

1006 i‡(
x
->
À·
==
NULL
 || x->
right
==NULL)

1008 
	`Ârötf
(
°dîr
, "Left orÑight is NULL");

1012 i‡(
x
->
cﬁour
==
RED
)

1014 i‡(
x
->
À·
->
cﬁour
!=
BLACK
 && x->
right
->colour!=BLACK)

1016 
	`Ârötf
(
°dîr
, "Chûdª¿o‡ªdÇodênŸ bŸh bœck, x=%ld", 
x
);

1021 i‡(
x
->
À·
 !
RBNULL
)

1023 i‡(
x
->
À·
->
up
 != x)

1025 
	`Ârötf
(
°dîr
, "x->À·->u∞!x, x=%ld", 
x
);

1029 i‡(
	`rb_check1
(
x
->
À·
))

1033 i‡(
x
->
right
 !
RBNULL
)

1035 i‡(
x
->
right
->
up
 != x)

1037 
	`Ârötf
(
°dîr
, "x->right->u∞!x, x=%ld", 
x
);

1041 i‡(
	`rb_check1
(
x
->
right
))

1045 
	}
}

1047 
	$RB_ENTRY
(
cou¡_bœck
)(
	`RB_ENTRY
(
node
Ë*
x
)

1049 
∆e·
, 
ƒight
;

1051 i‡(
x
==
RBNULL
)

1054 
∆e·
=
	`RB_ENTRY
(
cou¡_bœck
)(
x
->
À·
);

1055 
ƒight
=
	`RB_ENTRY
(
cou¡_bœck
)(
x
->
right
);

1057 i‡(
∆e·
==-1 || 
ƒight
==-1)

1060 i‡(
∆e·
 !
ƒight
)

1062 
	`Ârötf
(
°dîr
, "Bœck cou¡ÇŸÉquÆ o¿À· &Ñight, x=%ld", 
x
);

1066 i‡(
x
->
cﬁour
 =
BLACK
)

1068 
∆e·
++;

1071 (
∆e·
);

1072 
	}
}

1074 
	$RB_ENTRY
(
dum±ªe
)(
	`RB_ENTRY
(
node
Ë*
x
, 
n
)

1076 *
	`¥key
();

1078 i‡(
x
!=
NULL
 && x!=
RBNULL
)

1080 
n
++;

1081 
	`Ârötf
(
°dîr
, "Tree: %*s %ld:Üeft=%ld,Ñight=%ld, colour=%s, key=%s",

1082 
n
,

1084 
x
,

1085 
x
->
À·
,

1086 
x
->
right
,

1087 (
x
->
cﬁour
==
BLACK
) ? "BLACK" : "RED",

1088 
	`¥key
(
	`RB_GET
(
x
, 
key
)));

1090 
	`RB_ENTRY
(
dum±ªe
)(
x
->
À·
, 
n
);

1091 
	`RB_ENTRY
(
dum±ªe
)(
x
->
right
, 
n
);

1093 
	}
}

	@redblack.h

29 #i‚de‡
_REDBLACK_H


31 #i‚de‡
RB_CUSTOMIZE


42 
	#rbd©a_t
 

	)

43 
	#RB_CMP
(
s
, 
t
, 
e
Ë(*
rböfo
->
rb_cmp
)(s,Å,É)

	)

44 #unde‡
RB_INLINE


45 
	#RB_ENTRY
(
«me
Ë
rb
##
	)
name

48 #i‚de‡
RB_STATIC


49 
	#RB_STATIC


	)

53 
	#RB_NONE
 -1

	)

54 
	#RB_LUEQUAL
 0

	)

55 
	#RB_LUGTEQ
 1

	)

56 
	#RB_LULTEQ
 2

	)

57 
	#RB_LULESS
 3

	)

58 
	#RB_LUGREAT
 4

	)

59 
	#RB_LUNEXT
 5

	)

60 
	#RB_LUPREV
 6

	)

61 
	#RB_LUFIRST
 7

	)

62 
	#RB_LULAST
 8

	)

67 
	m¥e‹dî
,

68 
	mpo°‹dî
,

69 
	míd‹dî
,

70 
	mÀaf


72 
	tVISIT
;

74 
	$RB_ENTRY
(
li°s
) {

75 c⁄° 
	`RB_ENTRY
(
node
Ë*
roŸp
;

76 c⁄° 
	`RB_ENTRY
(
node
Ë*
√xç
;

77 
	}
};

79 
	#RBLIST
 
	`RB_ENTRY
(
li°s
)

	)

81 
	$RB_ENTRY
(
åì
) {

82 #i‚de‡
RB_CUSTOMIZE


84 (*
rb_cmp
)(const *, const *, const *);

86 c⁄° *
rb_c⁄fig
;

89 
	`RB_ENTRY
(
node
Ë*
rb_roŸ
;

90 
	}
};

92 #i‚de‡
RB_CUSTOMIZE


93 
RB_STATIC
 
RB_ENTRY
(
åì
Ë*
rböô
((*)(const *, const *, const *),

96 
RB_STATIC
 
	`RB_ENTRY
(
åì
Ë*
	$RB_ENTRY
(
öô
)();

99 #i‚de‡
no_dñëe


100 
RB_STATIC
 c⁄° 
	`RB_ENTRY
(
d©a_t
Ë*
	$RB_ENTRY
(
dñëe
)(c⁄° 
	`RB_ENTRY
(
d©a_t
Ë*, RB_ENTRY(
åì
) *);

103 #i‚de‡
no_föd


104 
RB_STATIC
 c⁄° 
	`RB_ENTRY
(
d©a_t
Ë*
	$RB_ENTRY
(
föd
)(c⁄° 
	`RB_ENTRY
(
d©a_t
Ë*, RB_ENTRY(
åì
) *);

107 #i‚de‡
no_lookup


108 
RB_STATIC
 c⁄° 
	`RB_ENTRY
(
d©a_t
Ë*
	$RB_ENTRY
(
lookup
)(, c⁄° 
	`RB_ENTRY
(
d©a_t
Ë*, RB_ENTRY(
åì
) *);

111 #i‚de‡
no_£¨ch


112 
RB_STATIC
 c⁄° 
	`RB_ENTRY
(
d©a_t
Ë*
	$RB_ENTRY
(
£¨ch
)(c⁄° 
	`RB_ENTRY
(
d©a_t
Ë*, RB_ENTRY(
åì
) *);

115 #i‚de‡
no_de°roy


116 
RB_STATIC
 
	$RB_ENTRY
(
de°roy
)(
	`RB_ENTRY
(
åì
) *);

119 #i‚de‡
no_wÆk


120 
RB_STATIC
 
	$RB_ENTRY
(
wÆk
)(c⁄° 
	`RB_ENTRY
(
åì
) *,

121 (*)(c⁄° 
	`RB_ENTRY
(
d©a_t
Ë*, c⁄° 
VISIT
, const , *),

125 #i‚de‡
no_ªadli°


126 
RB_STATIC
 
RBLIST
 *
	$RB_ENTRY
(
›íli°
)(c⁄° 
	`RB_ENTRY
(
åì
) *);

127 
RB_STATIC
 c⁄° 
	`RB_ENTRY
(
d©a_t
Ë*
	$RB_ENTRY
(
ªadli°
)(
RBLIST
 *);

128 
RB_STATIC
 
	$RB_ENTRY
(
˛o£li°
)(
RBLIST
 *);

132 
	#rbmö
(
rböfo
Ë
	`RB_ENTRY
(
lookup
)(
RB_LUFIRST
, 
NULL
, (rböfo))

	)

133 
	#rbmax
(
rböfo
Ë
	`RB_ENTRY
(
lookup
)(
RB_LULAST
, 
NULL
, (rböfo))

	)

135 
	#_REDBLACK_H


	)

	@rend-avahi.c

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<î∫o.h
>

29 
	~<as£π.h
>

30 
	~<±hªad.h
>

31 
	~<√t/if.h
>

34 
	~<avahi-˛õ¡/˛õ¡.h
>

35 
	~<avahi-˛õ¡/publish.h
>

37 
	~<avahi-˛õ¡/˛õ¡.h
>

38 
	~<avahi-comm⁄/Æã∫©ive.h
>

39 
	~<avahi-comm⁄/îr‹.h
>

40 
	~<avahi-comm⁄/sim∂e-w©ch.h
>

41 
	~<avahi-comm⁄/timevÆ.h
>

42 
	~<avahi-comm⁄/mÆloc.h
>

44 
	~"dØpd.h
"

45 
	~"îr.h
"

47 
AvahiClõ¡
 *
	gmdns_˛õ¡
 = 
NULL
;

48 
AvahiE¡ryGroup
 *
	gmdns_group
 = 
NULL
;

49 
AvahiSim∂ePﬁl
 *
	gsim∂e_pﬁl
 = 
NULL
;

51 
	sèg_ªnd_avahi_group_íåy
 {

52 *
	m«me
;

53 *
	mty≥
;

54 
	mp‹t
;

55 *
	miÁ˚
;

56 *
	mtxt
;

57 
èg_ªnd_avahi_group_íåy
 *
	m√xt
;

58 } 
	tREND_AVAHI_GROUP_ENTRY
;

60 
REND_AVAHI_GROUP_ENTRY
 
	gªnd_avahi_íåõs
 = { 
NULL
, NULL, 0, NULL };

62 
±hªad_t
 
	gªnd_tid
;

63 
±hªad_c⁄d_t
 
	gªnd_avahi_c⁄d
;

64 
±hªad_muãx_t
 
	gªnd_avahi_muãx
;

66 
_ªnd_avahi_sig«l
();

67 
_ªnd_avahi_waô_⁄
(*
wh©
);

68 
_ªnd_avahi_lock
();

69 
_ªnd_avahi_u∆ock
();

70 
_ªnd_avahi_¸óã_£rvi˚s
();

73 
	$_ªnd_avahi_add_group_íåy
(*
«me
, *
ty≥
, 
p‹t
, *
iÁ˚
, *
txt
) {

74 
REND_AVAHI_GROUP_ENTRY
 *
pge
;

76 
pge
 = (
REND_AVAHI_GROUP_ENTRY
 *)
	`mÆloc
((REND_AVAHI_GROUP_ENTRY));

77 if(!
pge
)

80 
pge
->
«me
 = 
	`°rdup
(name);

81 
pge
->
ty≥
 = 
	`°rdup
(type);

82 
pge
->
iÁ˚
 = 
	`°rdup
(iface);

83 
pge
->
txt
 = 
	`°rdup
(txt);

84 
pge
->
p‹t
 =Öort;

86 
	`_ªnd_avahi_lock
();

88 
pge
->
√xt
 = 
ªnd_avahi_íåõs
.next;

89 
ªnd_avahi_íåõs
.
√xt
 = 
pge
;

91 
	`_ªnd_avahi_u∆ock
();

93 
	}
}

95 *
	$ªnd_pﬁl
(*
¨g
) {

96 
ªt
;

97 (
ªt
 = 
	`avahi_sim∂e_pﬁl_ôî©e
(
sim∂e_pﬁl
,-1)) == 0);

99 if(
ªt
 < 0) {

100 
	`DPRINTF
(
E_WARN
,
L_REND
,"AvahiÖollÅhread quit iwthÉrror: %s\n",

101 
	`avahi_°ªº‹
(
	`avahi_˛õ¡_î∫o
(
mdns_˛õ¡
)));

103 
	`DPRINTF
(
E_DBG
,
L_REND
,"AvahiÖollÅhread quit\n");

106  
NULL
;

107 
	}
}

109 
	$íåy_group_ˇŒback
(
AvahiE¡ryGroup
 *
g
, 
AvahiE¡ryGroupSèã
 
°©e
, 
AVAHI_GCC_UNUSED
 *
u£rd©a
) {

112 
°©e
) {

113 
AVAHI_ENTRY_GROUP_ESTABLISHED
:

114 
	`DPRINTF
(
E_DBG
, 
L_REND
, "Successfullyádded mdns services\n");

115 
	`_ªnd_avahi_sig«l
();

117 
AVAHI_ENTRY_GROUP_COLLISION
:

118 
	`DPRINTF
(
E_DBG
, 
L_REND
, "Group collision\n");

127 
AVAHI_ENTRY_GROUP_FAILURE
 :

128 
	`avahi_sim∂e_pﬁl_quô
(
sim∂e_pﬁl
);

130 
AVAHI_ENTRY_GROUP_UNCOMMITED
:

131 
AVAHI_ENTRY_GROUP_REGISTERING
:

134 
	}
}

136 
	$_ªnd_avahi_lock
() {

137 if(
	`±hªad_muãx_lock
(&
ªnd_avahi_muãx
))

138 
	`DPRINTF
(
E_FATAL
,
L_REND
,"CouldÇotÜock mutex\n");

139 
	}
}

141 
	$_ªnd_avahi_u∆ock
() {

142 
	`±hªad_muãx_u∆ock
(&
ªnd_avahi_muãx
);

143 
	}
}

145 
	$_ªnd_avahi_sig«l
() {

147 
	`_ªnd_avahi_lock
();

148 
	`±hªad_c⁄d_sig«l
(&
ªnd_avahi_c⁄d
);

149 
	`_ªnd_avahi_u∆ock
();

150 
	}
}

152 
	$_ªnd_avahi_waô_⁄
(*
wh©
) {

153 
	`DPRINTF
(
E_DBG
,
L_REND
,"Waiting on something...\n");

154 if(
	`±hªad_muãx_lock
(&
ªnd_avahi_muãx
))

155 
	`DPRINTF
(
E_FATAL
,
L_REND
,"CouldÇotÜock mutex\n");

156 !
wh©
) {

157 
	`±hªad_c⁄d_waô
(&
ªnd_avahi_c⁄d
,&
ªnd_avahi_muãx
);

159 
	`_ªnd_avahi_u∆ock
();

160 
	`DPRINTF
(
E_DBG
,
L_REND
,"Done waiting.\n");

161 
	}
}

163 
	$ªnd_ªgi°î
(*
«me
, *
ty≥
, 
p‹t
, *
iÁ˚
, *
txt
) {

164 
	`DPRINTF
(
E_DBG
,
L_REND
,"Addög %s/%s\n",
«me
,
ty≥
);

165 
	`_ªnd_avahi_add_group_íåy
(
«me
,
ty≥
,
p‹t
,
iÁ˚
,
txt
);

166 if(
mdns_group
) {

167 
	`DPRINTF
(
E_DBG
,
L_MISC
,"Resetting mdns group\n");

168 
	`avahi_íåy_group_ª£t
(
mdns_group
);

170 
	`DPRINTF
(
E_DBG
,
L_REND
,"Creating service group (again?)\n");

171 
	`_ªnd_avahi_¸óã_£rvi˚s
();

173 
	}
}

181 
	$_ªnd_avahi_¸óã_£rvi˚s
() {

182 
ªt
 = 0;

183 
REND_AVAHI_GROUP_ENTRY
 *
≥¡ry
;

184 
AvahiSåögLi°
 *
p¶
;

185 
cou¡
=0;

186 *
key
,*
√xtkey
;

187 *
√wtxt
;

189 
	`DPRINTF
(
E_DBG
,
L_REND
,"Creting service group\n");

191 if(!
ªnd_avahi_íåõs
.
√xt
) {

192 
	`DPRINTF
(
E_DBG
,
L_REND
,"NoÉntries yet... skipping service create\n");

196 i‡(
mdns_group
 =
NULL
) {

197 i‡(!(
mdns_group
 = 
	`avahi_íåy_group_√w
(
mdns_˛õ¡
,

198 
íåy_group_ˇŒback
,

199 
NULL
))) {

200 
	`DPRINTF
(
E_WARN
, 
L_REND
, "CouldÇot create AvahiEntryGroup: %s\n",

201 
	`avahi_°ªº‹
(
	`avahi_˛õ¡_î∫o
(
mdns_˛õ¡
)));

207 
	`_ªnd_avahi_waô_⁄
(
mdns_group
);

209 
	`_ªnd_avahi_lock
();

210 
≥¡ry
 = 
ªnd_avahi_íåõs
.
√xt
;

211 
≥¡ry
) {

213 
	`DPRINTF
(
E_DBG
,
L_REND
,"Re-ªgi°îög %s/%s\n",
≥¡ry
->
«me
,≥¡ry->
ty≥
);

216 
p¶
 = 
NULL
;

217 
√wtxt
 = (*)
	`°rdup
(
≥¡ry
->
txt
);

218 if(!
√wtxt
)

219 
	`DPRINTF
(
E_FATAL
,
L_REND
,"malloc\n");

221 
key
=
√xtkey
=
√wtxt
;

222 if(*
√xtkey
)

223 
cou¡
 = *
√xtkey
;

225 
	`DPRINTF
(
E_DBG
,
L_REND
,"Found key o‡sizê%d\n",
cou¡
);

226 (*
√xtkey
)&&“extkey < (
√wtxt
 + 
	`°æí
(
≥¡ry
->
txt
)))) {

227 
key
 = 
√xtkey
 + 1;

228 
√xtkey
 +(
cou¡
+1);

229 
cou¡
 = *
√xtkey
;

230 *
√xtkey
 = '\0';

231 
p¶
=
	`avahi_°rög_li°_add
’¶,(*)
key
);

232 
	`DPRINTF
(
E_DBG
,
L_REND
,"Added key %s\n",
key
);

233 *
√xtkey
=
cou¡
;

236 
	`‰ì
(
√wtxt
);

238 i‡((
ªt
 = 
	`avahi_íåy_group_add_£rvi˚_°æ°
(
mdns_group
,

239 
AVAHI_IF_UNSPEC
,

240 
AVAHI_PROTO_UNSPEC
, 0,

241 
	`avahi_°rdup
(
≥¡ry
->
«me
),

242 
	`avahi_°rdup
(
≥¡ry
->
ty≥
),

243 
NULL
, NULL,
≥¡ry
->
p‹t
,

244 
p¶
)) < 0) {

245 
	`DPRINTF
(
E_WARN
, 
L_REND
, "CouldÇŸádd mdn†£rvi˚s: %s\n", 
	`avahi_°ªº‹
(
ªt
));

246 
	`avahi_°rög_li°_‰ì
(
p¶
);

247 
	`_ªnd_avahi_u∆ock
();

250 
≥¡ry
 =Öíåy->
√xt
;

253 
	`_ªnd_avahi_u∆ock
();

255 i‡((
ªt
 = 
	`avahi_íåy_group_commô
(
mdns_group
)) < 0) {

256 
	`DPRINTF
(
E_WARN
, 
L_REND
, "CouldÇot commit mdns services: %s\n",

257 
	`avahi_°ªº‹
(
	`avahi_˛õ¡_î∫o
(
mdns_˛õ¡
)));

262 
	}
}

264 
	$˛õ¡_ˇŒback
(
AvahiClõ¡
 *
c
, 
AvahiClõ¡Sèã
 
°©e
, 
AVAHI_GCC_UNUSED
 * 
u£rd©a
) {

265 
	`as£π
(
c
);

266 
°©e
) {

267 
AVAHI_CLIENT_S_RUNNING
:

268 
	`DPRINTF
(
E_LOG
,
L_REND
,"ClientÑunning\n");

269 if(!
mdns_group
)

270 
	`_ªnd_avahi_¸óã_£rvi˚s
();

272 
AVAHI_CLIENT_S_COLLISION
:

273 
	`DPRINTF
(
E_LOG
,
L_REND
,"Client collision\n");

274 if(
mdns_group
)

275 
	`avahi_íåy_group_ª£t
(
mdns_group
);

277 
AVAHI_CLIENT_FAILURE
:

278 
	`DPRINTF
(
E_LOG
,
L_REND
,"Client failure\n");

279 
	`avahi_sim∂e_pﬁl_quô
(
sim∂e_pﬁl
);

281 
AVAHI_CLIENT_S_REGISTERING
:

282 
	`DPRINTF
(
E_LOG
,
L_REND
,"ClientÑegistering\n");

283 if(
mdns_group
)

284 
	`avahi_íåy_group_ª£t
(
mdns_group
);

286 
AVAHI_CLIENT_CONNECTING
:

289 
	}
}

291 
	$ªnd_öô
(*
u£r
) {

292 
îr‹
;

294 if(
	`±hªad_c⁄d_öô
(&
ªnd_avahi_c⁄d
,
NULL
)) {

295 
	`DPRINTF
(
E_LOG
,
L_REND
,"CouldÇot initializeÑendezvous condition\n");

299 if(
	`±hªad_muãx_öô
(&
ªnd_avahi_muãx
,
NULL
)) {

300 
	`DPRINTF
(
E_LOG
,
L_REND
,"CouldÇot initializeÑendezvous mutex\n");

304 
	`DPRINTF
(
E_DBG
, 
L_REND
, "Initializingávahi\n");

305 if(!(
sim∂e_pﬁl
 = 
	`avahi_sim∂e_pﬁl_√w
())) {

306 
	`DPRINTF
(
E_LOG
,
L_REND
,"Error startingÖollÅhread\n");

319 i‡(!(
mdns_˛õ¡
 = 
	`avahi_˛õ¡_√w
(
	`avahi_sim∂e_pﬁl_gë
(
sim∂e_pﬁl
),

320 0,
˛õ¡_ˇŒback
,
NULL
,&
îr‹
))) {

321 
	`DPRINTF
(
E_WARN
, 
L_REND
, "avahi_client_new: Error inávahi: %s\n",

322 
	`avahi_°ªº‹
(
	`avahi_˛õ¡_î∫o
(
mdns_˛õ¡
)));

323 
	`avahi_sim∂e_pﬁl_‰ì
(
sim∂e_pﬁl
);

327 
	`DPRINTF
(
E_DBG
, 
L_REND
, "StartingávahiÖollingÅhread\n");

328 if(
	`±hªad_¸óã
(&
ªnd_tid
, 
NULL
, 
ªnd_pﬁl
, NULL)) {

329 
	`DPRINTF
(
E_FATAL
,
L_REND
,"CouldÇot startávahiÖollingÅhread.\n");

333 
	}
}

335 
	$ªnd_°›
() {

336 
	`avahi_sim∂e_pﬁl_quô
(
sim∂e_pﬁl
);

337 i‡(
mdns_˛õ¡
 !
NULL
)

338 
	`avahi_˛õ¡_‰ì
(
mdns_˛õ¡
);

340 
	}
}

342 
	$ªnd_ru¬ög
() {

344 
	}
}

346 
	$ªnd_uƒegi°î
(*
«me
, *
ty≥
, 
p‹t
) {

348 
	}
}

	@rend-howl.c

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 
	~<î∫o.h
>

27 
	~<°dio.h
>

28 
	~<pwd.h
>

29 
	~<sig«l.h
>

30 
	~<°dlib.h
>

31 
	~<sys/ty≥s.h
>

32 
	~<howl.h
>

33 
	~<±hªad.h
>

35 
	~"dØpd.h
"

36 
	~"îr.h
"

37 
	~"os-unix.h
"

38 
	~"ªnd-unix.h
"

40 
±hªad_t
 
	gªnd_tid
;

41 
sw_discovîy
 
	gªnd_h™dÀ
;

44 *
ªnd_pùe_m⁄ô‹
(* 
¨g
);

45 
ªnd_ˇŒback
();

52 
sw_ªsu…
 
	$ªnd_howl_ª∂y
(
sw_discovîy
 
discovîy
,

53 
sw_discovîy_publish_°©us
 
°©us
,

54 
sw_discovîy_oid
 
oid
,

55 
sw_›aque
 
exåa
) {

56 
sw_°rög
 
°©us_ãxt
[] = {

63 
	`DPRINTF
(
E_DBG
,
L_REND
,"PublishÑïly: %s\n",
°©us_ãxt
[
°©us
]);

64  
SW_OKAY
;

65 
	}
}

73 
	$ªnd_¥iv©e_öô
(*
u£r
) {

74 
	`DPRINTF
(
E_DBG
,
L_REND
,"StartingÑendezvous services\n");

75 
	`sig«l
(
SIGHUP
, 
SIG_IGN
);

77 if(
	`sw_discovîy_öô
(&
ªnd_h™dÀ
Ë!
SW_OKAY
) {

78 
	`DPRINTF
(
E_WARN
,
L_REND
,"Error initializing howl\n");

79 
î∫o
=
EINVAL
;

83 if(
	`os_dr›_¥ivs
(
u£r
))

86 
	`DPRINTF
(
E_DBG
,
L_REND
,"StartingÖollingÅhread\n");

88 if(
	`±hªad_¸óã
(&
ªnd_tid
,
NULL
,
ªnd_pùe_m⁄ô‹
,NULL)) {

89 
	`DPRINTF
(
E_FATAL
,
L_REND
,"CouldÇot startÅhread. Terminating\n");

91 
	`exô
(
EXIT_FAILURE
);

94 
	`DPRINTF
(
E_DBG
,
L_REND
,"EnteringÑunloop\n");

96 
	`sw_discovîy_run
(
ªnd_h™dÀ
);

98 
	`DPRINTF
(
E_DBG
,
L_REND
,"ExitingÑunloop\n");

101 
	}
}

106 *
	$ªnd_pùe_m⁄ô‹
(* 
¨g
) {

107 
fd_£t
 
r£t
;

108 
ªsu…
;

111 
	`DPRINTF
(
E_DBG
,
L_REND
,"Waiting for data\n");

112 
	`FD_ZERO
(&
r£t
);

113 
	`FD_SET
(
ªnd_pùe_to
[
RD_SIDE
],&
r£t
);

116 ((
ªsu…
=
	`£À˘
(
ªnd_pùe_to
[
RD_SIDE
] + 1,&
r£t
,
NULL
,NULL,NULL)) != -1) &&

117 
î∫o
 !
EINTR
) {

118 if(
	`FD_ISSET
(
ªnd_pùe_to
[
RD_SIDE
],&
r£t
)) {

119 
	`DPRINTF
(
E_DBG
,
L_REND
,"Receivedá message from daap server\n");

120 
	`ªnd_ˇŒback
();

124 
	`DPRINTF
(
E_DBG
,
L_REND
,"SelectÉrror!\n");

127 
	}
}

136 
	$ªnd_ˇŒback
() {

137 
REND_MESSAGE
 
msg
;

138 
sw_discovîy_oid
 
ªnd_oid
;

139 
sw_ªsu…
 
ªsu…
;

143 if(
	`ªnd_ªad_mesßge
(&
msg
) != (msg)) {

144 
	`DPRINTF
(
E_FATAL
,
L_REND
,"Rendezvous socket closed (daap server crashed?) Aborting.\n");

145 
	`exô
(
EXIT_FAILURE
);

148 
msg
.
cmd
) {

149 
REND_MSG_TYPE_REGISTER
:

150 
	`DPRINTF
(
E_DBG
,
L_REND
,"Regi°îög %s.%†(%d)\n",
msg
.
ty≥
,msg.
«me
,msg.
p‹t
);

151 if((
ªsu…
=
	`sw_discovîy_publish
(
ªnd_h™dÀ
,

153 
msg
.
«me
,

154 
msg
.
ty≥
,

155 
NULL
,

156 
NULL
,

157 
msg
.
p‹t
,

158 (
sw_o˘ës
Ë
msg
.
txt
,

159 
	`°æí
(
msg
.
txt
),

160 
ªnd_howl_ª∂y
,

161 
NULL
,

162 &
ªnd_oid
)Ë!
SW_OKAY
) {

163 
	`DPRINTF
(
E_WARN
,
L_REND
,"ErrorÑegisteringÇame\n");

164 
	`ªnd_£nd_ª•⁄£
(-1);

166 
	`ªnd_£nd_ª•⁄£
(0);

169 
REND_MSG_TYPE_UNREGISTER
:

170 
	`DPRINTF
(
E_WARN
,
L_REND
,"Unsupported function: UNREGISTER\n");

171 
	`ªnd_£nd_ª•⁄£
(-1);

173 
REND_MSG_TYPE_STOP
:

174 
	`DPRINTF
(
E_DBG
,
L_REND
,"Stopping mDNS\n");

175 
	`ªnd_£nd_ª•⁄£
(0);

177 
	`sw_discovîy_föa
(
ªnd_h™dÀ
);

179 
REND_MSG_TYPE_STATUS
:

180 
	`DPRINTF
(
E_DBG
,
L_REND
,"Status inquiry --Ñeturning 0\n");

181 
	`ªnd_£nd_ª•⁄£
(0);

186 
	}
}

	@rend-osx.c

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 
	~<uni°d.h
>

27 
	~<pwd.h
>

28 
	~<±hªad.h
>

29 
	~<sys/ty≥s.h
>

31 
	~<libc.h
>

32 
	~<¨∑/«me£r.h
>

33 
	~<C‹eFound©i⁄/C‹eFound©i⁄.h
>

34 
	~<DNSSîvi˚Discovîy/DNSSîvi˚Discovîy.h
>

36 
	~"dØpd.h
"

37 
	~"îr.h
"

38 
	~"os-unix.h
"

39 
	~"ªnd-unix.h
"

41 
CFRunLo›Ref
 
	gªnd_ru∆o›
;

42 
CFRunLo›Sour˚Ref
 
	gªnd_æs
;

43 
±hªad_t
 
	gªnd_tid
;

46 *
ªnd_pùe_m⁄ô‹
(* 
¨g
);

51 
	$ªnd_°›ru∆o›
() {

52 
	`CFRunLo›St›
(
ªnd_ru∆o›
);

53 
	}
}

68 
	$ªnd_h™dÀr
(
CFMachP‹tRef
 
p‹t
, *
msg
, 
CFIndex
 
size
, *
öfo
) {

69 
	`DNSSîvi˚Discovîy_h™dÀRïly
(
msg
);

70 
	}
}

75 
	$ªnd_addt‹u∆o›
(
dns_£rvi˚_discovîy_ªf
 
˛õ¡
) {

76 
mach_p‹t_t
 
p‹t
=
	`DNSSîvi˚DiscovîyMachP‹t
(
˛õ¡
);

78 if(!
p‹t
)

81 
CFMachP‹tC⁄ãxt
 
c⁄ãxt
 = { 0, 0, 
NULL
, NULL, NULL };

82 
Boﬁón
 
shouldFªeInfo
;

83 
CFMachP‹tRef
 
cfMachP‹t
=
	`CFMachP‹tCª©eWôhP‹t
(
kCFAŒoˇt‹DeÁu…
,

84 
p‹t
, 
ªnd_h™dÀr
,

85 &
c⁄ãxt
, &
shouldFªeInfo
);

87 
CFRunLo›Sour˚Ref
 
æs
=
	`CFMachP‹tCª©eRunLo›Sour˚
(
NULL
,
cfMachP‹t
,0);

88 
	`CFRunLo›AddSour˚
(
	`CFRunLo›GëCuºít
(),

89 
æs
,
kCFRunLo›DeÁu…Mode
);

90 
	`CFRñó£
(
æs
);

93 
	}
}

98 
	$ªnd_ª∂y
(
DNSSîvi˚Regi°øti⁄RïlyEº‹Ty≥
 
îr‹Code
, *
c⁄ãxt
) {

99 
îr‹Code
) {

100 
kDNSSîvi˚DiscovîyNoEº‹
:

101 
	`DPRINTF
(
E_DBG
,
L_REND
,"Registered successfully\n");

103 
kDNSSîvi˚DiscovîyNameC⁄Êi˘
:

104 
	`DPRINTF
(
E_WARN
,
L_REND
,"Error -Çame in use\n");

107 
	`DPRINTF
(
E_WARN
,
L_REND
,"Eº‹ %d\n",
îr‹Code
);

110 
	}
}

115 *
	$ªnd_pùe_m⁄ô‹
(* 
¨g
) {

116 
fd_£t
 
r£t
;

117 
ªsu…
;

121 
	`DPRINTF
(
E_DBG
,
L_REND
,"Waiting for data\n");

122 
	`FD_ZERO
(&
r£t
);

123 
	`FD_SET
(
ªnd_pùe_to
[
RD_SIDE
],&
r£t
);

126 ((
ªsu…
=
	`£À˘
(
ªnd_pùe_to
[
RD_SIDE
] + 1,&
r£t
,
NULL
,NULL,NULL)) != -1) &&

127 
î∫o
 !
EINTR
) {

128 if(
	`FD_ISSET
(
ªnd_pùe_to
[
RD_SIDE
],&
r£t
)) {

129 
	`DPRINTF
(
E_DBG
,
L_REND
,"Receivedá message from daap server\n");

130 
	`CFRunLo›Sour˚Sig«l
(
ªnd_æs
);

131 
	`CFRunLo›WakeUp
(
ªnd_ru∆o›
);

132 
	`¶ìp
(1);

136 
	`DPRINTF
(
E_DBG
,
L_REND
,"SelectÉrror!\n");

139 
	}
}

148 
	$ªnd_add_ãxt
(*
buf„r
, *
°rög
) {

149 *
±r
=&
buf„r
[
	`°æí
(buffer)];

150 *
±r
=
	`°æí
(
°rög
);

151 
	`°r˝y
(
±r
+1,
°rög
);

152 
	}
}

160 
	$ªnd_ˇŒback
(*
öfo
) {

161 
REND_MESSAGE
 
msg
;

162 
usP‹t
;

163 
dns_£rvi˚_discovîy_ªf
 
dns_ªf
=
NULL
;

164 *
§c
,*
d°
;

165 
Àn
;

168 if(
	`ªnd_ªad_mesßge
(&
msg
) != (msg)) {

169 
	`DPRINTF
(
E_FATAL
,
L_REND
,"Rendezvous socket closed (daap server crashed?) Aborting.\n");

170 
	`exô
(
EXIT_FAILURE
);

173 
§c
=
d°
=
msg
.
txt
;

174 
§c
 && (*§cË&& (§¯- 
msg
.
txt
 < 
MAX_TEXT_LEN
)) {

175 
Àn
 = (*
§c
);

176 if((
§c
 + 
Àn
 + 1Ë- 
msg
.
txt
 < 
MAX_TEXT_LEN
) {

177 
	`memmove
(
d°
,
§c
+1,
Àn
);

178 
d°
 +
Àn
;

179 if(*
§c
) {

180 *
d°
++ = '\001';

182 *
d°
='\0';

185 
§c
 +
Àn
 + 1;

188 
msg
.
cmd
) {

189 
REND_MSG_TYPE_REGISTER
:

190 
	`DPRINTF
(
E_DBG
,
L_REND
,"Regi°îög %s.%†(%d)\n",
msg
.
ty≥
,msg.
«me
,msg.
p‹t
);

191 
usP‹t
=
	`ht⁄s
(
msg
.
p‹t
);

192 
dns_ªf
=
	`DNSSîvi˚Regi°øti⁄Cª©e
(
msg
.
«me
,msg.
ty≥
,"",
usP‹t
,msg.
txt
,
ªnd_ª∂y
,
nû
);

193 if(
	`ªnd_addt‹u∆o›
(
dns_ªf
)) {

194 
	`DPRINTF
(
E_WARN
,
L_REND
,"AddÅoÑunloop failed\n");

195 
	`ªnd_£nd_ª•⁄£
(-1);

197 
	`ªnd_£nd_ª•⁄£
(0);

200 
REND_MSG_TYPE_UNREGISTER
:

201 
	`DPRINTF
(
E_WARN
,
L_REND
,"Unsupported function: UNREGISTER\n");

202 
	`ªnd_£nd_ª•⁄£
(-1);

204 
REND_MSG_TYPE_STOP
:

205 
	`DPRINTF
(
E_DBG
,
L_REND
,"Stopping mDNS\n");

206 
	`ªnd_£nd_ª•⁄£
(0);

207 
	`ªnd_°›ru∆o›
();

209 
REND_MSG_TYPE_STATUS
:

210 
	`DPRINTF
(
E_DBG
,
L_REND
,"Status inquiry --Ñeturning 1\n");

211 
	`ªnd_£nd_ª•⁄£
(1);

216 
	}
}

223 
	$ªnd_¥iv©e_öô
(*
u£r
) {

224 
CFRunLo›Sour˚C⁄ãxt
 
c⁄ãxt
;

226 if(
	`os_dr›_¥ivs
(
u£r
))

230 
	`DPRINTF
(
E_DBG
,
L_REND
,"StartingÑendezvous services\n");

232 
	`mem£t
((*)&
c⁄ãxt
,0,(context));

233 
c⁄ãxt
.
≥rf‹m
 = 
ªnd_ˇŒback
;

235 
ªnd_ru∆o›
 = 
	`CFRunLo›GëCuºít
();

236 
ªnd_æs
 = 
	`CFRunLo›Sour˚Cª©e
(
NULL
,0,&
c⁄ãxt
);

237 
	`CFRunLo›AddSour˚
(
	`CFRunLo›GëCuºít
(),
ªnd_æs
,
kCFRunLo›DeÁu…Mode
);

239 
	`DPRINTF
(
E_DBG
,
L_REND
,"StartingÖollingÅhread\n");

241 if(
	`±hªad_¸óã
(&
ªnd_tid
,
NULL
,
ªnd_pùe_m⁄ô‹
,NULL)) {

242 
	`DPRINTF
(
E_FATAL
,
L_REND
,"CouldÇot startÅhread. Terminating\n");

244 
	`exô
(
EXIT_FAILURE
);

247 
	`DPRINTF
(
E_DBG
,
L_REND
,"StartingÑunloop\n");

249 
	`CFRunLo›Run
();

251 
	`DPRINTF
(
E_DBG
,
L_REND
,"ExitingÑunloop\n");

253 
	`CFRñó£
(
ªnd_æs
);

254 
	`±hªad_ˇn˚l
(
ªnd_tid
);

255 
	`˛o£
(
ªnd_pùe_to
[
RD_SIDE
]);

256 
	`˛o£
(
ªnd_pùe_‰om
[
WR_SIDE
]);

258 
	}
}

	@rend-posix.c

151 
	~"mDNSEmbeddedAPI.h
"

152 
	~"mDNSPosix.h
"

154 
	~<as£π.h
>

155 
	~<°dio.h
>

156 
	~<°dlib.h
>

157 
	~<°rög.h
>

158 
	~<uni°d.h
>

159 
	~<î∫o.h
>

160 
	~<sig«l.h
>

161 
	~<f˙é.h
>

163 
	~"dØpd.h
"

164 
	~"îr.h
"

165 
	~"os-unix.h
"

166 
	~"ªnd.h
"

167 
	~"ªnd-unix.h
"

169 #i‡
COMPILER_LIKES_PRAGMA_MARK


170 #¥agm®
m¨k
 ***** 
GlobÆs


173 
mDNS
 
	gmDNSSt‹age
;

174 
mDNS_Pœtf‹mSuµ‹t
 
	gPœtf‹mSt‹age
;

176 
mDNSexp‹t
 c⁄° 
	gProgømName
[] = "mDNSResponderPosix";

179 vﬁ©ûê
mDNSBoﬁ
 
	ggSt›Now
;

193 
	$H™dÀSigI¡
(
sigøi£d
)

198 
	`as£π
(
sigøi£d
 =
SIGINT
);

200 i‡(
gMDNSPœtf‹mPosixVîbo£Levñ
 > 0) {

201 
	`Ârötf
(
°dîr
, "\nSIGINT\n");

203 
gSt›Now
 = 
mDNSåue
;

204 
	}
}

206 
	$H™dÀSigQuô
(
sigøi£d
)

213 
	`as£π
(
sigøi£d
 =
SIGQUIT
);

215 i‡(
gMDNSPœtf‹mPosixVîbo£Levñ
 > 0) {

216 
	`Ârötf
(
°dîr
, "\nSIGQUIT\n");

218 
	`mDNS_Clo£
(&
mDNSSt‹age
);

219 
	`exô
(0);

220 
	}
}

223 c⁄° 
	gkDeÁu…Sîvi˚Ty≥
[] = "_http._tcp.";

224 c⁄° 
	gkDeÁu…Sîvi˚Domaö
[] = "local.";

226 
	mkDeÁu…P‹tNumbî
 = 80

230 
PosixSîvi˚
 
	tPosixSîvi˚
;

232 
	sPosixSîvi˚
 {

233 
Sîvi˚Rec‹dSë
 
	mc‹eSîv
;

234 
PosixSîvi˚
 *
	m√xt
;

235 
	m£rvi˚ID
;

238 
PosixSîvi˚
 *
	ggSîvi˚Li°
 = 
NULL
;

240 
	$Regi°øti⁄CÆlback
(
mDNS
 *c⁄° 
m
, 
Sîvi˚Rec‹dSë
 *c⁄° 
thisRegi°øti⁄
, 
mSètus
 
°©us
)

245 
°©us
) {

247 
mSètus_NoEº‹
:

248 
	`DPRINTF
(
E_DBG
,
L_REND
,"CÆlback: %##†NamêRegi°îed\n", 
thisRegi°øti⁄
->
RR_SRV
.
ª§ec
.
«me
->
c
);

253 
mSètus_NameC⁄Êi˘
:

254 
	`DPRINTF
(
E_DBG
,
L_REND
,"CÆlback: %##†NamêC⁄Êi˘\n", 
thisRegi°øti⁄
->
RR_SRV
.
ª§ec
.
«me
->
c
);

267 
°©us
 = 
	`mDNS_RíameAndRîegi°îSîvi˚
(
m
, 
thisRegi°øti⁄
, 
mDNSNULL
);

268 
	`as£π
(
°©us
 =
mSètus_NoEº‹
);

271 
mSètus_MemFªe
:

272 
	`DPRINTF
(
E_DBG
,
L_REND
,"CÆlback: %##†Mem‹y Fªe\n", 
thisRegi°øti⁄
->
RR_SRV
.
ª§ec
.
«me
->
c
);

277 #i‡!
	`deföed
(
NDEBUG
)

279 
PosixSîvi˚
 *
curs‹
;

281 
curs‹
 = 
gSîvi˚Li°
;

282 
curs‹
 !
NULL
) {

283 
	`as£π
(&
curs‹
->
c‹eSîv
 !
thisRegi°øti⁄
);

284 
curs‹
 = curs‹->
√xt
;

288 
	`‰ì
(
thisRegi°øti⁄
);

292 
	`DPRINTF
(
E_DBG
,
L_REND
,"CÆlback: %##†Unknow¿Sètu†%ld\n", 
thisRegi°øti⁄
->
RR_SRV
.
ª§ec
.
«me
->
c
, 
°©us
);

295 
	}
}

297 
	ggSîvi˚ID
 = 0;

299 
mSètus
 
	$Regi°îO√Sîvi˚
(c⁄° * 
richTextName
,

300 c⁄° * 
£rvi˚Ty≥
,

301 c⁄° * 
£rvi˚Domaö
,

302 c⁄° 
mDNSu8
 
ãxt
[],

303 
mDNSu16
 
ãxtLí
,

304 
p‹tNumbî
,

305 
mDNSI¡îÁ˚ID
 
id
)

307 
mSètus
 
°©us
;

308 
PosixSîvi˚
 * 
thisSîv
;

309 
domaöœbñ
 
«me
;

310 
domaö«me
 
ty≥
;

311 
domaö«me
 
domaö
;

313 
°©us
 = 
mSètus_NoEº‹
;

314 
thisSîv
 = (
PosixSîvi˚
 *Ë
	`mÆloc
((*thisServ));

315 i‡(
thisSîv
 =
NULL
) {

316 
°©us
 = 
mSètus_NoMem‹yEº
;

318 i‡(
°©us
 =
mSètus_NoEº‹
) {

319 
	`MakeDomaöLabñFromLôîÆSåög
(&
«me
, 
richTextName
);

320 
	`MakeDomaöNameFromDNSNameSåög
(&
ty≥
, 
£rvi˚Ty≥
);

321 
	`MakeDomaöNameFromDNSNameSåög
(&
domaö
, 
£rvi˚Domaö
);

323 
°©us
 = 
	`mDNS_Regi°îSîvi˚
(&
mDNSSt‹age
, &
thisSîv
->
c‹eSîv
,

324 &
«me
, &
ty≥
, &
domaö
,

325 
NULL
, 
	`mDNSO∑que16‰omI¡VÆ
(
p‹tNumbî
),

326 
ãxt
, 
ãxtLí
,

327 
NULL
, 0,

328 
id
,

329 
Regi°øti⁄CÆlback
, 
thisSîv
);

331 i‡(
°©us
 =
mSètus_NoEº‹
) {

332 
thisSîv
->
£rvi˚ID
 = 
gSîvi˚ID
;

333 
gSîvi˚ID
 += 1;

335 
thisSîv
->
√xt
 = 
gSîvi˚Li°
;

336 
gSîvi˚Li°
 = 
thisSîv
;

337 
	`DPRINTF
(
E_DBG
,
L_REND
,

339 
thisSîv
->
£rvi˚ID
,

340 
richTextName
,

341 
£rvi˚Ty≥
,

342 
p‹tNumbî
);

344 i‡(
thisSîv
 !
NULL
) {

345 
	`‰ì
(
thisSîv
);

348  
°©us
;

349 
	}
}

351 
	$Dîegi°îOurSîvi˚s
()

353 
PosixSîvi˚
 *
thisSîv
;

354 
thisSîvID
;

356 
gSîvi˚Li°
 !
NULL
) {

357 
thisSîv
 = 
gSîvi˚Li°
;

358 
gSîvi˚Li°
 = 
thisSîv
->
√xt
;

360 
thisSîvID
 = 
thisSîv
->
£rvi˚ID
;

362 
	`mDNS_Dîegi°îSîvi˚
(&
mDNSSt‹age
, &
thisSîv
->
c‹eSîv
);

364 
	`DPRINTF
(
E_DBG
,
L_REND
,

366 
thisSîv
->
£rvi˚ID
);

368 
	}
}

370 
mDNSI¡îÁ˚ID
 
	$ªnd_gë_öãrÁ˚_id
(*
iÁ˚
) {

371 
PosixNëw‹kI¡îÁ˚
 *
≤i
;

373 if(!
iÁ˚
)

374  
mDNSI¡îÁ˚_Any
;

376 if(!
	`°æí
(
iÁ˚
))

377  
mDNSI¡îÁ˚_Any
;

379 
	`DPRINTF
(
E_LOG
,
L_REND
,"Sórchög f‹ i¡îÁ˚ %s\n",
iÁ˚
);

381 
≤i
=(
PosixNëw‹kI¡îÁ˚
*)
mDNSSt‹age
.
Ho°I¡îÁ˚s
;

382 
≤i
) {

383 
	`DPRINTF
(
E_INF
,
L_REND
,"Found i¡îÁ˚ %s, index %d\n",
≤i
->
ötfName
,

384 
≤i
->
ödex
);

385 if(
	`°rˇ£cmp
(
≤i
->
ötfName
,
iÁ˚
) == 0) {

386 
	`DPRINTF
(
E_INF
,
L_REND
,"Found i¡îÁ˚ id: %d\n",
≤i
->
c‹eI¡f
.
I¡îÁ˚ID
);

387  
≤i
->
c‹eI¡f
.
I¡îÁ˚ID
;

389 
≤i
=(
PosixNëw‹kI¡îÁ˚
*)’ni->
c‹eI¡f
.
√xt
);

392 
	`DPRINTF
(
E_INF
,
L_REND
,"CouldÇot find interface.\n");

393  
mDNSI¡îÁ˚_Any
;

394 
	}
}

401 
	$ªnd_ˇŒback
() {

402 
REND_MESSAGE
 
msg
;

403 
ªsu…
;

404 
îr
;

405 
mDNSI¡îÁ˚ID
 
id
;

407 
	`DPRINTF
(
E_DBG
,
L_REND
,"ProcessingÑendezvous message\n");

411 if((
ªsu…
=
	`ªnd_ªad_mesßge
(&
msg
)) != (msg)) {

412 
îr
=
î∫o
;

413 
	`DPRINTF
(
E_FATAL
,
L_REND
,"Rendezvous socket closed (daap server crashed?) Aborting.\n");

414 
gSt›Now
=
mDNSåue
;

418 
msg
.
cmd
) {

419 
REND_MSG_TYPE_REGISTER
:

420 
id
=
	`ªnd_gë_öãrÁ˚_id
(
msg
.
iÁ˚
);

421 
	`DPRINTF
(
E_DBG
,
L_REND
,"Regi°îög %s.%†(%d)\n",
msg
.
«me
,msg.
ty≥
,msg.
p‹t
);

422 
	`Regi°îO√Sîvi˚
(
msg
.
«me
,msg.
ty≥
,"loˇl.",msg.
txt
,
	`°æí
(msg.txt),

423 
msg
.
p‹t
,
id
);

424 
	`ªnd_£nd_ª•⁄£
(0);

426 
REND_MSG_TYPE_UNREGISTER
:

427 
	`ªnd_£nd_ª•⁄£
(1);

429 
REND_MSG_TYPE_STOP
:

430 
	`DPRINTF
(
E_INF
,
L_REND
,"Stopping mDNS\n");

431 
gSt›Now
 = 
mDNSåue
;

432 
	`ªnd_£nd_ª•⁄£
(0);

434 
REND_MSG_TYPE_STATUS
:

435 
	`ªnd_£nd_ª•⁄£
(1);

440 
	}
}

444 
	$ªnd_¥iv©e_öô
(*
u£r
) {

445 
mSètus
 
°©us
;

446 
mDNSBoﬁ
 
ªsu…
;

448 
°©us
 = 
	`mDNS_Inô
(&
mDNSSt‹age
, &
Pœtf‹mSt‹age
,

449 
mDNS_Inô_NoCache
, 
mDNS_Inô_ZîoCacheSize
,

450 
mDNS_Inô_Advîti£LoˇlAddªs£s
,

451 
mDNS_Inô_NoInôCÆlback
, 
mDNS_Inô_NoInôCÆlbackC⁄ãxt
);

453 i‡(
°©us
 !
mSètus_NoEº‹
) {

454 
	`DPRINTF
(
E_FATAL
,
L_REND
,"mDNS Eº‹ %d\n",
°©us
);

458 if(
	`os_dr›_¥ivs
(
u£r
))

461 
	`sig«l
(
SIGINT
, 
H™dÀSigI¡
);

462 
	`sig«l
(
SIGQUIT
, 
H™dÀSigQuô
);

463 
	`sig«l
(
SIGHUP
, 
SIG_IGN
);

465 !
gSt›Now
) {

466 
nfds
 = 1;

467 
fd_£t
 
ªadfds
;

468 
timevÆ
 
timeout
;

469 
ªsu…
;

474 
	`FD_ZERO
(&
ªadfds
);

475 
	`FD_SET
(
ªnd_pùe_to
[
RD_SIDE
],&
ªadfds
);

480 
timeout
.
tv_£c
 = 0x3FFFFFFF;

481 
timeout
.
tv_u£c
 = 0;

484 
	`mDNSPosixGëFDSë
(&
mDNSSt‹age
, &
nfds
, &
ªadfds
, &
timeout
);

487 
	`DPRINTF
(
E_SPAM
,
L_REND
,"£À˘(%d, %d.%06d)\n", 
nfds
,

488 
timeout
.
tv_£c
,Åimeout.
tv_u£c
);

490 
ªsu…
 = 
	`£À˘
(
nfds
, &
ªadfds
, 
NULL
, NULL, &
timeout
);

492 i‡(
ªsu…
 < 0) {

493 i‡(
î∫o
 !
EINTR
Ë
gSt›Now
 = 
mDNSåue
;

494 
	`DPRINTF
(
E_WARN
,
L_REND
,"£À˘(Ëªtu∫ed %dÉºnÿ%d\n", 
ªsu…
, 
î∫o
);

497 
	`mDNSPosixPro˚ssFDSë
(&
mDNSSt‹age
, &
ªadfds
);

502 if(
	`FD_ISSET
(
ªnd_pùe_to
[
RD_SIDE
],&
ªadfds
)) {

503 
	`ªnd_ˇŒback
();

508 
	`DPRINTF
(
E_DBG
,
L_REND
,"Exiting\n");

510 
	`Dîegi°îOurSîvi˚s
();

511 
	`mDNS_Clo£
(&
mDNSSt‹age
);

513 i‡(
°©us
 =
mSètus_NoEº‹
) {

514 
ªsu…
 = 0;

516 
ªsu…
 = 2;

518 
	`DPRINTF
(
E_DBG
,
L_REND
, "Finished with status %ld,Ñesult %d\n",

519 
°©us
, 
ªsu…
);

521 
	`exô
(
ªsu…
);

522 
	}
}

	@rend-unix.c

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 
	~<î∫o.h
>

27 
	~<ª°¨t.h
>

28 
	~<sig«l.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<uni°d.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<sys/°©.h
>

36 
	~"dØpd.h
"

37 
	~"îr.h
"

38 
	~"ªnd-unix.h
"

40 
	gªnd_pùe_to
[2];

41 
	gªnd_pùe_‰om
[2];

42 
	gªnd_pid
;

44 
	#RD_SIDE
 0

	)

45 
	#WR_SIDE
 1

	)

52 
	$ªnd_öô
(*
u£r
) {

53 
îr
;

54 
fd
;

56 if(
	`pùe
((*)&
ªnd_pùe_to
) == -1)

59 if(
	`pùe
((*)&
ªnd_pùe_‰om
) == -1) {

60 
îr
=
î∫o
;

61 
	`˛o£
(
ªnd_pùe_to
[
RD_SIDE
]);

62 
	`˛o£
(
ªnd_pùe_to
[
WR_SIDE
]);

63 
î∫o
=
îr
;

67 
ªnd_pid
=
	`f‹k
();

68 if(
ªnd_pid
==-1) {

69 
îr
=
î∫o
;

70 
	`˛o£
(
ªnd_pùe_to
[
RD_SIDE
]);

71 
	`˛o£
(
ªnd_pùe_to
[
WR_SIDE
]);

72 
	`˛o£
(
ªnd_pùe_‰om
[
RD_SIDE
]);

73 
	`˛o£
(
ªnd_pùe_‰om
[
WR_SIDE
]);

74 
î∫o
=
îr
;

78 if(
ªnd_pid
) {

79 
	`˛o£
(
ªnd_pùe_to
[
RD_SIDE
]);

80 
	`˛o£
(
ªnd_pùe_‰om
[
WR_SIDE
]);

85 
	`˛o£
(
ªnd_pùe_to
[
WR_SIDE
]);

86 
	`˛o£
(
ªnd_pùe_‰om
[
RD_SIDE
]);

91 
	`sig«l
(
SIGTTOU
, 
SIG_IGN
);

92 
	`sig«l
(
SIGTTIN
, 
SIG_IGN
);

93 
	`sig«l
(
SIGTSTP
, 
SIG_IGN
);

95 #ifde‡
SETPGRP_VOID


101 #ifde‡
TIOCNOTTY


102 i‡((
fd
 = 
	`›í
("/dev/ây", 
O_RDWR
)) >= 0) {

103 
	`io˘l
(
fd
, 
TIOCNOTTY
, (*Ë
NULL
);

104 
	`˛o£
(
fd
);

108 if((
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
, 0)) != -1) {

109 
	`dup2
(
fd
, 
STDIN_FILENO
);

110 
	`dup2
(
fd
, 
STDOUT_FILENO
);

111 if(!
c⁄fig
.
f‹eground
)

112 
	`dup2
(
fd
, 
STDERR_FILENO
);

114 i‡(
fd
 > 2)

115 
	`˛o£
(
fd
);

118 
î∫o
 = 0;

120 
	`chdú
("/");

121 
	`umask
(0);

126 
	`ªnd_¥iv©e_öô
(
u£r
);

127 
	`exô
(0);

128 
	}
}

135 
	$ªnd_ru¬ög
() {

136 
REND_MESSAGE
 
msg
;

137 
ªsu…
;

139 
	`DPRINTF
(
E_DBG
,
L_REND
,"Status inquiry\n");

140 
	`mem£t
((*)&
msg
,0x00,(msg));

141 
msg
.
cmd
=
REND_MSG_TYPE_STATUS
;

142 
ªsu…
=
	`ªnd_£nd_mesßge
(&
msg
);

143 
	`DPRINTF
(
E_DBG
,
L_REND
,"Rëu∫ög sètu†%d\n",
ªsu…
);

144  
ªsu…
;

145 
	}
}

152 
	$ªnd_°›
() {

153 
REND_MESSAGE
 
msg
;

155 
	`mem£t
((*)&
msg
,0x0,(msg));

156 
msg
.
cmd
=
REND_MSG_TYPE_STOP
;

157  
	`ªnd_£nd_mesßge
(&
msg
);

158 
	}
}

165 
	$ªnd_ªgi°î
(*
«me
, *
ty≥
, 
p‹t
, *
iÁ˚
, *
txt
) {

166 
REND_MESSAGE
 
msg
;

168 if((
	`°æí
(
«me
)+1 > 
MAX_NAME_LEN
Ë|| (°æí(
ty≥
)+1 > MAX_NAME_LEN) ||

169 (
	`°æí
(
txt
)+1 > 
MAX_TEXT_LEN
)) {

170 
	`DPRINTF
(
E_FATAL
,
L_REND
,"Registration failed:Çame orÅypeÅooÜong\n");

174 
	`mem£t
((*)&
msg
,0x00,(msg));

175 
msg
.
cmd
=
REND_MSG_TYPE_REGISTER
;

176 
	`°∫˝y
(
msg
.
«me
,«me,
MAX_NAME_LEN
-1);

177 
	`°∫˝y
(
msg
.
ty≥
,ty≥,
MAX_NAME_LEN
-1);

178 if(
iÁ˚
)

179 
	`°∫˝y
(
msg
.
iÁ˚
,iÁ˚,
MAX_IFACE_NAME_LEN
-1);

180 
	`°∫˝y
(
msg
.
txt
,txt,
MAX_NAME_LEN
-1);

181 
msg
.
p‹t
=port;

183  
	`ªnd_£nd_mesßge
(&
msg
);

184 
	}
}

191 
	$ªnd_uƒegi°î
(*
«me
, *
ty≥
, 
p‹t
) {

193 
	}
}

200 
	$ªnd_£nd_mesßge
(
REND_MESSAGE
 *
pmsg
) {

201 
ªtvÆ
;

203 if(
	`r_wrôe
(
ªnd_pùe_to
[
WR_SIDE
],
pmsg
,(
REND_MESSAGE
)) == -1)

206 if((
ªtvÆ
=
	`r_ªad
(
ªnd_pùe_‰om
[
RD_SIDE
],&retval,()) == -1))

209  
ªtvÆ
;

210 
	}
}

217 
	$ªnd_ªad_mesßge
(
REND_MESSAGE
 *
pmsg
) {

218  
	`r_ªad
(
ªnd_pùe_to
[
RD_SIDE
],
pmsg
,(
REND_MESSAGE
));

219 
	}
}

226 
	$ªnd_£nd_ª•⁄£
(
vÆue
) {

227  
	`r_wrôe
(
ªnd_pùe_‰om
[
WR_SIDE
],&
vÆue
,());

228 
	}
}

	@rend-unix.h

22 #i‚de‡
_REND_UNIX_H_


23 
	#_REND_UNIX_H_


	)

25 
	#MAX_NAME_LEN
 200

	)

27 
	#MAX_IFACE_NAME_LEN
 20

	)

28 
	#MAX_TEXT_LEN
 255

	)

30 
	sèg_ªnd_mesßge
 {

31 
	mcmd
;

32 
	mp‹t
;

33 
	m«me
[
MAX_NAME_LEN
];

34 
	mty≥
[
MAX_NAME_LEN
];

35 
	miÁ˚
[
MAX_IFACE_NAME_LEN
];

36 
	mtxt
[
MAX_TEXT_LEN
];

37 } 
	tREND_MESSAGE
;

39 
	#REND_MSG_TYPE_REGISTER
 0

	)

40 
	#REND_MSG_TYPE_UNREGISTER
 1

	)

41 
	#REND_MSG_TYPE_STOP
 2

	)

42 
	#REND_MSG_TYPE_STATUS
 3

	)

44 
	#RD_SIDE
 0

	)

45 
	#WR_SIDE
 1

	)

47 
ªnd_pùe_to
[2];

48 
ªnd_pùe_‰om
[2];

50 
ªnd_£nd_mesßge
(
REND_MESSAGE
 *
pmsg
);

51 
ªnd_£nd_ª•⁄£
(
vÆue
);

52 
ªnd_¥iv©e_öô
(*
u£r
);

53 
ªnd_ªad_mesßge
(
REND_MESSAGE
 *
pmsg
);

	@rend.h

22 #i‚de‡
_REND_H_


23 
	#_REND_H_


	)

25 
ªnd_öô
(*
u£r
);

26 
ªnd_ru¬ög
();

27 
ªnd_°›
();

28 
ªnd_ªgi°î
(*
«me
, *
ty≥
, 
p‹t
, *
iÁ˚
, *
txt
);

29 
ªnd_uƒegi°î
(*
«me
, *
ty≥
, 
p‹t
);

	@restart.c

35 #ifde‡
HAVE_CONFIG_H


36 
	~"c⁄fig.h
"

39 
	~<î∫o.h
>

40 
	~<f˙é.h
>

41 
	~<limôs.h
>

42 
	~<°dio.h
>

43 
	~<°d¨g.h
>

44 
	~<°rög.h
>

45 #ifde‡
HAVE_SYS_SELECT_H


46 
	~<sys/£À˘.h
>

48 #ifde‡
HAVE_SYS_TIME_H


49 
	~<sys/time.h
>

51 #ifde‡
HAVE_SYS_WAIT_H


52 
	~<sys/waô.h
>

55 
	~"dØpd.h
"

56 
	~"îr.h
"

57 
	~"ª°¨t.h
"

59 
	#BLKSIZE
 
PIPE_BUF


	)

63 
	$r_fd¥ötf
(
fd
, *
fmt
, ...) {

64 
buf„r
[1024];

65 
va_li°
 
≠
;

67 
	`va_°¨t
(
≠
, 
fmt
);

68 
	`v¢¥ötf
(
buf„r
, 1024, 
fmt
, 
≠
);

69 
	`va_íd
(
≠
);

71  
	`r_wrôe
(
fd
,
buf„r
,
	`°æí
(buffer));

72 
	}
}

76 
	$r_˛o£
(
fûdes
) {

77 
ªtvÆ
;

78 
ªtvÆ
 = 
	`˛o£
(
fûdes
),ÑëvÆ =-1 && 
î∫o
 =
EINTR
) ;

79  
ªtvÆ
;

80 
	}
}

82 
	$r_dup2
(
fûdes
, 
fûdes2
) {

83 
ªtvÆ
;

84 
ªtvÆ
 = 
	`dup2
(
fûdes
, 
fûdes2
),ÑëvÆ =-1 && 
î∫o
 =
EINTR
) ;

85  
ªtvÆ
;

86 
	}
}

89 
	$r_›í2
(c⁄° *
∑th
, 
oÊag
) {

90 
ªtvÆ
;

91 
ªtvÆ
 = 
	`›í
(
∑th
, 
oÊag
),ÑëvÆ =-1 && 
î∫o
 =
EINTR
) ;

92  
ªtvÆ
;

93 
	}
}

95 
ssize_t
 
	$r_ªad
(
fd
, *
buf
, 
size_t
 
size
) {

96 
ssize_t
 
ªtvÆ
;

97 ((
ªtvÆ
 = 
	`ªad
(
fd
, 
buf
, ()
size
)Ë=-1Ë&& (
î∫o
==
EINTR
)) {};

98  
ªtvÆ
;

99 
	}
}

101 
ssize_t
 
	$r_wrôe
(
fd
, *
buf
, 
size_t
 
size
) {

102 *
buÂ
;

103 
size_t
 
byã°owrôe
;

104 
ssize_t
 
byãswrôãn
;

105 
size_t
 
tŸÆbyãs
;

107 
buÂ
 = 
buf
, 
byã°owrôe
 = 
size
, 
tŸÆbyãs
 = 0;

108 
byã°owrôe
 > 0;

109 
buÂ
 +
byãswrôãn
, 
byã°owrôe
 -= byteswritten) {

110 
byãswrôãn
 = 
	`wrôe
(
fd
, 
buÂ
, 
byã°owrôe
);

111 i‡((
byãswrôãn
Ë=-1 && (
î∫o
 !
EINTR
))

113 i‡(
byãswrôãn
 == -1)

114 
byãswrôãn
 = 0;

115 
tŸÆbyãs
 +
byãswrôãn
;

117  (
ssize_t
Ë
tŸÆbyãs
;

118 
	}
}

122 
ssize_t
 
	$ªadblock
(
fd
, *
buf
, 
size_t
 
size
) {

123 *
buÂ
;

124 
ssize_t
 
byã§ód
;

125 
size_t
 
byã°‹ód
;

126 
size_t
 
tŸÆbyãs
;

128 
buÂ
 = 
buf
, 
byã°‹ód
 = 
size
, 
tŸÆbyãs
 = 0;

129 
byã°‹ód
 > 0;

130 
buÂ
 +
byã§ód
, 
byã°‹ód
 -= bytesread) {

131 
byã§ód
 = 
	`ªad
(
fd
, 
buÂ
, 
byã°‹ód
);

132 i‡((
byã§ód
 =0Ë&& (
tŸÆbyãs
 == 0))

134 i‡(
byã§ód
 == 0) {

135 
î∫o
 = 
EINVAL
;

138 i‡((
byã§ód
Ë=-1 && (
î∫o
 !
EINTR
))

140 i‡(
byã§ód
 == -1)

141 
byã§ód
 = 0;

142 
tŸÆbyãs
 +
byã§ód
;

144  (
ssize_t
Ë
tŸÆbyãs
;

145 
	}
}

147 
	$ªadlöe
(
fd
, *
buf
, 
nbyãs
) {

148 
numªad
 = 0;

149 
ªtu∫vÆ
;

151 
numªad
 < 
nbyãs
 - 1) {

152 
ªtu∫vÆ
 = 
	`ªad
(
fd
, 
buf
 + 
numªad
, 1);

153 i‡((
ªtu∫vÆ
 =-1Ë&& (
î∫o
 =
EINTR
))

155 i‡((
ªtu∫vÆ
 =0Ë&& (
numªad
 == 0))

157 i‡(
ªtu∫vÆ
 == 0)

159 i‡(
ªtu∫vÆ
 == -1)

161 
numªad
++;

162 i‡(
buf
[
numªad
-1] == '\n') {

163 
buf
[
numªad
] = '\0';

164  
numªad
;

167 
î∫o
 = 
EINVAL
;

169 
	}
}

	@restart.h

35 #ifde‡
HAVE_CONFIG_H


36 
	~"c⁄fig.h
"

39 
	~<f˙é.h
>

41 #ifde‡
HAVE_UNISTD_H


42 
	~<uni°d.h
>

45 #ifde‡
HAVE_SYS_TIME_H


46 
	~<sys/time.h
>

49 
	~<sys/ty≥s.h
>

51 #i‚de‡
ETIME


52 
	#ETIME
 
ETIMEDOUT


	)

55 
timevÆ
 
add2cuºíâime
(
£c⁄ds
);

56 
c›yfûe
(
‰omfd
, 
tofd
);

57 
r_fd¥ötf
(
fd
, *
fmt
, ...);

58 
r_˛o£
(
fûdes
);

59 
r_dup2
(
fûdes
, 
fûdes2
);

60 
r_›í2
(c⁄° *
∑th
, 
oÊag
);

61 
ssize_t
 
r_ªad
(
fd
, *
buf
, 
size_t
 
size
);

62 
ssize_t
 
r_wrôe
(
fd
, *
buf
, 
size_t
 
size
);

63 
ssize_t
 
ªadblock
(
fd
, *
buf
, 
size_t
 
size
);

64 
ªadlöe
(
fd
, *
buf
, 
nbyãs
);

65 
ªadlöëimed
(
fd
, *
buf
, 
nbyãs
, 
£c⁄ds
);

66 
ssize_t
 
ªadtimed
(
fd
, *
buf
, 
size_t
 
nbyã
, 
£c⁄ds
);

67 
ªadwrôe
(
‰omfd
, 
tofd
);

68 
ªadwrôeblock
(
‰omfd
, 
tofd
, *
buf
, 
size
);

69 
waôfdtimed
(
fd
, 
timevÆ
 
íd
);

	@rxml.c

5 #ifde‡
HAVE_CONFIG_H


6 
	~"c⁄fig.h
"

8 
	~<˘y≥.h
>

9 
	~<î∫o.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

14 
	~"dØpd.h
"

15 
	~"io.h
"

16 
	~"rxml.h
"

20 
	#RXML_ERROR
(
a
,
b
Ë{ (a)->
ecode
=(b);  0; };

	)

21 
	#RXML_MAX_LINE
 1024

	)

22 
	#RXML_MAX_TEXT
 1024

	)

23 
	#RXML_MAX_TAG
 256

	)

25 
	s_RXML
 {

26 
RXML_EVTHANDLER
 
	mh™dÀr
;

27 *
	m‚ame
;

28 
IOHANDLE
 
	mhfûe
;

29 *
	mud©a
;

30 
	mecode
;

31 
	mlöe
;

32 *
	me°rög
;

33 } 
	tRXML
;

36 #i‚de‡
FALSE


37 
	#FALSE
 0

	)

38 
	#TRUE
 1

	)

41 
	#E_RXML_SUCCESS
 0x00

	)

42 
	#E_RXML_OPEN
 0x01 | 0x80

	)

43 
	#E_RXML_READ
 0x02 | 0x80

	)

44 
	#E_RXML_NEST
 0x03

	)

45 
	#E_RXML_SPLIT
 0x04

	)

46 
	#E_RXML_CLOSE
 0x05

	)

47 
	#E_RXML_TAGSIZE
 0x06

	)

48 
	#E_RXML_ENTITY
 0x07

	)

49 
	#E_RXML_MALLOC
 0x08

	)

51 *
	grxml_e°rögs
[] = {

61 
NULL


65 
rxml_decode_°rög
(*
°rög
);

73 
	$rxml_decode_°rög
(*
°rög
) {

74 *
§c
, *
d°
;

75 
Àn
;

76 
cvÆ
;

78 
§c
=
d°
=
°rög
;

80 *
§c
) {

81 if((*
§c
) == '&') {

82 
Àn
 = ()
	`°æí
(
§c
);

83 if((
Àn
 > 3Ë&& (
	`°∫cmp
(
§c
,"&gt;",4) == 0)) {

84 *
d°
++ = '>';

85 
§c
 += 4;

86 } if((
Àn
 > 3Ë&& (
	`°∫cmp
(
§c
,"&lt;",4) == 0)) {

87 *
d°
++ = '<';

88 
§c
 += 4;

89 } if((
Àn
 > 4Ë&& (
	`°∫cmp
(
§c
,"&amp;",5) == 0)) {

90 *
d°
++ = '&';

91 
§c
 += 5;

92 } if((
Àn
 > 5Ë&& (
	`°∫cmp
(
§c
,"&quot;",6) == 0)) {

93 *
d°
++ = '"';

94 
§c
 += 6;

95 } if((
Àn
 > 5Ë&& (
	`°∫cmp
(
§c
,"&apos;",6) == 0)) {

96 *
d°
 ++ = '\'';

97 
§c
 += 6;

100 if(!
	`ssˇnf
((*)&
§c
[2],"%d;",&
cvÆ
))

101  
FALSE
;

103 *
d°
++ = 
cvÆ
;

104 if(
§c
[3] == ';') {

105 
§c
 += 4;

106 } if(
§c
[4] == ';') {

107 
§c
 += 5;

108 } if(
§c
[5] == ';') {

109 
§c
 += 6;

111  
FALSE
;

115 *
d°
++=*
§c
++;

119 *
d°
 = '\0';

120  
TRUE
;

121 
	}
}

131 
	$rxml_›í
(
RXMLHANDLE
 *
vp
, *
fûe
,

132 
RXML_EVTHANDLER
 
h™dÀr
, *
ud©a
) {

133 
RXML
 *
≤ew
;

135 
≤ew
=(
RXML
*)
	`mÆloc
((RXML));

136 if(!
≤ew
) {

137 *
vp
 = 
NULL
;

138  
FALSE
;

141 
	`mem£t
(
≤ew
,0x0,(
RXML
));

142 *
vp
 = 
≤ew
;

144 
≤ew
->
h™dÀr
 = handler;

145 
≤ew
->
‚ame
 = 
fûe
;

146 
≤ew
->
hfûe
 = 
	`io_√w
();

148 if(!
≤ew
->
hfûe
)

149 
	`RXML_ERROR
(
≤ew
,
E_RXML_MALLOC
);

151 if(!
	`io_›í
(
≤ew
->
hfûe
, "fûe://%U?ascii=1", 
fûe
)) {

152 
	`io_di•o£
(
≤ew
->
hfûe
);

153 
≤ew
->
hfûe
 = 
NULL
;

154 
	`RXML_ERROR
(
≤ew
,
E_RXML_OPEN
);

157 
	`io_buf„r
(
≤ew
->
hfûe
);

158 
≤ew
->
ud©a
 = udata;

159 
≤ew
->
löe
 = 0;

161 if(
≤ew
->
h™dÀr
)

162 
≤ew
->
	`h™dÀr
(
RXML_EVT_OPEN
,Ö√w->
ud©a
,Ö√w->
‚ame
);

164  
TRUE
;

165 
	}
}

172 
	$rxml_˛o£
(
RXMLHANDLE
 
vp
) {

173 
RXML
 *
ph
 = (RXML*)
vp
;

175 if(
ph
->
h™dÀr
Ëph->
	`h™dÀr
(
RXML_EVT_CLOSE
,ph->
ud©a
,ph->
‚ame
);

176 if(
ph
->
hfûe
) {

177 
	`io_˛o£
(
ph
->
hfûe
);

178 
	`io_di•o£
(
ph
->
hfûe
);

180 if(
ph
->
e°rög
Ë
	`‰ì
(ph->estring);

182 
	`‰ì
(
ph
);

183  
TRUE
;

184 
	}
}

191 *
	$rxml_îr‹°rög
(
RXMLHANDLE
 
vp
) {

192 
RXML
 *
ph
 = (RXML*)
vp
;

193 
Àn
;

194 *
e°rög
=
NULL
;

196 if(!
ph
) {

200 if(
ph
->
e°rög
Ë
	`‰ì
(ph->estring);

202 
Àn
 = ()
	`°æí
(
rxml_e°rögs
[
ph
->
ecode
]) + 16;

203 if((
ph
->
ecode
 & 0x80)) {

204 
e°rög
=
	`io_îr°r
(
ph
->
hfûe
);

205 
Àn
 +()
	`°æí
(
e°rög
);

208 
ph
->
e°rög
=(*)
	`mÆloc
(
Àn
);

209 if(!
ph
->
e°rög
)

213 if(((
ph
->
ecode
 & 0x80Ë&& (ph->
hfûe
))) {

214 
	`¢¥ötf
(
ph
->
e°rög
,
Àn
,"%s%s",
rxml_e°rögs
[ph->
ecode
],
	`io_îr°r
’h->
hfûe
));

216 if(
	`°∫cmp
(
rxml_e°rögs
[
ph
->
ecode
],"Parse",5)==0) {

217 
	`¢¥ötf
(
ph
->
e°rög
, 
Àn
, "%s (Line:%d)",

218 
rxml_e°rögs
[
ph
->
ecode
],Öh->
löe
);

220 
	`¢¥ötf
(
ph
->
e°rög
,
Àn
, "%s", 
rxml_e°rögs
[ph->
ecode
]);

224  
ph
->
e°rög
;

225 
	}
}

233 
	$rxml_∑r£
(
RXMLHANDLE
 
vp
) {

234 
löebuf„r
[
RXML_MAX_LINE
];

235 
ègbuf„r
[
RXML_MAX_TAG
];

236 
ãxtbuf„r
[
RXML_MAX_TEXT
];

237 
ö_ãxt
=0;

238 
ãxt_off£t
=0;

239 
size
;

240 
off£t
;

241 
ö_èg
=0;

242 
èg_íd
=0;

243 
èg_°¨t
=0;

244 
sögÀ_èg
;

245 
RXML
 *
ph
 = (RXML*)
vp
;

246 
uöt32_t
 
Àn
;

248 
ph
->
löe
 = 0;

250 
ãxtbuf„r
[0] = '\0';

252 
Àn
 = (
löebuf„r
);

255 
	`io_ªadlöe
(
ph
->
hfûe
,(*)
löebuf„r
,&
Àn
) &&Üen) {

256 
ph
->
löe
++;

257 
off£t
=0;

258 
size
=()
	`°æí
(
löebuf„r
);

259 
ö_ãxt
=0;

260 
ãxt_off£t
=0;

261 
off£t
 < 
size
) {

262 
löebuf„r
[
off£t
]) {

264 if(
ö_èg
)

265 
	`RXML_ERROR
(
ph
, 
E_RXML_NEST
);

267 
ö_èg
=
TRUE
;

268 
èg_°¨t
=
off£t
+1;

269 
èg_íd
=
FALSE
;

270 if(
löebuf„r
[
èg_°¨t
] == '/') {

271 
èg_íd
 = 
TRUE
;

272 
off£t
++;

273 
èg_°¨t
++;

276 
off£t
++;

278 
ö_ãxt
=0;

282 if(!
ö_èg
)

283 
	`RXML_ERROR
(
ph
, 
E_RXML_CLOSE
);

285 
ö_èg
=
FALSE
;

286 if((
off£t
 - 
èg_°¨t
Ë> 
RXML_MAX_TAG
)

287 
	`RXML_ERROR
(
ph
, 
E_RXML_TAGSIZE
);

289 
	`°∫˝y
(
ègbuf„r
,&
löebuf„r
[
èg_°¨t
],
off£t
-tag_start);

290 
ègbuf„r
[
off£t
-
èg_°¨t
] = '\0';

292 if(
èg_íd
) {

294 if((
ph
->
h™dÀr
Ë&& (
	`°æí
(
ãxtbuf„r
))) {

295 if(!
	`rxml_decode_°rög
(
ãxtbuf„r
))

296 
	`RXML_ERROR
(
ph
,
E_RXML_ENTITY
);

298 
ph
->
	`h™dÀr
(
RXML_EVT_TEXT
,ph->
ud©a
,
ãxtbuf„r
);

302 
ö_ãxt
=1;

303 
ãxt_off£t
=0;

304 
ãxtbuf„r
[0] = '\0';

306 
sögÀ_èg
=0;

307 if(
ègbuf„r
[
	`°æí
(tagbuffer)-1] == '/') {

308 
ègbuf„r
[
	`°æí
(tagbuffer)-1] = '\0';

309 
sögÀ_èg
=1;

312 if(
ph
->
h™dÀr
)

313 
ph
->
	`h™dÀr
(
èg_íd
 ? 
RXML_EVT_END
 : 
RXML_EVT_BEGIN
,

314 
ph
->
ud©a
,
ègbuf„r
);

317 if((
sögÀ_èg
Ë&& (
ph
->
h™dÀr
))

318 
ph
->
	`h™dÀr
(
RXML_EVT_END
,ph->
ud©a
,
ègbuf„r
);

320 
off£t
++;

324 if((
ö_ãxt
Ë&& (
ãxt_off£t
 < ((
ãxtbuf„r
)-1))) {

326 if((
löebuf„r
[
off£t
] != '\r') &&

327 (
löebuf„r
[
off£t
] != '\n')) {

328 
ãxtbuf„r
[
ãxt_off£t
] = 
löebuf„r
[
off£t
];

329 
ãxt_off£t
++;

330 
ãxtbuf„r
[
ãxt_off£t
] = '\x0';

332 } i‡(
ö_ãxt
) {

335 
off£t
++;

339 
Àn
 = (
löebuf„r
);

342 if(
Àn
)

343 
	`RXML_ERROR
(
ph
,
E_RXML_READ
);

345  
TRUE
;

346 
	}
}

	@rxml.h

5 #i‚de‡
_RXML_H_


6 
	#_RXML_H_


	)

8 
	#RXML_EVT_OPEN
 0x0

	)

9 
	#RXML_EVT_CLOSE
 0x1

	)

10 
	#RXML_EVT_BEGIN
 0x2

	)

11 
	#RXML_EVT_END
 0x3

	)

12 
	#RXML_EVT_TEXT
 0x4

	)

14 * 
	tRXMLHANDLE
;

15 (*
	tRXML_EVTHANDLER
)(,*,*);

17 
	`rxml_›í
(
RXMLHANDLE
 *
h™dÀ
, *
fûe
,

18 
RXML_EVTHANDLER
 
h™dÀr
, * 
ud©a
);

19 
	`rxml_˛o£
(
RXMLHANDLE
 
h™dÀ
);

20 *
	`rxml_îr‹°rög
(
RXMLHANDLE
 
h™dÀ
);

21 
	`rxml_∑r£
(
RXMLHANDLE
 
h™dÀ
);

	@scan-aac.c

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

25 
	~<f˙é.h
>

26 
	~<°dio.h
>

27 
	~<°rög.h
>

28 
	~<°dlib.h
>

29 #ifde‡
HAVE_SYS_TIME_H


30 
	~<sys/time.h
>

33 #i‚de‡
WIN32


34 
	~<√töë/ö.h
>

37 
	~"dØpd.h
"

38 
	~"îr.h
"

39 
	~"io.h
"

40 
	~"mp3-sˇ¬î.h
"

41 
	~"sˇn-Øc.h
"

44 
time_t
 
sˇn_Øc_mac_to_unix_time
(
t
);

52 
time_t
 
	$sˇn_Øc_mac_to_unix_time
(
t
) {

53 
timevÆ
 
tv
;

54 
timez⁄e
 
tz
;

56 
	`gëtimeofday
(&
tv
, &
tz
);

58  (
t
 - (365L * 66L * 24L * 60L * 60L + 17L * 60L * 60L * 24L) +

59 (
tz
.
tz_möuãswe°
 * 60));

60 
	}
}

73 
uöt64_t
 
	$sˇn_Øc_drû…ﬂtom
(
IOHANDLE
 
hfûe
,*
©om_∑th
,

74 *
©om_Àngth
) {

75 
uöt64_t
 
©om_off£t
;

76 
uöt64_t
 
fûe_size
,
pos
;

77 *
cur_p
, *
íd_p
;

78 
©om_«me
[5];

80 
	`DPRINTF
(
E_SPAM
,
L_SCAN
,"Sórchög f‹ %s\n",
©om_∑th
);

83 
	`io_size
(
hfûe
, &
fûe_size
);

84 
	`io_£ços
(
hfûe
,0,
SEEK_SET
);

86 
íd_p
 = 
©om_∑th
;

87 *
íd_p
 != '\0') {

88 
íd_p
++;

90 
©om_«me
[4] = '\0';

91 
cur_p
 = 
©om_∑th
;

93 
cur_p
 !
NULL
) {

94 i‡((
íd_p
 - 
cur_p
) < 4) {

97 
	`°∫˝y
(
©om_«me
, 
cur_p
, 4);

98 
©om_off£t
 = 
	`sˇn_Øc_föd©om
(
hfûe
, 
fûe_size
,

99 
©om_«me
, 
©om_Àngth
);

100 i‡(
©om_off£t
 == -1) {

104 
	`io_gëpos
(
hfûe
,&
pos
);

105 
	`DPRINTF
(
E_SPAM
,
L_SCAN
,"Found %sátomát off %lld.\n",

106 
©om_«me
, 
pos
 - 8);

108 
cur_p
 = 
	`°rchr
(cur_p, ':');

109 i‡(
cur_p
 !
NULL
) {

110 
cur_p
++;

116 i‡(!
	`°rcmp
(
©om_«me
, "meta")) {

117 
	`io_£ços
(
hfûe
, 4, 
SEEK_CUR
);

118 } i‡(!
	`°rcmp
(
©om_«me
, "stsd")) {

119 
	`io_£ços
(
hfûe
, 8, 
SEEK_CUR
);

120 } i‡(!
	`°rcmp
(
©om_«me
, "mp4a")) {

121 
	`io_£ços
(
hfûe
, 28, 
SEEK_CUR
);

126 
	`io_gëpos
(
hfûe
, &
pos
);

127  
pos
 - 8;

128 
	}
}

141 
uöt64_t
 
	$sˇn_Øc_föd©om
(
IOHANDLE
 
hfûe
, 
uöt64_t
 
max_off£t
,

142 *
which_©om
, *
©om_size
) {

143 
uöt64_t
 
cuºít_off£t
=0;

144 
uöt32_t
 
size
;

145 
©om
[4];

146 
uöt32_t
 
byãs_ªad
;

148 (
cuºít_off£t
 + 8Ë< 
max_off£t
) {

149 
byãs_ªad
 = (
uöt32_t
);

150 if(!
	`io_ªad
(
hfûe
,(*)&
size
,&
byãs_ªad
) || (!bytes_read)) {

154 
size
=
	`¡ohl
(size);

156 if(
size
 <= 7) {

157 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"Badáac file:átomÜengthÅoo short searching for %s\n",

158 
which_©om
);

162 
byãs_ªad
 = 4;

163 if(!
	`io_ªad
(
hfûe
,(*)
©om
,&
byãs_ªad
) || (!bytes_read)) {

167 if(
	`°∫ˇ£cmp
(
©om
,
which_©om
,4) == 0) {

168 *
©om_size
=
size
;

169  
cuºít_off£t
;

172 
	`io_£ços
(
hfûe
,
size
-8,
SEEK_CUR
);

173 
cuºít_off£t
+=
size
;

176 
	`DPRINTF
(
E_SPAM
,
L_SCAN
,"Couldn'àfödátom %†a†ªque°ed\n",
which_©om
);

178 
	}
}

187 
	$sˇn_gë_Øcöfo
(*
fûíame
, 
MP3FILE
 *
pmp3
) {

188 
IOHANDLE
 
hfûe
;

189 
uöt64_t
 
©om_off£t
, 
pos
;

190 
uöt32_t
 
byãs_ªad
;

191 
©om_Àngth
;

193 
cuºít_off£t
=0;

194 
uöt32_t
 
cuºít_size
;

195 
cuºít_©om
[4];

196 *
cuºít_d©a
;

197 
us_d©a
;

198 
gíª
;

199 
Àn
;

201 
uöt32_t
 
ßm∂e_size
;

202 
uöt32_t
 
ßm∂es
;

203 
uöt32_t
 
bô_øã
;

204 
ms
;

205 
buf„r
[2];

206 
uöt32_t
 
time
 = 0;

209 
hfûe
 = 
	`io_√w
();

210 if(!
hfûe
)

211 
	`DPRINTF
(
E_FATAL
,
L_SCAN
,"MallocÉrror in scan_get_aacinfo\n");

213 if(!
	`io_›í
(
hfûe
,"fûe://%U",
fûíame
)) {

214 
	`DPRINTF
(
E_INF
,
L_SCAN
,"C™nŸ o≥¿fûê%†f‹Ñódög: %s\n",
fûíame
,

215 
	`io_îr°r
(
hfûe
));

216 
	`io_di•o£
(
hfûe
);

217  
FALSE
;

220 
©om_off£t
=
	`sˇn_Øc_drû…ﬂtom
(
hfûe
, "moov:udè:mëa:û°", &
©om_Àngth
);

221 if(
©om_off£t
 != -1) {

223 
cuºít_off£t
 < (
uöt64_t
)
©om_Àngth
) {

224 
byãs_ªad
 = (
uöt32_t
);

225 if(!
	`io_ªad
(
hfûe
,(*)&
cuºít_size
,&
byãs_ªad
) || !bytes_read) {

226 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"Eº‹Ñódög mp4átoms: %s\n",
	`io_îr°r
(
hfûe
));

227 
	`io_di•o£
(
hfûe
);

228  
FALSE
;

231 
cuºít_size
=
	`¡ohl
(current_size);

233 
	`DPRINTF
(
E_SPAM
,
L_SCAN
,"Cuºíàsize: %d\n",
cuºít_size
);

235 if(
cuºít_size
 <= 7) {

236 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"mp4átomÅoo small. BadáacÅags?\n");

237 
	`io_di•o£
(
hfûe
);

238  
FALSE
;

242 
byãs_ªad
 = 4;

243 if(!
	`io_ªad
(
hfûe
,(*)
cuºít_©om
,&
byãs_ªad
) || !bytes_read) {

244 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"Eº‹Ñódög mp4átoms: %s\n",
	`io_îr°r
(
hfûe
));

245 
	`io_di•o£
(
hfûe
);

246  
FALSE
;

249 
	`DPRINTF
(
E_SPAM
,
L_SCAN
,"Current Atom: %c%c%c%c\n",

250 
cuºít_©om
[0],current_atom[1],current_atom[2],

251 
cuºít_©om
[3]);

253 if(
cuºít_size
 > 4096) {

255 
	`io_£ços
(
hfûe
,
cuºít_size
 - 8, 
SEEK_CUR
);

256 
	`DPRINTF
(
E_SPAM
,
L_SCAN
,"AtomÅoo big... skipping\n");

258 
Àn
=
cuºít_size
-7;

259 if(
Àn
 < 22) {

260 
Àn
=22;

263 
cuºít_d©a
=(*)
	`mÆloc
(
Àn
);

264 
	`mem£t
(
cuºít_d©a
,0x00,
Àn
);

266 
byãs_ªad
 = 
cuºít_size
 - 8;

267 if(!
	`io_ªad
(
hfûe
,(*)
cuºít_d©a
,&
byãs_ªad
) || (!bytes_read)) {

268 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"Eº‹Ñódög mp4 d©a: %s\n",
	`io_îr°r
(
hfûe
));

269 
	`‰ì
(
cuºít_d©a
);

270 
	`io_di•o£
(
hfûe
);

271  
FALSE
;

274 if(!
	`memcmp
(
cuºít_©om
,"\xA9" "nam",4)) {

275 
pmp3
->
tôÀ
=
	`°rdup
((*)&
cuºít_d©a
[16]);

276 } if(!
	`memcmp
(
cuºít_©om
,"aART",4)) {

277 
pmp3
->
Æbum_¨ti°
=
	`°rdup
((*)&
cuºít_d©a
[16]);

278 } if(!
	`memcmp
(
cuºít_©om
,"\xA9" "ART",4)) {

279 
pmp3
->
¨ti°
=
	`°rdup
((*)&
cuºít_d©a
[16]);

280 } if(!
	`memcmp
(
cuºít_©om
,"\xA9" "alb",4)) {

281 
pmp3
->
Æbum
=
	`°rdup
((*)&
cuºít_d©a
[16]);

282 } if(!
	`memcmp
(
cuºít_©om
,"\xA9" "cmt",4)) {

283 
pmp3
->
commít
=
	`°rdup
((*)&
cuºít_d©a
[16]);

284 } if(!
	`memcmp
(
cuºít_©om
,"\xA9" "wrt",4)) {

285 
pmp3
->
compo£r
=
	`°rdup
((*)&
cuºít_d©a
[16]);

286 } if(!
	`memcmp
(
cuºít_©om
,"\xA9" "grp",4)) {

287 
pmp3
->
groupög
=
	`°rdup
((*)&
cuºít_d©a
[16]);

288 } if(!
	`memcmp
(
cuºít_©om
,"\xA9" "gen",4)) {

290 
pmp3
->
gíª
=
	`°rdup
((*)&
cuºít_d©a
[16]);

291 } if(!
	`memcmp
(
cuºít_©om
,"tmpo",4)) {

292 
us_d©a
=*((*)&
cuºít_d©a
[16]);

293 
us_d©a
=
	`¡ohs
(us_data);

294 
pmp3
->
bpm
=
us_d©a
;

295 } if(!
	`memcmp
(
cuºít_©om
,"trkn",4)) {

296 
us_d©a
=*((*)&
cuºít_d©a
[18]);

297 
us_d©a
=
	`¡ohs
(us_data);

299 
pmp3
->
åack
=
us_d©a
;

301 
us_d©a
=*((*)&
cuºít_d©a
[20]);

302 
us_d©a
=
	`¡ohs
(us_data);

304 
pmp3
->
tŸÆ_åacks
=
us_d©a
;

305 } if(!
	`memcmp
(
cuºít_©om
,"disk",4)) {

306 
us_d©a
=*((*)&
cuºít_d©a
[18]);

307 
us_d©a
=
	`¡ohs
(us_data);

309 
pmp3
->
disc
=
us_d©a
;

311 
us_d©a
=*((*)&
cuºít_d©a
[20]);

312 
us_d©a
=
	`¡ohs
(us_data);

314 
pmp3
->
tŸÆ_discs
=
us_d©a
;

315 } if(!
	`memcmp
(
cuºít_©om
,"\xA9" "day",4)) {

316 
pmp3
->
yór
=
	`©oi
((*)&
cuºít_d©a
[16]);

317 } if(!
	`memcmp
(
cuºít_©om
,"gnre",4)) {

318 
gíª
=()(*((*)&
cuºít_d©a
[17]));

319 
gíª
--;

321 if((
gíª
 < 0Ë|| (gíª > 
WINAMP_GENRE_UNKNOWN
))

322 
gíª
=
WINAMP_GENRE_UNKNOWN
;

324 
pmp3
->
gíª
=
	`°rdup
(
sˇn_wöamp_gíª
[genre]);

325 } i‡(!
	`memcmp
(
cuºít_©om
, "cpil", 4)) {

326 
pmp3
->
compû©i⁄
 = 
cuºít_d©a
[16];

329 
	`‰ì
(
cuºít_d©a
);

331 
cuºít_off£t
+=
cuºít_size
;

336 
©om_off£t
 = 
	`sˇn_Øc_drû…ﬂtom
(
hfûe
, "moov:mvhd", &
©om_Àngth
);

337 if(
©om_off£t
 != -1) {

338 
	`io_£ços
(
hfûe
,4,
SEEK_CUR
);

341 
byãs_ªad
 = (
uöt32_t
);

342 if(!
	`io_ªad
(
hfûe
,(*)&
time
, &
byãs_ªad
)) {

343 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"ErrorÑeadingÅime from moov:mvhd: %s\n",

344 
	`io_îr°r
(
hfûe
));

345 
	`io_di•o£
(
hfûe
);

346  
FALSE
;

349 
time
 = 
	`¡ohl
(time);

350 
pmp3
->
time_added
 = ()
	`sˇn_Øc_mac_to_unix_time
(
time
);

352 
byãs_ªad
 = (
uöt32_t
);

353 if(!
	`io_ªad
(
hfûe
,(*)&
time
, &
byãs_ªad
)) {

354 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"ErrorÑeadingÅime from moov:mvhd: %s\n",

355 
	`io_îr°r
(
hfûe
));

356 
	`io_di•o£
(
hfûe
);

357  
FALSE
;

360 
time
 = 
	`¡ohl
(time);

361 
pmp3
->
time_modifõd
 = ()
	`sˇn_Øc_mac_to_unix_time
(
time
);

363 
byãs_ªad
 = (
uöt32_t
);

364 if(!
	`io_ªad
(
hfûe
,(*)&
ßm∂e_size
,&
byãs_ªad
)) {

365 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"ErrorÑeading sample_size from moov:mvhd: %s\n",

366 
	`io_îr°r
(
hfûe
));

367 
	`io_di•o£
(
hfûe
);

368  
FALSE
;

371 
byãs_ªad
 = (
uöt32_t
);

372 if(!
	`io_ªad
(
hfûe
,(*)&
ßm∂es
, &
byãs_ªad
)) {

373 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"ErrorÑeading samples from moov:mvhd: %s\n",

374 
	`io_îr°r
(
hfûe
));

375 
	`io_di•o£
(
hfûe
);

376  
FALSE
;

379 
ßm∂e_size
=
	`¡ohl
(sample_size);

380 
ßm∂es
=
	`¡ohl
(samples);

383 
ms
=1000;

384 (
ms
 > 9Ë&& (!(
ßm∂e_size
 % 10))) {

385 
ßm∂e_size
 /= 10;

386 
ms
 /= 10;

390 
pmp3
->
s⁄g_Àngth
=(
uöt32_t
)((
ßm∂es
 * 
ms
Ë/ 
ßm∂e_size
);

391 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"SongÜength: %d seconds\n",

392 
pmp3
->
s⁄g_Àngth
 / 1000);

395 
pmp3
->
bôøã
 = 0;

398 
©om_off£t
 = 
	`sˇn_Øc_drû…ﬂtom
(
hfûe
,

400 &
©om_Àngth
);

402 if(
©om_off£t
 != -1) {

404 if(
pmp3
->
code˘y≥
) {

405 
	`‰ì
(
pmp3
->
code˘y≥
);

407 
pmp3
->
code˘y≥
=
	`°rdup
("alac");

413 
©om_off£t
=
	`sˇn_Øc_drû…ﬂtom
(
hfûe
,

415 &
©om_Àngth
);

416 if(
©om_off£t
 == -1) {

417 
©om_off£t
=
	`sˇn_Øc_drû…ﬂtom
(
hfûe
,

419 &
©om_Àngth
);

422 i‡(
©om_off£t
 != -1) {

423 
	`io_£ços
(
hfûe
, 
©om_off£t
 + 32, 
SEEK_SET
);

428 
byãs_ªad
 = 2;

429 if(!
	`io_ªad
(
hfûe
, (*)
buf„r
, &
byãs_ªad
)) {

430 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"ErrorÑeadingÅimescale from drmsátom: %s\n",

431 
	`io_îr°r
(
hfûe
));

432 
	`io_di•o£
(
hfûe
);

433  
FALSE
;

436 
pmp3
->
ßm∂î©e
 = (
buf„r
[0] << 8) | (buffer[1]);

439 
	`io_£ços
(
hfûe
, 2, 
SEEK_CUR
);

443 
	`io_gëpos
(
hfûe
,&
pos
);

444 
©om_off£t
 = 
	`sˇn_Øc_föd©om
(
hfûe
,

445 
©om_Àngth
-(
pos
-
©om_off£t
),

446 "esds", &
©om_Àngth
);

448 i‡(
©om_off£t
 != -1) {

452 
	`io_£ços
(
hfûe
, 
©om_off£t
 + 22, 
SEEK_CUR
);

454 
byãs_ªad
 = ();

455 if(!
	`io_ªad
(
hfûe
, (*)&
bô_øã
, &
byãs_ªad
)) {

456 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"ErrorÑeading bitrate fromÉsds: %s\n",

457 
	`io_îr°r
(
hfûe
));

458 
	`io_di•o£
(
hfûe
);

459  
FALSE
;

462 
pmp3
->
bôøã
 = 
	`¡ohl
(
bô_øã
) / 1000;

463 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"esd†bôøã: %d\n",
pmp3
->
bôøã
);

465 if(
pmp3
->
bôøã
 > 320) {

466 
pmp3
->
bôøã
 = 320;

469 
	`DPRINTF
(
E_DBG
,
L_SCAN
, "Couldn't find 'esds'átom for bitÑate.\n");

472 
	`DPRINTF
(
E_DBG
,
L_SCAN
, "Couldn't find 'mp4a'átom for sampleÑate.\n");

476 i‡(
pmp3
->
bôøã
 == 0) {

478 
	`DPRINTF
(
E_DBG
,
L_SCAN
, "Guesstimating bitÑate.\n");

479 
©om_off£t
=
	`sˇn_Øc_drû…ﬂtom
(
hfûe
,"md©",&
©om_Àngth
);

480 i‡((
©om_off£t
 !-1Ë&& (
pmp3
->
s⁄g_Àngth
 >= 1000)) {

481 
pmp3
->
bôøã
 = 
©om_Àngth
 / (’mp3->
s⁄g_Àngth
 / 1000) * 128);

485 
	`io_˛o£
(
hfûe
);

486 
	`io_di•o£
(
hfûe
);

487  
TRUE
;

488 
	}
}

	@scan-aac.h

21 #i‚de‡
_SCAN_AAC_H_


22 
	#_SCAN_AAC_H_


	)

24 
	~"io.h
"

26 
uöt64_t
 
sˇn_Øc_drû…ﬂtom
(
IOHANDLE
 
hfûe
, *
©om_∑th
, *
©om_Àngth
);

27 
uöt64_t
 
sˇn_Øc_föd©om
(
IOHANDLE
 
hfûe
, uöt64_à
max_off£t
, *
which_©om
, *
©om_size
);

	@scan-aif.c

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

25 #ifde‡
HAVE_STDINT_H


26 
	~<°döt.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<f˙é.h
>

34 
	~<sys/ty≥s.h
>

36 
	~"dØpd.h
"

37 
	~"îr.h
"

38 
	~"io.h
"

39 
	~"mp3-sˇ¬î.h
"

41 #i‡
__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 > 4)

42 
	#_PACKED
 
	`__©åibuã
((
∑cked
))

	)

44 
	#_PACKED


	)

47 #¥agm®
∑ck
(1)

48 
	sèg_aif_chunk_hódî
 {

49 
	mid
[4];

50 
uöt32_t
 
	mÀn
;

51 } 
	t_PACKED
 
	tAIF_CHUNK_HEADER
;

53 
	sèg_iff_hódî
 {

54 
	mid
[4];

55 
uöt32_t
 
	mÀngth
;

56 
	mty≥
[4];

57 } 
	t_PACKED
 
	tAIF_IFF_HEADER
;

59 
	sèg_aif_comm
 {

60 
öt16_t
 
	mch™√ls
;

61 
uöt32_t
 
	mßm∂e_‰ames
;

62 
öt16_t
 
	mßm∂e_size
;

63 
uöt8_t
 
	mßm∂e_øã
[10];

64 } 
	t_PACKED
 
	tAIF_COMM
;

65 #¥agm®
∑ck
()

67 
uöt32_t
 
	$aif_‰om_be32
(
uöt32_t
 *
«tive
) {

68 
uöt32_t
 
ªsu…
;

69 
uöt8_t
 *
d©a
 = (uöt8_à*)
«tive
;

71 
ªsu…
 = 
d©a
[0] << 24 | data[1] << 16 | data[2] << 8 | data[3];

72  
ªsu…
;

73 
	}
}

75 
uöt16_t
 
	$aif_‰om_be16
(
uöt16_t
 *
«tive
) {

76 
uöt16_t
 
ªsu…
;

77 
uöt8_t
 *
d©a
 = (uöt8_à*)
«tive
;

79 
ªsu…
 = 
d©a
[0] << 8 | data[1];

80  
ªsu…
;

81 
	}
}

91 
	$sˇn_aif_∑r£_comm
(
IOHANDLE
 
hfûe
, 
MP3FILE
 *
pmp3
) {

92 
AIF_COMM
 
comm
;

93 
£c
;

94 
ms
;

95 
uöt32_t
 
Àn
;

97 
Àn
 = (
AIF_COMM
);

98 if(!
	`io_ªad
(
hfûe
,(*)&
comm
, &
Àn
) || !len) {

99 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"ErrorÑeadingáiff file -- bad COMM block\n");

100  
FALSE
;

104 
pmp3
->
ßm∂î©e
 = 
	`aif_‰om_be32
((
uöt32_t
*)&
comm
.
ßm∂e_øã
[2]) >> 16;

105 if(!
pmp3
->
ßm∂î©e
)

106  
TRUE
;

108 
pmp3
->
bôøã
 =Ömp3->
ßm∂î©e
 * 
comm
.
ch™√ls
 *

109 ((
comm
.
ßm∂e_size
 + 7)/8)*8;

111 
£c
 = ()(
pmp3
->
fûe_size
 / (pmp3->
bôøã
 / 8));

112 
ms
 = ()(((
pmp3
->
fûe_size
 % (pmp3->
bôøã
 / 8)) * 1000) / (pmp3->bitrate/8));

113 
pmp3
->
s⁄g_Àngth
 = (
£c
 * 1000Ë+ 
ms
;

115 
pmp3
->
bôøã
 /= 1000;

117  
TRUE
;

118 
	}
}

129 
	$sˇn_gë_aiföfo
(*
fûíame
, 
MP3FILE
 *
pmp3
) {

130 
IOHANDLE
 
hfûe
;

131 
d⁄e
=0;

132 
AIF_CHUNK_HEADER
 
chunk
;

133 
AIF_IFF_HEADER
 
iff_hódî
;

134 
uöt64_t
 
cuºít_pos
 = 0;

135 
uöt32_t
 
Àn
;

137 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Getting AIFF file info\n");

139 
hfûe
 = 
	`io_√w
();

140 if(!
hfûe
) {

141 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"Errorállocating file handle\n");

142  
FALSE
;

145 if(!
	`io_›í
(
hfûe
,"fûe://%U",
fûíame
)) {

146 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"CouldÇŸ o≥¿%†f‹Ñódög: %s\n",
fûíame
,

147 
	`io_îr°r
(
hfûe
));

148 
	`io_di•o£
(
hfûe
);

149  
FALSE
;

153 
Àn
 = (
AIF_IFF_HEADER
);

154 if(!
	`io_ªad
(
hfûe
,(*)&
iff_hódî
,&
Àn
) || !len) {

155 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"Eº‹Ñódög %†-- bad if‡hódî\n",
fûíame
);

156 
	`io_˛o£
(
hfûe
);

157 
	`io_di•o£
(
hfûe
);

158  
FALSE
;

161 if((
	`°∫cmp
(
iff_hódî
.
id
,"FORM",4) != 0) ||

162 (
	`°∫cmp
(
iff_hódî
.
ty≥
,"AIFF",4) != 0)) {

163 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"Fûê%†i†nŸá¿AIFF fûe\n",
fûíame
);

164 
	`io_˛o£
(
hfûe
);

165 
	`io_di•o£
(
hfûe
);

166  
FALSE
;

170 !
d⁄e
) {

171 
Àn
 = (
AIF_CHUNK_HEADER
);

172 if(!
	`io_ªad
(
hfûe
, (*)&
chunk
, &
Àn
) || !len) {

173 
d⁄e
=1;

178 
chunk
.
Àn
 = 
	`aif_‰om_be32
(&chunk.len);

180 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"GŸ chunk %c%c%c%c\n",
chunk
.
id
[0],

181 
chunk
.
id
[1],chunk.id[2],chunk.id[3]);

183 
	`io_gëpos
(
hfûe
,&
cuºít_pos
);

186 if(
	`°∫cmp
(
chunk
.
id
,"COMM",4)==0) {

187 if(!
	`sˇn_aif_∑r£_comm
(
hfûe
,
pmp3
)) {

188 
	`DPRINTF
(
E_INF
,
L_SCAN
,"Eº‹Ñódög COMM block: %s\n",
fûíame
);

189 
	`io_˛o£
(
hfûe
);

190 
	`io_di•o£
(
hfûe
);

191  
FALSE
;

195 
	`io_£ços
(
hfûe
, 
cuºít_pos
, 
SEEK_SET
);

196 
	`io_£ços
(
hfûe
, 
chunk
.
Àn
, 
SEEK_CUR
);

199 
	`io_˛o£
(
hfûe
);

200 
	`io_di•o£
(
hfûe
);

201  
TRUE
;

202 
	}
}

	@scan-flac.c

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 
	#_POSIX_PTHREAD_SEMANTICS


	)

27 
	~<˘y≥.h
>

28 
	~<î∫o.h
>

29 
	~<f˙é.h
>

30 
	~<id3èg.h
>

31 
	~<limôs.h
>

32 #ifde‡
HAVE_STDINT_H


33 
	~<°döt.h
>

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<°rög.h
>

38 #ifde‡
HAVE_DIRENT_H


39 
	~<dúít.h
>

41 #i‚de‡
WIN32


42 
	~<√töë/ö.h
>

45 
	~<sys/°©.h
>

47 
	~"dØpd.h
"

48 
	~"ª°¨t.h
"

49 
	~"îr.h
"

50 
	~"mp3-sˇ¬î.h
"

52 
	~<FLAC/mëad©a.h
>

55 
	#GET_VORBIS_COMMENT
(
commít
, 
«me
, 
Àn
) (*) \

56 (((
	`°∫ˇ£cmp
(
«me
, (*)(
commít
).
íåy
, 
	`°æí
(name)) == 0) && \

57 ((
commít
).
íåy
[
	`°æí
(
«me
)] == '=')) ? \

58 ((*(
Àn
Ë(
commít
).
Àngth
 - (
	`°æí
(
«me
) + 1)), \

59 (&((
commít
).
íåy
[
	`°æí
(
«me
) + 1]))) : \

60 
NULL
)

	)

69 
	$sˇn_gë_Êacöfo
(*
fûíame
, 
MP3FILE
 *
pmp3
) {

70 
FLAC__Mëad©a_Chaö
 *
chaö
;

71 
FLAC__Mëad©a_Iãøt‹
 *
ôî©‹
;

72 
FLAC__SåómMëad©a
 *
block
;

73 
found
=0;

74 
£c
, 
ms
;

75 
i
;

76 *
vÆ
;

77 
size_t
 
Àn
;

78 
tmp
;

80 
chaö
 = 
	`FLAC__mëad©a_chaö_√w
();

81 i‡(! 
chaö
) {

82 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"Cannotállocate FLAC metadata chain\n");

83  
FALSE
;

85 i‡(! 
	`FLAC__mëad©a_chaö_ªad
(
chaö
, 
fûíame
)) {

86 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"C™nŸÑód FLAC mëad©®‰om %s\n", 
fûíame
);

87 
	`FLAC__mëad©a_chaö_dñëe
(
chaö
);

88  
FALSE
;

91 
ôî©‹
 = 
	`FLAC__mëad©a_ôî©‹_√w
();

92 i‡(! 
ôî©‹
) {

93 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"Cannotállocate FLAC metadata iterator\n");

94 
	`FLAC__mëad©a_chaö_dñëe
(
chaö
);

95  
FALSE
;

98 
	`FLAC__mëad©a_ôî©‹_öô
(
ôî©‹
, 
chaö
);

100 
block
 = 
	`FLAC__mëad©a_ôî©‹_gë_block
(
ôî©‹
);

102 i‡(
block
->
ty≥
 =
FLAC__METADATA_TYPE_STREAMINFO
) {

103 
£c
 = ()(
block
->
d©a
.
°ªam_öfo
.
tŸÆ_ßm∂es
 /

104 
block
->
d©a
.
°ªam_öfo
.
ßm∂e_øã
);

105 
ms
 = ()(((
block
->
d©a
.
°ªam_öfo
.
tŸÆ_ßm∂es
 %

106 
block
->
d©a
.
°ªam_öfo
.
ßm∂e_øã
) * 1000) /

107 
block
->
d©a
.
°ªam_öfo
.
ßm∂e_øã
);

108 i‡((
£c
 =0Ë&& (
ms
 == 0))

110 
pmp3
->
s⁄g_Àngth
 = (
£c
 * 1000Ë+ 
ms
;

111 
pmp3
->
bôøã
 = (
uöt32_t
)(’mp3->
fûe_size
Ë/ (((
£c
 * 1000Ë+ 
ms
) / 8));

112 
pmp3
->
ßm∂î©e
 = 
block
->
d©a
.
°ªam_öfo
.
ßm∂e_øã
;

113 
pmp3
->
bôs_≥r_ßm∂e
 = 
block
->
d©a
.
°ªam_öfo
.bits_per_sample;

114 
pmp3
->
ßm∂e_cou¡
 = 
block
->
d©a
.
°ªam_öfo
.
tŸÆ_ßm∂es
;

116 
found
 |= 1;

117 if(
found
 == 3)

121 i‡(
block
->
ty≥
 =
FLAC__METADATA_TYPE_VORBIS_COMMENT
) {

122 
i
 = 0; i < ()
block
->
d©a
.
v‹bis_commít
.
num_commíts
; i++) {

123 i‡((
vÆ
 = 
	`GET_VORBIS_COMMENT
(
block
->
d©a
.
v‹bis_commít
.
commíts
[
i
],

124 "ARTIST", &
Àn
))) {

125 i‡((
pmp3
->
¨ti°
 = 
	`ˇŒoc
(
Àn
 + 1, 1)Ë!
NULL
)

126 
	`°∫˝y
(
pmp3
->
¨ti°
, 
vÆ
, 
Àn
);

127 } i‡((
vÆ
 = 
	`GET_VORBIS_COMMENT
(
block
->
d©a
.
v‹bis_commít
.
commíts
[
i
],

128 "TITLE", &
Àn
))) {

129 i‡((
pmp3
->
tôÀ
 = 
	`ˇŒoc
(
Àn
 + 1, 1)Ë!
NULL
)

130 
	`°∫˝y
(
pmp3
->
tôÀ
, 
vÆ
, 
Àn
);

131 } i‡((
vÆ
 = 
	`GET_VORBIS_COMMENT
(
block
->
d©a
.
v‹bis_commít
.
commíts
[
i
],

132 "ALBUMARTIST", &
Àn
))) {

133 i‡((
pmp3
->
Æbum_¨ti°
 = 
	`ˇŒoc
(
Àn
 + 1, 1)Ë!
NULL
)

134 
	`°∫˝y
(
pmp3
->
Æbum_¨ti°
, 
vÆ
, 
Àn
);

135 } i‡((
vÆ
 = 
	`GET_VORBIS_COMMENT
(
block
->
d©a
.
v‹bis_commít
.
commíts
[
i
],

136 "ALBUM", &
Àn
))) {

137 i‡((
pmp3
->
Æbum
 = 
	`ˇŒoc
(
Àn
 + 1, 1)Ë!
NULL
)

138 
	`°∫˝y
(
pmp3
->
Æbum
, 
vÆ
, 
Àn
);

139 } i‡((
vÆ
 = 
	`GET_VORBIS_COMMENT
(
block
->
d©a
.
v‹bis_commít
.
commíts
[
i
],

140 "GENRE", &
Àn
))) {

141 i‡((
pmp3
->
gíª
 = 
	`ˇŒoc
(
Àn
 + 1, 1)Ë!
NULL
)

142 
	`°∫˝y
(
pmp3
->
gíª
, 
vÆ
, 
Àn
);

143 } i‡((
vÆ
 = 
	`GET_VORBIS_COMMENT
(
block
->
d©a
.
v‹bis_commít
.
commíts
[
i
],

144 "COMPOSER", &
Àn
))) {

145 i‡((
pmp3
->
compo£r
 = 
	`ˇŒoc
(
Àn
 + 1, 1)Ë!
NULL
)

146 
	`°∫˝y
(
pmp3
->
compo£r
, 
vÆ
, 
Àn
);

147 } i‡((
vÆ
 = 
	`GET_VORBIS_COMMENT
(
block
->
d©a
.
v‹bis_commít
.
commíts
[
i
],

148 "COMMENT", &
Àn
))) {

149 if(
pmp3
->
commít
)

150 
	`‰ì
(
pmp3
->
commít
);

151 i‡((
pmp3
->
commít
 = 
	`ˇŒoc
(
Àn
 + 1, 1)Ë!
NULL
)

152 
	`°∫˝y
(
pmp3
->
commít
, 
vÆ
, 
Àn
);

153 } i‡((
vÆ
 = 
	`GET_VORBIS_COMMENT
(
block
->
d©a
.
v‹bis_commít
.
commíts
[
i
],

154 "DESCRIPTION", &
Àn
))) {

155 if(!
pmp3
->
commít
) {

156 i‡((
pmp3
->
commít
 = 
	`ˇŒoc
(
Àn
 + 1, 1)Ë!
NULL
)

157 
	`°∫˝y
(
pmp3
->
commít
, 
vÆ
, 
Àn
);

159 } i‡((
vÆ
 = 
	`GET_VORBIS_COMMENT
(
block
->
d©a
.
v‹bis_commít
.
commíts
[
i
],

160 "TRACKNUMBER", &
Àn
))) {

161 
tmp
 = *(
vÆ
 + 
Àn
);

162 *(
vÆ
 + 
Àn
) = '\0';

163 
pmp3
->
åack
 = 
	`©oi
(
vÆ
);

164 *(
vÆ
 + 
Àn
Ë
tmp
;

165 } i‡((
vÆ
 = 
	`GET_VORBIS_COMMENT
(
block
->
d©a
.
v‹bis_commít
.
commíts
[
i
],

166 "DISCNUMBER", &
Àn
))) {

167 
tmp
 = *(
vÆ
 + 
Àn
);

168 *(
vÆ
 + 
Àn
) = '\0';

169 
pmp3
->
disc
 = 
	`©oi
(
vÆ
);

170 *(
vÆ
 + 
Àn
Ë
tmp
;

171 } i‡((
vÆ
 = 
	`GET_VORBIS_COMMENT
(
block
->
d©a
.
v‹bis_commít
.
commíts
[
i
],

172 "YEAR", &
Àn
))) {

173 
tmp
 = *(
vÆ
 + 
Àn
);

174 *(
vÆ
 + 
Àn
) = '\0';

175 
pmp3
->
yór
 = 
	`©oi
(
vÆ
);

176 *(
vÆ
 + 
Àn
Ë
tmp
;

177 } i‡((
vÆ
 = 
	`GET_VORBIS_COMMENT
(
block
->
d©a
.
v‹bis_commít
.
commíts
[
i
],

178 "DATE", &
Àn
))) {

179 
tmp
 = *(
vÆ
 + 
Àn
);

180 *(
vÆ
 + 
Àn
) = '\0';

181 
pmp3
->
yór
 = 
	`©oi
(
vÆ
);

182 *(
vÆ
 + 
Àn
Ë
tmp
;

185 
found
 |= 2;

186 if(
found
 == 3)

189 } 
	`FLAC__mëad©a_ôî©‹_√xt
(
ôî©‹
));

191 i‡(!
found
) {

192 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"C™nŸ föd FLAC mëad©®ö %s\n", 
fûíame
);

195 
	`FLAC__mëad©a_ôî©‹_dñëe
(
ôî©‹
);

196 
	`FLAC__mëad©a_chaö_dñëe
(
chaö
);

197  
TRUE
;

198 
	}
}

	@scan-mp3.c

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

25 
	~<˘y≥.h
>

26 
	~<î∫o.h
>

27 
	~<f˙é.h
>

28 
	~<id3èg.h
>

29 #ifde‡
HAVE_STDINT_H


30 
	~<°döt.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<time.h
>

36 
	~<dlf˙.h
>

37 
	~"dØpd.h
"

38 
	~"c⁄f.h
"

39 
	~"îr.h
"

40 
	~"io.h
"

41 
	~"mp3-sˇ¬î.h
"

42 
	~"ch¨dëe˘.h
"

45 
	~"globÆ.h
"

46 
	~"debug.h
"

49 #i‡
__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 > 4)

50 
	#_PACKED
 
	`__©åibuã
((
∑cked
))

	)

52 
	#_PACKED


	)

59 
	sèg_sˇn_‰ameöfo
 {

60 
	mœyî
;

61 
	mbôøã
;

62 
	mßm∂î©e
;

63 
	m°îeo
;

65 
	m‰ame_Àngth
;

66 
	m¸c_¥Ÿe˘ed
;

67 
	mßm∂es_≥r_‰ame
;

68 
	m∑ddög
;

69 
	mxög_off£t
;

70 
	mnumbî_of_‰ames
;

72 
uöt64_t
 
	m‰ame_off£t
;

74 
	mvîsi⁄
;

76 
	mis_vÆid
;

77 } 
	tSCAN_FRAMEINFO
;

80 #¥agm®
∑ck
(1)

81 
	sèg_sˇn_id3hódî
 {

82 
	mid
[3];

83 
	mvîsi⁄
[2];

84 
	mÊags
;

85 
	msize
[4];

86 } 
	t_PACKED
 
	tSCAN_ID3HEADER
;

87 #¥agm®
∑ck
()

92 
	gsˇn_br_èbÀ
[5][16] = {

100 
	gsˇn_ßm∂e_èbÀ
[3][4] = {

106 *
	gsˇn_wöamp_gíª
[] = {

259 
sˇn_mp3_gë_mp3ègs
(*
fûe
, 
MP3FILE
 *
pmp3
);

260 
sˇn_mp3_gë_mp3fûeöfo
(*
fûe
, 
MP3FILE
 *
pmp3
);

261 
sˇn_mp3_decode_mp3_‰ame
(*
‰ame
,
SCAN_FRAMEINFO
 *
pfi
);

262 
sˇn_mp3_gë_avîage_bôøã
(
IOHANDLE
 
hfûe
, 
SCAN_FRAMEINFO
 *
pfi
);

263 
sˇn_mp3_is_numîic
(*
°r
);

264 
sˇn_mp3_gë_‰ame_cou¡
(
IOHANDLE
 
hfûe
, 
SCAN_FRAMEINFO
 *
pfi
);

270 
	$unicode_ã°
(
id3_ucs4_t
 c⁄° *
«tive_ãxt
)

272 
id3_ucs4_Àn
 = 
	`id3_ucs4_Àngth
(
«tive_ãxt
);

273 
ödex
 = 0;

274 
ödex
 = 0 ; index < 
id3_ucs4_Àn
 ; index++) {

275 if(
«tive_ãxt
[
ödex
] > 255)

280 
	}
}

287 *
	$c⁄vît_ucs4_to_byã
(
id3_ucs4_t
 c⁄° *
ucs_4
)

289 
id3_Àngth_t
 
ucs4_Àn
 = 0;

290 
uc4_num
 = 0;

291 *
utf8
;

292 
ucs4_Àn
 = 
	`id3_ucs4_Àngth
(
ucs_4
);

293 
	`DBG_FILE_SCAN
(
	`¥ötf
("sˇn-mp3.c: c⁄vît_ucs4_to_byã: ucs4_À¿%d\n",
ucs4_Àn
);)

294 
utf8
 = (*)
	`mÆloc
(
ucs4_Àn
 * () + 1);

295 
utf8
[
ucs4_Àn
] = 
NULL
 ;

296 i‡(
utf8
){

297 
uc4_num
 = 0; uc4_num < 
ucs4_Àn
; uc4_num++) {

298 
utf8
[
uc4_num
]=(*)
ucs_4
[uc4_num];

299 
	`DBG_FILE_SCAN
(
	`¥ötf
("utf8[%d]=%X ",
uc4_num
,
utf8
[uc4_num]);)

301 
	`DBG_FILE_SCAN
(
	`¥ötf
("\n");)

303  
utf8
;

304 
	}
}

316 
	$sˇn_gë_mp3öfo
(*
fûíame
, 
MP3FILE
 *
pmp3
) {

317 if(
	`sˇn_mp3_gë_mp3ègs
(
fûíame
, 
pmp3
))

318  
	`sˇn_mp3_gë_mp3fûeöfo
(
fûíame
,
pmp3
);

319  
FALSE
;

320 
	}
}

328 
	$sˇn_mp3_is_numîic
(*
°r
) {

329 *
±r
=
°r
;

331 *
±r
) {

332 if(!
	`isdigô
(*
±r
))

334 
±r
++;

337 
	}
}

339 
	$sˇn_mp3_gë_mp3ègs
(*
fûe
, 
MP3FILE
 *
pmp3
) {

340 
id3_fûe
 *
pid3fûe
;

341 
id3_èg
 *
pid3èg
;

342 
id3_‰ame
 *
pid3‰ame
;

343 
îr
;

344 
ödex
;

345 
u£d
;

346 *
utf8_ãxt
;

347 
gíª
=
WINAMP_GENRE_UNKNOWN
;

348 
have_utf8
;

349 
have_ãxt
;

350 
id3_ucs4_t
 c⁄° *
«tive_ãxt
;

351 *
tmp
;

352 
gŸ_numîic_gíª
;

353 
øtög
;

356 
pid3fûe
=
	`id3_fûe_›í
(
fûe
,
ID3_FILE_MODE_READONLY
);

357 if(!
pid3fûe
) {

358 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"C™nŸ o≥¿%s\n",
fûe
);

359  
FALSE
;

362 
pid3èg
=
	`id3_fûe_èg
(
pid3fûe
);

364 if(!
pid3èg
) {

365 
îr
=
î∫o
;

366 
	`id3_fûe_˛o£
(
pid3fûe
);

367 
î∫o
=
îr
;

368 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"C™nŸ gë ID3Åag f‹ %s\n",
fûe
);

369  
FALSE
;

372 
	`DPRINTF
(
E_SPAM
,
L_SCAN
,"Starting mp3Åag scan\n");

377 
ödex
=0;

378 (
pid3‰ame
=
	`id3_èg_föd‰ame
(
pid3èg
,"",
ödex
))) {

379 
u£d
=0;

380 
utf8_ãxt
=
NULL
;

381 
«tive_ãxt
=
NULL
;

382 
have_utf8
=0;

383 
have_ãxt
=0;

385 
	`DPRINTF
(
E_SPAM
,
L_SCAN
,"FoundÅag %s\n",
pid3‰ame
->
id
);

387 if(!
	`°rcmp
(
pid3‰ame
->
id
,"YTCP")) {

388 
pmp3
->
compû©i⁄
 = 1;

389 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Compû©i⁄: %d\n", 
pmp3
->
compû©i⁄
);

392 if(((
pid3‰ame
->
id
[0] ='T')||(
	`°rcmp
(pid3frame->id,"COMM")==0)) &&

393 (
	`id3_fõld_gën°rögs
(&
pid3‰ame
->
fõlds
[1])))

394 
have_ãxt
=1;

396 if(
have_ãxt
) {

397 
«tive_ãxt
=
	`id3_fõld_gë°rögs
(&
pid3‰ame
->
fõlds
[1],0);

399 if(
«tive_ãxt
) {

400 
have_utf8
=1;

401 if(
	`c⁄f_gë_öt
("general","latin1_tags",0)) {

402 
utf8_ãxt
=(*)
	`id3_ucs4_œtö1du∂iˇã
(
«tive_ãxt
);

403 
	`DBG_FILE_SCAN
(
	`¥ötf
("Latin\n");)

408 i‡(
	`unicode_ã°
(
«tive_ãxt
)) {

409 
utf8_ãxt
=(*)
	`id3_ucs4_utf8du∂iˇã
(
«tive_ãxt
);

410 
unicode16_ãxt
=1;

412 
	`DBG_FILE_SCAN
(
	`¥ötf
("scan-mp3.c: scan_get_mp3info():Çative_text=unicode\n");)

415 
utf8_ãxt
 = (*)
	`c⁄vît_ucs4_to_byã
(
«tive_ãxt
);

416 
unicode16_ãxt
=0;

418 
	`DBG_FILE_SCAN
(
	`¥ötf
("scan-mp3.c: scan_get_mp3info():Çative_text=other codepage\n");)

423 if(
utf8_ãxt
)

424 
	`mem_ªgi°î
(
utf8_ãxt
,0);

427 if(
	`id3_fõld_gëãxãncodög
(&
pid3‰ame
->
fõlds
[1]) ==

428 
ID3_FIELD_TEXTENCODING_ISO_8859_1
) {

429 #ifde‡
HAVE_ICONV


431 
	`‰ì
(
utf8_ãxt
);

432 
utf8_ãxt
 =

433 (*)
	`utû_xtoutf8_Æloc
((*)
«tive_ãxt
,

434 
	`°æí
((*)
«tive_ãxt
),

435 
c⁄vîsi⁄_codïage
);

441 if(!
	`°rcmp
(
pid3‰ame
->
id
,"TIT2")) {

442 
u£d
=1;

443 
pmp3
->
tôÀ
 = 
utf8_ãxt
;

444 
	`DPRINTF
(
E_DBG
,
L_SCAN
," TôÀ: %s\n",
utf8_ãxt
);

445 } if(!
	`°rcmp
(
pid3‰ame
->
id
,"TPE1")) {

446 
u£d
=1;

447 
pmp3
->
¨ti°
 = 
utf8_ãxt
;

448 
	`DPRINTF
(
E_DBG
,
L_SCAN
," Aπi°: %s\n",
utf8_ãxt
);

449 } if(!
	`°rcmp
(
pid3‰ame
->
id
,"TALB")) {

450 
u£d
=1;

451 
pmp3
->
Æbum
 = 
utf8_ãxt
;

452 
	`DPRINTF
(
E_DBG
,
L_SCAN
," Album: %s\n",
utf8_ãxt
);

453 } if(!
	`°rcmp
(
pid3‰ame
->
id
,"TCOM")) {

454 
u£d
=1;

455 
pmp3
->
compo£r
 = 
utf8_ãxt
;

456 
	`DPRINTF
(
E_DBG
,
L_SCAN
," Compo£r: %s\n",
utf8_ãxt
);

457 } if(!
	`°rcmp
(
pid3‰ame
->
id
,"TIT1")) {

458 
u£d
=1;

459 
pmp3
->
groupög
 = 
utf8_ãxt
;

460 
	`DPRINTF
(
E_DBG
,
L_SCAN
," Groupög: %s\n",
utf8_ãxt
);

461 } if(!
	`°rcmp
(
pid3‰ame
->
id
,"TPE2")) {

462 
u£d
=1;

463 
pmp3
->
‹che°ø
 = 
utf8_ãxt
;

464 
	`DPRINTF
(
E_DBG
,
L_SCAN
," Orche°ø: %s\n",
utf8_ãxt
);

465 } if(!
	`°rcmp
(
pid3‰ame
->
id
,"TPE3")) {

466 
u£d
=1;

467 
pmp3
->
c⁄du˘‹
 = 
utf8_ãxt
;

468 
	`DPRINTF
(
E_DBG
,
L_SCAN
," C⁄du˘‹: %s\n",
utf8_ãxt
);

469 } if(!
	`°rcmp
(
pid3‰ame
->
id
,"TCON")) {

470 
u£d
=1;

471 
pmp3
->
gíª
 = 
utf8_ãxt
;

472 
gŸ_numîic_gíª
=0;

473 
	`DPRINTF
(
E_DBG
,
L_SCAN
," Gíª: %s\n",
utf8_ãxt
);

474 if(
pmp3
->
gíª
) {

475 if(!
	`°æí
(
pmp3
->
gíª
)) {

476 
gíª
=
WINAMP_GENRE_UNKNOWN
;

477 
gŸ_numîic_gíª
=1;

478 } i‡(
	`sˇn_mp3_is_numîic
(
pmp3
->
gíª
)) {

479 
gíª
=
	`©oi
(
pmp3
->genre);

480 
gŸ_numîic_gíª
=1;

481 } i‡((
pmp3
->
gíª
[0] ='('Ë&& (
	`isdigô
(pmp3->genre[1]))) {

482 
gíª
=
	`©oi
((*)&
pmp3
->genre[1]);

483 
gŸ_numîic_gíª
=1;

486 if(
gŸ_numîic_gíª
) {

487 if((
gíª
 < 0Ë|| (gíª > 
WINAMP_GENRE_UNKNOWN
))

488 
gíª
=
WINAMP_GENRE_UNKNOWN
;

489 
	`‰ì
(
pmp3
->
gíª
);

490 
pmp3
->
gíª
=
	`°rdup
(
sˇn_wöamp_gíª
[genre]);

493 } if(!
	`°rcmp
(
pid3‰ame
->
id
,"COMM")) {

494 
u£d
=1;

495 
pmp3
->
commít
 = 
utf8_ãxt
;

496 
	`DPRINTF
(
E_DBG
,
L_SCAN
," Commít: %s\n",
pmp3
->
commít
);

497 } if(!
	`°rcmp
(
pid3‰ame
->
id
,"TPOS")) {

498 
tmp
=
utf8_ãxt
;

499 
	`°r£p
(&
tmp
,"/");

500 if(
tmp
) {

501 
pmp3
->
tŸÆ_discs
=
	`©oi
(
tmp
);

503 
pmp3
->
disc
=
	`©oi
(
utf8_ãxt
);

504 
	`DPRINTF
(
E_DBG
,
L_SCAN
," Dis¯%d o‡%d\n",
pmp3
->
disc
,pmp3->
tŸÆ_discs
);

505 } if(!
	`°rcmp
(
pid3‰ame
->
id
,"TRCK")) {

506 
tmp
=
utf8_ãxt
;

507 
	`°r£p
(&
tmp
,"/");

508 if(
tmp
) {

509 
pmp3
->
tŸÆ_åacks
=
	`©oi
(
tmp
);

511 
pmp3
->
åack
=
	`©oi
(
utf8_ãxt
);

512 
	`DPRINTF
(
E_DBG
,
L_SCAN
," Tøck %d o‡%d\n",
pmp3
->
åack
,pmp3->
tŸÆ_åacks
);

513 } if(!
	`°rcmp
(
pid3‰ame
->
id
,"TDRC")) {

514 
pmp3
->
yór
 = 
	`©oi
(
utf8_ãxt
);

515 
	`DPRINTF
(
E_DBG
,
L_SCAN
," Yór: %d\n",
pmp3
->
yór
);

516 } if(!
	`°rcmp
(
pid3‰ame
->
id
,"TLEN")) {

517 
pmp3
->
s⁄g_Àngth
 = 
	`©oi
(
utf8_ãxt
);

518 
	`DPRINTF
(
E_DBG
,
L_SCAN
," Lígth: %d\n", 
pmp3
->
s⁄g_Àngth
);

519 } if(!
	`°rcmp
(
pid3‰ame
->
id
,"TBPM")) {

520 
pmp3
->
bpm
 = 
	`©oi
(
utf8_ãxt
);

521 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"BPM: %d\n", 
pmp3
->
bpm
);

522 } if(!
	`°rcmp
(
pid3‰ame
->
id
,"TCMP")) {

523 
pmp3
->
compû©i⁄
 = ()
	`©oi
(
utf8_ãxt
);

524 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Compû©i⁄: %d\n", 
pmp3
->
compû©i⁄
);

530 if((!
u£d
Ë&& (
have_utf8
Ë&& (
utf8_ãxt
))

531 
	`‰ì
(
utf8_ãxt
);

533 if((!
	`°rcmp
(
pid3‰ame
->
id
,"POPM")Ë&& (pid3‰ame->
nfõlds
 == 3)) {

534 
øtög
 = 
	`id3_fõld_gëöt
(&
pid3‰ame
->
fõlds
[1]);

535 if(
øtög
 >= 0x01)

536 
pmp3
->
øtög
 = 20;

537 if(
øtög
 >= 0x40)

538 
pmp3
->
øtög
 = 40;

539 if(
øtög
 >= 0x80)

540 
pmp3
->
øtög
 = 60;

541 if(
øtög
 >= 0xC4)

542 
pmp3
->
øtög
 = 80;

543 if(
øtög
 >= 0xFF)

544 
pmp3
->
øtög
 = 100;

549 if((!
	`°rcmp
(
pid3‰ame
->
id
,"COMM")Ë&& (pid3‰ame->
nfõlds
 == 4)) {

559 
«tive_ãxt
=
	`id3_fõld_gë°rög
(&
pid3‰ame
->
fõlds
[2]);

560 if(
«tive_ãxt
) {

561 
utf8_ãxt
=(*)
	`id3_ucs4_utf8du∂iˇã
(
«tive_ãxt
);

562 if(
utf8_ãxt
)

563 
	`mem_ªgi°î
(
utf8_ãxt
,0);

565 if((
utf8_ãxt
Ë&& (
	`°∫ˇ£cmp
(utf8_text,"iTun",4) != 0)) {

567 if(
utf8_ãxt
)

568 
	`‰ì
(
utf8_ãxt
);

570 
«tive_ãxt
=
	`id3_fõld_gëfuŒ°rög
(&
pid3‰ame
->
fõlds
[3]);

571 if(
«tive_ãxt
) {

572 if(
pmp3
->
commít
)

573 
	`‰ì
(
pmp3
->
commít
);

574 
utf8_ãxt
=(*)
	`id3_ucs4_utf8du∂iˇã
(
«tive_ãxt
);

575 if(
utf8_ãxt
) {

576 
	`mem_ªgi°î
(
utf8_ãxt
,0);

577 
pmp3
->
commít
=
utf8_ãxt
;

581 if(
utf8_ãxt
)

582 
	`‰ì
(
utf8_ãxt
);

587 
ödex
++;

591 
	`id3_fûe_˛o£
(
pid3fûe
);

592 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Got id3Åag successfully\n");

593  
TRUE
;

594 
	}
}

604 
	$sˇn_mp3_decode_mp3_‰ame
(*
‰ame
, 
SCAN_FRAMEINFO
 *
pfi
) {

605 
vî
;

606 
œyî_ödex
;

607 
ßm∂e_ödex
;

608 
bôøã_ödex
;

609 
ßm∂î©e_ödex
;

611 if((
‰ame
[0] != 0xFF) || (frame[1] < 224)) {

612 
pfi
->
is_vÆid
=0;

616 
vî
=(
‰ame
[1] & 0x18) >> 3;

617 
pfi
->
œyî
 = 4 - ((
‰ame
[1] & 0x6) >> 1);

619 
œyî_ödex
=-1;

620 
ßm∂e_ödex
=-1;

622 
vî
) {

624 
pfi
->
vîsi⁄
 = 2.5;

625 
ßm∂e_ödex
=2;

626 if(
pfi
->
œyî
 == 1)

627 
œyî_ödex
 = 3;

628 if((
pfi
->
œyî
 == 2) || (pfi->layer == 3))

629 
œyî_ödex
 = 4;

632 
pfi
->
vîsi⁄
 = 2.0;

633 
ßm∂e_ödex
=1;

634 if(
pfi
->
œyî
 == 1)

635 
œyî_ödex
=3;

636 if((
pfi
->
œyî
 == 2) || (pfi->layer == 3))

637 
œyî_ödex
=4;

640 
pfi
->
vîsi⁄
 = 1.0;

641 
ßm∂e_ödex
=0;

642 if(
pfi
->
œyî
 == 1)

643 
œyî_ödex
 = 0;

644 if(
pfi
->
œyî
 == 2)

645 
œyî_ödex
 = 1;

646 if(
pfi
->
œyî
 == 3)

647 
œyî_ödex
 = 2;

651 if((
œyî_ödex
 < 0) || (layer_index > 4)) {

652 
pfi
->
is_vÆid
=0;

656 if((
ßm∂e_ödex
 < 0) || (sample_index > 2)) {

657 
pfi
->
is_vÆid
=0;

661 if(
pfi
->
œyî
==1Ëpfi->
ßm∂es_≥r_‰ame
=384;

662 if(
pfi
->
œyî
==2Ëpfi->
ßm∂es_≥r_‰ame
=1152;

663 if(
pfi
->
œyî
==3) {

664 if(
pfi
->
vîsi⁄
 == 1.0) {

665 
pfi
->
ßm∂es_≥r_‰ame
=1152;

667 
pfi
->
ßm∂es_≥r_‰ame
=576;

671 
bôøã_ödex
=(
‰ame
[2] & 0xF0) >> 4;

672 
ßm∂î©e_ödex
=(
‰ame
[2] & 0x0C) >> 2;

674 if((
bôøã_ödex
 == 0xF) || (bitrate_index==0x0)) {

675 
pfi
->
is_vÆid
=0;

679 if(
ßm∂î©e_ödex
 == 3) {

680 
pfi
->
is_vÆid
=0;

684 
pfi
->
bôøã
 = 
sˇn_br_èbÀ
[
œyî_ödex
][
bôøã_ödex
];

685 
pfi
->
ßm∂î©e
 = 
sˇn_ßm∂e_èbÀ
[
ßm∂e_ödex
][
ßm∂î©e_ödex
];

687 if((
‰ame
[3] & 0xC0 >> 6) == 3)

688 
pfi
->
°îeo
 = 0;

690 
pfi
->
°îeo
 = 1;

692 if(
‰ame
[2] & 0x02) {

693 
pfi
->
∑ddög
=1;

695 
pfi
->
∑ddög
=0;

698 if(
pfi
->
vîsi⁄
 == 1.0) {

699 if(
pfi
->
°îeo
) {

700 
pfi
->
xög_off£t
=32;

702 
pfi
->
xög_off£t
=17;

705 if(
pfi
->
°îeo
) {

706 
pfi
->
xög_off£t
=17;

708 
pfi
->
xög_off£t
=9;

712 
pfi
->
¸c_¥Ÿe˘ed
=(
‰ame
[1] & 0xFE);

714 if(
pfi
->
œyî
 == 1) {

715 
pfi
->
‰ame_Àngth
 = (12 *Öfi->
bôøã
 * 1000 /Öfi->
ßm∂î©e
 +Öfi->
∑ddög
) * 4;

717 
pfi
->
‰ame_Àngth
 = 144 *Öfi->
bôøã
 * 1000 /Öfi->
ßm∂î©e
 +Öfi->
∑ddög
;

720 if((
pfi
->
‰ame_Àngth
 > 2880) || (pfi->frame_length <= 0)) {

721 
pfi
->
is_vÆid
=0;

725 
pfi
->
is_vÆid
=1;

727 
	}
}

737 
	$sˇn_mp3_gë_avîage_bôøã
(
IOHANDLE
 
hfûe
, 
SCAN_FRAMEINFO
 *
pfi
) {

738 
uöt64_t
 
fûe_size
;

739 
‰ame_buf„r
[2900];

740 
hódî
[4];

741 
ödex
=0;

742 
found
=0;

743 
uöt64_t
 
pos
;

744 
uöt32_t
 
Àn
;

745 
SCAN_FRAMEINFO
 
fi
;

746 
‰ame_cou¡
=0;

747 
bôøã_tŸÆ
=0;

749 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Startingáveraging bitrate\n");

751 
	`io_size
(
hfûe
,&
fûe_size
);

753 
pos
=
fûe_size
/2;

756 
	`io_£ços
(
hfûe
,
pos
,
SEEK_SET
);

757 
Àn
 = (
‰ame_buf„r
);

758 if(!
	`io_ªad
(
hfûe
, 
‰ame_buf„r
, &
Àn
) ||Üen != (frame_buffer))

761 !
found
) {

762 (
‰ame_buf„r
[
ödex
] != 0xFF) && (index < ((frame_buffer)-4)))

763 
ödex
++;

765 if(
ödex
 >((
‰ame_buf„r
)-4)) {

766 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"CouldÇot find frame... quitting\n");

770 if(!
	`sˇn_mp3_decode_mp3_‰ame
(&
‰ame_buf„r
[
ödex
],&
fi
)) {

772 
	`io_£ços
(
hfûe
, 
pos
 + 
ödex
 + 
fi
.
‰ame_Àngth
, 
SEEK_SET
);

774 
Àn
 = (
hódî
);

775 if(!
	`io_ªad
(
hfûe
,
hódî
,&
Àn
) || (len != (header))) {

776 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"CouldÇotÑead frame header\n");

780 if(!
	`sˇn_mp3_decode_mp3_‰ame
(
hódî
,&
fi
))

781 
found
=1;

784 if(!
found
)

785 
ödex
++;

788 
pos
 +
ödex
;

791 
‰ame_cou¡
 < 10) {

792 
	`io_£ços
(
hfûe
,
pos
,
SEEK_SET
);

793 
Àn
 = (
hódî
);

794 if(!
	`io_ªad
(
hfûe
,
hódî
,&
Àn
) || (len != (header))) {

795 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"CouldÇotÑead frame header\n");

799 if(
	`sˇn_mp3_decode_mp3_‰ame
(
hódî
,&
fi
)) {

800 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Invalid frame header whileáveraging\n");

804 
bôøã_tŸÆ
 +
fi
.
bôøã
;

805 
‰ame_cou¡
++;

806 
pos
 +
fi
.
‰ame_Àngth
;

809 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Old bôøã: %d\n",
pfi
->
bôøã
);

810 
pfi
->
bôøã
 = 
bôøã_tŸÆ
/
‰ame_cou¡
;

811 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"New bôøã: %d\n",
pfi
->
bôøã
);

814 
	}
}

826 
	$sˇn_mp3_gë_‰ame_cou¡
(
IOHANDLE
 
hfûe
, 
SCAN_FRAMEINFO
 *
pfi
) {

827 
uöt64_t
 
pos
;

828 
‰ames
=0;

829 
‰ame_buf„r
[4];

830 
SCAN_FRAMEINFO
 
fi
;

831 
uöt64_t
 
fûe_size
;

832 
îr
=0;

833 
cbr
=1;

834 
œ°_bôøã
=0;

835 
uöt32_t
 
Àn
;

837 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Starting frame count\n");

839 
	`io_size
(
hfûe
,&
fûe_size
);

841 
pos
=
pfi
->
‰ame_off£t
;

844 
îr
=1;

845 
	`DPRINTF
(
E_SPAM
,
L_SCAN
,"SìkögÅÿ%ld\n",
pos
);

847 
	`io_£ços
(
hfûe
,
pos
,
SEEK_SET
);

849 
Àn
 = (
‰ame_buf„r
);

850 if(!
	`io_ªad
(
hfûe
,
‰ame_buf„r
,&
Àn
) || (len != (frame_buffer))) {

852 if(!
	`sˇn_mp3_decode_mp3_‰ame
(
‰ame_buf„r
,&
fi
)) {

853 
‰ames
++;

854 
pos
 +
fi
.
‰ame_Àngth
;

855 
îr
=0;

857 if((
œ°_bôøã
Ë&& (
fi
.
bôøã
 !=Üast_bitrate))

858 
cbr
=0;

859 
œ°_bôøã
=
fi
.
bôøã
;

862 if(
cbr
 && (
‰ames
 > 100)) {

863 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"FileáppearsÅo be CBR... quitting frame count\n");

869 if(
îr
) {

870 if(
pos
 > (
fûe_size
 - 4096)) {

871 
pfi
->
numbî_of_‰ames
=
‰ames
;

872 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"E°im©ed fømêcou¡: %d\n",
‰ames
);

875 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Frame countáborted onÉrror. Pos=%ld, Count=%d\n",

876 
pos
, 
‰ames
);

881 
	}
}

891 
	$sˇn_mp3_gë_mp3fûeöfo
(*
fûe
, 
MP3FILE
 *
pmp3
) {

892 
IOHANDLE
 
hfûe
;

893 
SCAN_ID3HEADER
 *
pid3
;

894 
SCAN_FRAMEINFO
 
fi
;

895 
size
=0;

896 
uöt64_t
 
Â_size
=0;

897 
uöt64_t
 
fûe_size
;

898 
uöt32_t
 
Àn
;

899 
buf„r
[1024];

900 
ödex
;

902 
xög_Êags
;

903 
found
;

905 
fú°_check
=0;

906 
‰ame_buf„r
[4];

908 if(!(
hfûe
 = 
	`io_√w
()))

909 
	`DPRINTF
(
E_FATAL
,
L_SCAN
,"CouldÇotállocate io handle\n");

911 if(!(
	`io_›í
(
hfûe
,"fûe://%U",
fûe
))) {

912 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"CouldÇŸ o≥¿%†f‹Ñódög: %s\n",
fûe
,
	`io_îr°r
(
hfûe
));

913  
FALSE
;

916 
fûe_size
 = 
pmp3
->file_size;

918 
	`mem£t
((*)&
fi
,0x00,(fi));

920 
Àn
 = (
buf„r
);

921 if(!
	`io_ªad
(
hfûe
,
buf„r
,&
Àn
) ||Üen != (buffer)) {

922 if(
Àn
 !(
buf„r
)) {

923 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"Eº‹Ñódög: %s\n",
	`io_îr°r
(
hfûe
));

925 
	`DPRINTF
(
E_INF
,
L_SCAN
,"Bad mp3 fûe? (sh‹àªad): %s\n",
fûe
);

927 
	`io_˛o£
(
hfûe
);

928 
	`io_di•o£
(
hfûe
);

929  
FALSE
;

932 
pid3
=(
SCAN_ID3HEADER
*)
buf„r
;

934 
found
=0;

935 
Â_size
=0;

937 if(
	`°∫cmp
((*)
pid3
->
id
,"ID3",3)==0) {

939 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Found ID3 header\n");

940 
size
 = (
pid3
->size[0] << 21 |Öid3->size[1] << 14 |

941 
pid3
->
size
[2] << 7 |Öid3->size[3]);

942 
Â_size
=
size
 + (
SCAN_ID3HEADER
);

943 
fú°_check
=1;

944 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"HódîÜígth: %d\n",
size
);

947 
ödex
 = 0;

953 !
found
) {

954 
	`io_£ços
(
hfûe
,
Â_size
,
SEEK_SET
);

955 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Ródög i¿√w blockáà%ld\n",()
Â_size
);

956 
Àn
 = (
buf„r
);

957 if(!
	`io_ªad
(
hfûe
,
buf„r
,&
Àn
) || (len != (buffer))) {

958 
	`DPRINTF
(
E_INF
,
L_SCAN
,"Bad mp3 fûe? (Sh‹àªad): %s\n",
fûe
);

959 
	`io_˛o£
(
hfûe
);

960 
	`io_di•o£
(
hfûe
);

961  
TRUE
;

964 
ödex
=0;

965 !
found
) {

966 (
buf„r
[
ödex
] != 0xFF) && (index < ((buffer)-50)))

967 
ödex
++;

969 if((
fú°_check
Ë&& (
ödex
)) {

970 
Â_size
=0;

971 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Bad header... dropping back for full frame search\n");

972 
fú°_check
=0;

976 if(
ödex
 > (
buf„r
) - 50) {

977 
Â_size
 +
ödex
;

978 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"BlockÉxhausted\n");

982 if(!
	`sˇn_mp3_decode_mp3_‰ame
(&
buf„r
[
ödex
],&
fi
)) {

983 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"vÆid hódîáà%d\n",
ödex
);

984 if(
	`°∫ˇ£cmp
((*)&
buf„r
[
ödex
+
fi
.
xög_off£t
+4],"XING",4) == 0) {

987 
found
=1;

988 
Â_size
 +
ödex
;

991 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Found vÆid fømê© %04x\n",()
Â_size
+
ödex
);

992 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Checkögáà%04x\n",()
Â_size
+
ödex
+
fi
.
‰ame_Àngth
);

994 
	`io_£ços
(
hfûe
,
Â_size
 + 
ödex
 + 
fi
.
‰ame_Àngth
,
SEEK_SET
);

995 
Àn
 =(
‰ame_buf„r
);

996 if(
	`io_ªad
(
hfûe
,(*)
‰ame_buf„r
,&
Àn
) && (len == (frame_buffer))) {

997 if(!
	`sˇn_mp3_decode_mp3_‰ame
((
u_ch¨
*)
‰ame_buf„r
,&
fi
)) {

998 
found
=1;

999 
Â_size
 +
ödex
;

1002 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"CouldÇŸÑód fømêhódî: %s\n",
fûe
);

1003 
	`io_˛o£
(
hfûe
);

1004 
	`io_di•o£
(
hfûe
);

1008 if(!
found
) {

1009 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Didn'tÖan out. SorryáboutÅhat.\n");

1014 if(!
found
) {

1015 
ödex
++;

1016 i‡(
fú°_check
) {

1022 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Bad header... dropping back for full frame search\n");

1023 
fú°_check
=0;

1024 
Â_size
=0;

1031 
fûe_size
 -
Â_size
;

1032 
fi
.
‰ame_off£t
=
Â_size
;

1034 if(
	`sˇn_mp3_decode_mp3_‰ame
(&
buf„r
[
ödex
],&
fi
)) {

1035 
	`io_˛o£
(
hfûe
);

1036 
	`io_di•o£
(
hfûe
);

1037 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"CouldÇŸ föd syn¯‰ame: %s\n",
fûe
);

1038 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"IfÅhis isá valid mp3 fileÅhatÖlays in "

1041  
TRUE
;

1044 
	`DPRINTF
(
E_DBG
,
L_SCAN
," MPEG Vîsi⁄: %0.1g\n",
fi
.
vîsi⁄
);

1045 
	`DPRINTF
(
E_DBG
,
L_SCAN
," Layî: %d\n",
fi
.
œyî
);

1046 
	`DPRINTF
(
E_DBG
,
L_SCAN
," Sam∂êR©e: %d\n",
fi
.
ßm∂î©e
);

1047 
	`DPRINTF
(
E_DBG
,
L_SCAN
," Bô R©e: %d\n",
fi
.
bôøã
);

1050 if(
	`°∫ˇ£cmp
((*)&
buf„r
[
ödex
+
fi
.
xög_off£t
+4],"XING",4) == 0) {

1051 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Found Xing header\n");

1052 
xög_Êags
 = 
buf„r
[
ödex
+
fi
.
xög_off£t
+4+4] << 24 |

1053 
buf„r
[
ödex
+
fi
.
xög_off£t
+4+5] << 16 |

1054 
buf„r
[
ödex
+
fi
.
xög_off£t
+4+6] << 8 |

1055 
buf„r
[
ödex
+
fi
.
xög_off£t
+4+7];

1057 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Xög Fœgs: %02X\n",
xög_Êags
);

1059 if(
xög_Êags
 & 0x1) {

1061 
fi
.
numbî_of_‰ames
=
buf„r
[
ödex
+fi.
xög_off£t
+4+8] << 24 |

1062 
buf„r
[
ödex
+
fi
.
xög_off£t
+4+9] << 16 |

1063 
buf„r
[
ödex
+
fi
.
xög_off£t
+4+10] << 8 |

1064 
buf„r
[
ödex
+
fi
.
xög_off£t
+4+11];

1066 
fi
.
bôøã
 = 0;

1070 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Scan Type: %d,Ço of frames: %d, song_length: %d, "

1072 
	`c⁄f_gë_öt
("general","scan_type",0),

1073 
fi
.
numbî_of_‰ames
,

1074 
pmp3
->
s⁄g_Àngth
,

1075 
pmp3
->
fûe_size
);

1077 if((
	`c⁄f_gë_öt
("general","scan_type",0) != 0) &&

1078 (
fi
.
numbî_of_‰ames
 == 0) &&

1079 (!
pmp3
->
s⁄g_Àngth
)) {

1082 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Startingággressive fileÜength scan\n");

1083 if(
	`c⁄f_gë_öt
("general","scan_type",0) == 1) {

1085 
	`sˇn_mp3_gë_avîage_bôøã
(
hfûe
, &
fi
);

1088 
	`sˇn_mp3_gë_‰ame_cou¡
(
hfûe
, &
fi
);

1090 
pmp3
->
bôøã
=
fi
.bitrate;

1093 
pmp3
->
ßm∂î©e
=
fi
.samplerate;

1096 if(!
pmp3
->
s⁄g_Àngth
) {

1099 if(!
fi
.
numbî_of_‰ames
) {

1100 
pmp3
->
s⁄g_Àngth
 = (Ë((Ë
fûe_size
 * 8. /

1101 (Ë
fi
.
bôøã
);

1103 } i‡(
fi
.
ßm∂î©e
 ) {

1104 
pmp3
->
s⁄g_Àngth
 = (Ë(()(
fi
.
numbî_of_‰ames
*fi.
ßm∂es_≥r_‰ame
*1000.)/

1105 (Ë
fi
.
ßm∂î©e
);

1110 if((
pmp3
->
s⁄g_Àngth
Ë&& (!pmp3->
bôøã
)) {

1111 
pmp3
->
bôøã
 = (
uöt32_t
)((
fûe_size
 /Ömp3->
s⁄g_Àngth
) * 8);

1115 
	`DPRINTF
(
E_DBG
,
L_SCAN
," S⁄g Lígth: %d\n",
pmp3
->
s⁄g_Àngth
);

1117 
	`io_˛o£
(
hfûe
);

1118 
	`io_di•o£
(
hfûe
);

1119  
TRUE
;

1120 
	}
}

	@scan-mpc.c

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 #ifde‡
HAVE_STDINT_H


27 
	~<°döt.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<èglib/èg_c.h
>

34 
	~"dØpd.h
"

35 
	~"mp3-sˇ¬î.h
"

36 
	~"îr.h
"

45 
	$sˇn_gë_mpcöfo
(*
fûíame
, 
MP3FILE
 *
pmp3
) {

46 
FILE
 *
f
;

47 
TagLib_Fûe
 *
fûe
;

48 
TagLib_Tag
 *
èg
;

49 c⁄° 
TagLib_AudioPr›îtõs
 *
¥›îtõs
;

50 *
vÆ
;

51 
Àn
;

52 
i
;

55 i‡((
fûe
 = 
	`èglib_fûe_√w_ty≥
(
fûíame
, 
TagLib_Fûe_MPC
)Ë=
NULL
) {

56 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"CouldÇŸ o≥¿%†wôhÅaglib\n", 
fûíame
);

57  
FALSE
;

61 i‡((
èg
 = 
	`èglib_fûe_èg
(
fûe
)Ë=
NULL
) {

62 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"CouldÇŸÑërõvêèg†o‡%s\n", 
fûíame
);

63 
	`èglib_fûe_‰ì
(
fûe
);

65  
FALSE
;

69 i‡((
vÆ
 = 
	`èglib_èg_tôÀ
(
èg
)Ë!
NULL
) {

70 
Àn
 = 
	`°æí
(
vÆ
);

71 i‡((
pmp3
->
tôÀ
 = 
	`ˇŒoc
(
Àn
 + 1, 1)Ë!
NULL
)

72 
	`°∫˝y
(
pmp3
->
tôÀ
, 
vÆ
, 
Àn
);

73 
	`èglib_èg_‰ì_°rögs
(
vÆ
);

75 i‡((
vÆ
 = 
	`èglib_èg_¨ti°
(
èg
)Ë!
NULL
) {

76 
Àn
 = 
	`°æí
(
vÆ
);

77 i‡((
pmp3
->
¨ti°
 = 
	`ˇŒoc
(
Àn
 + 1, 1)Ë!
NULL
)

78 
	`°∫˝y
(
pmp3
->
¨ti°
, 
vÆ
, 
Àn
);

79 
	`èglib_èg_‰ì_°rögs
(
vÆ
);

81 i‡((
vÆ
 = 
	`èglib_èg_Æbum
(
èg
)Ë!
NULL
) {

82 
Àn
 = 
	`°æí
(
vÆ
);

83 i‡((
pmp3
->
Æbum
 = 
	`ˇŒoc
(
Àn
 + 1, 1)Ë!
NULL
)

84 
	`°∫˝y
(
pmp3
->
Æbum
, 
vÆ
, 
Àn
);

85 
	`èglib_èg_‰ì_°rögs
(
vÆ
);

87 i‡((
vÆ
 = 
	`èglib_èg_commít
(
èg
)Ë!
NULL
) {

88 
Àn
 = 
	`°æí
(
vÆ
);

89 i‡((
pmp3
->
commít
 = 
	`ˇŒoc
(
Àn
 + 1, 1)Ë!
NULL
)

90 
	`°∫˝y
(
pmp3
->
commít
, 
vÆ
, 
Àn
);

91 
	`èglib_èg_‰ì_°rögs
(
vÆ
);

93 i‡((
vÆ
 = 
	`èglib_èg_gíª
(
èg
)Ë!
NULL
) {

94 
Àn
 = 
	`°æí
(
vÆ
);

95 i‡((
pmp3
->
gíª
 = 
	`ˇŒoc
(
Àn
 + 1, 1)Ë!
NULL
)

96 
	`°∫˝y
(
pmp3
->
gíª
, 
vÆ
, 
Àn
);

97 
	`èglib_èg_‰ì_°rögs
(
vÆ
);

100 i‡((
i
 = 
	`èglib_èg_yór
(
èg
)) != 0)

101 
pmp3
->
yór
 = 
i
;

102 i‡((
i
 = 
	`èglib_èg_åack
(
èg
)) != 0)

103 
pmp3
->
åack
 = 
i
;

106 i‡((
¥›îtõs
 = 
	`èglib_fûe_audi›r›îtõs
(
fûe
)Ë=
NULL
) {

107 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"CouldÇŸÑërõvê¥›îtõ†o‡%s\n", 
fûíame
);

108  
FALSE
;

112 
pmp3
->
s⁄g_Àngth
 = 
	`èglib_audi›r›îtõs_Àngth
(
¥›îtõs
) * 1000;

113 
pmp3
->
bôøã
 = 
	`èglib_audi›r›îtõs_bôøã
(
¥›îtõs
);

114 
pmp3
->
ßm∂î©e
 = 
	`èglib_audi›r›îtõs_ßm∂î©e
(
¥›îtõs
);

116 
	`èglib_fûe_‰ì
(
fûe
);

118  
TRUE
;

119 
	}
}

	@scan-ogg.c

10 #ifde‡
HAVE_CONFIG_H


11 
	~"c⁄fig.h
"

14 
	~<°dio.h
>

15 #ifde‡
HAVE_STDINT_H


16 
	~<°döt.h
>

18 
	~<°dlib.h
>

19 
	~<î∫o.h
>

20 
	~<°rög.h
>

21 
	~<sys/°©.h
>

22 
	~<v‹bis/v‹bisfûe.h
>

24 
	~"dØpd.h
"

25 
	~"îr.h
"

26 
	~"io.h
"

27 
	~"mp3-sˇ¬î.h
"

29 
size_t
 
	$sˇn_ogg_ªad
(*
±r
, 
size_t
 
size
, size_à
nmemb
, *
d©asour˚
) {

30 
IOHANDLE
 
hfûe
 = (IOHANDLE)
d©asour˚
;

31 
uöt32_t
 
byãs_ªad
;

33 
byãs_ªad
 = (
uöt32_t
)(
size
 * 
nmemb
);

34 if(!
	`io_ªad
(
hfûe
,
±r
,&
byãs_ªad
))

37  (
size_t
)
byãs_ªad
;

38 
	}
}

40 
	$sˇn_ogg_£ek
(*
d©asour˚
, 
öt64_t
 
off£t
, 
whí˚
) {

41 
IOHANDLE
 
hfûe
 = (IOHANDLE)
d©asour˚
;

43 if(!
	`io_£ços
(
hfûe
,(
uöt64_t
)
off£t
,
whí˚
))

46 
	}
}

48 
	$sˇn_ogg_˛o£
(*
d©asour˚
) {

49 
IOHANDLE
 
hfûe
 = (IOHANDLE)
d©asour˚
;

50 
ªtcode
;

52 
ªtcode
 = 
	`io_˛o£
(
hfûe
);

53 
	`io_di•o£
(
hfûe
);

55  
ªtcode
 ? 0 : 
EOF
;

56 
	}
}

58 
	$sˇn_ogg_ãŒ
(*
d©asour˚
) {

59 
IOHANDLE
 
hfûe
 = (IOHANDLE)
d©asour˚
;

60 
uöt64_t
 
pos
;

62 if(!
	`io_gëpos
(
hfûe
,&
pos
))

65  ()
pos
;

66 
	}
}

76 
	$sˇn_gë_oggöfo
(*
fûíame
, 
MP3FILE
 *
pmp3
) {

77 
IOHANDLE
 
hfûe
;

78 
OggV‹bis_Fûe
 
vf
;

79 
v‹bis_commít
 *
commít
 = 
NULL
;

80 
v‹bis_öfo
 *
vi
 = 
NULL
;

81 *
vÆ
;

82 
ov_ˇŒbacks
 
ˇŒbacks
 = { 
sˇn_ogg_ªad
, 
sˇn_ogg_£ek
, 
sˇn_ogg_˛o£
, 
sˇn_ogg_ãŒ
 };

85 
hfûe
 = 
	`io_√w
();

86 if(!
hfûe
) {

87 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"CouldÇot create file handle\n");

88  
FALSE
;

91 if(!
	`io_›í
(
hfûe
,"fûe://%U",
fûíame
)) {

92 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"Eº‹ o≥nög %s: %s", 
fûíame
, 
	`io_îr°r
(
hfûe
));

93  
FALSE
;

96 if(
	`ov_›í_ˇŒbacks
(
hfûe
,&
vf
,
NULL
,0,
ˇŒbacks
) < 0) {

97 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"CouldÇot create oggvorbis file handler\n");

98  
FALSE
;

101 
vi
=
	`ov_öfo
(&
vf
,-1);

102 if(
vi
) {

103 
	`DPRINTF
(
E_DBG
,
L_SCAN
," Bôøãs: %d %d %d\n",
vi
->
bôøã_uµî
,

104 
vi
->
bôøã_nomöÆ
,vi->
bôøã_lowî
);

105 if(
vi
->
bôøã_nomöÆ
) {

106 
pmp3
->
bôøã
=
vi
->
bôøã_nomöÆ
 / 1000;

107 } if(
vi
->
bôøã_uµî
) {

108 
pmp3
->
bôøã
=
vi
->
bôøã_uµî
 / 1000;

109 } if(
vi
->
bôøã_lowî
) {

110 
pmp3
->
bôøã
=
vi
->
bôøã_lowî
 / 1000;

113 
	`DPRINTF
(
E_DBG
,
L_SCAN
," Bôøãs: %d",
pmp3
->
bôøã
);

114 
pmp3
->
ßm∂î©e
=
vi
->
øã
;

117 
pmp3
->
s⁄g_Àngth
=()
	`ov_time_tŸÆ
(&
vf
,-1) * 1000;

119 
commít
 = 
	`ov_commít
(&
vf
, -1);

120 i‡(
commít
 !
NULL
) {

121 i‡((
vÆ
 = 
	`v‹bis_commít_quîy
(
commít
, "¨ti°", 0)Ë!
NULL
)

122 
pmp3
->
¨ti°
 = 
	`°rdup
(
vÆ
);

123 i‡((
vÆ
 = 
	`v‹bis_commít_quîy
(
commít
, "tôÀ", 0)Ë!
NULL
)

124 
pmp3
->
tôÀ
 = 
	`°rdup
(
vÆ
);

125 i‡((
vÆ
 = 
	`v‹bis_commít_quîy
(
commít
, "Æbum", 0)Ë!
NULL
)

126 
pmp3
->
Æbum
 = 
	`°rdup
(
vÆ
);

127 i‡((
vÆ
 = 
	`v‹bis_commít_quîy
(
commít
, "gíª", 0)Ë!
NULL
)

128 
pmp3
->
gíª
 = 
	`°rdup
(
vÆ
);

129 i‡((
vÆ
 = 
	`v‹bis_commít_quîy
(
commít
, "compo£r", 0)Ë!
NULL
)

130 
pmp3
->
compo£r
 = 
	`°rdup
(
vÆ
);

131 i‡((
vÆ
 = 
	`v‹bis_commít_quîy
(
commít
, "commít", 0)Ë!
NULL
)

132 
pmp3
->
commít
 = 
	`°rdup
(
vÆ
);

133 i‡((
vÆ
 = 
	`v‹bis_commít_quîy
(
commít
, "åacknumbî", 0)Ë!
NULL
)

134 
pmp3
->
åack
 = 
	`©oi
(
vÆ
);

135 i‡((
vÆ
 = 
	`v‹bis_commít_quîy
(
commít
, "dis˙umbî", 0)Ë!
NULL
)

136 
pmp3
->
disc
 = 
	`©oi
(
vÆ
);

137 i‡((
vÆ
 = 
	`v‹bis_commít_quîy
(
commít
, "yór", 0)Ë!
NULL
)

138 
pmp3
->
yór
 = 
	`©oi
(
vÆ
);

140 
	`ov_˛ór
(&
vf
);

141  
TRUE
;

142 
	}
}

	@scan-url.c

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

25 
	~<f˙é.h
>

26 #ifde‡
HAVE_STDINT_H


27 
	~<°döt.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

33 
	~"dØpd.h
"

34 
	~"îr.h
"

35 
	~"mp3-sˇ¬î.h
"

46 
	$sˇn_gë_uæöfo
(*
fûíame
, 
MP3FILE
 *
pmp3
) {

47 
IOHANDLE
 
hfûe
;

48 *
hód
, *
èû
;

49 
löebuf„r
[256];

50 
uöt32_t
 
Àn
;

52 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Getting URL file info\n");

54 if(!(
hfûe
 = 
	`io_√w
())) {

55 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"Can't create file handle\n");

56  
FALSE
;

59 if(!
	`io_›í
(
hfûe
,"fûe://%U?ascii=1",
fûíame
)) {

60 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"CouldÇŸ o≥¿%†f‹Ñódög: %s\n",
fûíame
,

61 
	`io_îr°r
(
hfûe
));

62 
	`io_di•o£
(
hfûe
);

63  
FALSE
;

66 
	`io_buf„r
(
hfûe
);

67 
Àn
 = (
löebuf„r
);

68 if(!
	`io_ªadlöe
(
hfûe
,(*)
löebuf„r
,&
Àn
)) {

69 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"Eº‹Ñódög from fûê%s: %s",
fûíame
,
	`io_îr°r
(
hfûe
));

70 
	`io_˛o£
(
hfûe
);

71 
	`io_di•o£
(
hfûe
);

72  
FALSE
;

75 (
löebuf„r
[
	`°æí
(linebuffer)-1] == '\n') ||

76 (
löebuf„r
[
	`°æí
(linebuffer)-1] == '\r')) {

77 
löebuf„r
[
	`°æí
(linebuffer)-1] = '\0';

80 
hód
=
löebuf„r
;

81 
èû
=
	`°rchr
(
hód
,',');

82 if(!
èû
) {

83 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"Badly formatted .url file - must be bitrate,descr,url\n");

84 
	`io_˛o£
(
hfûe
);

85 
	`io_di•o£
(
hfûe
);

86  
FALSE
;

89 
pmp3
->
bôøã
=
	`©oi
(
hód
);

90 
hód
=++
èû
;

91 
èû
=
	`°rchr
(
hód
,',');

92 if(!
èû
) {

93 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"Badly formatted .url file - must be bitrate,descr,url\n");

94 
	`io_˛o£
(
hfûe
);

95 
	`io_di•o£
(
hfûe
);

96  
FALSE
;

99 *
èû
++='\0';

101 
pmp3
->
tôÀ
=
	`°rdup
(
hód
);

102 
pmp3
->
uæ
=
	`°rdup
(
èû
);

104 
	`io_˛o£
(
hfûe
);

105 
	`io_di•o£
(
hfûe
);

107 
	`DPRINTF
(
E_DBG
,
L_SCAN
," TôÀ: %s\n",
pmp3
->
tôÀ
);

108 
	`DPRINTF
(
E_DBG
,
L_SCAN
," Bôøã: %d\n",
pmp3
->
bôøã
);

109 
	`DPRINTF
(
E_DBG
,
L_SCAN
," URL: %s\n",
pmp3
->
uæ
);

111  
TRUE
;

112 
	}
}

	@scan-wav.c

21 #ifde‡
HAVE_CONFIG_H


22 
	~"c⁄fig.h
"

25 
	~<˘y≥.h
>

26 #ifde‡
HAVE_STDINT_H


27 
	~<°döt.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<f˙é.h
>

34 
	~"dØpd.h
"

35 
	~"îr.h
"

36 
	~"io.h
"

37 
	~"mp3-sˇ¬î.h
"

39 
	#GET_WAV_INT32
(
p
Ë((((
uöt32_t
)((p)[3])) << 24) | \

40 (((
uöt32_t
)((
p
)[2])) << 16) | \

41 (((
uöt32_t
)((
p
)[1])) << 8) | \

42 (((
uöt32_t
)((
p
)[0]))))

	)

44 
	#GET_WAV_INT16
(
p
Ë((((
uöt32_t
)((p)[1])) << 8) | \

45 (((
uöt32_t
)((
p
)[0]))))

	)

47 
	#XLAT
(
c
Ë(((
	`touµî
((c)Ë>'A'Ë&& (touµî((c)Ë<'Z')Ë? (cË: '_' )

	)

58 
	$sˇn_gë_wavöfo
(*
fûíame
, 
MP3FILE
 *
pmp3
) {

59 
IOHANDLE
 
hfûe
;

60 
uöt32_t
 
Àn
;

61 
hdr
[12];

62 
fmt
[16];

63 
uöt32_t
 
chunk_d©a_Àngth
;

64 
uöt32_t
 
f‹m©_d©a_Àngth
 = 0;

65 
uöt32_t
 
com¥essi⁄_code
 = 0;

66 
uöt32_t
 
ch™√l_cou¡
 = 0;

67 
uöt32_t
 
ßm∂e_øã
 = 0;

68 
uöt32_t
 
ßm∂e_bô_Àngth
 = 0;

69 
uöt32_t
 
bô_øã
;

70 
uöt32_t
 
d©a_Àngth
 = 0;

71 
uöt32_t
 
£c
, 
ms
;

73 
uöt32_t
 
cuºít_off£t
;

74 
uöt32_t
 
block_Àn
;

76 
found_fmt
 = 
FALSE
;

77 
found_d©a
 = 
FALSE
;

79 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Getting WAV file info\n");

81 if(!(
hfûe
 = 
	`io_√w
())) {

82 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"CouldÇot create file handle\n");

83  
FALSE
;

86 if(!
	`io_›í
(
hfûe
,"fûe://%U",
fûíame
)) {

87 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"CouldÇŸ o≥¿%†f‹Ñódög: %s\n",
fûíame
,

88 
	`io_îr°r
(
hfûe
));

89 
	`io_di•o£
(
hfûe
);

90  
FALSE
;

93 
Àn
 = 12;

94 if(!
	`io_ªad
(
hfûe
,
hdr
,&
Àn
) || (len != 12)) {

95 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"CouldÇŸÑód wav hódî from %s\n",
fûíame
);

96 
	`io_˛o£
(
hfûe
);

97 
	`io_di•o£
(
hfûe
);

98  
FALSE
;

103 i‡(
	`°∫cmp
((*)
hdr
 + 0, "RIFF", 4) ||

104 
	`°∫cmp
((*)
hdr
 + 8, "WAVE", 4)) {

105 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"InvÆid wav hódî i¿%s\n",
fûíame
);

106 
	`io_˛o£
(
hfûe
);

107 
	`io_di•o£
(
hfûe
);

108  
FALSE
;

111 
chunk_d©a_Àngth
 = 
	`GET_WAV_INT32
(
hdr
 + 4);

114 
cuºít_off£t
 = 12;

116 !
found_fmt
 || !
found_d©a
) {

117 
Àn
 = 8;

118 if(!
	`io_ªad
(
hfûe
,
hdr
,&
Àn
) || (len != 8)) {

119 
	`io_˛o£
(
hfûe
);

120 
	`io_di•o£
(
hfûe
);

121 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"Eº‹Ñódög block: %s\n",
fûíame
);

122  
FALSE
;

125 
block_Àn
 = 
	`GET_WAV_INT32
(
hdr
 + 4);

127 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Read block %02x%02x%02x%02x (%c%c%c%c) of "

128 "sizê%08x\n",
hdr
[0],hdr[1],hdr[2],hdr[3],

129 
	`XLAT
(
hdr
[0]),XLAT(hdr[1]),XLAT(hdr[2]),XLAT(hdr[3]),
block_Àn
);

131 if(
block_Àn
 < 0) {

132 
	`io_˛o£
(
hfûe
);

133 
	`io_di•o£
(
hfûe
);

134 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"Bad blockÜí: %s\n",
fûíame
);

135  
FALSE
;

138 if(
	`°∫cmp
((*)&
hdr
,"fmt ",4) == 0) {

139 
found_fmt
 = 
TRUE
;

140 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Found 'fmt ' header\n");

141 
Àn
 = 16;

142 if(!
	`io_ªad
(
hfûe
,
fmt
,&
Àn
) || (len != 16)) {

143 
	`io_˛o£
(
hfûe
);

144 
	`io_di•o£
(
hfûe
);

145 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"Bad .wav file: can'tÑead fmt: %s\n",

146 
fûíame
);

147  
FALSE
;

150 
f‹m©_d©a_Àngth
 = 
block_Àn
;

151 
com¥essi⁄_code
 = 
	`GET_WAV_INT16
(
fmt
);

152 
ch™√l_cou¡
 = 
	`GET_WAV_INT16
(
fmt
+2);

153 
ßm∂e_øã
 = 
	`GET_WAV_INT32
(
fmt
 + 4);

154 
ßm∂e_bô_Àngth
 = 
	`GET_WAV_INT16
(
fmt
 + 14);

155 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Com¥essi⁄ code: %d\n",
com¥essi⁄_code
);

156 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Ch™√»cou¡: %d\n",
ch™√l_cou¡
);

157 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Sam∂êR©e: %d\n",
ßm∂e_øã
);

158 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Sam∂êbôÜígth %d\n",
ßm∂e_bô_Àngth
);

160 } i‡(
	`°∫cmp
((*)&
hdr
,"data",4) == 0) {

161 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Found 'data' header\n");

162 
d©a_Àngth
 = 
block_Àn
;

163 
found_d©a
 = 
TRUE
;

166 
	`io_£ços
(
hfûe
,
cuºít_off£t
 + 
block_Àn
 + 8,
SEEK_SET
);

167 
cuºít_off£t
 +(
block_Àn
 + 8);

170 
	`io_˛o£
(
hfûe
);

171 
	`io_di•o£
(
hfûe
);

173 i‡(((
f‹m©_d©a_Àngth
 != 16) && (format_data_length != 18)) ||

174 (
com¥essi⁄_code
 != 1) ||

175 (
ch™√l_cou¡
 < 1)) {

176 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"InvÆid wav hódî i¿%s\n",
fûíame
);

177  
FALSE
;

180 
bô_øã
 = 
ßm∂e_øã
 * 
ch™√l_cou¡
 * ((
ßm∂e_bô_Àngth
 + 7) / 8) * 8;

181 if(!
bô_øã
) {

182 
	`DPRINTF
(
E_WARN
,
L_SCAN
,"Couldn't get bitrate\n");

183  
FALSE
;

186 
pmp3
->
bôøã
 = 
bô_øã
 / 1000;

187 
pmp3
->
ßm∂î©e
 = 
ßm∂e_øã
;

188 
£c
 = 
d©a_Àngth
 / (
bô_øã
 / 8);

189 
ms
 = ((
d©a_Àngth
 % (
bô_øã
 / 8)) * 1000) / (bit_rate / 8);

190 
pmp3
->
s⁄g_Àngth
 = (
£c
 * 1000Ë+ 
ms
;

192  
TRUE
;

193 
	}
}

	@scan-wma.c

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 
	~<î∫o.h
>

27 
	~<f˙é.h
>

28 #ifde‡
HAVE_STDINT_H


29 
	~<°döt.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

35 
	~"dØpd.h
"

36 
	~"io.h
"

37 
	~"mp3-sˇ¬î.h
"

38 
	~"ª°¨t.h
"

39 
	~"îr.h
"

41 
	sèg_wma_guidli°
 {

42 *
	m«me
;

43 *
	mguid
;

44 
	mvÆue
[16];

45 } 
	tWMA_GUID
;

47 
WMA_GUID
 
	gwma_guidli°
[] = {

225 { 
NULL
, NULL, "\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0" }

228 #i‡
__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 > 4)

229 
	#_PACKED
 
	`__©åibuã
((
∑cked
))

	)

231 
	#_PACKED


	)

233 
	#MAYBEFREE
(
x
Ë{ 
	`‰ì
((x)); }

	)

235 #¥agm®
∑ck
(1)

236 
	sèg_wma_hódî
 {

237 
	mobje˘id
[16];

238 
	msize
;

239 
	mobje˘s
;

240 
	mª£rved1
;

241 
	mª£rved2
;

242 } 
	t_PACKED
 
	tWMA_HEADER
;

244 
	sèg_wma_subhódî
 {

245 
	mobje˘id
[16];

246 
	msize
;

247 } 
	t_PACKED
 
	tWMA_SUBHEADER
;

249 
	sèg_wma_°ªam_¥›îtõs
 {

250 
	m°ªam_ty≥
[16];

251 
	mcodec_ty≥
[16];

252 
	mtime_off£t
[8];

253 
	mtsdl
;

254 
	mecdl
;

255 
	mÊags
;

256 
	mª£rved
;

257 } 
	t_PACKED
 
	tWMA_STREAM_PROP
;

259 
	sèg_wma_hódî_exãnsi⁄
 {

260 
	mª£rved_1
[16];

261 
	mª£rved_2
;

262 
	md©a_size
;

263 } 
	t_PACKED
 
	tWMA_HEADER_EXT
;

265 #¥agm®
∑ck
()

270 
WMA_GUID
 *
wma_föd_guid
(*
guid
);

271 
wma_c⁄vît_sh‹t
(*
§c
);

272 
wma_c⁄vît_öt
(*
§c
);

273 
wma_c⁄vît_Œ
(*
§c
);

274 *
wma_utf16toutf8
(*
utf16
, 
Àn
);

275 
wma_∑r£_c⁄ã¡_des¸ùti⁄
(
IOHANDLE
 
hfûe
,
size
, 
MP3FILE
 *
pmp3
);

276 
wma_∑r£_exãnded_c⁄ã¡_des¸ùti⁄
(
IOHANDLE
 
hfûe
,
size
, 
MP3FILE
 *
pmp3
, 
exãnded
);

277 
wma_∑r£_fûe_¥›îtõs
(
IOHANDLE
 
hfûe
,
size
, 
MP3FILE
 *
pmp3
);

278 
wma_∑r£_audio_medü
(
IOHANDLE
 
hfûe
, 
size
, 
MP3FILE
 *
pmp3
);

279 
wma_∑r£_°ªam_¥›îtõs
(
IOHANDLE
 
hfûe
, 
size
, 
MP3FILE
 *
pmp3
);

280 
wma_∑r£_hódî_exãnsi⁄
(
IOHANDLE
 
hfûe
, 
size
, 
MP3FILE
 *
pmp3
);

285 
	$wma_fûe_ªad_sh‹t
(
IOHANDLE
 
hfûe
, *
psi
) {

286 
uöt32_t
 
Àn
;

288 
Àn
 = ();

289 if(!
	`io_ªad
(
hfûe
,(*)
psi
,&
Àn
) || (len != ())) {

293 *
psi
 = 
	`wma_c⁄vît_sh‹t
((*)psi);

295 
	}
}

300 
	$wma_fûe_ªad_öt
(
IOHANDLE
 
hfûe
, *
pi
) {

301 
uöt32_t
 
Àn
;

303 
Àn
 = ();

304 if(!
	`io_ªad
(
hfûe
,(*)
pi
,&
Àn
) || (len != ())) {

308 *
pi
 = 
	`wma_c⁄vît_öt
((*)pi);

310 
	}
}

315 
	$wma_fûe_ªad_Œ
(
IOHANDLE
 
hfûe
, *
∂l
) {

316 
uöt32_t
 
Àn
;

318 
Àn
 = ();

319 if(!
	`io_ªad
(
hfûe
,(*)
∂l
,&
Àn
) || (len != ())) {

323 *
∂l
 = 
	`wma_c⁄vît_Œ
((*)pll);

325 
	}
}

330 
	$wma_fûe_ªad_utf16
(
IOHANDLE
 
hfûe
, 
Àn
, **
utf8
) {

331 *
out
;

332 *
utf16
;

333 
uöt32_t
 
æí
;

335 
utf16
=(*)
	`mÆloc
(
Àn
);

336 if(!
utf16
)

339 
æí
 = 
Àn
;

340 if(!
	`io_ªad
(
hfûe
,
utf16
,&
æí
Ë|| (æí !
Àn
))

343 
out
 = 
	`wma_utf16toutf8
(
utf16
,
Àn
);

344 *
utf8
 = 
out
;

345 
	`‰ì
(
utf16
);

348 
	}
}

350 
	$wma_fûe_ªad_byãs
(
IOHANDLE
 
hfûe
,
Àn
, **
d©a
) {

351 
uöt32_t
 
æí
;

353 *
d©a
 = (*)
	`mÆloc
(
Àn
);

354 if(!*
d©a
)

357 
æí
 = 
Àn
;

358 if(!
	`io_ªad
(
hfûe
,*
d©a
, &
æí
Ë|| (æí !
Àn
))

362 
	}
}

364 
	$wma_∑r£_hódî_exãnsi⁄
(
IOHANDLE
 
hfûe
, 
size
, 
MP3FILE
 *
pmp3
) {

365 
WMA_HEADER_EXT
 
he
;

366 
WMA_SUBHEADER
 
sh
;

367 
WMA_GUID
 *
pguid
;

368 
byãs_À·
;

369 
uöt64_t
 
cuºít
;

370 
uöt32_t
 
Àn
;

372 
Àn
 = (
he
);

373 if(!
	`io_ªad
(
hfûe
,(*)&
he
,&
Àn
) || (len != (he)))

374  
FALSE
;

376 
he
.
d©a_size
 = 
	`wma_c⁄vît_öt
((*)&he.data_size);

377 
byãs_À·
 = 
he
.
d©a_size
;

378 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Found hódîÉxào‡%ld (%ldËbyãs\n",
he
.
d©a_size
,
size
);

380 
byãs_À·
) {

382 
	`io_gëpos
(
hfûe
,&
cuºít
);

384 
Àn
 = (
sh
);

385 if(!
	`io_ªad
(
hfûe
,(*)&
sh
,&
Àn
) || (len != (sh)))

386  
FALSE
;

388 
sh
.
size
 = 
	`wma_c⁄vît_Œ
((*)&sh.size);

389 
pguid
 = 
	`wma_föd_guid
(
sh
.
obje˘id
);

390 if(!
pguid
) {

391 
	`DPRINTF
(
E_DBG
,
L_SCAN
," UnknownÉxt subheader: %02hhx%02hhx"

395 
sh
.
obje˘id
[3],sh.objectid[2],

396 
sh
.
obje˘id
[1],sh.objectid[0],

397 
sh
.
obje˘id
[5],sh.objectid[4],

398 
sh
.
obje˘id
[7],sh.objectid[6],

399 
sh
.
obje˘id
[8],sh.objectid[9],

400 
sh
.
obje˘id
[10],sh.objectid[11],

401 
sh
.
obje˘id
[12],sh.objectid[13],

402 
sh
.
obje˘id
[14],sh.objectid[15]);

404 
	`DPRINTF
(
E_DBG
,
L_SCAN
," FoundÉxàsubhódî: %s\n", 
pguid
->
«me
);

405 if(
	`°rcmp
(
pguid
->
«me
,"ASF_Metadata_Library_Object")==0) {

406 if(!
	`wma_∑r£_exãnded_c⁄ã¡_des¸ùti⁄
(
hfûe
,
size
,
pmp3
,1))

407  
FALSE
;

411 
	`DPRINTF
(
E_DBG
,
L_SCAN
," Size: %Œd\n",
sh
.
size
);

412 if(
sh
.
size
 <= (sh))

413  
TRUE
;

415 
byãs_À·
 -()
sh
.
size
;

416 
	`io_£ços
(
hfûe
,
cuºít
 + (
uöt64_t
)
sh
.
size
,
SEEK_SET
);

419  
TRUE
;

420 
	}
}

430 
	$wma_∑r£_°ªam_¥›îtõs
(
IOHANDLE
 
hfûe
, 
size
, 
MP3FILE
 *
pmp3
) {

431 
WMA_STREAM_PROP
 
•
;

432 
WMA_GUID
 *
pguid
;

433 
uöt32_t
 
Àn
;

435 
Àn
 = (
•
);

436 if(!
	`io_ªad
(
hfûe
,(*)&
•
,&
Àn
) || (len != (sp)))

437  
FALSE
;

439 
pguid
 = 
	`wma_föd_guid
(
•
.
°ªam_ty≥
);

440 if(!
pguid
)

441  
TRUE
;

443 if(
	`°rcmp
(
pguid
->
«me
,"ASF_Audio_Media") != 0)

444  
TRUE
;

450  
	`wma_∑r£_audio_medü
(
hfûe
,
size
 - (
WMA_STREAM_PROP
),
pmp3
);

451 
	}
}

462 
	$wma_∑r£_audio_medü
(
IOHANDLE
 
hfûe
, 
size
, 
MP3FILE
 *
pmp3
) {

463 
codec
;

465 if(
size
 < 18)

466  
TRUE
;

468 if(!
	`wma_fûe_ªad_sh‹t
(
hfûe
,&
codec
)) {

469  
FALSE
;

472 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"WMA Code¯Ty≥: %02X\n",
codec
);

474 
codec
) {

476 
	`MAYBEFREE
(
pmp3
->
code˘y≥
);

477 
pmp3
->
code˘y≥
 = 
	`°rdup
("wmav");

480 
	`MAYBEFREE
(
pmp3
->
code˘y≥
);

481 
	`MAYBEFREE
(
pmp3
->
ty≥
);

482 
pmp3
->
code˘y≥
 = 
	`°rdup
("wma");

483 
pmp3
->
ty≥
 = 
	`°rdup
("wmap");

486 
	`MAYBEFREE
(
pmp3
->
code˘y≥
);

487 
pmp3
->
code˘y≥
 = 
	`°rdup
("wmal");

492 
	`io_£ços
(
hfûe
,2,
SEEK_CUR
);

493 if(!
	`wma_fûe_ªad_öt
(
hfûe
,(*)&
pmp3
->
ßm∂î©e
))

494  
FALSE
;

496  
TRUE
;

497 
	}
}

507 
	$wma_∑r£_exãnded_c⁄ã¡_des¸ùti⁄
(
IOHANDLE
 
hfûe
,
size
, 
MP3FILE
 *
pmp3
, 
exãnded
) {

508 
des¸ùt‹_cou¡
;

509 
ödex
;

510 
des¸ùt‹_«me_Àn
;

511 *
des¸ùt‹_«me
;

512 
des¸ùt‹_vÆue_ty≥
;

513 
des¸ùt‹_vÆue_öt
;

514 
des¸ùt‹_vÆue_Àn
;

515 
œnguage_li°_ödex
;

516 
°ªam_numbî
;

518 *
des¸ùt‹_byã_vÆue
=
NULL
;

519 
des¸ùt‹_öt_vÆue
;

520 
des¸ùt‹_Œ_vÆue
;

521 
des¸ùt‹_sh‹t_vÆue
;

522 
Áû
=0;

523 
åack
, 
åacknumbî
;

524 
numbuff
[40];

525 *
tmp
;

526 *
±r
;

529 
åack
 = 
åacknumbî
 = 0;

531 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"ReadingÉxtended content description object\n");

533 if(!
	`wma_fûe_ªad_sh‹t
(
hfûe
, &
des¸ùt‹_cou¡
))

534  
FALSE
;

536 
ödex
 = 0; index < 
des¸ùt‹_cou¡
; index++) {

537 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Ródög des¸ %d o‡%d\n",
ödex
,
des¸ùt‹_cou¡
);

538 if(!
exãnded
) {

539 if(!
	`wma_fûe_ªad_sh‹t
(
hfûe
,&
des¸ùt‹_«me_Àn
)Ë 
FALSE
;

540 if(!
	`wma_fûe_ªad_utf16
(
hfûe
,
des¸ùt‹_«me_Àn
,&
des¸ùt‹_«me
))

541  
FALSE
;

542 if(!
	`wma_fûe_ªad_sh‹t
(
hfûe
,&
des¸ùt‹_vÆue_ty≥
)) {

543 
	`‰ì
(
des¸ùt‹_«me
);

544  
FALSE
;

546 if(!
	`wma_fûe_ªad_sh‹t
(
hfûe
,&
des¸ùt‹_vÆue_Àn
)) {

547 
	`‰ì
(
des¸ùt‹_«me
);

548  
FALSE
;

550 
des¸ùt‹_vÆue_öt
 = 
des¸ùt‹_vÆue_Àn
;

552 if(!
	`wma_fûe_ªad_sh‹t
(
hfûe
,&
œnguage_li°_ödex
)Ë 
FALSE
;

553 if(!
	`wma_fûe_ªad_sh‹t
(
hfûe
,&
°ªam_numbî
)Ë 
FALSE
;

554 if(!
	`wma_fûe_ªad_sh‹t
(
hfûe
,&
des¸ùt‹_«me_Àn
)Ë 
FALSE
;

555 if(!
	`wma_fûe_ªad_sh‹t
(
hfûe
,&
des¸ùt‹_vÆue_ty≥
)Ë 
FALSE
;

556 if(!
	`wma_fûe_ªad_öt
(
hfûe
,&
des¸ùt‹_vÆue_öt
)Ë 
FALSE
;

557 if(!
	`wma_fûe_ªad_utf16
(
hfûe
,
des¸ùt‹_«me_Àn
,&
des¸ùt‹_«me
))

558  
FALSE
;

561 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Found des¸ùt‹: %s\n", 
des¸ùt‹_«me
);

564 
des¸ùt‹_vÆue_ty≥
) {

566 if(!
	`wma_fûe_ªad_utf16
(
hfûe
,
des¸ùt‹_vÆue_öt
,

567 &
des¸ùt‹_byã_vÆue
)) {

568 
Áû
=1;

570 
des¸ùt‹_öt_vÆue
=
	`©oi
(
des¸ùt‹_byã_vÆue
);

571 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Ty≥: såög, vÆue: %s\n",
des¸ùt‹_byã_vÆue
);

574 if(
des¸ùt‹_vÆue_öt
 > 4096) {

575 
	`io_£ços
(
hfûe
,(
uöt64_t
)
des¸ùt‹_vÆue_öt
,
SEEK_CUR
);

576 
des¸ùt‹_byã_vÆue
 = 
NULL
;

578 
±r
 = (*)
des¸ùt‹_byã_vÆue
;

579 if(!
	`wma_fûe_ªad_byãs
(
hfûe
,
des¸ùt‹_vÆue_öt
,

580 &
±r
)){

581 
Áû
=1;

584 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Type: bytes\n");

588 if(!
	`wma_fûe_ªad_öt
(
hfûe
,&
des¸ùt‹_öt_vÆue
)Ë
Áû
=1;

589 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Ty≥: i¡, vÆue: %d\n",
des¸ùt‹_öt_vÆue
);

590 
	`¢¥ötf
(
numbuff
,“umbuff)-1,"%d",
des¸ùt‹_öt_vÆue
);

591 
des¸ùt‹_byã_vÆue
 = 
	`°rdup
(
numbuff
);

594 if(!
	`wma_fûe_ªad_Œ
(
hfûe
,&
des¸ùt‹_Œ_vÆue
)Ë
Áû
=1;

595 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Ty≥:Ül, vÆue: %Œd\n",
des¸ùt‹_Œ_vÆue
);

596 
	`¢¥ötf
(
numbuff
,“umbuff)-1,"%Œd",
des¸ùt‹_Œ_vÆue
);

597 
des¸ùt‹_byã_vÆue
 = 
	`°rdup
(
numbuff
);

600 if(!
	`wma_fûe_ªad_sh‹t
(
hfûe
,&
des¸ùt‹_sh‹t_vÆue
)Ë
Áû
=1;

601 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"ty≥: sh‹t, vÆuê%d\n",
des¸ùt‹_sh‹t_vÆue
);

602 
	`¢¥ötf
(
numbuff
,“umbuff)-1,"%d",
des¸ùt‹_sh‹t_vÆue
);

603 
des¸ùt‹_byã_vÆue
 = 
	`°rdup
(
numbuff
);

606 
	`io_£ços
(
hfûe
,16,
SEEK_CUR
);

607 if(
des¸ùt‹_«me
)

608 
	`‰ì
(
des¸ùt‹_«me
);

609 
des¸ùt‹_«me
 = 
	`°rdup
("");

610 
des¸ùt‹_byã_vÆue
 = 
NULL
;

613 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"Badly formatted wma file\n");

614 if(
des¸ùt‹_«me
)

615 
	`‰ì
(
des¸ùt‹_«me
);

616 if(
des¸ùt‹_byã_vÆue
)

617 
	`‰ì
(
des¸ùt‹_byã_vÆue
);

618  
FALSE
;

621 if(
Áû
) {

622 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Read fail on file\n");

623 
	`‰ì
(
des¸ùt‹_«me
);

624  
FALSE
;

628 if(
	`°rˇ£cmp
(
des¸ùt‹_«me
,"wm/genre")==0) {

629 
	`MAYBEFREE
(
pmp3
->
gíª
);

630 
pmp3
->
gíª
 = 
des¸ùt‹_byã_vÆue
;

631 
des¸ùt‹_byã_vÆue
 = 
NULL
;

632 } if(
	`°rˇ£cmp
(
des¸ùt‹_«me
,"wm/albumtitle")==0) {

633 
	`MAYBEFREE
(
pmp3
->
Æbum
);

634 
pmp3
->
Æbum
 = 
des¸ùt‹_byã_vÆue
;

635 
des¸ùt‹_byã_vÆue
 = 
NULL
;

636 } if(
	`°rˇ£cmp
(
des¸ùt‹_«me
,"wm/track")==0) {

637 
åack
 = 
des¸ùt‹_öt_vÆue
 + 1;

638 } if(
	`°rˇ£cmp
(
des¸ùt‹_«me
,"wm/shareduserrating")==0) {

640 
pmp3
->
øtög
 = 
des¸ùt‹_öt_vÆue
;

641 if(
pmp3
->
øtög
 == 99) {

642 
pmp3
->
øtög
 = 100;

644 if(
pmp3
->
øtög
) {

645 
pmp3
->
øtög
 = ((pmp3->rating / 25) + 1) * 20;

648 } if(
	`°rˇ£cmp
(
des¸ùt‹_«me
,"wm/tracknumber")==0) {

649 
åacknumbî
 = 
des¸ùt‹_öt_vÆue
;

650 } if(
	`°rˇ£cmp
(
des¸ùt‹_«me
,"wm/year")==0) {

651 
pmp3
->
yór
 = 
	`©oi
(
des¸ùt‹_byã_vÆue
);

652 } if(
	`°rˇ£cmp
(
des¸ùt‹_«me
,"wm/composer")==0) {

654 if(!
pmp3
->
compo£r
) {

655 
pmp3
->
compo£r
 = 
des¸ùt‹_byã_vÆue
;

656 
des¸ùt‹_byã_vÆue
 = 
NULL
;

658 
size
 = ()
	`°æí
(
pmp3
->
compo£r
) + 1 +

659 ()
	`°æí
(
des¸ùt‹_byã_vÆue
) + 1;

660 
tmp
 = 
	`mÆloc
(
size
);

661 if(!
tmp
)

662 
	`DPRINTF
(
E_FATAL
,
L_SCAN
,"malloc: wma_ext_content_descr\n");

663 
	`•rötf
(
tmp
,"%s/%s",
pmp3
->
compo£r
,
des¸ùt‹_byã_vÆue
);

664 
	`‰ì
(
pmp3
->
compo£r
);

665 
pmp3
->
compo£r
=
tmp
;

667 } if(
	`°rˇ£cmp
(
des¸ùt‹_«me
,"wm/albumartist")==0) {

669 if(!
pmp3
->
Æbum_¨ti°
) {

670 
pmp3
->
Æbum_¨ti°
 = 
des¸ùt‹_byã_vÆue
;

671 
des¸ùt‹_byã_vÆue
 = 
NULL
;

673 } if(
	`°rˇ£cmp
(
des¸ùt‹_«me
,"author") == 0) {

675 if(!
pmp3
->
¨ti°
) {

676 
pmp3
->
¨ti°
 = 
des¸ùt‹_byã_vÆue
;

677 
des¸ùt‹_byã_vÆue
 = 
NULL
;

679 } if(
	`°rˇ£cmp
(
des¸ùt‹_«me
,"wm/contengroupdescription")==0) {

680 
	`MAYBEFREE
(
pmp3
->
groupög
);

681 
pmp3
->
groupög
 = 
des¸ùt‹_byã_vÆue
;

682 
des¸ùt‹_byã_vÆue
 = 
NULL
;

683 } if(
	`°rˇ£cmp
(
des¸ùt‹_«me
,"comment")==0) {

684 
	`MAYBEFREE
(
pmp3
->
commít
);

685 
pmp3
->
commít
 = 
des¸ùt‹_byã_vÆue
;

686 
des¸ùt‹_byã_vÆue
 = 
NULL
;

690 if(
des¸ùt‹_byã_vÆue
) {

691 
	`‰ì
(
des¸ùt‹_byã_vÆue
);

692 
des¸ùt‹_byã_vÆue
 = 
NULL
;

695 
	`‰ì
(
des¸ùt‹_«me
);

698 if(
åacknumbî
) {

699 
pmp3
->
åack
 = 
åacknumbî
;

700 } if(
åack
) {

701 
pmp3
->
åack
 =Årack;

704 if((!
pmp3
->
¨ti°
Ë&& (pmp3->
‹che°ø
)) {

705 
pmp3
->
¨ti°
 = 
	`°rdup
’mp3->
‹che°ø
);

708 if((
pmp3
->
¨ti°
Ë&& (!pmp3->
‹che°ø
)) {

709 
pmp3
->
‹che°ø
 = 
	`°rdup
’mp3->
¨ti°
);

712  
TRUE
;

713 
	}
}

724 
	$wma_∑r£_c⁄ã¡_des¸ùti⁄
(
IOHANDLE
 
hfûe
,
size
, 
MP3FILE
 *
pmp3
) {

725 
sizes
[5];

726 
ödex
;

727 *
utf8
;

729 if(
size
 < 10)

730  
FALSE
;

732 
ödex
=0; index < 5; index++) {

733 if(!
	`wma_fûe_ªad_sh‹t
(
hfûe
,&
sizes
[
ödex
]))

734  
FALSE
;

737 
ödex
=0;index<5;index++) {

738 if(
sizes
[
ödex
]) {

739 if(!
	`wma_fûe_ªad_utf16
(
hfûe
,
sizes
[
ödex
],&
utf8
))

740  
FALSE
;

742 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"GŸ iãm o‡Àngth %d: %s\n",
sizes
[
ödex
],
utf8
);

744 
ödex
) {

746 if(
pmp3
->
tôÀ
)

747 
	`‰ì
(
pmp3
->
tôÀ
);

748 
pmp3
->
tôÀ
 = 
utf8
;

751 if(
pmp3
->
¨ti°
)

752 
	`‰ì
(
pmp3
->
¨ti°
);

753 
pmp3
->
¨ti°
 = 
utf8
;

756 
	`‰ì
(
utf8
);

759 if(
pmp3
->
commít
)

760 
	`‰ì
(
pmp3
->
commít
);

761 
pmp3
->
commít
 = 
utf8
;

764 
	`‰ì
(
utf8
);

767 
	`DPRINTF
(
E_FATAL
,
L_SCAN
,"This isÇot my beautiful wife.\n");

773  
TRUE
;

774 
	}
}

784 
	$wma_∑r£_fûe_¥›îtõs
(
IOHANDLE
 
hfûe
,
size
, 
MP3FILE
 *
pmp3
) {

785 
∂ay_duøti⁄
;

786 
£nd_duøti⁄
;

787 
¥îﬁl
;

789 
max_bôøã
;

794 
	`io_£ços
(
hfûe
,40,
SEEK_CUR
);

796 if(!
	`wma_fûe_ªad_Œ
(
hfûe
, &
∂ay_duøti⁄
))

797  
FALSE
;

799 if(!
	`wma_fûe_ªad_Œ
(
hfûe
, &
£nd_duøti⁄
))

800  
FALSE
;

802 if(!
	`wma_fûe_ªad_Œ
(
hfûe
, &
¥îﬁl
))

803  
FALSE
;

805 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"play_duration: %lld, "

807 
∂ay_duøti⁄
, 
£nd_duøti⁄
, 
¥îﬁl
);

813 
pmp3
->
s⁄g_Àngth
 = ()((
∂ay_duøti⁄
 / 10000Ë- 
¥îﬁl
);

819 
	`io_£ços
(
hfûe
,12,
SEEK_CUR
);

820 if(!
	`wma_fûe_ªad_öt
(
hfûe
,&
max_bôøã
))

821  
FALSE
;

823 
pmp3
->
bôøã
 = 
max_bôøã
/1000;

825  
TRUE
;

826 
	}
}

843 *
	$wma_utf16toutf8
(*
utf16
, 
Àn
) {

844 *
utf8
;

845 *
§c
=
utf16
;

846 *
d°
;

847 
w1
, 
w2
;

848 
byãs
;

850 if(!
Àn
)

851  
NULL
;

853 
utf8
=(*)
	`mÆloc
(
Àn
*2 + 1);

854 if(!
utf8
)

855  
NULL
;

857 
	`mem£t
(
utf8
,0x0,
Àn
*2 + 1);

858 
d°
=
utf8
;

860 (
§c
+2Ë<
utf16
+
Àn
) {

861 
w1
=
§c
[1] << 8 | src[0];

862 
§c
 += 2;

863 if((
w1
 & 0xFC00) == 0xD800) {

864 if(
§c
+2 > 
utf16
+
Àn
) {

865 
	`DPRINTF
(
E_INF
,
L_SCAN
,"Invalid utf-16 in file\n");

866 
	`‰ì
(
utf8
);

867  
NULL
;

869 
w2
 = 
§c
[3] << 8 | src[2];

870 if((
w2
 & 0xFC00) != 0xDC00) {

871 
	`DPRINTF
(
E_INF
,
L_SCAN
,"Invalid utf-16 in file\n");

872 
	`‰ì
(
utf8
);

873  
NULL
;

877 
w1
 = w1 & 0x03FF;

878 
w1
 = w1 << 10;

879 
w1
 = w1 | (
w2
 & 0x03FF);

882 
w1
 += 0x10000;

886 i‡(
w1
 < 0x80) {

887 *
d°
++ = 
w1
;

888 
byãs
=0;

889 } i‡(
w1
 < 0x800) {

890 *
d°
++ = 0xC0 | (
w1
 >> 6);

891 
byãs
=1;

892 } i‡(
w1
 < 0x10000) {

893 *
d°
++ = 0xE0 | (
w1
 >> 12);

894 
byãs
=2;

896 *
d°
++ = 0xF0 | (
w1
 >> 18);

897 
byãs
=3;

900 
byãs
) {

901 *
d°
++ = 0x80 | ((
w1
 >> (6*(
byãs
-1))) & 0x3f);

902 
byãs
--;

906  
utf8
;

907 
	}
}

914 
WMA_GUID
 *
	$wma_föd_guid
(*
guid
) {

915 
WMA_GUID
 *
pguid
 = 
wma_guidli°
;

917 (
pguid
->
«me
Ë&& (
	`memcmp
(
guid
,pguid->
vÆue
,16) != 0)) {

918 
pguid
++;

921 if(!
pguid
->
«me
)

922  
NULL
;

924  
pguid
;

925 
	}
}

932 
	$wma_c⁄vît_sh‹t
(*
§c
) {

933  
§c
[1] << 8 |

934 
§c
[0];

935 
	}
}

942 
	$wma_c⁄vît_öt
(*
§c
) {

943  
§c
[3] << 24 |

944 
§c
[2] << 16 |

945 
§c
[1] << 8 |

946 
§c
[0];

947 
	}
}

955 
	$wma_c⁄vît_Œ
(*
§c
) {

956 
tmp_hi
, 
tmp_lo
;

957 
ªtvÆ
;

959 
tmp_hi
 = 
§c
[7] << 24 |

960 
§c
[6] << 16 |

961 
§c
[5] << 8 |

962 
§c
[4];

964 
tmp_lo
 = 
§c
[3] << 24 |

965 
§c
[2] << 16 |

966 
§c
[1] << 8 |

967 
§c
[0];

969 
ªtvÆ
 = 
tmp_hi
;

970 
ªtvÆ
 = (ªtvÆ << 32Ë| 
tmp_lo
;

972  
ªtvÆ
;

973 
	}
}

981 
	$sˇn_gë_wmaöfo
(*
fûíame
, 
MP3FILE
 *
pmp3
) {

982 
IOHANDLE
 
hfûe
;

983 
WMA_HEADER
 
hdr
;

984 
WMA_SUBHEADER
 
subhdr
;

985 
WMA_GUID
 *
pguid
;

986 
uöt64_t
 
off£t
=0;

987 
uöt32_t
 
Àn
;

988 
ôem
;

989 
ªs
=
TRUE
;

990 
í¸y±ed
 = 0;

992 if(!(
hfûe
 = 
	`io_√w
())) {

993 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"Can't createÇew file handle\n");

994  
FALSE
;

997 if(!
	`io_›í
(
hfûe
,"fûe://%U",
fûíame
)) {

998 
	`DPRINTF
(
E_INF
,
L_SCAN
,"Eº‹ o≥nög WMA fûê(%s): %s\n",
fûíame
,

999 
	`io_îr°r
(
hfûe
));

1000 
	`io_di•o£
(
hfûe
);

1001  
FALSE
;

1004 
Àn
 = (
hdr
);

1005 if(!
	`io_ªad
(
hfûe
,(*)&
hdr
,&
Àn
) || (len != (hdr))) {

1006 
	`DPRINTF
(
E_INF
,
L_SCAN
,"Eº‹Ñódög from %s: %s\n",
fûíame
,

1007 
	`°ªº‹
(
î∫o
));

1008 
	`io_di•o£
(
hfûe
);

1009  
FALSE
;

1012 
pguid
 = 
	`wma_föd_guid
(
hdr
.
obje˘id
);

1013 if(!
pguid
) {

1014 
	`DPRINTF
(
E_INF
,
L_SCAN
,"CouldÇŸ föd hódî i¿%s\n",
fûíame
);

1015 
	`io_di•o£
(
hfûe
);

1016  
FALSE
;

1019 
hdr
.
obje˘s
=
	`wma_c⁄vît_öt
((*)&hdr.objects);

1020 
hdr
.
size
=
	`wma_c⁄vît_Œ
((*)&hdr.size);

1022 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Found WMA hódî: %s\n",
pguid
->
«me
);

1023 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Hódî size: %Œd\n",
hdr
.
size
);

1024 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Hódî obje˘s: %d\n",
hdr
.
obje˘s
);

1026 
off£t
 = (
hdr
);

1032 
ôem
=0; iãm < (Ë
hdr
.
obje˘s
; item++) {

1033 if(!
	`io_£ços
(
hfûe
,
off£t
,
SEEK_SET
)) {

1034 
	`DPRINTF
(
E_INF
,
L_SCAN
,"Eº‹ sìkög i¿%s\n",
fûíame
);

1035 
	`io_di•o£
(
hfûe
);

1036  
FALSE
;

1039 
Àn
 = (
subhdr
);

1040 if(!
	`io_ªad
(
hfûe
,(*)&
subhdr
,&
Àn
) || (len != (subhdr))) {

1041 
	`DPRINTF
(
E_INF
,
L_SCAN
,"Eº‹Ñódög from %s: %s\n",
fûíame
,

1042 
	`io_îr°r
(
hfûe
));

1043 
	`io_di•o£
(
hfûe
);

1044  
FALSE
;

1047 
subhdr
.
size
=
	`wma_c⁄vît_Œ
((*)&subhdr.size);

1049 
pguid
 = 
	`wma_föd_guid
(
subhdr
.
obje˘id
);

1050 if(
pguid
) {

1051 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"%ll: Found subheader: %s\n",

1052 
off£t
,
pguid
->
«me
);

1053 if(
	`°rcmp
(
pguid
->
«me
,"ASF_Content_Description_Object")==0) {

1054 
ªs
 &
	`wma_∑r£_c⁄ã¡_des¸ùti⁄
(
hfûe
,()
subhdr
.
size
,
pmp3
);

1055 } i‡(
	`°rcmp
(
pguid
->
«me
,"ASF_Extended_Content_Description_Object")==0) {

1056 
ªs
 &
	`wma_∑r£_exãnded_c⁄ã¡_des¸ùti⁄
(
hfûe
,()
subhdr
.
size
,
pmp3
,0);

1057 } i‡(
	`°rcmp
(
pguid
->
«me
,"ASF_File_Properties_Object")==0) {

1058 
ªs
 &
	`wma_∑r£_fûe_¥›îtõs
(
hfûe
,()
subhdr
.
size
,
pmp3
);

1059 } i‡(
	`°rcmp
(
pguid
->
«me
,"ASF_Audio_Media")==0) {

1060 
ªs
 &
	`wma_∑r£_audio_medü
(
hfûe
,()
subhdr
.
size
,
pmp3
);

1061 } i‡(
	`°rcmp
(
pguid
->
«me
,"ASF_Stream_Properties_Object")==0) {

1062 
ªs
 &
	`wma_∑r£_°ªam_¥›îtõs
(
hfûe
,()
subhdr
.
size
,
pmp3
);

1063 } if(
	`°rcmp
(
pguid
->
«me
,"ASF_Header_Extension_Object")==0) {

1064 
ªs
 &
	`wma_∑r£_hódî_exãnsi⁄
(
hfûe
,()
subhdr
.
size
,
pmp3
);

1065 } if(
	`°r°r
(
pguid
->
«me
,"Content_Encryption_Object")) {

1066 
í¸y±ed
=1;

1069 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Unknown subheader: %02hhx%02hhx%02hhx%02hhx-"

1072 
subhdr
.
obje˘id
[3],subhdr.objectid[2],

1073 
subhdr
.
obje˘id
[1],subhdr.objectid[0],

1074 
subhdr
.
obje˘id
[5],subhdr.objectid[4],

1075 
subhdr
.
obje˘id
[7],subhdr.objectid[6],

1076 
subhdr
.
obje˘id
[8],subhdr.objectid[9],

1077 
subhdr
.
obje˘id
[10],subhdr.objectid[11],

1078 
subhdr
.
obje˘id
[12],subhdr.objectid[13],

1079 
subhdr
.
obje˘id
[14],subhdr.objectid[15]);

1082 
off£t
 +(
uöt64_t
Ë
subhdr
.
size
;

1086 if(!
ªs
) {

1087 
	`DPRINTF
(
E_INF
,
L_SCAN
,"ErrorÑeading meta info for file %s\n",

1088 
fûíame
);

1090 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"SuccessfullyÖarsed file\n");

1093 
	`io_di•o£
(
hfûe
);

1096 if(
í¸y±ed
) {

1097 if(
pmp3
->
code˘y≥
)

1098 
	`‰ì
(
pmp3
->
code˘y≥
);

1100 
pmp3
->
code˘y≥
=
	`°rdup
("wmap");

1103  
ªs
;

1104 
	}
}

	@scan-xml.c

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 
	~<˘y≥.h
>

27 
	~<limôs.h
>

28 #ifde‡
HAVE_STDINT_H


29 
	~<°döt.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<time.h
>

38 
	~"dØpd.h
"

39 
	~"db-gíîic.h
"

40 
	~"îr.h
"

41 
	~"mp3-sˇ¬î.h
"

42 
	~"os.h
"

43 
	~"rxml.h
"

44 
	~"ªdbœck.h
"

45 
	~"utû.h
"

48 
sˇn_xml_∂ayli°
(*
fûíame
);

49 
sˇn_xml_h™dÀr
(
a˘i⁄
,* 
pu£r
,* 
öfo
);

50 
sˇn_xml_¥ómbÀ_£˘i⁄
(
a˘i⁄
,*
öfo
);

51 
sˇn_xml_åacks_£˘i⁄
(
a˘i⁄
,*
öfo
);

52 
sˇn_xml_∂ayli°s_£˘i⁄
(
a˘i⁄
,*
öfo
);

53 
sˇn_xml_add_lookup
(
ôu√s_ödex
, 
mtd_ödex
);

56 *
	gsˇn_xml_ôu√s_vîsi⁄
 = 
NULL
;

57 *
	gsˇn_xml_ôu√s_ba£_∑th
 = 
NULL
;

58 *
	gsˇn_xml_ôu√s_decoded_ba£_∑th
 = 
NULL
;

59 *
	gsˇn_xml_ªÆ_ba£_∑th
 = 
NULL
;

60 *
	gsˇn_xml_fûe
;

61 
rbåì
 *
	gsˇn_xml_db
;

63 
	#MAYBECOPY
(
a
Ëif(
mp3
.aË
pmp3
->®mp3.
	)
a

64 
	#MAYBECOPYSTRING
(
a
Ëif(
mp3
.aË{ if(
pmp3
->aË
	`‰ì
’mp3->a);Ömp3->®mp3.a; mp3.a=
NULL
; }

	)

65 
	#MAYBEFREE
(
a
Ëif(◊)Ë{ 
	`‰ì
(◊)); (a)=
NULL
; }

	)

68 *
	gsˇn_xml_åack_ègs
[] = {

90 
NULL


94 
	#SCAN_XML_T_UNKNOWN
 -1

	)

95 
	#SCAN_XML_T_NAME
 0

	)

96 
	#SCAN_XML_T_ARTIST
 1

	)

97 
	#SCAN_XML_T_ALBUM
 2

	)

98 
	#SCAN_XML_T_GENRE
 3

	)

99 
	#SCAN_XML_T_TOTALTIME
 4

	)

100 
	#SCAN_XML_T_TRACKNUMBER
 5

	)

101 
	#SCAN_XML_T_TRACKCOUNT
 6

	)

102 
	#SCAN_XML_T_YEAR
 7

	)

103 
	#SCAN_XML_T_BITRATE
 8

	)

104 
	#SCAN_XML_T_SAMPLERATE
 9

	)

105 
	#SCAN_XML_T_PLAYCOUNT
 10

	)

106 
	#SCAN_XML_T_RATING
 11

	)

107 
	#SCAN_XML_T_DISABLED
 12

	)

108 
	#SCAN_XML_T_DISCNO
 13

	)

109 
	#SCAN_XML_T_DISCCOUNT
 14

	)

110 
	#SCAN_XML_T_COMPILATION
 15

	)

111 
	#SCAN_XML_T_LOCATION
 16

	)

112 
	#SCAN_XML_T_DATE_ADDED
 17

	)

113 
	#SCAN_XML_T_COMMENTS
 18

	)

114 
	#SCAN_XML_T_COMPOSER
 19

	)

115 
	#SCAN_XML_T_ALBUM_ARTIST
 20

	)

117 #i‚de‡
TRUE


118 
	#TRUE
 1

	)

119 
	#FALSE
 0

	)

122 
	ssˇn_xml_rb_t
 {

123 
	môu√s_ödex
;

124 
	mmtd_ödex
;

125 } 
	tSCAN_XML_RB
;

134 
	$sˇn_xml_d©edecode
(*
°rög
) {

135 
tm
 
d©e_time
;

136 
time_t
 
£c⁄ds
;

138 
	`°Ωtime
(
°rög
,"%Y-%m-%dT%H:%M:%SZ",&
d©e_time
);

139 
£c⁄ds
 = 
	`timegm
(&
d©e_time
);

140  ()
£c⁄ds
;

141 
	}
}

150 
	$sˇn_xml_rb_com∑ª
(c⁄° *
∑
, c⁄° *
pb
, c⁄° *
cfg
) {

151 if(((
SCAN_XML_RB
*)
∑
)->
ôu√s_ödex
 < ((SCAN_XML_RB*)
pb
)->itunes_index)

153 if(((
SCAN_XML_RB
*)
pb
)->
ôu√s_ödex
 < ((SCAN_XML_RB*)
∑
)->itunes_index)

156 
	}
}

166 
	$sˇn_xml_is_fûe
(*
∑th
) {

167 
°©
 
sb
;

169 if(
	`os_°©
(
∑th
,&
sb
))

172 if(
sb
.
°_mode
 & 
S_IFREG
)

176 
	}
}

187 
	$sˇn_xml_å™¶©e_∑th
(*
pﬁd
, *
≤ew
) {

188 
∑th_found
=0;

189 
disˇrd
;

190 
ba£_∑th
[
PATH_MAX
];

191 
w‹kög_∑th
[
PATH_MAX
];

192 *
cuºít
;

193 *
pba£
;

194 *
±emp
;

196 if((!
pﬁd
)||(!
	`°æí
(pold)))

197  
FALSE
;

199 
cuºít
 = 
pﬁd
 + 
	`°æí
(pold);

202 if(
	`°∫cmp
(
pﬁd
,"file://localhost/",17)==0) {

204 if(
pﬁd
[18] == ':') {

206 
	`ªÆ∑th
((*)&
pﬁd
[17],
w‹kög_∑th
);

208 
	`ªÆ∑th
((*)&
pﬁd
[16],
w‹kög_∑th
);

211 if(
	`sˇn_xml_is_fûe
(
w‹kög_∑th
)) {

212 
	`°r˝y
(
≤ew
,
w‹kög_∑th
);

213  
TRUE
;

218 
±emp
 = 
pﬁd
;

219 *
±emp
) {

220 if(*
±emp
 == '/')

221 *
±emp
 = 
PATHSEP
;

223 
±emp
++;

225 
	`°r˝y
(
w‹kög_∑th
,
pﬁd
);

227 if(!
∑th_found
) {

228 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Tøn¶©ög %s, ba£ %s\n",
pﬁd
,
sˇn_xml_fûe
);

233 !
∑th_found
 && ((
cuºít
 = 
	`°ºchr
(
w‹kög_∑th
,'/')) || (current = strrchr(working_path,'\\')))) {

234 
	`ªÆ∑th
(
sˇn_xml_fûe
,
ba£_∑th
);

235 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"New ba£: %s\n",
ba£_∑th
);

237 
pba£
 = 
	`°ºchr
(
ba£_∑th
,'/');

238 if(!
pba£
Ëpba£ = 
	`°ºchr
(
ba£_∑th
,'\\');

239 if(!
pba£
Ë 
FALSE
;

241 
	`°r˝y
(
pba£
,
pﬁd
 + (
cuºít
-
w‹kög_∑th
));

242 if((
ba£_∑th
[
	`°æí
(base_path)-1] == '/') ||

243 (
ba£_∑th
[
	`°æí
(base_path)-1] == '\\')) {

244 
ba£_∑th
[
	`°æí
(base_path)-1] = '\0';

247 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Tryög %s\n",
ba£_∑th
);

248 if(
	`sˇn_xml_is_fûe
(
ba£_∑th
)) {

249 
∑th_found
=1;

250 
disˇrd
 = ()(
cuºít
 - 
w‹kög_∑th
);

251 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Found it!\n");

253 *
cuºít
='\0';

255 if(!
cuºít
)

256  
FALSE
;

259 
	`°r˝y
(
ba£_∑th
,
sˇn_xml_fûe
);

260 
pba£
 = 
	`°ºchr
(
ba£_∑th
,'/');

261 if(!
pba£
Ëpba£ = 
	`°ºchr
(
ba£_∑th
,'\\');

262 if(!
pba£
Ë 
FALSE
;

263 
	`°r˝y
(
pba£
,
pﬁd
 + 
disˇrd
);

265 if((
ba£_∑th
[
	`°æí
(base_path)-1] == '/') ||

266 (
ba£_∑th
[
	`°æí
(base_path)-1] == '\\')) {

267 
ba£_∑th
[
	`°æí
(base_path)-1] = '\0';

270 
	`ªÆ∑th
(
ba£_∑th
,
≤ew
);

272 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"M≠pög %†tÿ%s\n",
pﬁd
,
≤ew
);

273  
TRUE
;

274 
	}
}

284 
	$sˇn_xml_add_lookup
(
ôu√s_ödex
, 
mtd_ödex
) {

285 
SCAN_XML_RB
 *
≤ew
;

286 c⁄° *
vÆ
;

288 
≤ew
=(
SCAN_XML_RB
*)
	`mÆloc
((SCAN_XML_RB));

289 if(!
≤ew
)

290 
	`DPRINTF
(
E_FATAL
,
L_SCAN
,"mallocÉrror in scan_xml_add_lookup\n");

292 
≤ew
->
ôu√s_ödex
 = itunes_index;

293 
≤ew
->
mtd_ödex
 = mtd_index;

295 
vÆ
 = 
	`rb£¨ch
((c⁄° *)
≤ew
,
sˇn_xml_db
);

296 if(!
vÆ
) {

299 
	`DPRINTF
(
E_FATAL
,
L_SCAN
,"redblackÅree insertÉrror\n");

301 
	}
}

310 
	$sˇn_xml_gë_ödex
(
ôu√s_ödex
, *
mtd_ödex
) {

311 
SCAN_XML_RB
 
rb
;

312 
SCAN_XML_RB
 *
¥b
;

314 
rb
.
ôu√s_ödex
 = itunes_index;

315 
¥b
 = (
SCAN_XML_RB
*Ë
	`rbföd
((*)&
rb
,
sˇn_xml_db
);

316 if(
¥b
) {

317 *
mtd_ödex
 = 
¥b
->mtd_index;

318 
	`DPRINTF
(
E_SPAM
,
L_SCAN
,"M©chög %dÅÿ%d\n",
ôu√s_ödex
,*
mtd_ödex
);

319  
TRUE
;

322  
FALSE
;

323 
	}
}

331 
	$sˇn_xml_gë_ègödex
(*
èg
) {

332 **
±ag
 = 
sˇn_xml_åack_ègs
;

333 
ödex
=0;

335 *
±ag
 && (
	`°rˇ£cmp
(
èg
,*ptag) != 0)) {

336 
±ag
++;

337 
ödex
++;

340 if(*
±ag
)

341  
ödex
;

343  
SCAN_XML_T_UNKNOWN
;

344 
	}
}

353 *
	$sˇn_xml_uædecode
(*
°rög
, 
•a˚_as_∂us
) {

354 *
≤ew
;

355 *
§c
,*
d°
;

356 
vÆ
=0;

358 
≤ew
=(*)
	`mÆloc
(
	`°æí
(
°rög
)+1);

359 if(!
≤ew
)

360  
NULL
;

362 
§c
=
°rög
;

363 
d°
=
≤ew
;

365 *
§c
) {

366 *
§c
) {

368 if(
•a˚_as_∂us
) {

369 *
d°
++=' ';

371 *
d°
++=*
§c
;

373 
§c
++;

377 
§c
++;

378 if(*
§c
) {

379 if((*
§c
 <= '9') && (*src >='0'))

380 
vÆ
=(*
§c
 - '0');

381 if((
	`tﬁowî
(*
§c
) <= 'f')&&(tolower(*src) >= 'a'))

382 
vÆ
=10+(
	`tﬁowî
(*
§c
) - 'a');

383 
§c
++;

385 if(*
§c
) {

386 
vÆ
 *= 16;

387 if((*
§c
 <= '9') && (*src >='0'))

388 
vÆ
+=(*
§c
 - '0');

389 if((
	`tﬁowî
(*
§c
) <= 'f')&&(tolower(*src) >= 'a'))

390 
vÆ
+=(10+(
	`tﬁowî
(*
§c
) - 'a'));

391 
§c
++;

393 *
d°
++=
vÆ
;

396 *
d°
++=*
§c
++;

401 *
d°
='\0';

402  
≤ew
;

403 
	}
}

412 
	$sˇn_xml_∂ayli°
(*
fûíame
) {

413 *
w‹kög_ba£
;

414 c⁄° *
vÆ
;

415 
ªtvÆ
=
TRUE
;

416 
SCAN_XML_RB
 *
lookup_±r
;

417 
SCAN_XML_RB
 
lookup_vÆ
;

419 
RXMLHANDLE
 
xml_h™dÀ
;

421 
	`MAYBEFREE
(
sˇn_xml_ôu√s_vîsi⁄
);

422 
	`MAYBEFREE
(
sˇn_xml_ôu√s_ba£_∑th
);

423 
	`MAYBEFREE
(
sˇn_xml_ôu√s_decoded_ba£_∑th
);

424 
	`MAYBEFREE
(
sˇn_xml_ªÆ_ba£_∑th
);

426 
sˇn_xml_fûe
 = 
fûíame
;

429 if((
sˇn_xml_db
 = 
	`rböô
(
sˇn_xml_rb_com∑ª
,
NULL
)) == NULL) {

430 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"CouldÇot initializeÑed/blackÅree\n");

431  
FALSE
;

435 
w‹kög_ba£
 = 
	`°rdup
(
fûíame
);

436 if(
	`°ºchr
(
w‹kög_ba£
,'/')) {

437 *(
	`°ºchr
(
w‹kög_ba£
,'/') + 1) = '\x0';

438 
sˇn_xml_ªÆ_ba£_∑th
 = 
	`°rdup
(
w‹kög_ba£
);

440 
sˇn_xml_ªÆ_ba£_∑th
 = 
	`°rdup
("/");

442 
	`‰ì
(
w‹kög_ba£
);

444 
	`DPRINTF
(
E_SPAM
,
L_SCAN
,"P¨sög xm»fûe: %s\n",
fûíame
);

446 if(!
	`rxml_›í
(&
xml_h™dÀ
,
fûíame
,
sˇn_xml_h™dÀr
,
NULL
)) {

447 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"Error opening xml file %s: %s\n",

448 
fûíame
,
	`rxml_îr‹°rög
(
xml_h™dÀ
));

450 if(!
	`rxml_∑r£
(
xml_h™dÀ
)) {

451 
ªtvÆ
=
FALSE
;

452 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"ErrorÖarsing xml file %s: %s\n",

453 
fûíame
,
	`rxml_îr‹°rög
(
xml_h™dÀ
));

457 
	`rxml_˛o£
(
xml_h™dÀ
);

460 
vÆ
 = 
	`rblookup
(
RB_LUFIRST
,
NULL
,
sˇn_xml_db
);

461 
vÆ
) {

462 
lookup_vÆ
.
ôu√s_ödex
 = ((
SCAN_XML_RB
*)
vÆ
)->itunes_index;

463 
lookup_±r
 = (
SCAN_XML_RB
 *)
	`rbdñëe
((*)&
lookup_vÆ
,
sˇn_xml_db
);

464 if(
lookup_±r
)

465 
	`‰ì
(
lookup_±r
);

466 
vÆ
 = 
	`rblookup
(
RB_LUFIRST
,
NULL
,
sˇn_xml_db
);

469 
	`rbde°roy
(
sˇn_xml_db
);

471 
	`MAYBEFREE
(
sˇn_xml_ôu√s_vîsi⁄
);

472 
	`MAYBEFREE
(
sˇn_xml_ôu√s_ba£_∑th
);

473 
	`MAYBEFREE
(
sˇn_xml_ôu√s_decoded_ba£_∑th
);

474 
	`MAYBEFREE
(
sˇn_xml_ªÆ_ba£_∑th
);

476  
ªtvÆ
;

477 
	}
}

480 
	#XML_STATE_PREAMBLE
 0

	)

481 
	#XML_STATE_TRACKS
 1

	)

482 
	#XML_STATE_PLAYLISTS
 2

	)

483 
	#XML_STATE_ERROR
 3

	)

495 
	$sˇn_xml_h™dÀr
(
a˘i⁄
,* 
pu£r
,* 
öfo
) {

496 
°©e
;

498 if(
	`utû_mu°_exô
())

501 
a˘i⁄
) {

502 
RXML_EVT_OPEN
:

503 
°©e
 = 
XML_STATE_PREAMBLE
;

507 
	`sˇn_xml_¥ómbÀ_£˘i⁄
(
a˘i⁄
,
öfo
);

508 
	`sˇn_xml_åacks_£˘i⁄
(
a˘i⁄
,
öfo
);

509 
	`sˇn_xml_∂ayli°s_£˘i⁄
(
a˘i⁄
,
öfo
);

511 
RXML_EVT_BEGIN
:

512 
RXML_EVT_END
:

513 
RXML_EVT_TEXT
:

514 
°©e
) {

515 
XML_STATE_PREAMBLE
:

516 
°©e
=
	`sˇn_xml_¥ómbÀ_£˘i⁄
(
a˘i⁄
,
öfo
);

518 
XML_STATE_TRACKS
:

519 
°©e
=
	`sˇn_xml_åacks_£˘i⁄
(
a˘i⁄
,
öfo
);

521 
XML_STATE_PLAYLISTS
:

522 
°©e
=
	`sˇn_xml_∂ayli°s_£˘i⁄
(
a˘i⁄
,
öfo
);

530 
	}
}

532 
	#SCAN_XML_PRE_NOTHING
 0

	)

533 
	#SCAN_XML_PRE_VERSION
 1

	)

534 
	#SCAN_XML_PRE_PATH
 2

	)

535 
	#SCAN_XML_PRE_TRACKS
 3

	)

536 
	#SCAN_XML_PRE_PLAYLISTS
 4

	)

544 
	$sˇn_xml_¥ómbÀ_£˘i⁄
(
a˘i⁄
, *
öfo
) {

545 
ex≥˘ög_√xt
;

546 
d⁄e
;

548 
a˘i⁄
) {

549 
RXML_EVT_OPEN
:

550 
ex≥˘ög_√xt
=0;

551 
d⁄e
=0;

554 
RXML_EVT_END
:

555 if(
ex≥˘ög_√xt
 =
SCAN_XML_PRE_TRACKS
) {

556 
ex≥˘ög_√xt
=0;

557 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"ScanningÅracks\n");

558  
XML_STATE_TRACKS
;

560 if(
ex≥˘ög_√xt
 =
SCAN_XML_PRE_PLAYLISTS
) {

561 
ex≥˘ög_√xt
=0;

562 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"ScanningÖlaylists\n");

563  
XML_STATE_PLAYLISTS
;

567 
RXML_EVT_TEXT
:

568 if(!
ex≥˘ög_√xt
) {

569 if(
	`°rcmp
(
öfo
,"Application Version") == 0) {

570 
ex≥˘ög_√xt
 = 
SCAN_XML_PRE_VERSION
;

571 } i‡(
	`°rcmp
(
öfo
,"Music Folder") == 0) {

572 
ex≥˘ög_√xt
 = 
SCAN_XML_PRE_PATH
;

573 } i‡(
	`°rcmp
(
öfo
,"Tracks") == 0) {

574 
ex≥˘ög_√xt
 = 
SCAN_XML_PRE_TRACKS
;

575 } i‡(
	`°rcmp
(
öfo
,"Playlists") == 0) {

576 
ex≥˘ög_√xt
 = 
SCAN_XML_PRE_PLAYLISTS
;

580 
ex≥˘ög_√xt
) {

581 
SCAN_XML_PRE_VERSION
:

582 if(!
sˇn_xml_ôu√s_vîsi⁄
) {

583 
sˇn_xml_ôu√s_vîsi⁄
=
	`°rdup
(
öfo
);

584 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"iTu√†Vîsi⁄: %s\n",
öfo
);

587 
SCAN_XML_PRE_PATH
:

588 if(!
sˇn_xml_ôu√s_ba£_∑th
) {

589 
sˇn_xml_ôu√s_ba£_∑th
=
	`°rdup
(
öfo
);

590 
sˇn_xml_ôu√s_decoded_ba£_∑th
=
	`sˇn_xml_uædecode
(
öfo
,0);

591 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"iTu√†ba£Ö©h: %s\n",
öfo
);

597 
ex≥˘ög_√xt
=0;

605  
XML_STATE_PREAMBLE
;

606 
	}
}

609 
	#XML_TRACK_ST_INITIAL
 0

	)

610 
	#XML_TRACK_ST_MAIN_DICT
 1

	)

611 
	#XML_TRACK_ST_EXPECTING_TRACK_ID
 2

	)

612 
	#XML_TRACK_ST_EXPECTING_TRACK_DICT
 3

	)

613 
	#XML_TRACK_ST_TRACK_INFO
 4

	)

614 
	#XML_TRACK_ST_TRACK_DATA
 5

	)

622 
	#MAYBESETSTATE_TR
(
a
,
b
,
c
Ë{ if((
a˘i⁄
==(a)) && \

623 (
	`°rcmp
(
öfo
,(
b
)) == 0)) { \

624 
°©e
 = (
c
); \

625  
XML_STATE_TRACKS
; \

626 }}

	)

628 
	$sˇn_xml_åacks_£˘i⁄
(
a˘i⁄
, *
öfo
) {

629 
°©e
;

630 
cuºít_åack_id
;

631 
cuºít_fõld
;

632 
is_°ªamög
;

633 
MP3FILE
 
mp3
;

634 *
s⁄g_∑th
=
NULL
;

635 
ªÆ_∑th
[
PATH_MAX
];

636 
MP3FILE
 *
pmp3
;

637 
added_id
;

639 if(
a˘i⁄
 =
RXML_EVT_OPEN
) {

640 
°©e
 = 
XML_TRACK_ST_INITIAL
;

641 
	`mem£t
((*)&
mp3
,0,(
MP3FILE
));

642 
s⁄g_∑th
 = 
NULL
;

647 
°©e
) {

648 
XML_TRACK_ST_INITIAL
:

650 
	`MAYBESETSTATE_TR
(
RXML_EVT_BEGIN
,"di˘",
XML_TRACK_ST_MAIN_DICT
);

651  
XML_STATE_ERROR
;

654 
XML_TRACK_ST_MAIN_DICT
:

656 
	`MAYBESETSTATE_TR
(
RXML_EVT_BEGIN
,"key",
XML_TRACK_ST_EXPECTING_TRACK_ID
);

657 i‡((
a˘i⁄
 =
RXML_EVT_END
Ë&& (
	`°rˇ£cmp
(
öfo
,"dict") == 0)) {

658  
XML_STATE_PREAMBLE
;

660  
XML_STATE_ERROR
;

663 
XML_TRACK_ST_EXPECTING_TRACK_ID
:

665 
	`MAYBESETSTATE_TR
(
RXML_EVT_BEGIN
,"key",
XML_TRACK_ST_EXPECTING_TRACK_ID
);

666 
	`MAYBESETSTATE_TR
(
RXML_EVT_END
,"key",
XML_TRACK_ST_EXPECTING_TRACK_DICT
);

667 i‡(
a˘i⁄
 =
RXML_EVT_TEXT
) {

668 
cuºít_åack_id
 = 
	`©oi
(
öfo
);

669 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Sˇ¬ög iTu√†id #%d\n",
cuºít_åack_id
);

671  
XML_STATE_ERROR
;

675 
XML_TRACK_ST_EXPECTING_TRACK_DICT
:

677 
	`MAYBESETSTATE_TR
(
RXML_EVT_BEGIN
,"di˘",
XML_TRACK_ST_TRACK_INFO
);

678  
XML_STATE_ERROR
;

681 
XML_TRACK_ST_TRACK_INFO
:

683 
	`MAYBESETSTATE_TR
(
RXML_EVT_BEGIN
,"key",
XML_TRACK_ST_TRACK_INFO
);

684 
	`MAYBESETSTATE_TR
(
RXML_EVT_END
,"key",
XML_TRACK_ST_TRACK_DATA
);

685 if(
a˘i⁄
 =
RXML_EVT_TEXT
) {

686 
cuºít_fõld
=
	`sˇn_xml_gë_ègödex
(
öfo
);

687 if(
cuºít_fõld
 =
SCAN_XML_T_DISABLED
) {

688 
mp3
.
dißbÀd
 = 1;

689 } if(
cuºít_fõld
 =
SCAN_XML_T_COMPILATION
) {

690 
mp3
.
compû©i⁄
 = 1;

692 } if((
a˘i⁄
 =
RXML_EVT_END
Ë&& (
	`°rcmp
(
öfo
,"dict")==0)) {

693 
°©e
 = 
XML_TRACK_ST_MAIN_DICT
;

695 
is_°ªamög
 = 0;

696 if((
s⁄g_∑th
Ë&& 
	`°∫ˇ£cmp
(song_path,"http://",7) == 0)

697 
is_°ªamög
 = 1;

699 if((!
is_°ªamög
)&&
	`sˇn_xml_å™¶©e_∑th
(
s⁄g_∑th
,
ªÆ_∑th
)) {

701 
pmp3
=
	`db_„tch_∑th
(
NULL
,
ªÆ_∑th
,0);

702 if(!
pmp3
) {

704 
	`sˇn_fûíame
(
ªÆ_∑th
,
SCAN_TEST_COMPDIR
,
NULL
,NULL);

705 
pmp3
=
	`db_„tch_∑th
(
NULL
,
ªÆ_∑th
,0);

707 if(
pmp3
) {

711 
	`MAYBECOPYSTRING
(
tôÀ
);

712 
	`MAYBECOPYSTRING
(
¨ti°
);

713 
	`MAYBECOPYSTRING
(
Æbum
);

714 
	`MAYBECOPYSTRING
(
gíª
);

715 
	`MAYBECOPYSTRING
(
commít
);

716 
	`MAYBECOPYSTRING
(
compo£r
);

717 
	`MAYBECOPY
(
s⁄g_Àngth
);

718 
	`MAYBECOPY
(
åack
);

719 
	`MAYBECOPY
(
tŸÆ_åacks
);

720 
	`MAYBECOPY
(
yór
);

721 
	`MAYBECOPY
(
bôøã
);

722 
	`MAYBECOPY
(
ßm∂î©e
);

723 
	`MAYBECOPY
(
∂ay_cou¡
);

724 
	`MAYBECOPY
(
øtög
);

725 
	`MAYBECOPY
(
disc
);

726 
	`MAYBECOPY
(
tŸÆ_discs
);

727 
	`MAYBECOPY
(
time_added
);

728 
	`MAYBECOPY
(
dißbÀd
);

729 
	`MAYBECOPYSTRING
(
Æbum_¨ti°
);

732 
	`sˇn_xml_add_lookup
(
cuºít_åack_id
,
pmp3
->
id
);

734 
	`make_composôe_ègs
(
pmp3
);

735 
	`db_add
(
NULL
,
pmp3
,NULL);

736 
	`db_di•o£_ôem
(
pmp3
);

738 } if(
is_°ªamög
) {

740 
pmp3
=
	`db_„tch_∑th
(
NULL
,
sˇn_xml_fûe
,
cuºít_åack_id
);

741 if(!
pmp3
) {

743 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Addög %s\n",
s⁄g_∑th
);

744 
pmp3
 = 
	`ˇŒoc
((
MP3FILE
),1);

746 if(!
pmp3
)

747 
	`DPRINTF
(
E_FATAL
,
L_SCAN
,

750 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"upd©ög %s\n",
s⁄g_∑th
);

752 
pmp3
->
uæ
 = 
	`°rdup
(
s⁄g_∑th
);

753 
pmp3
->
ty≥
 = 
	`°rdup
("pls");

754 
pmp3
->
des¸ùti⁄
 = 
	`°rdup
("Playlist URL");

755 
pmp3
->
d©a_köd
 = 1;

756 
pmp3
->
ôem_köd
 = 2;

758 
pmp3
->
∑th
 = 
	`°rdup
(
sˇn_xml_fûe
);

759 
pmp3
->
ödex
 = 
cuºít_åack_id
;

761 
	`MAYBECOPYSTRING
(
tôÀ
);

762 
	`MAYBECOPYSTRING
(
¨ti°
);

763 
	`MAYBECOPYSTRING
(
Æbum
);

764 
	`MAYBECOPYSTRING
(
gíª
);

765 
	`MAYBECOPYSTRING
(
commít
);

766 
	`MAYBECOPY
(
bôøã
);

767 
	`MAYBECOPY
(
ßm∂î©e
);

768 
	`MAYBECOPY
(
∂ay_cou¡
);

769 
	`MAYBECOPY
(
øtög
);

770 
	`MAYBECOPY
(
time_added
);

771 
	`MAYBECOPY
(
dißbÀd
);

772 
	`MAYBECOPYSTRING
(
Æbum_¨ti°
);

774 
	`make_composôe_ègs
(
pmp3
);

775 if(
	`db_add
(
NULL
,
pmp3
,&
added_id
Ë=
DB_E_SUCCESS
) {

776 
	`sˇn_xml_add_lookup
(
cuºít_åack_id
,
added_id
);

777 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Added %s\n",
s⁄g_∑th
);

779 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Eº‹áddög %s\n",
s⁄g_∑th
);

782 
	`db_di•o£_ôem
(
pmp3
);

786 
	`MAYBEFREE
(
mp3
.
tôÀ
);

787 
	`MAYBEFREE
(
mp3
.
¨ti°
);

788 
	`MAYBEFREE
(
mp3
.
Æbum
);

789 
	`MAYBEFREE
(
mp3
.
gíª
);

790 
	`MAYBEFREE
(
mp3
.
commít
);

791 
	`MAYBEFREE
(
mp3
.
Æbum_¨ti°
);

792 
	`MAYBEFREE
(
s⁄g_∑th
);

794 
	`mem£t
((*)&
mp3
,0,(
MP3FILE
));

796  
XML_STATE_ERROR
;

800 
XML_TRACK_ST_TRACK_DATA
:

801 if(
a˘i⁄
 =
RXML_EVT_BEGIN
) {

803 } if(
a˘i⁄
 =
RXML_EVT_TEXT
) {

804 if(
cuºít_fõld
 =
SCAN_XML_T_NAME
) {

805 
mp3
.
tôÀ
 = 
	`°rdup
(
öfo
);

806 } if(
cuºít_fõld
 =
SCAN_XML_T_ARTIST
) {

807 
mp3
.
¨ti°
 = 
	`°rdup
(
öfo
);

808 } if(
cuºít_fõld
 =
SCAN_XML_T_ALBUM
) {

809 
mp3
.
Æbum
 = 
	`°rdup
(
öfo
);

810 } if(
cuºít_fõld
 =
SCAN_XML_T_GENRE
) {

811 
mp3
.
gíª
 = 
	`°rdup
(
öfo
);

812 } if(
cuºít_fõld
 =
SCAN_XML_T_TOTALTIME
) {

813 
mp3
.
s⁄g_Àngth
 = 
	`©oi
(
öfo
);

814 } if(
cuºít_fõld
 =
SCAN_XML_T_TRACKNUMBER
) {

815 
mp3
.
åack
 = 
	`©oi
(
öfo
);

816 } if(
cuºít_fõld
 =
SCAN_XML_T_TRACKCOUNT
) {

817 
mp3
.
tŸÆ_åacks
 = 
	`©oi
(
öfo
);

818 } if(
cuºít_fõld
 =
SCAN_XML_T_YEAR
) {

819 
mp3
.
yór
 = 
	`©oi
(
öfo
);

820 } if(
cuºít_fõld
 =
SCAN_XML_T_BITRATE
) {

821 
mp3
.
bôøã
 = 
	`©oi
(
öfo
);

822 } if(
cuºít_fõld
 =
SCAN_XML_T_SAMPLERATE
) {

823 
mp3
.
ßm∂î©e
 = 
	`©oi
(
öfo
);

824 } if(
cuºít_fõld
 =
SCAN_XML_T_PLAYCOUNT
) {

825 
mp3
.
∂ay_cou¡
 = 
	`©oi
(
öfo
);

826 } if(
cuºít_fõld
 =
SCAN_XML_T_RATING
) {

827 
mp3
.
øtög
 = 
	`©oi
(
öfo
);

828 } if(
cuºít_fõld
 =
SCAN_XML_T_DISCNO
) {

829 
mp3
.
disc
 = 
	`©oi
(
öfo
);

830 } if(
cuºít_fõld
 =
SCAN_XML_T_DISCCOUNT
) {

831 
mp3
.
tŸÆ_discs
 = 
	`©oi
(
öfo
);

832 } if(
cuºít_fõld
 =
SCAN_XML_T_LOCATION
) {

833 
s⁄g_∑th
 = 
	`sˇn_xml_uædecode
(
öfo
,0);

834 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"sˇn_∑th: %s\n",
s⁄g_∑th
);

835 } if(
cuºít_fõld
 =
SCAN_XML_T_DATE_ADDED
) {

836 
mp3
.
time_added
 = 
	`sˇn_xml_d©edecode
(
öfo
);

837 } if(
cuºít_fõld
 =
SCAN_XML_T_COMMENTS
) {

838 
mp3
.
commít
 = 
	`°rdup
(
öfo
);

839 } if(
cuºít_fõld
 =
SCAN_XML_T_COMPOSER
) {

840 
mp3
.
compo£r
 = 
	`°rdup
(
öfo
);

841 } if(
cuºít_fõld
 =
SCAN_XML_T_ALBUM_ARTIST
) {

842 
mp3
.
Æbum_¨ti°
 = 
	`°rdup
(
öfo
);

844 } if(
a˘i⁄
 =
RXML_EVT_END
) {

845 
°©e
 = 
XML_TRACK_ST_TRACK_INFO
;

847  
XML_STATE_ERROR
;

851  
XML_STATE_ERROR
;

854  
XML_STATE_TRACKS
;

855 
	}
}

858 
	#XML_PL_ST_INITIAL
 0

	)

859 
	#XML_PL_ST_EXPECTING_PL
 1

	)

860 
	#XML_PL_ST_EXPECTING_PL_DATA
 2

	)

861 
	#XML_PL_ST_EXPECTING_PL_VALUE
 3

	)

862 
	#XML_PL_ST_EXPECTING_PL_TRACKLIST
 4

	)

864 
	#XML_PL_NEXT_VALUE_NONE
 0

	)

865 
	#XML_PL_NEXT_VALUE_NAME
 1

	)

866 
	#XML_PL_NEXT_VALUE_ID
 2

	)

868 
	#MAYBESETSTATE_PL
(
a
,
b
,
c
Ë{ if((
a˘i⁄
==(a)) && \

869 (
	`°rcmp
(
öfo
,(
b
)) == 0)) { \

870 
°©e
 = (
c
); \

871  
XML_STATE_PLAYLISTS
; \

872 }}

	)

882 
	$sˇn_xml_∂ayli°s_£˘i⁄
(
a˘i⁄
, *
öfo
) {

883 
°©e
 = 
XML_PL_ST_INITIAL
;

884 
√xt_vÆue
=0;

885 
«tive_∂id
=0;

886 
cuºít_id
=0;

887 *
cuºít_«me
=
NULL
;

888 
d⁄t_sˇn
=0;

889 
«tive_åack_id
;

890 
åack_id
;

892 
M3UFILE
 *
pm3u
;

895 if(
a˘i⁄
 =
RXML_EVT_OPEN
) {

896 
°©e
 = 
XML_PL_ST_INITIAL
;

897 if(
cuºít_«me
)

898 
	`‰ì
(
cuºít_«me
);

899 
cuºít_«me
 = 
NULL
;

900 
d⁄t_sˇn
=0;

904 
°©e
) {

905 
XML_PL_ST_INITIAL
:

907 
	`MAYBESETSTATE_PL
(
RXML_EVT_BEGIN
,"¨øy",
XML_PL_ST_EXPECTING_PL
);

908  
XML_STATE_ERROR
;

909 
XML_PL_ST_EXPECTING_PL
:

911 
d⁄t_sˇn
=0;

912 
	`MAYBESETSTATE_PL
(
RXML_EVT_BEGIN
,"di˘",
XML_PL_ST_EXPECTING_PL_DATA
);

913 if((
a˘i⁄
 =
RXML_EVT_END
Ë&& (
	`°rˇ£cmp
(
öfo
,"array") == 0))

914  
XML_STATE_PREAMBLE
;

915  
XML_STATE_ERROR
;

916 
XML_PL_ST_EXPECTING_PL_DATA
:

919 
	`MAYBESETSTATE_PL
(
RXML_EVT_BEGIN
,"key",
XML_PL_ST_EXPECTING_PL_DATA
);

920 
	`MAYBESETSTATE_PL
(
RXML_EVT_END
,"key",
XML_PL_ST_EXPECTING_PL_VALUE
);

921 
	`MAYBESETSTATE_PL
(
RXML_EVT_END
,"di˘",
XML_PL_ST_EXPECTING_PL
);

922 if(
a˘i⁄
 =
RXML_EVT_TEXT
) {

923 
√xt_vÆue
=
XML_PL_NEXT_VALUE_NONE
;

924 if(
	`°rˇ£cmp
(
öfo
,"Name") == 0) {

925 
√xt_vÆue
 = 
XML_PL_NEXT_VALUE_NAME
;

926 } if(
	`°rˇ£cmp
(
öfo
,"Playlist ID") == 0) {

927 
√xt_vÆue
 = 
XML_PL_NEXT_VALUE_ID
;

928 } if(
	`°rˇ£cmp
(
öfo
,"Master") == 0) {

930 
d⁄t_sˇn
=1;

932  
XML_STATE_PLAYLISTS
;

934  
XML_STATE_ERROR
;

935 
XML_PL_ST_EXPECTING_PL_VALUE
:

937 if((
a˘i⁄
 =
RXML_EVT_BEGIN
Ë&& (
	`°rˇ£cmp
(
öfo
,"array") == 0)) {

939 
cuºít_id
=0;

940 if(
d⁄t_sˇn
 == 0) {

941 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Cª©ögÖœyli° f‹ %s\n",
cuºít_«me
);

948 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"ConvertingÇativeÖlid (%d)Åo %d\n",

949 
«tive_∂id
, 
	`utû_djb_hash_°r
(
cuºít_«me
));

950 
«tive_∂id
 = 
	`utû_djb_hash_°r
(
cuºít_«me
);

952 
pm3u
 = 
	`db_„tch_∂ayli°
(
NULL
,
sˇn_xml_fûe
,
«tive_∂id
);

953 if(
pm3u
) {

954 
	`db_dñëe_∂ayli°
(
NULL
,
pm3u
->
id
);

955 
	`db_di•o£_∂ayli°
(
pm3u
);

957 if(
	`db_add_∂ayli°
(
NULL
,
cuºít_«me
,
PL_STATICXML
,NULL,

958 
sˇn_xml_fûe
,
«tive_∂id
,

959 &
cuºít_id
Ë!
DB_E_SUCCESS
)

961 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"î∏addögÖœyli° %s\n",
cuºít_«me
);

962 
cuºít_id
=0;

965 
d⁄t_sˇn
=0;

966 
°©e
=
XML_PL_ST_EXPECTING_PL_TRACKLIST
;

967 
	`MAYBEFREE
(
cuºít_«me
);

968  
XML_STATE_PLAYLISTS
;

970 if(
a˘i⁄
 =
RXML_EVT_BEGIN
)

971  
XML_STATE_PLAYLISTS
;

972 if(
a˘i⁄
 =
RXML_EVT_END
) {

973 
°©e
 = 
XML_PL_ST_EXPECTING_PL_DATA
;

974  
XML_STATE_PLAYLISTS
;

976 if(
a˘i⁄
 =
RXML_EVT_TEXT
) {

978 if(
√xt_vÆue
 =
XML_PL_NEXT_VALUE_NAME
) {

979 
	`MAYBEFREE
(
cuºít_«me
);

980 
cuºít_«me
 = 
	`°rdup
(
öfo
);

981 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"FoundÖœyli°: %s\n",
cuºít_«me
);

983 if(
	`°rˇ£cmp
(
cuºít_«me
,"Party Shuffle") == 0) {

984 
d⁄t_sˇn
=1;

986 } if(
√xt_vÆue
 =
XML_PL_NEXT_VALUE_ID
) {

987 
«tive_∂id
 = 
	`©oi
(
öfo
);

989  
XML_STATE_PLAYLISTS
;

991  
XML_STATE_ERROR
;

993 
XML_PL_ST_EXPECTING_PL_TRACKLIST
:

994 if((
	`°rˇ£cmp
(
öfo
,"dict") == 0) || (strcasecmp(info,"key") == 0))

995  
XML_STATE_PLAYLISTS
;

996 
	`MAYBESETSTATE_PL
(
RXML_EVT_END
,"¨øy",
XML_PL_ST_EXPECTING_PL_DATA
);

997 if(
a˘i⁄
 =
RXML_EVT_TEXT
) {

998 if(
	`°rˇ£cmp
(
öfo
,"Track ID") != 0) {

999 
«tive_åack_id
 = 
	`©oi
(
öfo
);

1000 
	`DPRINTF
(
E_DBG
,
L_SCAN
,"Addög itu√†åack #%s\n",
öfo
);

1002 if(
cuºít_id
 && 
	`sˇn_xml_gë_ödex
(
«tive_åack_id
, &
åack_id
)) {

1004 
	`db_add_∂ayli°_ôem
(
NULL
,
cuºít_id
,
åack_id
);

1008  
XML_STATE_PLAYLISTS
;

1010  
XML_STATE_PLAYLISTS
;

1013  
XML_STATE_ERROR
;

1016  
XML_STATE_PLAYLISTS
;

1017 
	}
}

	@smart-parser.c

13 #ifde‡
HAVE_CONFIG_H


14 
	~"c⁄fig.h
"

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~<time.h
>

22 
	~"dØpd.h
"

23 
	~"îr.h
"

25 #ifde‡
HAVE_SQL


26 
db_sql_esˇ≥
(*
buf„r
, *
size
, *
fmt
, ...);

30 
	sèg_tokí
 {

31 
	mtokí_id
;

33 *
	mcvÆue
;

34 
	mivÆue
;

35 
time_t
 
	mtvÆue
;

36 } 
	md©a
;

37 } 
	tSP_TOKEN
;

39 
	sèg_•_node
 {

41 
èg_•_node
 *
	mnode
;

42 *
	mfõld
;

43 } 
	mÀ·
;

45 
	m›
;

46 
	m›_ty≥
;

47 
	mnŸ_Êag
;

50 
èg_•_node
 *
	mnode
;

51 
	mivÆue
;

52 *
	mcvÆue
;

53 
time_t
 
	mtvÆue
;

54 } 
	mright
;

55 } 
	tSP_NODE
;

57 
	#SP_OPTYPE_INVALID
 0

	)

58 
	#SP_OPTYPE_ANDOR
 1

	)

59 
	#SP_OPTYPE_STRING
 2

	)

60 
	#SP_OPTYPE_INT
 3

	)

61 
	#SP_OPTYPE_DATE
 4

	)

63 
	#SP_HINT_NONE
 0

	)

64 
	#SP_HINT_STRING
 1

	)

65 
	#SP_HINT_INT
 2

	)

66 
	#SP_HINT_DATE
 3

	)

122 
	#T_STRING
 0x2001

	)

123 
	#T_INT_FIELD
 0x2002

	)

124 
	#T_STRING_FIELD
 0x2003

	)

125 
	#T_DATE_FIELD
 0x2004

	)

127 
	#T_OPENPAREN
 0x0005

	)

128 
	#T_CLOSEPAREN
 0x0006

	)

129 
	#T_LESS
 0x0007

	)

130 
	#T_LESSEQUAL
 0x0008

	)

131 
	#T_GREATER
 0x0009

	)

132 
	#T_GREATEREQUAL
 0x000a

	)

133 
	#T_EQUAL
 0x000b

	)

134 
	#T_OR
 0x000c

	)

135 
	#T_AND
 0x000d

	)

136 
	#T_QUOTE
 0x000e

	)

137 
	#T_NUMBER
 0x000f

	)

138 
	#T_INCLUDES
 0x0010

	)

139 
	#T_BEFORE
 0x0011

	)

140 
	#T_AFTER
 0x0012

	)

141 
	#T_AGO
 0x0013

	)

142 
	#T_TODAY
 0x0014

	)

143 
	#T_THE
 0x0015

	)

144 
	#T_DAY
 0x0016

	)

145 
	#T_WEEK
 0x0017

	)

146 
	#T_MONTH
 0x0018

	)

147 
	#T_YEAR
 0x0019

	)

148 
	#T_DATE
 0x001a

	)

149 
	#T_NOT
 0x001b

	)

150 
	#T_STARTSWITH
 0x001c

	)

151 
	#T_ENDSWITH
 0x001d

	)

152 
	#T_LAST
 0x001e

	)

155 
	#T_GREATERAND
 0x001f

	)

156 
	#T_EXPRQUOTE
 0x0020

	)

158 
	#T_EOF
 0x00fd

	)

159 
	#T_BOF
 0x00„

	)

160 
	#T_ERROR
 0x00ff

	)

162 *
	g•_tokí_des¸
[] = {

195 
	sèg_fõldlookup
 {

196 
	mty≥
;

197 *
	m«me
;

198 *
	mxœt
;

199 } 
	tFIELDLOOKUP
;

202 *
	g•_ãrmö©‹s
[2][4] = {

207 
FIELDLOOKUP
 
	g•_symbﬁs_0
[] = {

208 { 
T_OR
, "||", 
NULL
 },

209 { 
T_AND
, "&&", 
NULL
 },

210 { 
T_EQUAL
, "=", 
NULL
 },

211 { 
T_LESSEQUAL
, "<=", 
NULL
 },

212 { 
T_LESS
, "<", 
NULL
 },

213 { 
T_GREATEREQUAL
, ">=", 
NULL
 },

214 { 
T_GREATER
, ">", 
NULL
 },

215 { 
T_OPENPAREN
, "(", 
NULL
 },

216 { 
T_CLOSEPAREN
, ")", 
NULL
 },

217 { 
T_NOT
, "!", 
NULL
 },

218 { 0, 
NULL
, NULL }

221 
FIELDLOOKUP
 
	g•_symbﬁs_1
[] = {

222 { 
T_OPENPAREN
, "(", 
NULL
 },

223 { 
T_CLOSEPAREN
, ")", 
NULL
 },

224 { 
T_EXPRQUOTE
, "'", 
NULL
 },

225 { 
T_GREATERAND
, "+", 
NULL
 },

226 { 
T_GREATERAND
, " ", 
NULL
 },

227 { 
T_LESS
,"-", 
NULL
 },

228 { 
T_OR
, ",", 
NULL
 },

229 { 
T_EQUAL
, ":", 
NULL
 },

230 { 
T_NOT
, "!", 
NULL
 },

231 { 0, 
NULL
, NULL }

234 
FIELDLOOKUP
 *
	g•_symbﬁs
[2] = {

235 
•_symbﬁs_0
, 
•_symbﬁs_1


238 
FIELDLOOKUP
 
	g•_fõlds_0
[] = {

239 { 
T_INT_FIELD
, "id", 
NULL
 },

240 { 
T_STRING_FIELD
, "∑th", 
NULL
 },

241 { 
T_STRING_FIELD
, "‚ame", 
NULL
 },

242 { 
T_STRING_FIELD
, "tôÀ", 
NULL
 },

243 { 
T_STRING_FIELD
, "¨ti°", 
NULL
 },

244 { 
T_STRING_FIELD
, "Æbum", 
NULL
 },

245 { 
T_STRING_FIELD
, "gíª", 
NULL
 },

246 { 
T_STRING_FIELD
, "commít", 
NULL
 },

247 { 
T_STRING_FIELD
, "ty≥", 
NULL
 },

248 { 
T_STRING_FIELD
, "compo£r", 
NULL
 },

249 { 
T_STRING_FIELD
, "‹che°ø", 
NULL
 },

250 { 
T_STRING_FIELD
, "groupög", 
NULL
 },

251 { 
T_STRING_FIELD
, "uæ", 
NULL
 },

252 { 
T_INT_FIELD
, "bôøã", 
NULL
 },

253 { 
T_INT_FIELD
, "ßm∂î©e", 
NULL
 },

254 { 
T_INT_FIELD
, "s⁄g_Àngth", 
NULL
 },

255 { 
T_INT_FIELD
, "fûe_size", 
NULL
 },

256 { 
T_INT_FIELD
, "yór", 
NULL
 },

257 { 
T_INT_FIELD
, "åack", 
NULL
 },

258 { 
T_INT_FIELD
, "tŸÆ_åacks", 
NULL
 },

259 { 
T_INT_FIELD
, "disc", 
NULL
 },

260 { 
T_INT_FIELD
, "tŸÆ_discs", 
NULL
 },

261 { 
T_INT_FIELD
, "bpm", 
NULL
 },

262 { 
T_INT_FIELD
, "compû©i⁄", 
NULL
 },

263 { 
T_INT_FIELD
, "øtög", 
NULL
 },

264 { 
T_INT_FIELD
, "∂ay_cou¡", 
NULL
 },

265 { 
T_INT_FIELD
, "d©a_köd", 
NULL
 },

266 { 
T_INT_FIELD
, "ôem_köd", 
NULL
 },

267 { 
T_STRING_FIELD
, "des¸ùti⁄", 
NULL
 },

268 { 
T_DATE_FIELD
, "time_added", 
NULL
 },

269 { 
T_DATE_FIELD
, "time_modifõd", 
NULL
 },

270 { 
T_DATE_FIELD
, "time_∂ayed", 
NULL
 },

271 { 
T_DATE_FIELD
, "db_time°amp", 
NULL
 },

272 { 
T_INT_FIELD
, "ßm∂e_cou¡", 
NULL
 },

273 { 
T_INT_FIELD
, "f‹˚_upd©e", 
NULL
 },

274 { 
T_STRING_FIELD
, "code˘y≥", 
NULL
 },

275 { 
T_INT_FIELD
, "idx", 
NULL
 },

276 { 
T_INT_FIELD
, "has_video", 
NULL
 },

277 { 
T_INT_FIELD
, "c⁄ã¡øtög", 
NULL
 },

278 { 
T_INT_FIELD
, "bôs_≥r_ßm∂e", 
NULL
 },

279 { 
T_STRING_FIELD
, "Æbum_¨ti°", 
NULL
 },

282 { 
T_OR
, "‹", 
NULL
 },

283 { 
T_AND
, "™d", 
NULL
 },

284 { 
T_INCLUDES
, "ö˛udes", 
NULL
 },

285 { 
T_BEFORE
, "bef‹e", 
NULL
 },

286 { 
T_AFTER
, "a·î", 
NULL
 },

287 { 
T_AGO
, "ago", 
NULL
 },

288 { 
T_TODAY
, "today", 
NULL
 },

289 { 
T_THE
, "the", 
NULL
 },

290 { 
T_DAY
, "days", 
NULL
 },

291 { 
T_DAY
, "day", 
NULL
 },

292 { 
T_WEEK
, "wìks", 
NULL
 },

293 { 
T_WEEK
, "wìk", 
NULL
 },

294 { 
T_MONTH
, "m⁄ths", 
NULL
 },

295 { 
T_MONTH
, "m⁄th", 
NULL
 },

296 { 
T_YEAR
, "yórs", 
NULL
 },

297 { 
T_YEAR
, "yór", 
NULL
 },

298 { 
T_NOT
, "nŸ", 
NULL
 },

299 { 
T_STARTSWITH
, "°¨tswôh", 
NULL
 },

300 { 
T_ENDSWITH
, "ídswôh", 
NULL
 },

303 { 0, 
NULL
, NULL }

306 
FIELDLOOKUP
 
	g•_fõlds_1
[] = {

307 { 
T_STRING_FIELD
, "dmap.itemname", "title" },

308 { 
T_INT_FIELD
, "dmap.itemid", "id" },

309 { 
T_STRING_FIELD
, "daap.songalbum", "album" },

310 { 
T_STRING_FIELD
, "daap.songartist", "artist" },

311 { 
T_INT_FIELD
, "daap.songbitrate", "bitrate" },

312 { 
T_STRING_FIELD
, "daap.songcomment", "comment" },

313 { 
T_INT_FIELD
, "daap.songcompilation", "compilation" },

314 { 
T_STRING_FIELD
, "daap.songcomposer", "composer" },

315 { 
T_INT_FIELD
, "daap.songdatakind", "data_kind" },

316 { 
T_STRING_FIELD
, "daap.songdataurl", "url" },

317 { 
T_INT_FIELD
, "daap.songdateadded", "time_added" },

318 { 
T_INT_FIELD
, "daap.songdatemodified", "time_modified" },

319 { 
T_STRING_FIELD
, "daap.songdescription", "description" },

320 { 
T_INT_FIELD
, "daap.songdisccount", "total_discs" },

321 { 
T_INT_FIELD
, "daap.songdiscnumber", "disc" },

322 { 
T_STRING_FIELD
, "daap.songformat", "type" },

323 { 
T_STRING_FIELD
, "daap.songgenre", "genre" },

324 { 
T_INT_FIELD
, "daap.songsamplerate", "samplerate" },

325 { 
T_INT_FIELD
, "daap.songsize", "file_size" },

327 { 
T_INT_FIELD
, "daap.songstoptime", "song_length" },

328 { 
T_INT_FIELD
, "daap.songtime", "song_length" },

329 { 
T_INT_FIELD
, "daap.songtrackcount", "total_tracks" },

330 { 
T_INT_FIELD
, "daap.songtracknumber", "track" },

331 { 
T_INT_FIELD
, "daap.songyear", "year" },

333 { 0, 
NULL
, NULL }

336 
FIELDLOOKUP
 *
	g•_fõlds
[2] = {

337 
•_fõlds_0
, 
•_fõlds_1


340 
	sèg_∑r£åì
 {

341 
	mö_°rög
;

342 
	mtokí_li°
;

343 *
	mãrm
;

344 *
	mcuºít
;

345 
SP_TOKEN
 
	mtokí
;

346 
	mtokí_pos
;

347 
SP_NODE
 *
	måì
;

348 *
	mîr‹
;

349 
	mÀvñ
;

350 } 
	tPARSESTRUCT
, *
	tPARSETREE
;

352 
	#SP_E_SUCCESS
 0x00

	)

353 
	#SP_E_CLOSE
 0x01

	)

354 
	#SP_E_FIELD
 0x02

	)

355 
	#SP_E_STRCMP
 0x03

	)

356 
	#SP_E_CLOSEQUOTE
 0x04

	)

357 
	#SP_E_STRING
 0x05

	)

358 
	#SP_E_OPENQUOTE
 0x06

	)

359 
	#SP_E_INTCMP
 0x07

	)

360 
	#SP_E_NUMBER
 0x08

	)

361 
	#SP_E_DATECMP
 0x09

	)

362 
	#SP_E_BEFOREAFTER
 0x0a

	)

363 
	#SP_E_TIMEINTERVAL
 0x0b

	)

364 
	#SP_E_DATE
 0x0c

	)

365 
	#SP_E_EXPRQUOTE
 0x0d

	)

366 
	#SP_E_EOS
 0x0e

	)

367 
	#SP_E_UNKNOWN
 0x0f

	)

369 *
	g•_îr‹°rögs
[] = {

389 
SP_NODE
 *
•_∑r£_phø£
(
PARSETREE
 
åì
);

390 
SP_NODE
 *
•_∑r£_€x¥
(
PARSETREE
 
åì
);

391 
SP_NODE
 *
•_∑r£_´x¥
(
PARSETREE
 
åì
);

392 
SP_NODE
 *
•_∑r£_ex¥
(
PARSETREE
 
åì
);

393 
SP_NODE
 *
•_∑r£_¸ôîi⁄
(
PARSETREE
 
åì
);

394 
SP_NODE
 *
•_∑r£_°rög_¸ôîi⁄
(
PARSETREE
 
åì
);

395 
SP_NODE
 *
•_∑r£_öt_¸ôîi⁄
(
PARSETREE
 
åì
);

396 
SP_NODE
 *
•_∑r£_d©e_¸ôîi⁄
(
PARSETREE
 
åì
);

397 
time_t
 
•_∑r£_d©e
(
PARSETREE
 
åì
);

398 
time_t
 
•_∑r£_d©e_öãrvÆ
(
PARSETREE
 
åì
);

399 
•_‰ì_node
(
SP_NODE
 *
node
);

400 
•_node_size
(
SP_NODE
 *
node
);

401 
•_£t_îr‹
(
PARSETREE
 
åì
,
îr‹
);

411 
	$•_íãr_exô
(
PARSETREE
 
åì
, *
fun˘i⁄
, 
íãr
, *
ªsu…
) {

412 *
°r_ªsu…
 = 
ªsu…
 ? "success" : "failure";

414 if(
íãr
) {

415 
åì
->
Àvñ
++;

416 
	`DPRINTF
(
E_DBG
,
L_PARSE
,"%*†E¡îög %s\n",
åì
->
Àvñ
," ",
fun˘i⁄
);

418 
	`DPRINTF
(
E_DBG
,
L_PARSE
,"%*†Exôög %†(%s)\n",
åì
->
Àvñ
," ",

419 
fun˘i⁄
, 
°r_ªsu…
);

420 
åì
->
Àvñ
--;

422 
	}
}

431 
	$•_i¢umbî
(*
°rög
) {

432 *
cuºít
=
°rög
;

434 *
cuºít
 && (*current >= '0') && (*current <= '9')) {

435 
cuºít
++;

438  *
cuºít
 ? 0 : 1;

439 
	}
}

448 
time_t
 
	$•_isd©e
(*
°rög
) {

449 
tm
 
d©e_time
;

450 
time_t
 
£c⁄ds
=0;

452 
	`mem£t
((*)&
d©e_time
,0,(date_time));

453 if(
	`°Ωtime
(
°rög
,"%Y-%m-%d",&
d©e_time
)) {

454 
£c⁄ds
=
	`timegm
(&
d©e_time
);

457  
£c⁄ds
;

458 
	}
}

469 
	$•_sˇn
(
PARSETREE
 
åì
, 
höt
) {

470 *
ãrmö©‹
=
NULL
;

471 *
èû
;

472 
FIELDLOOKUP
 *
pfõld
=
•_fõlds
[
åì
->
tokí_li°
];

473 
Àn
;

474 
found
;

475 
numvÆ
;

476 
is_q°r
;

477 
time_t
 
tvÆ
;

478 *
q°r
;

479 *
tokí_°rög
;

480 *
d°
, *
§c
;

482 if(
åì
->
tokí
.
tokí_id
 & 0x2000) {

483 if(
åì
->
tokí
.
d©a
.
cvÆue
)

484 
	`‰ì
(
åì
->
tokí
.
d©a
.
cvÆue
);

487 if(
åì
->
tokí
.
tokí_id
 =
T_EOF
) {

488 
	`DPRINTF
(
E_DBG
,
L_PARSE
,"%*†Rëu∫ögÅokí T_EOF\n",
åì
->
Àvñ
," ");

489  
T_EOF
;

493 *(
åì
->
cuºít
Ë&& 
	`°rchr
(" \t\n\r",*(tree->current)))

494 
åì
->
cuºít
++;

496 
åì
->
tokí_pos
 = (Ë—ªe->
cuºít
 -Åªe->
ãrm
);

498 if(!*(
åì
->
cuºít
)) {

499 
åì
->
tokí
.
tokí_id
 = 
T_EOF
;

500 
	`DPRINTF
(
E_DBG
,
L_PARSE
,"%*†Rëu∫ögÅokí %04x\n",
åì
->
Àvñ
," ",

501 
åì
->
tokí
.
tokí_id
);

502  
åì
->
tokí
.
tokí_id
;

505 
	`DPRINTF
(
E_SPAM
,
L_PARSE
,"Current offset: %d, char: %c\n",

506 
åì
->
tokí_pos
, *—ªe->
cuºít
));

508 if(
höt
 =
SP_HINT_STRING
) {

509 
ãrmö©‹
=
•_ãrmö©‹s
[
åì
->
tokí_li°
][1];

510 
åì
->
ö_°rög
 = 1;

512 
ãrmö©‹
 = 
•_ãrmö©‹s
[
åì
->
tokí_li°
][0];

513 
åì
->
ö_°rög
 = 0;

517 
	`DPRINTF
(
E_SPAM
,
L_PARSE
,"Starting scan - in_string: %d, hint: %d\n",

518 
åì
->
ö_°rög
, 
höt
);

521 if(!
åì
->
ö_°rög
) {

522 
pfõld
=
•_symbﬁs
[
åì
->
tokí_li°
];

523 
pfõld
->
«me
) {

524 if(!
	`°∫cmp
(
pfõld
->
«me
,
åì
->
cuºít
,
	`°æí
(pfield->name))) {

526 
åì
->
cuºít
 +
	`°æí
(
pfõld
->
«me
);

527 
åì
->
tokí
.
tokí_id
 = 
pfõld
->
ty≥
;

528  
pfõld
->
ty≥
;

530 
pfõld
++;

534 
q°r
 = 
•_ãrmö©‹s
[
åì
->
tokí_li°
][3];

535 
is_q°r
 = (
	`°rchr
(
q°r
,*(
åì
->
cuºít
)Ë!
NULL
);

537 
	`DPRINTF
(
E_SPAM
,
L_PARSE
,"q°r: %†-- is_quŸed: %d\n",
q°r
,
is_q°r
);

539 if(
	`°æí
(
q°r
)) {

540 if(
höt
 =
SP_HINT_STRING
) {

541 if(!
is_q°r
) {

542 
åì
->
tokí
.
tokí_id
 = 
T_ERROR
;

543  
T_ERROR
;

545 
åì
->
cuºít
++;

547 if(
is_q°r
) {

548 
åì
->
ö_°rög
 = 1;

549 
ãrmö©‹
=
•_ãrmö©‹s
[
åì
->
tokí_li°
][1];

550 
åì
->
cuºít
++;

555 
	`DPRINTF
(
E_SPAM
,
L_PARSE
,"keyword or string!\n");

558 
èû
 = 
åì
->
cuºít
;

560 (*
èû
Ë&& (!
	`°rchr
(
ãrmö©‹
,*tail))) {

562 if((*
èû
 == '\\')&&(*(tail+1) != '\0'))

563 
èû
++;

564 
èû
++;

567 
found
=0;

568 
Àn
 = (Ë(
èû
 - 
åì
->
cuºít
);

570 
	`DPRINTF
(
E_SPAM
,
L_PARSE
,"Lí: %d, in_°rög: %d\n",
Àn
,
åì
->
ö_°rög
);

572 if(!
åì
->
ö_°rög
) {

574 
pfõld
=
•_fõlds
[
åì
->
tokí_li°
];

575 
pfõld
->
«me
) {

576 
	`DPRINTF
(
E_SPAM
,
L_PARSE
,"Com∑rögÅÿ%s\n",
pfõld
->
«me
);

577 if(
	`°æí
(
pfõld
->
«me
Ë=
Àn
) {

578 if(
	`°∫ˇ£cmp
(
pfõld
->
«me
,
åì
->
cuºít
,
Àn
) == 0) {

579 
found
=1;

583 
pfõld
++;

587 if(
found
) {

588 
åì
->
tokí
.
tokí_id
 = 
pfõld
->
ty≥
;

590 
åì
->
tokí
.
tokí_id
 = 
T_STRING
;

593 if(
åì
->
tokí
.
tokí_id
 & 0x2000) {

594 
tokí_°rög
=
åì
->
cuºít
;

595 if(
found
) {

596 if(
pfõld
->
xœt
) {

597 
Àn
 = ()
	`°æí
(
pfõld
->
xœt
);

598 
tokí_°rög
 = 
pfõld
->
xœt
;

602 
åì
->
tokí
.
d©a
.
cvÆue
 = 
	`mÆloc
(
Àn
 + 1);

603 if(!
åì
->
tokí
.
d©a
.
cvÆue
) {

605 
	`DPRINTF
(
E_FATAL
,
L_PARSE
,"MallocÉrror.\n");

607 
	`°∫˝y
(
åì
->
tokí
.
d©a
.
cvÆue
,
tokí_°rög
,
Àn
);

608 
åì
->
tokí
.
d©a
.
cvÆue
[
Àn
] = '\x0';

611 if((
höt
 =
SP_HINT_NONE
Ë|| (höà=
SP_HINT_INT
)) {

613 if(
åì
->
tokí
.
tokí_id
 =
T_STRING
 &&

614 (!
åì
->
ö_°rög
) &&

615 
	`•_i¢umbî
(
åì
->
tokí
.
d©a
.
cvÆue
)) {

617 
numvÆ
 = 
	`©oi
(
åì
->
tokí
.
d©a
.
cvÆue
);

618 
	`‰ì
(
åì
->
tokí
.
d©a
.
cvÆue
);

619 
åì
->
tokí
.
d©a
.
ivÆue
 = 
numvÆ
;

620 
åì
->
tokí
.
tokí_id
 = 
T_NUMBER
;

624 if((
höt
 =
SP_HINT_NONE
Ë|| (höà=
SP_HINT_DATE
)) {

625 if(
åì
->
tokí
.
tokí_id
 =
T_STRING
 &&

626 (!
åì
->
ö_°rög
) &&

627 (
tvÆ
=
	`•_isd©e
(
åì
->
tokí
.
d©a
.
cvÆue
))) {

628 
	`‰ì
(
åì
->
tokí
.
d©a
.
cvÆue
);

629 
åì
->
tokí
.
d©a
.
tvÆue
 = 
tvÆ
;

630 
åì
->
tokí
.
tokí_id
 = 
T_DATE
;

634 
åì
->
cuºít
=
èû
;

639 
is_q°r
 = (
	`°rchr
(
q°r
,*
åì
->
cuºít
Ë!
NULL
);

640 if((!
found
Ë&& 
	`°æí
(
q°r
Ë&& (
åì
->
ö_°rög
)) {

641 if(
is_q°r
) {

642 
åì
->
cuºít
++;

644 
	`DPRINTF
(
E_INF
,
L_PARSE
,"Missing closing quotes\n");

645 if(
åì
->
tokí
.
tokí_id
 & 0x2000) {

646 
	`‰ì
(
åì
->
tokí
.
d©a
.
cvÆue
);

648 
åì
->
tokí
.
tokí_id
 = 
T_ERROR
;

653 if(
åì
->
tokí
.
tokí_id
 =
T_STRING
) {

654 
§c
 = 
d°
 = 
åì
->
tokí
.
d©a
.
cvÆue
;

655 *
§c
) {

656 if(*
§c
 != '\\') {

657 *
d°
++ = *
§c
++;

659 
§c
++;

660 if(*
§c
) {

661 *
d°
++ = *
§c
++;

665 *
d°
 = '\0';

668 
	`DPRINTF
(
E_DBG
,
L_PARSE
,"%*†Rëu∫ögÅokí %04x\n",
åì
->
Àvñ
," ",

669 
åì
->
tokí
.
tokí_id
);

670 if(
åì
->
tokí
.
tokí_id
 & 0x2000)

671 
	`DPRINTF
(
E_SPAM
,
L_PARSE
,"Såög vÆ: %s\n",
åì
->
tokí
.
d©a
.
cvÆue
);

672 if(
åì
->
tokí
.
tokí_id
 & 0x1000)

673 
	`DPRINTF
(
E_SPAM
,
L_PARSE
,"I¡ vÆ: %d\n",
åì
->
tokí
.
d©a
.
ivÆue
);

675  
åì
->
tokí
.
tokí_id
;

676 
	}
}

684 
PARSETREE
 
	$•_öô
() {

685 
PARSETREE
 
±ªe
;

687 
±ªe
 = (
PARSETREE
)
	`mÆloc
((
PARSESTRUCT
));

688 if(!
±ªe
)

689 
	`DPRINTF
(
E_FATAL
,
L_PARSE
,"AllocÉrror\n");

691 
	`mem£t
(
±ªe
,0,(
PARSESTRUCT
));

695  
±ªe
;

696 
	}
}

718 
	$•_∑r£
(
PARSETREE
 
åì
, *
ãrm
, 
ty≥
) {

719 
åì
->
ãrm
 = 
	`°rdup
(term);

720 
åì
->
cuºít
Òªe->
ãrm
;

721 
åì
->
tokí
.
tokí_id
=
T_BOF
;

722 
åì
->
tokí_li°
 = 
ty≥
;

724 if(
åì
->tree)

725 
	`•_‰ì_node
(
åì
->tree);

727 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

728 
åì
->åì = 
	`•_∑r£_phø£
(tree);

730 if(
åì
->tree) {

731 
	`DPRINTF
(
E_SPAM
,
L_PARSE
,"P¨£d suc˚ssfuŒy (ty≥ %d)\n",
ty≥
);

733 
	`DPRINTF
(
E_SPAM
,
L_PARSE
,"P¨sögÉº‹ (ty≥ %d)\n",
ty≥
);

736  
åì
->tree ? 1 : 0;

737 
	}
}

749 
SP_NODE
 *
	$•_∑r£_phø£
(
PARSETREE
 
åì
) {

750 
SP_NODE
 *
ex¥
;

752 
	`•_íãr_exô
(
åì
,"•_∑r£_phø£",1,
NULL
);

754 
	`DPRINTF
(
E_SPAM
,
L_PARSE
,"%*†E¡îög sp_∑r£_phø£\n",
åì
->
Àvñ
," ");

755 
åì
->
Àvñ
++;

757 
ex¥
 = 
	`•_∑r£_€x¥
(
åì
);

758 if((!
ex¥
Ë|| (
åì
->
tokí
.
tokí_id
 !
T_EOF
)) {

759 if(!
åì
->
îr‹
) {

760 
	`•_£t_îr‹
(
åì
,
SP_E_EOS
);

762 
	`•_‰ì_node
(
ex¥
);

763 
ex¥
 = 
NULL
;

766 
	`•_íãr_exô
(
åì
,"•_∑r£_phø£",0,
ex¥
);

767  
ex¥
;

768 
	}
}

778 
SP_NODE
 *
	$•_∑r£_´x¥
(
PARSETREE
 
åì
) {

779 
SP_NODE
 *
ex¥
;

780 
SP_NODE
 *
≤ew
;

782 
	`•_íãr_exô
(
åì
,"•_∑r£_´x¥",1,
NULL
);

784 
ex¥
 = 
	`•_∑r£_ex¥
(
åì
);

786 
ex¥
 && ((
åì
->
tokí
.
tokí_id
 =
T_AND
) ||

787 (
åì
->
tokí
.
tokí_id
 =
T_GREATERAND
))) {

788 
≤ew
 = (
SP_NODE
*)
	`mÆloc
((SP_NODE));

789 if(!
≤ew
) {

790 
	`DPRINTF
(
E_FATAL
,
L_PARSE
,"MallocÉrror\n");

793 
	`mem£t
(
≤ew
,0x00,(
SP_NODE
));

794 
≤ew
->
›
=
T_AND
;

795 
≤ew
->
›_ty≥
 = 
SP_OPTYPE_ANDOR
;

797 
≤ew
->
À·
.
node
 = 
ex¥
;

798 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

799 
≤ew
->
right
.
node
 = 
	`•_∑r£_ex¥
(
åì
);

801 if(!
≤ew
->
right
.
node
) {

802 
	`•_‰ì_node
(
≤ew
);

803 
≤ew
=
NULL
;

806 
ex¥
=
≤ew
;

809 
	`•_íãr_exô
(
åì
,"•_∑r£_´x¥",0,
ex¥
);

810  
ex¥
;

811 
	}
}

821 
SP_NODE
 *
	$•_∑r£_€x¥
(
PARSETREE
 
åì
) {

822 
SP_NODE
 *
ex¥
;

823 
SP_NODE
 *
≤ew
;

825 
	`•_íãr_exô
(
åì
,"•_∑r£_€x¥",1,
NULL
);

827 
ex¥
 = 
	`•_∑r£_´x¥
(
åì
);

829 
ex¥
 && (
åì
->
tokí
.
tokí_id
 =
T_OR
)) {

830 
≤ew
 = (
SP_NODE
*)
	`mÆloc
((SP_NODE));

831 if(!
≤ew
) {

832 
	`DPRINTF
(
E_FATAL
,
L_PARSE
,"MallocÉrror\n");

835 
	`mem£t
(
≤ew
,0x00,(
SP_NODE
));

836 
≤ew
->
›
=
T_OR
;

837 
≤ew
->
›_ty≥
 = 
SP_OPTYPE_ANDOR
;

839 
≤ew
->
À·
.
node
 = 
ex¥
;

840 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

841 
≤ew
->
right
.
node
 = 
	`•_∑r£_´x¥
(
åì
);

843 if(!
≤ew
->
right
.
node
) {

844 
	`•_‰ì_node
(
≤ew
);

845 
≤ew
=
NULL
;

848 
ex¥
=
≤ew
;

851 
	`•_íãr_exô
(
åì
,"•_∑r£_€x¥",0,
ex¥
);

852  
ex¥
;

853 
	}
}

863 
SP_NODE
 *
	$•_∑r£_ex¥
(
PARSETREE
 
åì
) {

864 
SP_NODE
 *
ex¥
;

866 
	`•_íãr_exô
(
åì
,"•_∑r£_ex¥",1,
NULL
);

868 if(
åì
->
tokí
.
tokí_id
 =
T_OPENPAREN
) {

869 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

870 
ex¥
 = 
	`•_∑r£_€x¥
(
åì
);

871 if((
ex¥
Ë&& (
åì
->
tokí
.
tokí_id
 =
T_CLOSEPAREN
)) {

872 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

875 
	`•_£t_îr‹
(
åì
,
SP_E_CLOSE
);

876 
	`•_‰ì_node
(
ex¥
);

877 
ex¥
=
NULL
;

880 
ex¥
 = 
	`•_∑r£_¸ôîi⁄
(
åì
);

883 
	`•_íãr_exô
(
åì
,"•_∑r£_ex¥",0,
ex¥
);

884  
ex¥
;

885 
	}
}

895 
SP_NODE
 *
	$•_∑r£_¸ôîi⁄
(
PARSETREE
 
åì
) {

896 
SP_NODE
 *
ex¥
=
NULL
;

898 
	`•_íãr_exô
(
åì
,"•_∑r£_¸ôîi⁄",1,
ex¥
);

900 if(
åì
->
tokí_li°
 == 1) {

901 if(
åì
->
tokí
.
tokí_id
 !
T_EXPRQUOTE
) {

902 
	`•_£t_îr‹
(
åì
,
SP_E_EXPRQUOTE
);

903  
NULL
;

905 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

909 
åì
->
tokí
.
tokí_id
) {

910 
T_STRING_FIELD
:

911 
ex¥
 = 
	`•_∑r£_°rög_¸ôîi⁄
(
åì
);

914 
T_INT_FIELD
:

915 
ex¥
 = 
	`•_∑r£_öt_¸ôîi⁄
(
åì
);

918 
T_DATE_FIELD
:

919 
ex¥
 = 
	`•_∑r£_d©e_¸ôîi⁄
(
åì
);

924 
	`•_£t_îr‹
(
åì
,
SP_E_FIELD
);

925 
ex¥
 = 
NULL
;

929 if(
åì
->
tokí_li°
 == 1) {

930 if(
åì
->
tokí
.
tokí_id
 !
T_EXPRQUOTE
) {

931 
	`•_£t_îr‹
(
åì
,
SP_E_EXPRQUOTE
);

932 
	`•_‰ì_node
(
ex¥
);

933  
NULL
;

935 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

939 
	`•_íãr_exô
(
åì
,"•_∑r£_¸ôîi⁄",0,
ex¥
);

940  
ex¥
;

941 
	}
}

949 
SP_NODE
 *
	$•_∑r£_°rög_¸ôîi⁄
(
PARSETREE
 
åì
) {

950 
ªsu…
=0;

951 
SP_NODE
 *
≤ew
 = 
NULL
;

953 
	`•_íãr_exô
(
åì
,"•_∑r£_°rög_¸ôîi⁄",1,
NULL
);

955 
≤ew
 = 
	`mÆloc
((
SP_NODE
));

956 if(!
≤ew
) {

957 
	`DPRINTF
(
E_FATAL
,
L_PARSE
,"Malloc Error\n");

959 
	`mem£t
(
≤ew
,0x00,(
SP_NODE
));

960 
≤ew
->
À·
.
fõld
 = 
	`°rdup
(
åì
->
tokí
.
d©a
.
cvÆue
);

962 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

964 if(
åì
->
tokí
.
tokí_id
 =
T_NOT
) {

965 
≤ew
->
nŸ_Êag
=1;

966 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

969 
åì
->
tokí
.
tokí_id
) {

970 
T_EQUAL
:

971 
T_INCLUDES
:

972 
T_STARTSWITH
:

973 
T_ENDSWITH
:

974 
≤ew
->
›
=
åì
->
tokí
.
tokí_id
;

975 
≤ew
->
›_ty≥
 = 
SP_OPTYPE_STRING
;

976 
ªsu…
 = 1;

980 
	`•_£t_îr‹
(
åì
,
SP_E_STRCMP
);

984 if(
ªsu…
) {

985 
	`•_sˇn
(
åì
,
SP_HINT_STRING
);

987 if(
åì
->
tokí
.
tokí_id
 =
T_STRING
) {

988 
ªsu…
 = 1;

989 
≤ew
->
right
.
cvÆue
=
	`°rdup
(
åì
->
tokí
.
d©a
.cvalue);

990 if(
åì
->
tokí_li°
 == 1) {

991 if(
≤ew
->
right
.
cvÆue
[0]=='*') {

992 
≤ew
->
›
 = 
T_ENDSWITH
;

993 
	`mem˝y
(
≤ew
->
right
.
cvÆue
,&pnew->right.cvalue[1],

994 ()
	`°æí
(
≤ew
->
right
.
cvÆue
));

996 if(
≤ew
->
right
.
cvÆue
[
	`°æí
(pnew->right.cvalue)-1] == '*') {

997 
≤ew
->
›
 = (≤ew->›==
T_ENDSWITH
)?
T_INCLUDES
:
T_STARTSWITH
;

998 
≤ew
->
right
.
cvÆue
[
	`°æí
(pnew->right.cvalue)-1] = '\0';

1001 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

1003 
	`•_£t_îr‹
(
åì
,
SP_E_OPENQUOTE
);

1004 
	`DPRINTF
(
E_SPAM
,
L_PARSE
,"Expecting string, got %04X\n",

1005 
åì
->
tokí
.
tokí_id
);

1006 
ªsu…
 = 0;

1011 if(!
ªsu…
) {

1012 
	`•_‰ì_node
(
≤ew
);

1013 
≤ew
=
NULL
;

1016 
	`•_íãr_exô
(
åì
,"•_∑r£_°rög_¸ôîi⁄",0,
≤ew
);

1017  
≤ew
;

1018 
	}
}

1026 
SP_NODE
 *
	$•_∑r£_öt_¸ôîi⁄
(
PARSETREE
 
åì
) {

1027 
ªsu…
=0;

1028 
SP_NODE
 *
≤ew
 = 
NULL
;

1030 
	`•_íãr_exô
(
åì
,"•_∑r£_öt_¸ôîi⁄",1,
≤ew
);

1031 
≤ew
 = 
	`mÆloc
((
SP_NODE
));

1032 if(!
≤ew
) {

1033 
	`DPRINTF
(
E_FATAL
,
L_PARSE
,"Malloc Error\n");

1035 
	`mem£t
(
≤ew
,0x00,(
SP_NODE
));

1036 
≤ew
->
À·
.
fõld
 = 
	`°rdup
(
åì
->
tokí
.
d©a
.
cvÆue
);

1038 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

1040 if(
åì
->
tokí
.
tokí_id
 =
T_NOT
) {

1041 
≤ew
->
nŸ_Êag
=1;

1042 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

1045 
åì
->
tokí
.
tokí_id
) {

1046 
T_LESSEQUAL
:

1047 
T_LESS
:

1048 
T_GREATEREQUAL
:

1049 
T_GREATER
:

1050 
T_EQUAL
:

1051 
ªsu…
 = 1;

1052 
≤ew
->
›
=
åì
->
tokí
.
tokí_id
;

1053 
≤ew
->
›_ty≥
 = 
SP_OPTYPE_INT
;

1055 
T_GREATERAND
:

1056 
ªsu…
 = 1;

1057 
≤ew
->
›
 = 
T_GREATER
;

1058 
≤ew
->
›_ty≥
 = 
SP_OPTYPE_INT
;

1062 
	`•_£t_îr‹
(
åì
,
SP_E_INTCMP
);

1063 
	`DPRINTF
(
E_LOG
,
L_PARSE
,"Expecting int comparison op, got %04X\n",

1064 
åì
->
tokí
.
tokí_id
);

1068 if(
ªsu…
) {

1069 
	`•_sˇn
(
åì
,
SP_HINT_INT
);

1071 if(
åì
->
tokí
.
tokí_id
 =
T_NUMBER
) {

1072 
ªsu…
 = 1;

1073 
≤ew
->
right
.
ivÆue
=
åì
->
tokí
.
d©a
.ivalue;

1074 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

1077 
	`•_£t_îr‹
(
åì
,
SP_E_NUMBER
);

1078 
	`DPRINTF
(
E_LOG
,
L_PARSE
,"ExpectingÇumber, got %04X\n",

1079 
åì
->
tokí
.
tokí_id
);

1080 
ªsu…
 = 0;

1084 if(!
ªsu…
) {

1085 
	`•_‰ì_node
(
≤ew
);

1086 
≤ew
=
NULL
;

1089 
	`•_íãr_exô
(
åì
,"•_∑r£_öt_¸ôîi⁄",0,
≤ew
);

1091  
≤ew
;

1092 
	}
}

1101 
SP_NODE
 *
	$•_∑r£_d©e_¸ôîi⁄
(
PARSETREE
 
åì
) {

1102 
SP_NODE
 *
≤ew
=
NULL
;

1103 
ªsu…
=0;

1105 
	`•_íãr_exô
(
åì
,"•_∑r£_d©e_¸ôîi⁄",1,
≤ew
);

1106 
≤ew
 = 
	`mÆloc
((
SP_NODE
));

1107 if(!
≤ew
) {

1108 
	`DPRINTF
(
E_FATAL
,
L_PARSE
,"Malloc Error\n");

1110 
	`mem£t
(
≤ew
,0x00,(
SP_NODE
));

1111 
≤ew
->
À·
.
fõld
 = 
	`°rdup
(
åì
->
tokí
.
d©a
.
cvÆue
);

1113 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

1115 if(
åì
->
tokí
.
tokí_id
 =
T_NOT
) {

1116 
≤ew
->
nŸ_Êag
=1;

1117 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

1120 
åì
->
tokí
.
tokí_id
) {

1121 
T_LESSEQUAL
:

1122 
T_LESS
:

1123 
T_GREATEREQUAL
:

1124 
T_GREATER
:

1125 
ªsu…
 = 1;

1126 
≤ew
->
›
=
åì
->
tokí
.
tokí_id
;

1127 
≤ew
->
›_ty≥
 = 
SP_OPTYPE_DATE
;

1129 
T_GREATERAND
:

1130 
ªsu…
 = 1;

1131 
≤ew
->
›
=
T_GREATER
;

1132 
≤ew
->
›_ty≥
 = 
SP_OPTYPE_DATE
;

1134 
T_BEFORE
:

1135 
ªsu…
 = 1;

1136 
≤ew
->
›_ty≥
 = 
SP_OPTYPE_DATE
;

1137 
≤ew
->
›
=
T_LESS
;

1139 
T_AFTER
:

1140 
ªsu…
 = 1;

1141 
≤ew
->
›_ty≥
 = 
SP_OPTYPE_DATE
;

1142 
≤ew
->
›
=
T_GREATER
;

1146 
	`•_£t_îr‹
(
åì
,
SP_E_DATECMP
);

1147 
	`DPRINTF
(
E_LOG
,
L_PARSE
,"Expecting int comparison op, got %04X\n",

1148 
åì
->
tokí
.
tokí_id
);

1152 if(
ªsu…
) {

1153 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

1155 if((
≤ew
->
right
.
tvÆue
 = 
	`•_∑r£_d©e
(
åì
))) {

1156 
ªsu…
=1;

1158 
	`•_£t_îr‹
(
åì
,
SP_E_DATE
);

1159 
ªsu…
=0;

1163 if(!
ªsu…
) {

1164 
	`•_‰ì_node
(
≤ew
);

1165 
≤ew
=
NULL
;

1169 
	`•_íãr_exô
(
åì
,"•_∑r£_d©e_¸ôîi⁄",0,
≤ew
);

1171  
≤ew
;

1172 
	}
}

1185 
time_t
 
	$•_∑r£_d©e
(
PARSETREE
 
åì
) {

1186 
time_t
 
ªsu…
=0;

1187 
time_t
 
öãrvÆ
;

1188 
bef‹e
;

1190 
	`•_íãr_exô
(
åì
,"•_∑r£_d©e",1,(*)
ªsu…
);

1192 
åì
->
tokí
.
tokí_id
) {

1193 
T_TODAY
:

1194 
ªsu…
 = 
	`time
(
NULL
);

1195 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

1197 
T_DATE
:

1198 
ªsu…
 = 
åì
->
tokí
.
d©a
.
tvÆue
;

1199 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

1203 if(!
ªsu…
) {

1205 
öãrvÆ
 = 
	`•_∑r£_d©e_öãrvÆ
(
åì
);

1206 if(!
öãrvÆ
) {

1207 
ªsu…
 = 0;

1208 } if((
åì
->
tokí
.
tokí_id
 !
T_BEFORE
) &&

1209 (
åì
->
tokí
.
tokí_id
 !
T_AFTER
)) {

1210 
	`•_£t_îr‹
(
åì
,
SP_E_BEFOREAFTER
);

1211 
ªsu…
=0;

1213 
bef‹e
 = 1;

1214 if(
åì
->
tokí
.
tokí_id
 =
T_AFTER
)

1215 
bef‹e
 = 0;

1217 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

1218 
ªsu…
 = 
	`•_∑r£_d©e
(
åì
);

1219 if(
ªsu…
) {

1220 if(
bef‹e
) {

1221 
ªsu…
 -
öãrvÆ
;

1223 
ªsu…
 +
öãrvÆ
;

1229 
	`•_íãr_exô
(
åì
,"•_∑r£_d©e_¸ôîi⁄",0,(*)
ªsu…
);

1231  
ªsu…
;

1232 
	}
}

1241 
time_t
 
	$•_∑r£_d©e_öãrvÆ
(
PARSETREE
 
åì
) {

1242 
time_t
 
ªsu…
=0;

1243 
cou¡
;

1245 
	`•_íãr_exô
(
åì
,"•_∑r£_d©e_öãrvÆ",1,(*)
ªsu…
);

1247 if(
åì
->
tokí
.
tokí_id
 !
T_NUMBER
) {

1248 
ªsu…
=0;

1249 
	`•_£t_îr‹
(
åì
,
SP_E_NUMBER
);

1251 
cou¡
 = 
åì
->
tokí
.
d©a
.
ivÆue
;

1252 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

1253 
åì
->
tokí
.
tokí_id
) {

1254 
T_DAY
:

1255 
ªsu…
 = 
cou¡
 * 3600 * 24;

1256 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

1258 
T_WEEK
:

1259 
ªsu…
 = 
cou¡
 * 3600 * 24 * 7;

1260 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

1262 
T_MONTH
:

1263 
ªsu…
 = 
cou¡
 * 3600 * 24 * 30;

1264 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

1266 
T_YEAR
:

1267 
ªsu…
 = 
cou¡
 * 3600 * 24 * 365;

1268 
	`•_sˇn
(
åì
,
SP_HINT_NONE
);

1271 
ªsu…
=0;

1272 
	`•_£t_îr‹
(
åì
, 
SP_E_TIMEINTERVAL
);

1277 
	`•_íãr_exô
(
åì
,"•_∑r£_d©e_öãrvÆ",0,(*)
ªsu…
);

1278  
ªsu…
;

1279 
	}
}

1288 
	$•_‰ì_node
(
SP_NODE
 *
node
) {

1289 if(!
node
)

1292 if(
node
->
›_ty≥
 =
SP_OPTYPE_ANDOR
) {

1293 if(
node
->
À·
.node) {

1294 
	`•_‰ì_node
(
node
->
À·
.node);

1295 
node
->
À·
.nodê
NULL
;

1298 if(
node
->
right
.node) {

1299 
	`•_‰ì_node
(
node
->
right
.node);

1300 
node
->
right
.nodê
NULL
;

1303 if(
node
->
À·
.
fõld
) {

1304 
	`‰ì
(
node
->
À·
.
fõld
);

1305 
node
->
À·
.
fõld
 = 
NULL
;

1308 if(
node
->
›_ty≥
 =
SP_OPTYPE_STRING
) {

1309 if(
node
->
right
.
cvÆue
) {

1310 
	`‰ì
(
node
->
right
.
cvÆue
);

1311 
node
->
right
.
cvÆue
 = 
NULL
;

1317 
	`‰ì
(
node
);

1318 
	}
}

1327 
	$•_di•o£
(
PARSETREE
 
åì
) {

1328 if(
åì
->
ãrm
)

1329 
	`‰ì
(
åì
->
ãrm
);

1331 if(
åì
->
tokí
.
tokí_id
 & 0x2000)

1332 
	`‰ì
(
åì
->
tokí
.
d©a
.
cvÆue
);

1334 if(
åì
->
îr‹
)

1335 
	`‰ì
(
åì
->
îr‹
);

1337 
	`‰ì
(
åì
);

1339 
	}
}

1341 #ifde‡
HAVE_SQL


1349 
	$•_node_size
(
SP_NODE
 *
node
) {

1350 
size
;

1351 
°rög_size
;

1353 if(
node
->
›_ty≥
 =
SP_OPTYPE_ANDOR
) {

1354 
size
 = 
	`•_node_size
(
node
->
À·
.node);

1355 
size
 +
	`•_node_size
(
node
->
right
.node);

1356 
size
 += 7;

1358 
size
 = 4;

1359 
size
 +(Ë
	`°æí
(
node
->
À·
.
fõld
);

1360 if((
node
->
›
 & 0x0FFFË> 
T_LAST
) {

1361 
	`DPRINTF
(
E_FATAL
,
L_PARSE
,"Can't determineÇode size: op %04x\n",

1362 
node
->
›
);

1364 
size
 +(Ë
	`°æí
(
•_tokí_des¸
[
node
->
›
 & 0x0FFF]);

1367 if(
node
->
›_ty≥
 =
SP_OPTYPE_STRING
) {

1368 
°rög_size
 = 0;

1369 if((
node
->
right
.
cvÆue
Ë&& (
	`°æí
(node->right.cvalue)))

1370 
	`db_sql_esˇ≥
(
NULL
,&
°rög_size
,"%q",
node
->
right
.
cvÆue
);

1372 
size
 +(2 + 
°rög_size
);

1373 if(
node
->
›
 =
T_INCLUDES
) {

1374 
size
 += 2;

1376 if((
node
->
›
 =
T_STARTSWITH
)||“ode->› =
T_ENDSWITH
)) {

1377 
size
 += 1;

1381 if((
node
->
›_ty≥
 =
SP_OPTYPE_INT
Ë|| (node->›_ty≥ =
SP_OPTYPE_DATE
)) {

1382 
size
 += 40;

1385 if(
node
->
nŸ_Êag
) {

1386 
size
 += 5;

1390  
size
;

1391 
	}
}

1399 
	$•_£rülize_sql
(
SP_NODE
 *
node
, *
°rög
) {

1400 
buf„r
[40];

1401 
size
;

1403 if(
node
->
›_ty≥
 =
SP_OPTYPE_ANDOR
) {

1404 
	`°rˇt
(
°rög
,"(");

1405 
	`•_£rülize_sql
(
node
->
À·
.node,
°rög
);

1406 if(
node
->
›
 =
T_AND
Ë
	`°rˇt
(
°rög
,"ánd ");

1407 if(
node
->
›
 =
T_OR
Ë
	`°rˇt
(
°rög
," or ");

1408 
	`•_£rülize_sql
(
node
->
right
.node,
°rög
);

1409 
	`°rˇt
(
°rög
,")");

1411 
	`°rˇt
(
°rög
,"(");

1412 if(
node
->
nŸ_Êag
) {

1413 
	`°rˇt
(
°rög
,"not ");

1415 
	`°rˇt
(
°rög
,
node
->
À·
.
fõld
);

1416 
	`°rˇt
(
°rög
," ");

1417 
	`°rˇt
(
°rög
,
•_tokí_des¸
[
node
->
›
 & 0x0FFF]);

1418 
	`°rˇt
(
°rög
," ");

1419 if(
node
->
›_ty≥
 =
SP_OPTYPE_STRING
) {

1420 
	`°rˇt
(
°rög
,"'");

1421 if((
node
->
›
 =
T_INCLUDES
Ë|| (node->› =
T_ENDSWITH
))

1422 
	`°rˇt
(
°rög
,"%");

1423 
size
 = 0;

1424 if((
node
->
right
.
cvÆue
Ë&& (
	`°æí
(node->right.cvalue)))

1425 
	`db_sql_esˇ≥
(
NULL
,&
size
,"%q",
node
->
right
.
cvÆue
);

1430 if((
node
->
right
.
cvÆue
Ë&& (
	`°æí
(node->right.cvalue)))

1431 
	`db_sql_esˇ≥
(&
°rög
[
	`°æí
(°rög)],&
size
,"%q",

1432 
node
->
right
.
cvÆue
);

1435 if((
node
->
›
 =
T_INCLUDES
Ë|| (node->› =
T_STARTSWITH
))

1436 
	`°rˇt
(
°rög
,"%");

1437 
	`°rˇt
(
°rög
,"'");

1440 if(
node
->
›_ty≥
 =
SP_OPTYPE_INT
) {

1441 
	`•rötf
(
buf„r
,"%d",
node
->
right
.
ivÆue
);

1442 
	`°rˇt
(
°rög
,
buf„r
);

1445 if(
node
->
›_ty≥
 =
SP_OPTYPE_DATE
) {

1446 
	`•rötf
(
buf„r
,"%d",()
node
->
right
.
tvÆue
);

1447 
	`°rˇt
(
°rög
,
buf„r
);

1449 
	`°rˇt
(
°rög
,")");

1452 
	}
}

1462 *
	$•_sql_˛au£
(
PARSETREE
 
åì
) {

1463 
size
;

1464 *
sql
;

1466 
	`DPRINTF
(
E_DBG
,
L_PARSE
,"Fetching sql statement size\n");

1467 
size
 = 
	`•_node_size
(
åì
->tree);

1468 
	`DPRINTF
(
E_DBG
,
L_PARSE
,"Size: %d\n",
size
);

1470 
sql
 = (*)
	`mÆloc
(
size
+1);

1472 
	`mem£t
(
sql
,0x00,
size
+1);

1473 
	`•_£rülize_sql
(
åì
->åì,
sql
);

1475 
	`DPRINTF
(
E_DBG
,
L_PARSE
,"SîülizedÅÿ: %s\n",
sql
);

1477  
sql
;

1478 
	}
}

1494 *
	$•_gë_îr‹
(
PARSETREE
 
åì
) {

1495 if(
åì
->
îr‹
 =
NULL
) {

1496 
	`•_£t_îr‹
(
åì
,
SP_E_UNKNOWN
);

1498  
åì
->
îr‹
;

1499 
	}
}

1507 
	$•_£t_îr‹
(
PARSETREE
 
åì
, 
îr‹
) {

1508 
Àn
;

1510 if(
åì
->
îr‹
)

1511 
	`‰ì
(
åì
->
îr‹
);

1513 
Àn
 = 10 + (
åì
->
tokí_pos
 / 10Ë+ 1 + (Ë
	`°æí
(
•_îr‹°rögs
[
îr‹
]) + 1;

1514 
åì
->
îr‹
 = (*)
	`mÆloc
(
Àn
);

1515 if(!
åì
->
îr‹
) {

1516 
	`DPRINTF
(
E_FATAL
,
L_PARSE
,"MallocÉrror");

1520 
	`•rötf
(
åì
->
îr‹
,"Off£à%d: %s",åì->
tokí_pos
 + 1,
•_îr‹°rögs
[error]);

1522 
	}
}

	@smart-parser.h

5 #i‚de‡
_SMART_PARSER_H_


6 
	#_SMART_PARSER_H_


	)

8 * 
	tPARSETREE
;

10 
PARSETREE
 
•_öô
();

11 
•_∑r£
(
PARSETREE
 
åì
, *
ãrm
, 
ty≥
);

12 
•_di•o£
(
PARSETREE
 
åì
);

13 *
•_gë_îr‹
(
PARSETREE
 
åì
);

14 *
•_sql_˛au£
(
PARSETREE
 
åì
);

16 
	#SP_TYPE_PLAYLIST
 0

	)

17 
	#SP_TYPE_QUERY
 1

	)

	@ssl.c

2 
	~<dúít.h
>

3 
	~<time.h
>

4 
	~"s¶.h
"

8 
	#DEFAULT_CERT_FILE
 "/web/£rvî.≥m"

	)

9 
	#DEFAULT_KEY_FILE
 "/web/ˇkey.≥m"

	)

10 
	#DEFAULT_CA_FILE
 "/web/ˇ˚π.≥m"

	)

11 
	#DEFAULT_CA_PATH
 "/web/"

	)

12 
	#SSL_PORT
 443

	)

17 
websSSLSëCîtStuff
(
SSL_CTX
 *
˘x
,

18 *
˚π_fûe
,

19 *
key_fûe
);

20 
websSSLVîifyCÆlback
(
ok
, 
X509_STORE_CTX
 *
˘x
);

21 
RSA
 *
websSSLTempRSACÆlback
(
SSL
 *
s
, 
is_exp‹t
, 
keyÀngth
);

23 
websSSLRódEvít
 (
webs_t
 
wp
);

24 
websSSLAc˚±
(
sid
, *
ùaddr
, 
p‹t
, 
li°íSid
);

25 
websSSLSockëEvít
(
sid
, 
mask
, 
d©a
);

30 
	gs¶Li°íSock
 = -1;

31 
SSL_CTX
 *
	gs¶˘x
 = 
NULL
;

40 
	$websSSLO≥n
()

42 *
˚πFûe
, *
keyFûe
, *
CA∑th
, *
CAfûe
;

43 
SSL_METHOD
 *
mëh
;

48 
	`≠ps_°¨tup
();

49 
	`¥ötf
("ssl.c: SSL: Initializing SSL\n");

51 
	`SSL_lﬂd_îr‹_°rögs
();

53 
	`SSLóy_add_s¶_Æg‹ôhms
();

59 
mëh
 = 
	`SSLv23_£rvî_mëhod
();

60 
s¶˘x
 = 
	`SSL_CTX_√w
(
mëh
);

62 i‡(
s¶˘x
 =
NULL
) {

63 
	`¥ötf
("SSL: UnableÅo create SSL context!\n");

70 
	`SSL_CTX_£t_quõt_shutdown
(
s¶˘x
, 1);

71 
	`SSL_CTX_£t_›ti⁄s
(
s¶˘x
, 0);

72 
	`SSL_CTX_£ss_£t_ˇche_size
(
s¶˘x
, 128);

77 
CA∑th
 = 
DEFAULT_CA_PATH
;

78 
CAfûe
 = 
DEFAULT_CA_FILE
;

79 i‡((!
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
s¶˘x
, 
CAfûe
, 
CA∑th
)) ||

80 (!
	`SSL_CTX_£t_deÁu…_vîify_∑ths
(
s¶˘x
))) {

81 
	`¥ötf
("SSL: UnableÅo set cert verificationÜocations!\n");

82 
	`websSSLClo£
();

90 
˚πFûe
 = 
DEFAULT_CERT_FILE
;

91 
keyFûe
 = 
NULL
;

92 i‡(
	`websSSLSëCîtStuff
(
s¶˘x
, 
˚πFûe
, 
keyFûe
) != 0) {

93 
	`websSSLClo£
();

100 
	`SSL_CTX_£t_tmp_rß_ˇŒback
(
s¶˘x
, 
websSSLTempRSACÆlback
);

105 
	`SSL_CTX_£t_vîify
(
s¶˘x
, 
SSL_VERIFY_NONE
, 
websSSLVîifyCÆlback
);

110 
	`SSL_CTX_£t_˛õ¡_CA_li°
(
s¶˘x
, 
	`SSL_lﬂd_˛õ¡_CA_fûe
(
CAfûe
));

115 
s¶Li°íSock
 = 
	`sockëO≥nC⁄√˘i⁄
(
NULL
, 
SSL_PORT
,

116 
websSSLAc˚±
, 
SOCKET_BLOCK
);

118 i‡(
s¶Li°íSock
 < 0) {

119 
	`åa˚
(2, 
	`T
("SSL: UnableÅo open SSL socket onÖort <%d>!\n"),

120 
SSL_PORT
);

125 
	}
}

131 
	$websSSLClo£
()

133 
	`¥ötf
("SSL: Closing SSL\n");

135 i‡(
s¶˘x
 !
NULL
) {

136 
	`SSL_CTX_‰ì
(
s¶˘x
);

137 
s¶˘x
 = 
NULL
;

140 i‡(
s¶Li°íSock
 != -1) {

141 
	`sockëClo£C⁄√˘i⁄
(
s¶Li°íSock
);

142 
s¶Li°íSock
 = -1;

144 
	}
}

151 
	$websSSLSëCîtStuff
(
SSL_CTX
 *
˘x
, *
˚πFûe
, *
keyFûe
)

154 i‡(
˚πFûe
 !
NULL
) {

155 i‡(
	`SSL_CTX_u£_˚πifiˇã_fûe
(
˘x
, 
˚πFûe
,

156 
SSL_FILETYPE_PEM
) <= 0) {

157 
	`¥ötf
("SSL: U«bÀÅÿ£à˚πifiˇã fûê<%s>\n", 
˚πFûe
);

161 i‡(
keyFûe
 =
NULL
) {

162 
keyFûe
 = 
˚πFûe
;

165 i‡(
	`SSL_CTX_u£_Priv©eKey_fûe
(
˘x
, 
keyFûe
, 
SSL_FILETYPE_PEM
) <= 0) {

166 
	`¥ötf
("SSL: U«bÀÅÿ£à¥iv©êkey fûê<%s>\n", 
keyFûe
);

175 i‡(!
	`SSL_CTX_check_¥iv©e_key
(
˘x
)) {

176 
	`¥ötf
("SSL: Check o‡¥iv©êkey fûê<%s> FAILED!\n",
keyFûe
);

182 
	}
}

189 
RSA
 *
	$websSSLTempRSACÆlback
(
SSL
 *
s¶
, 
isExp‹t
, 
keyLígth
)

191 
RSA
 *
rßTemp
 = 
NULL
;

193 i‡(
rßTemp
 =
NULL
)

194 
rßTemp
 = 
	`RSA_gíî©e_key
(
keyLígth
, 
RSA_F4
, 
NULL
, NULL);

196  
rßTemp
;

197 
	}
}

204 
	gs¶VîifyDïth
 = 0;

205 
	gs¶VîifyEº‹
 = 
X509_V_OK
;

207 
	$websSSLVîifyCÆlback
(
ok
, 
X509_STORE_CTX
 *
˘x
)

209 
buf
[256];

210 
X509
 *
îrCît
;

211 
îr
;

212 
dïth
;

214 
îrCît
 = 
	`X509_STORE_CTX_gë_cuºít_˚π
(
˘x
);

215 
îr
 = 
	`X509_STORE_CTX_gë_îr‹
(
˘x
);

216 
dïth
 = 
	`X509_STORE_CTX_gë_îr‹_dïth
(
˘x
);

218 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
îrCît
), 
buf
, 256);

220 i‡(!
ok
) {

221 i‡(
s¶VîifyDïth
 >
dïth
) {

222 
ok
 = 1;

223 
s¶VîifyEº‹
 = 
X509_V_OK
;

225 
ok
=0;

226 
s¶VîifyEº‹
 = 
X509_V_ERR_CERT_CHAIN_TOO_LONG
;

230 
îr
) {

231 
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
:

232 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
˘x
->
cuºít_˚π
), 
buf
, 256);

235 
X509_V_ERR_CERT_NOT_YET_VALID
:

236 
X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
:

237 
X509_V_ERR_CERT_HAS_EXPIRED
:

238 
X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
:

242  
ok
;

243 
	}
}

	@ssl.h

22 #i‚de‡
_SSL_H_


23 
	#_SSL_H_


	)

25 #ifde‡
USE_SSL


26 
	~<›ís¶/s¶.h
>

28 
ws_s¶_öô
(*
keyfûe
, *
˚π
, *
∑ssw‹d
);

29 
ws_s¶_deöô
();

30 
ws_s¶_wrôe
(
WS_CONNINFO
 *
pwsc
, *
buf„r
, 
Àn
);

31 
ws_s¶_ªad
(
WS_CONNINFO
 *
pwsc
, *
buf„r
, 
Àn
);

32 
ws_s¶_shutdown
(
WS_CONNINFO
 *
pwsc
);

	@upnp.c

23 #ifde‡
HAVE_CONFIG_H


24 
	~"c⁄fig.h
"

27 
	~<î∫o.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<¨∑/öë.h
>

31 
	~<√töë/ö.h
>

32 
	~<±hªad.h
>

33 
	~<°rög.h
>

34 
	~<sys/sockë.h
>

35 
	~<sys/°©.h
>

36 
	~<sys/ty≥s.h
>

37 
	~<uni°d.h
>

39 #ifde‡
HAVE_SYS_TIME_H


40 
	~<sys/time.h
>

43 
	~"c⁄f.h
"

44 
	~"dØpd.h
"

45 
	~"îr.h
"

46 
	~"os.h
"

47 
	~"utû.h
"

48 
	~"u≤p.h
"

50 
	#UPNP_MAX_PACKET
 1500

	)

51 
	#UPNP_CACHE_DURATION
 1800

	)

52 
	#UPNP_ADDR
 "239.255.255.250"

	)

53 
	#UPNP_PORT
 1900

	)

55 
	#UPNP_TYPE_ALIVE
 1

	)

56 
	#UPNP_TYPE_BYEBYE
 2

	)

57 
	#UPNP_TYPE_RESPONSE
 3

	)

59 
	#UPNP_UUID
 "12345678-1234-1234-1234-123456789013"

	)

61 
	#UPNP_SELECT_TIMEOUT
 1

	)

63 
	su≤p_adöfo_t
 {

64 
	mty≥
;

65 
	mvîsi⁄
;

66 *
	mloˇti⁄
;

67 *
	m«me•a˚
;

68 *
	m«me
;

69 *
	mbody
;

70 } 
	tUPNP_ADINFO
;

72 
	su≤p_∑ckëöfo_t
 {

73 *
	mgroup_id
;

74 
UPNP_ADINFO
 *
	m∑döfo
;

75 
u≤p_∑ckëöfo_t
 *
	m√xt
;

76 } 
	tUPNP_PACKETINFO
;

78 
	su≤p_disco_t
 {

79 
	m£c⁄ds_ªmaöög
;

80 *
	mquîy
;

81 
sockaddr_ö
 
	mto
;

82 
u≤p_disco_t
 *
	m√xt
;

83 } 
	tUPNP_DISCO
;

86 
UPNP_PACKETINFO
 
	gu≤p_∑ckëli°
;

87 
OS_SOCKETTYPE
 
	gu≤p_sockë
;

88 
UPNP_DISCO
 
	gu≤p_disco
;

90 
±hªad_t
 
	gu≤p_li°íî_tid
;

91 
	gu≤p_quôÊag
 = 0;

92 
	gu≤p_thªad_°¨ãd
 = 0;

93 *
	gu≤p_brﬂdˇ°_ty≥s
[] = {

101 
u≤p_°rˇt
(*
wh©
, *
whîe
, 
byãs_À·
);

102 
u≤p_buûd_∑ckë
(*
∑ckë
, 
Àn
, 
ty≥
, 
UPNP_PACKETINFO
 *
pi
,

103 
UPNP_DISCO
 *
pdisco
);

104 
u≤p_brﬂdˇ°
(
ty≥
, 
UPNP_DISCO
 *
pdisco
);

105 *
u≤p_li°íî
(*
¨g
);

106 
u≤p_¥o˚ss_∑ckë
();

107 
u≤p_¥o˚ss_quîõs
();

112 *
	$u≤p_uuid
() {

113  
UPNP_UUID
;

114 
	}
}

120 
	$u≤p_add_∑ckë
(*
group_id
, 
ty≥
, *
loˇti⁄
,

121 *
«me•a˚
, *
«me
, 
vîsi⁄
,

122 *
body
) {

123 
UPNP_PACKETINFO
 *
≤ew
;

124 
UPNP_ADINFO
 *
≤ewöfo
;

126 
≤ew
 = (
UPNP_PACKETINFO
 *)
	`mÆloc
((UPNP_PACKETINFO));

127 if(!
≤ew
)

128 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"MallocÉrror\n");

130 
≤ewöfo
 = (
UPNP_ADINFO
 *)
	`mÆloc
((UPNP_ADINFO));

131 if(!
≤ewöfo
)

132 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"MallocÉrror\n");

134 
	`mem£t
(
≤ew
,0,(
UPNP_PACKETINFO
));

135 
	`mem£t
(
≤ewöfo
,0,(
UPNP_ADINFO
));

137 if(
group_id
)

138 
≤ew
->
group_id
 = 
	`°rdup
(group_id);

140 
≤ewöfo
->
ty≥
 =Åype;

141 
≤ewöfo
->
vîsi⁄
 = version;

142 if(
loˇti⁄
Ë
≤ewöfo
->loˇti⁄ = 
	`°rdup
(location);

143 if(
«me•a˚
Ë
≤ewöfo
->«me•a˚ = 
	`°rdup
(namespace);

144 if(
«me
Ë
≤ewöfo
->«mê
	`°rdup
(name);

145 if(
body
Ë
≤ewöfo
->body = 
	`°rdup
(body);

147 
≤ew
->
∑döfo
 = 
≤ewöfo
;

149 
	`utû_muãx_lock
(
l_u≤p
);

150 
≤ew
->
√xt
 = 
u≤p_∑ckëli°
.next;

151 
u≤p_∑ckëli°
.
√xt
 = 
≤ew
;

152 
	`utû_muãx_u∆ock
(
l_u≤p
);

153 
	}
}

155 
	$u≤p_°rˇt
(*
wh©
, *
whîe
, 
byãs_À·
) {

156 if(!
wh©
)

157  
byãs_À·
;

159 if(
	`°æí
(
wh©
Ë< 
byãs_À·
) {

160 
	`°rˇt
(
whîe
,
wh©
);

161  
byãs_À·
 - 
	`°æí
(
wh©
);

164  
byãs_À·
;

165 
	}
}

168 
	$u≤p_buûd_∑ckë
(*
∑ckë
, 
Àn
, 
ty≥
,

169 
UPNP_PACKETINFO
 *
pi
, 
UPNP_DISCO
 *
pdisco
) {

170 
buf„r
[256];

171 
ho°«me
[256];

172 *
∑ckë
 = '\0';

173 
p‹t
;

175 
p‹t
 = 
	`c⁄f_gë_öt
("general","port",0);

177 if(
ty≥
 =
UPNP_TYPE_RESPONSE
) {

178 
Àn
 = 
	`u≤p_°rˇt
("HTTP/1.1 200 OK\r\n",
∑ckë
,len);

180 
Àn
 = 
	`u≤p_°rˇt
("NOTIFY * HTTP/1.1\r\n",
∑ckë
,len);

183 if(
pi
->
∑döfo
->
loˇti⁄
) {

186 
	`gëho°«me
(
ho°«me
,(hostname));

187 
	`¢¥ötf
(
buf„r
,(buffer),"LOCATION: http://%s:%d%s\r\n",

188 
ho°«me
,
p‹t
,
pi
->
∑döfo
->
loˇti⁄
);

190 
Àn
=
	`u≤p_°rˇt
(
buf„r
,
∑ckë
,len);

193 if(
ty≥
 !
UPNP_TYPE_RESPONSE
)

194 
Àn
=
	`u≤p_°rˇt
("HOST: 239.255.255.250:1900\r\n",
∑ckë
,len);

196 
Àn
=
	`u≤p_°rˇt
("SERVER: POSIX, UPnP/1.0, FúeÊy/" 
VERSION
 "\r\n",

197 
∑ckë
,
Àn
);

199 if(
ty≥
 =
UPNP_TYPE_ALIVE
) {

200 
Àn
=
	`u≤p_°rˇt
("NTS: ssdp:Æive\r\n",
∑ckë
,len);

201 } if(
ty≥
 =
UPNP_TYPE_BYEBYE
) {

202 
Àn
=
	`u≤p_°rˇt
("NTS: ssdp:byebye\r\n",
∑ckë
,len);

203 } i‡((
ty≥
 =
UPNP_TYPE_RESPONSE
Ë&& (
pdisco
)) {

205 
	`¢¥ötf
(
buf„r
,(buf„r),"ST: %s\r\n",
pdisco
->
quîy
);

206 
Àn
 = 
	`u≤p_°rˇt
(
buf„r
,
∑ckë
,len);

210 
pi
->
∑döfo
->
ty≥
) {

211 
UPNP_AD_UUID
:

212 
	`¢¥ötf
(
buf„r
,(buf„r),"USN: uuid:%s\r\n",
	`u≤p_uuid
());

213 
Àn
=
	`u≤p_°rˇt
(
buf„r
,
∑ckë
,len);

214 if(
ty≥
 !
UPNP_TYPE_RESPONSE
) {

215 
	`¢¥ötf
(
buf„r
,(buf„r),"NT: uuid:%s\r\n",
	`u≤p_uuid
());

216 
Àn
=
	`u≤p_°rˇt
(
buf„r
,
∑ckë
,len);

220 
UPNP_AD_DEVICE
:

221 
UPNP_AD_SERVICE
:

222 
UPNP_AD_ROOT
:

223 
	`¢¥ötf
(
buf„r
,(buf„r),"USN: uuid:%s::%s:%s%s",
	`u≤p_uuid
(),

224 
pi
->
∑döfo
->
«me•a˚
,

225 (
pi
->
∑döfo
->
ty≥
 =
UPNP_AD_DEVICE
) ? "device:" :

226 ((
pi
->
∑döfo
->
ty≥
 =
UPNP_AD_SERVICE
) ? "service:" : ""),

227 
pi
->
∑döfo
->
«me
);

228 
Àn
=
	`u≤p_°rˇt
(
buf„r
,
∑ckë
,len);

229 if(
pi
->
∑döfo
->
vîsi⁄
) {

230 
	`¢¥ötf
(
buf„r
,(buf„r),":%d",
pi
->
∑döfo
->
vîsi⁄
);

231 
Àn
=
	`u≤p_°rˇt
(
buf„r
,
∑ckë
,len);

233 
Àn
=
	`u≤p_°rˇt
("\r\n",
∑ckë
,len);

235 if(
ty≥
 !
UPNP_TYPE_RESPONSE
) {

236 
	`¢¥ötf
(
buf„r
,(buffer),"NT: %s:%s%s",

237 
pi
->
∑döfo
->
«me•a˚
,

238 (
pi
->
∑döfo
->
ty≥
 =
UPNP_AD_DEVICE
) ? "device:" :

239 ((
pi
->
∑döfo
->
ty≥
 =
UPNP_AD_SERVICE
) ? "service:":""),

240 
pi
->
∑döfo
->
«me
);

242 
Àn
=
	`u≤p_°rˇt
(
buf„r
,
∑ckë
,len);

243 if(
pi
->
∑döfo
->
vîsi⁄
) {

244 
	`¢¥ötf
(
buf„r
,(buf„r),":%d",
pi
->
∑döfo
->
vîsi⁄
);

245 
Àn
=
	`u≤p_°rˇt
(
buf„r
,
∑ckë
,len);

247 
Àn
=
	`u≤p_°rˇt
("\r\n",
∑ckë
,len);

254 
	`¢¥ötf
(
buf„r
,(buffer),"CACHE-CONTROL: max-age=%d\r\n",

255 
UPNP_CACHE_DURATION
);

256 
Àn
=
	`u≤p_°rˇt
(
buf„r
,
∑ckë
,len);

258 if((
pi
->
∑döfo
->
body
Ë&& (
ty≥
 !
UPNP_TYPE_RESPONSE
)) {

259 
	`¢¥ötf
(
buf„r
,(buffer),"Content-Length: %d\r\n\r\n",

260 ()
	`°æí
(
pi
->
∑döfo
->
body
));

261 
Àn
=
	`u≤p_°rˇt
(
buf„r
,
∑ckë
,len);

262 
Àn
=
	`u≤p_°rˇt
(
pi
->
∑döfo
->
body
,
∑ckë
,len);

264 
Àn
=
	`u≤p_°rˇt
("C⁄ã¡-Lígth: 0\r\n\r\n",
∑ckë
,len);

266 
	}
}

271 
	$u≤p_brﬂdˇ°
(
ty≥
, 
UPNP_DISCO
 *
pdisco
) {

272 
UPNP_PACKETINFO
 *
pi
;

273 
sockaddr_ö
 
sö
;

274 
∑ckë
[
UPNP_MAX_PACKET
];

275 
∑ss
;

276 
∑s£s
;

277 
£nd_∑ckë
;

278 
ñemíts
=0;

279 
ªcognized
=0;

280 **
¨gv
 = 
NULL
;

282 
	`mem£t
(&
sö
, 0, (sin));

283 if(
ty≥
 =
UPNP_TYPE_RESPONSE
) {

284 
	`mem˝y
((*)&
sö
,(*)&
pdisco
->
to
,(
sockaddr_ö
));

286 
sö
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
UPNP_ADDR
);

287 
sö
.
sö_Ámûy
 = 
AF_INET
;

288 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
UPNP_PORT
);

291 
	`utû_muãx_lock
(
l_u≤p
);

293 
	`DPRINTF
(
E_DBG
,
L_MISC
,"Sídög u≤∞brﬂdˇ° o‡ty≥: %d (%s)\n",
ty≥
,

294 
u≤p_brﬂdˇ°_ty≥s
[
ty≥
]);

296 
∑s£s
 = 2;

297 if(
ty≥
 =
UPNP_TYPE_RESPONSE
) {

298 
∑s£s
 = 1;

299 if(
	`°rˇ£cmp
(
pdisco
->
quîy
,"ssdp:all")==0)

300 
∑s£s
 = 3;

302 
ñemíts
 = 
	`utû_•lô
(
pdisco
->
quîy
,":",&
¨gv
);

305 
∑ss
=0;Öas†< 
∑s£s
;Öass++) {

306 
pi
=
u≤p_∑ckëli°
.
√xt
;

307 
pi
) {

308 
£nd_∑ckë
 = 1;

309 if(
ty≥
 =
UPNP_TYPE_RESPONSE
) {

310 
£nd_∑ckë
 = 0;

313 if(
	`°rˇ£cmp
(
pdisco
->
quîy
,"ssdp:all")==0) {

314 
£nd_∑ckë
 = 1;

315 } if((
	`°rˇ£cmp
(
pdisco
->
quîy
,"upnp:rootdevice")==0) &&

316 (
pi
->
∑döfo
->
ty≥
 =
UPNP_AD_ROOT
)) {

317 
£nd_∑ckë
 = 1;

319 if((
	`°∫ˇ£cmp
(
pdisco
->
quîy
,"uuid:",5) == 0) &&

320 (!
	`°rˇ£cmp
((*)&
pdisco
->
quîy
[5],
	`u≤p_uuid
())) &&

321 (
pi
->
∑döfo
->
ty≥
 =
UPNP_AD_UUID
)) {

322 
£nd_∑ckë
 = 1;

323 } if((
ñemíts
 == 5) &&

324 (
	`°rˇ£cmp
(
¨gv
[2],"device")==0)) {

325 if((
pi
->
∑döfo
->
ty≥
 =
UPNP_AD_DEVICE
) &&

326 (
	`°rˇ£cmp
((*)&
pi
->
∑döfo
->
«me•a˚
[4],
¨gv
[1])==0) &&

327 (
	`°rˇ£cmp
(
pi
->
∑döfo
->
«me
,
¨gv
[3])==0) &&

328 (
pi
->
∑döfo
->
vîsi⁄
 >
	`©oi
(
¨gv
[4]))) {

329 
£nd_∑ckë
 = 1;

332 } if((
ñemíts
 == 5) &&

333 (
	`°rˇ£cmp
(
¨gv
[2],"service")==0)) {

334 if((
pi
->
∑döfo
->
ty≥
 =
UPNP_AD_SERVICE
) &&

335 (
	`°rˇ£cmp
((*)&
pi
->
∑döfo
->
«me•a˚
[4],
¨gv
[1])==0) &&

336 (
	`°rˇ£cmp
(
pi
->
∑döfo
->
«me
,
¨gv
[3])==0) &&

337 (
pi
->
∑döfo
->
vîsi⁄
 >
	`©oi
(
¨gv
[4]))) {

338 
£nd_∑ckë
 = 1;

343 if(
£nd_∑ckë
) {

344 
	`u¶ìp
(100);

345 
ªcognized
 = 1;

346 
	`u≤p_buûd_∑ckë
(
∑ckë
, 
UPNP_MAX_PACKET
, 
ty≥
, 
pi
, 
pdisco
);

347 
	`£ndto
(
u≤p_sockë
,
∑ckë
,
	`°æí
(packet),0,

348 (
sockaddr
 *)&
sö
, (sin));

351 
pi
 =Öi->
√xt
;

355 if(
ty≥
 =
UPNP_TYPE_RESPONSE
) {

356 
	`¥ötf
("%†ª•⁄dÅÿquîy %s\n", 
ªcognized
 ? "Did" : "DidÇot",

357 
pdisco
->
quîy
);

360 if(
¨gv
) {

361 
	`utû_di•o£_•lô
(
¨gv
);

364 
	`utû_muãx_u∆ock
(
l_u≤p
);

365 
	}
}

371 
	$u≤p_öô
() {

372 
âl
 = 3;

373 
ªu£
=1;

374 
ªsu…
;

375 
îr
;

376 
sockaddr_ö
 
addr
;

377 
ù_mªq
 
mªq
;

379 
	`§™d
(()
	`time
(
NULL
));

381 
	`mem£t
(&
u≤p_∑ckëli°
,0,(upnp_packetlist));

382 
	`mem£t
(&
u≤p_disco
,0,(upnp_disco));

384 
	`u≤p_add_∑ckë
("ba£,", 
UPNP_AD_UUID
, "/upnp-basic.xml",

385 
NULL
, NULL, 0, NULL);

386 
	`u≤p_add_∑ckë
("ba£,", 
UPNP_AD_DEVICE
, "/upnp-basic.xml",

387 "u∫:schemas-u≤p-‹g","MedüSîvî", 1, 
NULL
);

388 
	`u≤p_add_∑ckë
("ba£,", 
UPNP_AD_SERVICE
, "/upnp-basic.xml",

389 "u∫:schemas-u≤p-‹g","C⁄ã¡Dúe˘‹y", 1, 
NULL
);

390 
	`u≤p_add_∑ckë
("ba£,", 
UPNP_AD_SERVICE
, "/upnp-basic.xml",

391 "u∫:schemas-u≤p-‹g","C⁄√˘i⁄M™agî", 1, 
NULL
);

392 
	`u≤p_add_∑ckë
("ba£,", 
UPNP_AD_ROOT
, "/upnp-basic.xml",

393 "u≤p","roŸdevi˚",0,
NULL
);

395 
u≤p_sockë
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 
IPPROTO_UDP
);

396 
ªsu…
 = 
	`£tsock›t
(
u≤p_sockë
, 
IPPROTO_IP
, 
IP_MULTICAST_TTL
,

397 &
âl
, (ttl));

398 if(
ªsu…
 == -1) {

399 
	`˛o£
(
u≤p_sockë
);

400 
	`DPRINTF
(
E_LOG
,
L_MISC
,"Error setting IP_MULTICAST_TTL\n");

401  
FALSE
;

404 
ªsu…
 = 
	`£tsock›t
(
u≤p_sockë
,
SOL_SOCKET
,
SO_REUSEADDR
,

405 &
ªu£
,(reuse));

406 if(
ªsu…
 == -1) {

407 
	`˛o£
(
u≤p_sockë
);

408 
	`DPRINTF
(
E_LOG
,
L_MISC
,"Error setting SO_REUSEADDR\n");

409  
FALSE
;

413 
	`mem£t
(&
addr
,0,(addr));

414 
addr
.
sö_Ámûy
=
AF_INET
;

415 
addr
.
sö_addr
.
s_addr
=
	`ht⁄l
(
INADDR_ANY
);

416 
addr
.
sö_p‹t
=
	`ht⁄s
(
UPNP_PORT
);

418 if(
	`böd
(
u≤p_sockë
,(
sockaddr
 *)&
addr
,(addr)) < 0) {

419 
	`DPRINTF
(
E_LOG
,
L_MISC
,"Error bindingÅo upnpÖort\n");

420 
	`˛o£
(
u≤p_sockë
);

421  
FALSE
;

424 
mªq
.
imr_mu…üddr
.
s_addr
=
	`öë_addr
(
UPNP_ADDR
);

425 
mªq
.
imr_öãrÁ˚
.
s_addr
=
	`ht⁄l
(
INADDR_ANY
);

426 if(
	`£tsock›t
(
u≤p_sockë
,
IPPROTO_IP
,
IP_ADD_MEMBERSHIP
,&
mªq
,(mreq)) < 0) {

427 
	`DPRINTF
(
E_LOG
,
L_MISC
,"Error joining UPnP multicast group\n");

428 
	`˛o£
(
u≤p_sockë
);

429  
FALSE
;

433 
	`DPRINTF
(
E_DBG
,
L_MISC
,"Starting UPnPÜistenerÅhread\n");

434 if((
îr
=
	`±hªad_¸óã
(&
u≤p_li°íî_tid
,
NULL
,
u≤p_li°íî
,NULL))) {

435 
	`DPRINTF
(
E_LOG
,
L_MISC
,"Warning: couldÇot start upnpÜistener: %s\n",

436 
	`°ªº‹
(
îr
));

437 
u≤p_thªad_°¨ãd
=0;

438  
TRUE
;

441  
TRUE
;

442 
	}
}

448 
	$u≤p_¥o˚ss_quîõs
() {

449 
UPNP_DISCO
 *
∂a°
, *
pcuºít
;

451 
∂a°
=&
u≤p_disco
;

452 
pcuºít
 = 
u≤p_disco
.
√xt
;

457 
pcuºít
) {

458 if(
pcuºít
->
£c⁄ds_ªmaöög
 - 
UPNP_SELECT_TIMEOUT
 < 1) {

460 
	`u≤p_brﬂdˇ°
(
UPNP_TYPE_RESPONSE
,
pcuºít
);

461 
pcuºít
 =Öcuºít->
√xt
;

462 
	`‰ì
(
∂a°
->
√xt
->
quîy
);

463 
	`‰ì
(
∂a°
->
√xt
);

464 
∂a°
->
√xt
 = 
pcuºít
;

466 
pcuºít
->
£c⁄ds_ªmaöög
 -
UPNP_SELECT_TIMEOUT
;

467 
∂a°
 = 
pcuºít
;

468 
pcuºít
 =Öcuºít->
√xt
;

471 
	}
}

477 *
	$u≤p_li°íî
(*
¨g
) {

478 
ªsu…
;

479 
time_t
 
œ°_brﬂdˇ°
=0;

480 
fd_£t
 
ªad£t
;

481 
timevÆ
 
timeout
;

483 
u≤p_thªad_°¨ãd
 = 1;

484 
	`DPRINTF
(
E_DBG
,
L_MISC
,"upnpÜistenerÅhread started\n");

488 !
u≤p_quôÊag
) {

489 
	`FD_ZERO
(&
ªad£t
);

490 
	`FD_SET
(
u≤p_sockë
,&
ªad£t
);

495 
timeout
.
tv_£c
=
UPNP_SELECT_TIMEOUT
;

496 
timeout
.
tv_u£c
=0;

498 (
ªsu…
=
	`£À˘
(
u≤p_sockë
+1,&
ªad£t
,
NULL
,NULL,&
timeout
)==-1) &&

499 (
î∫o
 = 
EINTR
)) {

502 if(
ªsu…
 == -1) {

504 
	`DPRINTF
(
E_LOG
,
L_MISC
,"Error in select in upnpÜistener: %s\n",

505 
	`°ªº‹
(
î∫o
));

506 
u≤p_thªad_°¨ãd
=0;

507 
	`±hªad_exô
(
NULL
);

510 if(
	`FD_ISSET
(
u≤p_sockë
,&
ªad£t
)) {

511 
	`u≤p_¥o˚ss_∑ckë
();

514 if((
	`time
(
NULL
Ë- 
œ°_brﬂdˇ°
Ë> (
UPNP_CACHE_DURATION
/3)) {

515 
	`DPRINTF
(
E_DBG
,
L_MISC
,"Time forálive message!\n");

516 
	`u≤p_brﬂdˇ°
(
UPNP_TYPE_ALIVE
,
NULL
);

517 
œ°_brﬂdˇ°
 = 
	`time
(
NULL
);

520 
	`u≤p_¥o˚ss_quîõs
();

523 
u≤p_thªad_°¨ãd
=0;

524 
	`DPRINTF
(
E_DBG
,
L_MISC
,"upnpÜistenerÉxiting\n");

525 
	`±hªad_exô
(
NULL
);

526 
	}
}

532 
	$u≤p_¥o˚ss_∑ckë
() {

533 
u≤p_∑ckë
[
UPNP_MAX_PACKET
];

534 
ssize_t
 
byãs_ªad
;

535 *
löe_°¨t
, *
löe_íd
;

536 
discovîy
 = 0;

537 
mx
 = 0;

538 *
quîy
=
NULL
;

539 
sockaddr_ö
 
‰om
;

540 
sockÀn_t
 
‰om_Àn
;

541 
UPNP_DISCO
 *
pdisco
;

543 
‰om_Àn
 = (
‰om
);

544 
byãs_ªad
 = 
	`ªcv‰om
(
u≤p_sockë
,&
u≤p_∑ckë
,(upnp_packet),0,

545 (
sockaddr
 *)&
‰om
, &
‰om_Àn
);

551 
löe_°¨t
 = 
löe_íd
 = 
u≤p_∑ckë
;

552 (
löe_íd
 - 
u≤p_∑ckë
Ë< 
byãs_ªad
) {

553 ((*
löe_°¨t
=='\n')||(*line_start=='\r')) &&

554 (
löe_íd
 - 
u≤p_∑ckë
 < 
byãs_ªad
)) {

556 
löe_°¨t
++;

557 
löe_íd
++;

560 (*
löe_íd
 != '\n') && (*line_end != '\r') &&

561 (
löe_íd
 - 
u≤p_∑ckë
 < 
byãs_ªad
))

562 
löe_íd
++;

564 if((*
löe_íd
 == '\n') || (*line_end == '\r')) {

566 *
löe_íd
 = '\0';

567 
löe_íd
++;

570 if(
	`°∫ˇ£cmp
(
löe_°¨t
,"M-SEARCH",8) == 0) {

571 
	`DPRINTF
(
E_DBG
,
L_MISC
,"upnp_packet: M-SEARCH from %s\n",

572 
	`öë_¡ﬂ
(
‰om
.
sö_addr
));

574 
discovîy
=1;

577 if(
	`°∫ˇ£cmp
(
löe_°¨t
,"ST:",3)==0) {

579 if(
quîy
)

580 
	`‰ì
(
quîy
);

582 
löe_°¨t
 += 3;

583 *
löe_°¨t
 && *line_start == ' ')

584 
löe_°¨t
++;

586 
quîy
 = 
	`°rdup
(
löe_°¨t
);

587 
	`DPRINTF
(
E_DBG
,
L_MISC
,"u≤p_∑ckë: Quîy: %s\n",
quîy
);

589 if(
	`°∫ˇ£cmp
(
löe_°¨t
,"MX:",3)==0) {

590 
mx
 = 
	`©oi
(
löe_°¨t
 + 3);

594 
löe_°¨t
=
löe_íd
;

599 if(
discovîy
) {

600 
	`DPRINTF
(
E_DBG
,
L_MISC
,"RespondingÅo queryÑequest...\n");

603 
discovîy
 = 0;

605 
pdisco
 = (
UPNP_DISCO
 *)
	`mÆloc
((UPNP_DISCO));

606 if(!
pdisco
)

607 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"mallocÉrror");

609 
	`mem£t
(
pdisco
,0,(
UPNP_DISCO
));

610 if(
mx
) {

611 
pdisco
->
£c⁄ds_ªmaöög
 = (
	`ønd
(Ë/ (
RAND_MAX
/
mx
)) + 1;

612 if(
mx
 + 1 > 
UPNP_SELECT_TIMEOUT
)

613 
pdisco
->
£c⁄ds_ªmaöög
 = 0;

615 
	`DPRINTF
(
E_DBG
,
L_MISC
,"Responding in %d (of %d) seconds\n",

616 
pdisco
->
£c⁄ds_ªmaöög
, 
mx
);

619 
pdisco
->
quîy
 = query;

620 
quîy
 = 
NULL
;

621 
	`mem˝y
((*)&
pdisco
->
to
, (*)&
‰om
,(
sockaddr_ö
));

622 
pdisco
->
√xt
 = 
u≤p_disco
.next;

623 
u≤p_disco
.
√xt
 = 
pdisco
;

626 if(
quîy
) {

627 
	`‰ì
(
quîy
);

628 
quîy
 = 
NULL
;

630 
	}
}

638 
	$u≤p_deöô
() {

639 *
ªsu…_±r
;

641 
u≤p_quôÊag
=1;

642 
	`u≤p_brﬂdˇ°
(
UPNP_TYPE_BYEBYE
,
NULL
);

644 if(
u≤p_sockë
)

645 
	`˛o£
(
u≤p_sockë
);

650 if(
u≤p_thªad_°¨ãd
) {

651 
u≤p_thªad_°¨ãd
=0;

652 
	`±hªad_joö
(
u≤p_li°íî_tid
, &
ªsu…_±r
);

655  
TRUE
;

656 
	}
}

	@upnp.h

31 #i‚de‡
_UPNP_H_


32 
	#_UPNP_H_


	)

34 
	#UPNP_AD_DEVICE
 1

	)

35 
	#UPNP_AD_SERVICE
 2

	)

36 
	#UPNP_AD_ROOT
 3

	)

37 
	#UPNP_AD_UUID
 4

	)

39 
u≤p_öô
();

40 
u≤p_deöô
();

41 
u≤p_add_∑ckë
(*
group_id
, 
ty≥
, *
loˇti⁄
,

42 *
«me•a˚
, *
«me
, 
vîsi⁄
,

43 *
body
);

44 *
u≤p_uuid
();

	@util.c

5 #ifde‡
HAVE_CONFIG_H


6 
	~"c⁄fig.h
"

9 
	~<î∫o.h
>

10 
	~<±hªad.h
>

12 #ifde‡
HAVE_STDINT_H


13 
	~<°döt.h
>

16 
	~<°dio.h
>

17 
	~<°d¨g.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~<sys/ty≥s.h
>

22 #ifde‡
HAVE_ICONV


23 
	~<ic⁄v.h
>

26 
	~"dØpd.h
"

27 
	~"îr.h
"

28 
	~"utû.h
"

32 
±hªad_muãx_t
 
	gutû_locks
[()
l_œ°
];

33 
±hªad_muãx_t
 
	gutû_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

34 
	g_utû_öôülized
=0;

38 
_utû_muãx_öô
();

43 
uöt32_t
 
	$utû_djb_hash_block
(*
d©a
, 
uöt32_t
 
Àn
) {

44 
uöt32_t
 
hash
 = 5381;

45 *
p°r
 = 
d©a
;

47 
Àn
--) {

48 
hash
 = ((hash << 5Ë+ hashË+ *
p°r
;

49 
p°r
++;

51  
hash
;

52 
	}
}

57 
uöt32_t
 
	$utû_djb_hash_°r
(*
°r
) {

58 
uöt32_t
 
Àn
;

60 
Àn
 = (
uöt32_t
)
	`°æí
(
°r
);

61  
	`utû_djb_hash_block
((*)
°r
,
Àn
);

62 
	}
}

67 
	$utû_mu°_exô
() {

68  
c⁄fig
.
°›
;

69 
	}
}

71 #ifde‡
HAVE_ICONV


72 
	$utû_utf8toutf16
(*
utf16
, 
dÀn
, *
utf8
, 
¶í
) {

73 
ªsu…
;

74 
	`DPRINTF
(
E_DBG
,
L_MISC
,"C⁄vîtög %†tÿutf-16À (¶í=%d, dÀn=%d)\n",
utf8
,
¶í
,
dÀn
);

76 
ªsu…
=
	`utû_xtoy
(
utf16
, 
dÀn
, 
utf8
, 
¶í
, "UTF-8","UTF-16LE");

77 
	`DPRINTF
(
E_DBG
,
L_MISC
,"Resu…: %d\n",
ªsu…
);

79  
ªsu…
;

80 
	}
}

82 
	$utû_utf16toutf8
(*
utf8
, 
dÀn
, *
utf16
, 
¶í
) {

83 
ªsu…
;

85 
	`DPRINTF
(
E_DBG
,
L_MISC
,"C⁄vîtög *somëhög*Åÿutf-8 (¶í=%d, dÀn=%d)\n",
¶í
,
dÀn
);

87 
ªsu…
 = 
	`utû_xtoy
(
utf8
, 
dÀn
, 
utf16
, 
¶í
, "UTF-16LE","UTF-8");

89 
	`DPRINTF
(
E_DBG
,
L_MISC
,"C⁄vîãdÅÿ%s\n",
utf8
);

91  
ªsu…
;

92 
	}
}

94 
	$utû_utf16_byã_Àn
(*
utf16
) {

95 *
§c
 = 
utf16
;

96 
Àn
 = 0;

99 if((
§c
[0] == 0) && (src[1]==0))

100  
Àn
;

101 
Àn
 += 2;

102 
§c
 += 2;

104  
Àn
;

105 
	}
}

108 *
	$utû_utf8toutf16_Æloc
(*
utf8
) {

109 *
utf16
;

111 
utf16
 = 
	`ˇŒoc
(1,
	`°æí
((*)
utf8
) * 4 + 1);

112 if(
	`utû_xtoy
(
utf16
,
	`°æí
((*)
utf8
) * 4 + 1, utf8, strlen((*)utf8),"UTF-8","UTF-16LE")) {

113  
utf16
;

116 
	`‰ì
(
utf16
);

117  
NULL
;

118 
	}
}

120 *
	$utû_utf16toutf8_Æloc
(*
utf16
, 
¶í
) {

121 *
utf8
;

123 
utf8
=
	`ˇŒoc
(1, 
¶í
 * 2 + 1);

124 if(
	`utû_xtoy
(
utf8
,
¶í
 * 2 + 1,
utf16
,slen,"UTF-16LE","UTF-8")) {

125  
utf8
;

128 
	`‰ì
(
utf8
);

129  
NULL
;

130 
	}
}

132 *
	$utû_xtoutf8_Æloc
(*
x
, 
¶í
, *
‰om
) {

133 *
utf8
;

135 
utf8
 = 
	`ˇŒoc
(1, 
¶í
 * 4 + 1);

136 if(
	`utû_xtoy
(
utf8
,
¶í
 * 4 + 1, 
x
, sÀn, 
‰om
, "UTF-8")) {

137  
utf8
;

139 
	`‰ì
(
utf8
);

140  
NULL
;

141 
	}
}

143 
	$utû_xtoy
(*
dbuf„r
, 
dÀn
, *
sbuf„r
, 
¶í
, *
‰om
, *
to
) {

144 
ic⁄v_t
 
iv
;

145 
size_t
 
csize
;

148 
size_t
 
°_dÀn
 = (size_t)
dÀn
;

149 
size_t
 
°_¶í
 = (size_t)
¶í
;

150 *
°_dbuf„r
 = (*)
dbuf„r
;

151 
ICONV_CONST
 *
°_sbuf„r
 = (*)
sbuf„r
;

153 
	`mem£t
(
dbuf„r
,0,
dÀn
);

155 
iv
=
	`ic⁄v_›í
(
to
,
‰om
);

156 if(
iv
 =(
ic⁄v_t
)-1) {

157 
	`DPRINTF
(
E_LOG
,
L_MISC
,"ic⁄vÉº‹: ic⁄v_›í faûed wôh %d\n",
î∫o
);

160 
csize
 = 
	`ic⁄v
(
iv
,&
°_sbuf„r
,&
°_¶í
,

161 &
°_dbuf„r
,&
°_dÀn
);

162 if(
csize
 =(
size_t
)-1) {

163 
î∫o
) {

164 
EILSEQ
:

165 
	`DPRINTF
(
E_LOG
,
L_MISC
,"iconvÉrror: Invalid multibyte sequence\n");

167 
EINVAL
:

168 
	`DPRINTF
(
E_LOG
,
L_MISC
,"iconvÉrror: Incomplete multibyte sequence\n");

170 
E2BIG
:

171 
	`DPRINTF
(
E_LOG
,
L_MISC
,"iconvÉrror: Insufficient buffer size\n");

174 
	`DPRINTF
(
E_LOG
,
L_MISC
,"ic⁄vÉº‹: unknow¿(%d)\n",
î∫o
);

178 
	`ic⁄v_˛o£
(
iv
);

180  (
csize
 !(
size_t
)-1);

181 
	}
}

186 
	$utû_utf16_byã_Àn
(*
utf16
) {

187 *
§c
 = 
utf16
;

188 
Àn
 = 0;

191 if((
§c
[0] == 0) && (src[1]==0))

192  
Àn
;

193 
Àn
 += 2;

194 
§c
 += 2;

196  
Àn
;

197 
	}
}

202 
	$utû_utf16toutf8_Àn
(*
utf16
, 
Àn
) {

203 *
§c
 = 
utf16
;

204 
out_Àn
 = 0;

205 
uöt32_t
 
ãmp_dw‹d
;

207 
§c
+2 <
utf16
 + 
Àn
) {

208 
ãmp_dw‹d
 = 
§c
[1] << 8 | src[0];

210 if((
ãmp_dw‹d
 & 0xFC00) == 0xD800) {

211 
§c
 += 2;

212 if(
§c
 + 2 <
utf16
 + 
Àn
) {

213 
out_Àn
 += 4;

218 if(
ãmp_dw‹d
 <= 0x7F)

219 
out_Àn
 += 1;

220 if(
ãmp_dw‹d
 <= 0x7FF)

221 
out_Àn
 += 2;

222 if(
ãmp_dw‹d
 <= 0xFFFF)

223 
out_Àn
 += 3;

226 
§c
 += 2;

228  
out_Àn
;

229 
	}
}

247 
	$utû_utf16toutf8
(*
utf8
, 
dÀn
, *
utf16
, 
Àn
) {

248 *
§c
=
utf16
;

249 *
d°
;

250 
w1
, 
w2
;

251 
byãs
;

252 
√w_Àn
;

254 if(!
Àn
)

255  
FALSE
;

257 
√w_Àn
 = 
	`utû_utf16toutf8_Àn
(
utf16
,
Àn
);

258 if((
√w_Àn
 =-1Ë|| (
dÀn
 <=Çew_len)) {

259 
	`DPRINTF
(
E_LOG
,
L_MISC
,"C™nŸ c⁄vîà%†tÿutf8; E2BIG (%d v†%d)\n",
utf8
,
√w_Àn
,
dÀn
);

260  
FALSE
;

263 
d°
=
utf8
;

264 (
§c
+2Ë<
utf16
+
Àn
) {

265 
w1
=
§c
[1] << 8 | src[0];

266 
§c
 += 2;

267 if((
w1
 & 0xFC00) == 0xD800) {

268 if(
§c
+2 > 
utf16
+
Àn
) {

269 
	`DPRINTF
(
E_INF
,
L_SCAN
,"Invalid utf-16 in file\n");

270  
FALSE
;

272 
w2
 = 
§c
[3] << 8 | src[2];

273 if((
w2
 & 0xFC00) != 0xDC00) {

274 
	`DPRINTF
(
E_INF
,
L_SCAN
,"Invalid utf-16 in file\n");

275  
FALSE
;

279 
w1
 = w1 & 0x03FF;

280 
w1
 = w1 << 10;

281 
w1
 = w1 | (
w2
 & 0x03FF);

284 
w1
 += 0x10000;

288 i‡(
w1
 < 0x80) {

289 *
d°
++ = 
w1
;

290 
byãs
=0;

291 } i‡(
w1
 < 0x800) {

292 *
d°
++ = 0xC0 | (
w1
 >> 6);

293 
byãs
=1;

294 } i‡(
w1
 < 0x10000) {

295 *
d°
++ = 0xE0 | (
w1
 >> 12);

296 
byãs
=2;

298 *
d°
++ = 0xF0 | (
w1
 >> 18);

299 
byãs
=3;

302 
byãs
) {

303 *
d°
++ = 0x80 | ((
w1
 >> (6*(
byãs
-1))) & 0x3f);

304 
byãs
--;

308 *
d°
 = '\x0';

310  
√w_Àn
;

311 
	}
}

316 
	$utû_utf8toutf16_Àn
(*
utf8
) {

317 
Àn
,
out_Àn
,
åaûög_byãs
;

318 *
§c
 = 
utf8
;

320 
Àn
=()
	`°æí
((*)
utf8
);

321 
out_Àn
 = 0;

323 
§c
 < 
utf8
 + 
Àn
) {

324 
åaûög_byãs
 = 0;

325 if((*
§c
 & 0xE0Ë=0xC0Ë
åaûög_byãs
 = 1;

326 if((*
§c
 & 0xF0Ë=0xE0Ë
åaûög_byãs
 = 2;

327 if((*
§c
 & 0xF8Ë=0xF0Ë
åaûög_byãs
 = 3;

329 if(
§c
 + 
åaûög_byãs
 > 
utf8
 + 
Àn
)

332 
out_Àn
 += 2;

333 if(
åaûög_byãs
 == 3)

334 
out_Àn
 += 2;

336 
§c
 +(1 + 
åaûög_byãs
);

339 
out_Àn
 += 1;

340  
out_Àn
;

341 
	}
}

343 *
	$utû_utf8toutf16_Æloc
(*
utf8
) {

344 *
out
;

345 
√w_Àn
;

347 
√w_Àn
 = 
	`utû_utf8toutf16_Àn
(
utf8
);

348 if(
√w_Àn
 == -1)

349  
NULL
;

351 
out
 = 
	`ˇŒoc
(1,
√w_Àn
 + 2);

352 if(!
	`utû_utf8toutf16
(
out
,
√w_Àn
 + 2,
utf8
,()
	`°æí
((*)utf8))) {

353 
	`‰ì
(
out
);

354  
NULL
;

357  
out
;

358 
	}
}

360 *
	$utû_utf16tou·8_Æloc
(*
utf16
, 
Àn
) {

361 *
out
;

362 
√w_Àn
;

364 
√w_Àn
 = 
	`utû_utf16toutf8_Àn
(
utf16
,
Àn
);

365 if(
√w_Àn
 == -1)

366  
NULL
;

368 
out
 = 
	`ˇŒoc
(1,
√w_Àn
 + 1);

369 if(!
	`utû_utf16toutf8
(
out
,
√w_Àn
 + 1,
utf16
,
Àn
)) {

370 
	`‰ì
(
out
);

371  
NULL
;

373  
out
;

374 
	}
}

376 
	$utû_utf8toutf16
(*
utf16
, 
dÀn
, *
utf8
, 
Àn
) {

377 *
§c
=
utf8
;

378 *
d°
;

379 
√w_Àn
;

380 
åaûög_byãs
;

381 
uöt32_t
 
utf32
;

382 
uöt16_t
 
ãmp_w‹d
;

384 
Àn
=()
	`°æí
((*)
utf8
);

385 if(!
Àn
)

386  
FALSE
;

388 
√w_Àn
 = 
	`utû_utf8toutf16_Àn
(
utf8
);

389 if((
√w_Àn
 =-1Ë|| (
dÀn
 <= (new_len+1))) {

390 
	`DPRINTF
(
E_LOG
,
L_MISC
,"C™nŸ c⁄vîà%†tÿutf16; E2BIG (%d v†%d)\n",
utf8
,
√w_Àn
,
dÀn
);

391  
FALSE
;

394 
d°
=
utf16
;

396 
§c
 < 
utf8
 + 
Àn
) {

397 
utf32
=0;

398 
åaûög_byãs
=0;

400 if((*
§c
 & 0xE0Ë=0xC0Ë
åaûög_byãs
 = 1;

401 if((*
§c
 & 0xF0Ë=0xE0Ë
åaûög_byãs
 = 2;

402 if((*
§c
 & 0xF8Ë=0xF0Ë
åaûög_byãs
 = 3;

404 if(
§c
 + 
åaûög_byãs
 > 
utf8
 + 
Àn
) {

405 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"Invalid UTF8 string\n");

406  
FALSE
;

409 
åaûög_byãs
) {

411 
utf32
 = *
§c
;

414 
utf32
 = ((
§c
[0] & 0x1F) << 6) |

415 (
§c
[1] & 0x3F);

418 
utf32
 = ((
§c
[0] & 0x0F) << 12) |

419 ((
§c
[1] & 0x3F) << 6) |

420 ((
§c
[2] & 0x3F));

423 
utf32
 = ((
§c
[0] & 0x07) << 18) |

424 ((
§c
[1] & 0x3F) << 12) |

425 ((
§c
[2] & 0x3F) << 6) |

426 ((
§c
[3] & 0x3F));

430 if(
utf32
 <= 0xFFFF) {

432 *
d°
++ = 
utf32
 & 0xFF;

433 *
d°
++ = (
utf32
 & 0xFF00) >> 8;

436 
ãmp_w‹d
 = 0xD800 | ((
utf32
 & 0x0FFC00) >> 10);

437 *
d°
++ = 
ãmp_w‹d
 & 0xFF;

438 *
d°
++ = (
ãmp_w‹d
 & 0xFF00) >> 8;

439 
ãmp_w‹d
 = 0xDC00 | (
utf32
 & 0x3FF);

440 *
d°
++ = 
ãmp_w‹d
 & 0xFF;

441 *
d°
++ = (
ãmp_w‹d
 & 0xFF00) >> 8;

444 
§c
 +(
åaûög_byãs
 + 1);

447 *
d°
++ = '\x0';

448 *
d°
 = '\x0';

449  
√w_Àn
;

450 
	}
}

454 
	$utû_hexdump
(*
block
, 
Àn
) {

455 
ch¨m≠
[256];

456 
ödex
;

457 
row
, 
off£t
;

458 
ouçut
[80];

459 
tmp
[20];

461 
	`mem£t
(
ch¨m≠
,'.',(charmap));

463 
ödex
=' ';ödex<'~';ödex++Ë
ch¨m≠
[index]=index;

464 
row
=0;row<(
Àn
+15)/16;row++) {

465 
	`•rötf
(
ouçut
,"%04X: ",
row
*16);

466 
off£t
=0; offset < 16; offset++) {

467 if(
row
 * 16 + 
off£t
 < 
Àn
) {

468 
	`•rötf
(
tmp
,"%02X ",
block
[
row
*16 + 
off£t
]);

470 
	`•rötf
(
tmp
," ");

472 
	`°rˇt
(
ouçut
,
tmp
);

475 
off£t
=0; offset < 16; offset++) {

476 if(
row
 * 16 + 
off£t
 < 
Àn
) {

477 
	`•rötf
(
tmp
,"%c",
ch¨m≠
[
block
[
row
*16 + 
off£t
]]);

479 
	`•rötf
(
tmp
," ");

481 
	`°rˇt
(
ouçut
,
tmp
);

484 
	`DPRINTF
(
E_LOG
,
L_MISC
,"%s\n",
ouçut
);

486 
	}
}

491 
	$utû_muãx_lock
(
ff_lock_t
 
which
) {

492 if(!
_utû_öôülized
)

493 
	`_utû_muãx_öô
();

495 if(
	`±hªad_muãx_lock
(&
utû_locks
[()
which
])) {

496 
	`Ârötf
(
°dîr
,"CannotÜock mutex\n");

497 
	`exô
(-1);

499 
	}
}

504 
	$utû_muãx_u∆ock
(
ff_lock_t
 
which
) {

505 if(
	`±hªad_muãx_u∆ock
(&
utû_locks
[()
which
])) {

506 
	`Ârötf
(
°dîr
,"Cannot unlock mutex\n");

507 
	`exô
(-1);

510 
	}
}

516 
	$_utû_muãx_öô
() {

517 
îr
;

518 
ff_lock_t
 
lock
;

520 if((
îr
 = 
	`±hªad_muãx_lock
(&
utû_muãx
))) {

521 
	`Ârötf
(
°dîr
,"ErrorÜocking mutex\n");

522 
	`exô
(-1);

525 if(!
_utû_öôülized
) {

527 
lock
=(
ff_lock_t
)0;Üock < 
l_œ°
;Üock++) {

528 if((
îr
 = 
	`±hªad_muãx_öô
(&
utû_locks
[()
lock
],
NULL
))) {

529 
	`Ârötf
(
°dîr
,"Error initializing mutex\n");

530 
	`exô
(-1);

533 
_utû_öôülized
=1;

536 
	`±hªad_muãx_u∆ock
(&
utû_muãx
);

537 
	}
}

551 
	$utû_•lô
(*
s
, *
dñimôîs
, ***
¨gvp
) {

552 
i
;

553 
numtokís
;

554 c⁄° *
¢ew
;

555 *
t
;

556 *
tok±r
;

557 *
tmp
;

558 *
fix_§c
, *
fix_d°
;

560 i‡((
s
 =
NULL
Ë|| (
dñimôîs
 =NULLË|| (
¨gvp
 == NULL))

562 *
¨gvp
 = 
NULL
;

563 
¢ew
 = 
s
 + 
	`°r•n
(s, 
dñimôîs
);

564 i‡((
t
 = 
	`mÆloc
(
	`°æí
(
¢ew
Ë+ 1)Ë=
NULL
)

567 
	`°r˝y
(
t
, 
¢ew
);

568 
numtokís
 = 1;

569 
tok±r
 = 
NULL
;

570 
tmp
 = 
t
;

572 
tmp
 = 
s
;

573 *
tmp
) {

574 if(
	`°rchr
(
dñimôîs
,*
tmp
) && (*(tmp+1) == *tmp)) {

575 
tmp
 += 2;

576 } if(
	`°rchr
(
dñimôîs
,*
tmp
)) {

577 
numtokís
++;

578 
tmp
++;

580 
tmp
++;

584 
	`DPRINTF
(
E_DBG
,
L_CONF
,"Found %dÅokí†ö %s\n",
numtokís
,
s
);

586 i‡((*
¨gvp
 = 
	`mÆloc
((
numtokís
 + 1)*(*))Ë=
NULL
) {

587 
	`‰ì
(
t
);

591 i‡(
numtokís
 == 0)

592 
	`‰ì
(
t
);

594 
tok±r
 = 
t
;

595 
tmp
 = 
t
;

596 
i
 = 0; i < 
numtokís
; i++) {

597 *
tmp
) {

598 if(
	`°rchr
(
dñimôîs
,*
tmp
) && (*(tmp+1) != *tmp))

600 if(
	`°rchr
(
dñimôîs
,*
tmp
)) {

601 
tmp
 += 2;

603 
tmp
++;

606 *
tmp
 = '\0';

607 
tmp
++;

608 (*
¨gvp
)[
i
] = 
tok±r
;

610 
fix_§c
 = 
fix_d°
 = 
tok±r
;

611 *
fix_§c
) {

612 if(
	`°rchr
(
dñimôîs
,*
fix_§c
) && (*(fix_src+1) == *fix_src)) {

613 
fix_§c
++;

615 *
fix_d°
++ = *
fix_§c
++;

617 *
fix_d°
 = '\0';

619 
tok±r
 = 
tmp
;

620 
	`DPRINTF
(
E_DBG
,
L_CONF
,"Tokí %d: %s\n",
i
+1,(*
¨gvp
)[i]);

624 *((*
¨gvp
Ë+ 
numtokís
Ë
NULL
;

625  
numtokís
;

626 
	}
}

633 
	$utû_di•o£_•lô
(**
¨gv
) {

634 if(!
¨gv
)

637 if(
¨gv
[0])

638 
	`‰ì
(
¨gv
[0]);

640 
	`‰ì
(
¨gv
);

641 
	}
}

647 *
	$utû_a•rötf
(*
fmt
, ...) {

648 *
outbuf
;

649 
va_li°
 
≠
;

651 
	`ASSERT
(
fmt
);

653 if(!
fmt
)

654  
NULL
;

656 
	`va_°¨t
(
≠
,
fmt
);

657 
outbuf
 = 
	`utû_va•rötf
(
fmt
, 
≠
);

658 
	`va_íd
(
≠
);

660  
outbuf
;

661 
	}
}

673 #ifde‡
HAVE_VA_COPY


674 
	#VA_COPY
(
a
,
b
Ë
	`va_c›y
(◊),(b))

	)

676 #ifde‡
HAVE___VA_COPY


677 
	#VA_COPY
(
a
,
b
Ë
	`__va_c›y
(◊),(b))

	)

679 
	#VA_COPY
(
a
,
b
Ë
	`mem˝y
((&a),(&b),(b))

	)

683 *
	$utû_va•rötf
(*
fmt
, 
va_li°
 
≠
) {

684 *
outbuf
;

685 *
√wbuf
;

686 
va_li°
 
≠2
;

687 
size
=200;

688 
√w_size
;

690 
outbuf
 = (*)
	`mÆloc
(
size
);

691 if(!
outbuf
)

692 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"CouldÇotállocate buffer in vasprintf\n");

694 
	`VA_COPY
(
≠2
,
≠
);

697 
√w_size
=
	`v¢¥ötf
(
outbuf
,
size
,
fmt
,
≠
);

699 if(
√w_size
 > -1 &&Çew_sizê< 
size
)

702 if(
√w_size
 > -1)

703 
size
 = 
√w_size
 + 1;

705 
size
 *= 2;

707 if((
√wbuf
 = 
	`ªÆloc
(
outbuf
,
size
)Ë=
NULL
) {

708 
	`‰ì
(
outbuf
);

709 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"mallocÉrror in vasprintf\n");

710 
	`exô
(1);

712 
outbuf
 = 
√wbuf
;

713 
	`VA_COPY
(
≠
,
≠2
);

716  
outbuf
;

717 
	}
}

720 #ifde‡
DEBUG_MEM


721 *
utû_mÆloc
(*
fûe
, *
löe
, 
size_t
 
size
);

722 *
utû_ˇŒoc
(*
fûe
, *
löe
, 
size_t
 
cou¡
, size_à
size
);

723 *
utû_ªÆloc
(*
fûe
, *
löe
, *
±r
, 
size_t
 
size
);

724 
utû_‰ì
(*
±r
);

	@util.h

5 #i‚de‡
_UTIL_H_


6 
	#_UTIL_H_


	)

8 #ifde‡
HAVE_CONFIG_H


9 
	~"c⁄fig.h
"

12 #ifde‡
HAVE_STDINT_H


13 
	~<°döt.h
>

16 
	~<°d¨g.h
>

17 
	~<sys/ty≥s.h
>

20 
	ml_îr
,

21 
	ml_îr_li°
,

22 
	ml_c⁄f
,

23 
	ml_∂ugö
,

24 
	ml_memdebug
,

25 
	ml_u≤p
,

26 
	ml_œ°


27 } 
	tff_lock_t
;

31 
utû_muãx_lock
(
ff_lock_t
 
which
);

32 
utû_muãx_u∆ock
(
ff_lock_t
 
which
);

35 
uöt32_t
 
utû_djb_hash_block
(*
d©a
, uöt32_à
Àn
);

36 
uöt32_t
 
utû_djb_hash_°r
(*
°r
);

38 
utû_mu°_exô
();

41 
utû_•lô
(*
s
, *
dñimôîs
, ***
¨gvp
);

42 
utû_di•o£_•lô
(**
¨gv
);

44 *
utû_utf8toutf16_Æloc
(*
utf8
);

45 *
utû_utf16tou·8_Æloc
(*
utf16
, 
¶í
);

46 
utû_utf8toutf16
(*
utf16
, 
dÀn
, *
utf8
, 
¶í
);

47 
utû_utf16toutf8
(*
utf8
, 
dÀn
, *
utf16
, 
¶í
);

48 
utû_xtoy
(*
dbuf„r
, 
dÀn
, *
sbuf„r
, 
¶í
, *
‰om
, *
to
);

49 *
utû_xtoutf8_Æloc
(*
x
,
¶í
,*
‰om
);

50 
utû_utf16_byã_Àn
(*
utf16
);

52 
utû_hexdump
(*
block
, 
Àn
);

53 *
utû_va•rötf
(*
fmt
, 
va_li°
 
≠
);

54 *
utû_a•rötf
(*
fmt
, ...);

	@w32-eventlog.c

23 #ifde‡
HAVE_CONFIG_H


24 
	~"c⁄fig.h
"

27 
	~<wödows.h
>

28 
	~<°dio.h
>

30 
	~"dØpd.h
"

31 
	~"mesßges.h
"

33 
HANDLE
 
	gñog_h™dÀ
 = 
NULL
;

40 
	$ñog_ªgi°î
() {

41 
HKEY
 
ªg_key
 = 
NULL
;

42 
DWORD
 
îr
 = 0;

43 
∑th
[
PATH_MAX
];

44 
DWORD
 
evít_ty≥s
;

46 
	`w•rötf
(
∑th
,"SYSTEM\\CuºítC⁄åﬁSë\\Sîvi˚s\\EvítLog\\Aµliˇti⁄\\%s", 
PACKAGE
);

47 if((
îr
=
	`RegCª©eKey
(
HKEY_LOCAL_MACHINE
, 
∑th
, &
ªg_key
)Ë!
ERROR_SUCCESS
)

48  
FALSE
;

50 
	`GëModuÀFûeName
(
NULL
, 
∑th
, 
PATH_MAX
);

52 
îr
=
	`RegSëVÆueEx
(
ªg_key
, "EvítMesßgeFûe",0,
REG_EXPAND_SZ
,
∑th
,(
DWORD
)
	`°æí
(path) + 1);

53 if(
îr
 !
ERROR_SUCCESS
) {

54 
	`RegClo£Key
(
ªg_key
);

55  
FALSE
;

58 
evít_ty≥s
 = 
EVENTLOG_ERROR_TYPE
 | 
EVENTLOG_WARNING_TYPE
 | 
EVENTLOG_INFORMATION_TYPE
;

59 
îr
=
	`RegSëVÆueEx
(
ªg_key
,"Ty≥sSuµ‹ãd", 0, 
REG_DWORD
, (
BYTE
*)&
evít_ty≥s
, Évent_types );

60 if(
îr
 !
ERROR_SUCCESS
) {

61 
	`RegClo£Key
(
ªg_key
);

62  
FALSE
;

65 
	`RegClo£Key
(
ªg_key
);

67  
TRUE
;

68 
	}
}

73 
	$ñog_uƒegi°î
() {

74  
TRUE
;

75 
	}
}

82 
	$ñog_öô
() {

83 
ñog_h™dÀ
=
	`Regi°îEvítSour˚
(
NULL
, 
PACKAGE
);

84 if(
ñog_h™dÀ
 =
INVALID_HANDLE_VALUE
)

85  
FALSE
;

87  
TRUE
;

88 
	}
}

96 
	$ñog_deöô
() {

97 
	`Dîegi°îEvítSour˚
(
ñog_h™dÀ
);

98  
TRUE
;

99 
	}
}

108 
	$ñog_mesßge
(
Àvñ
, *
msg
) {

109 
WORD
 
mesßge_Àvñ
 = 
EVENTLOG_INFORMATION_TYPE
;

110 
ªt
;

112 if(
Àvñ
 == 0)

113 
mesßge_Àvñ
 = 
EVENTLOG_ERROR_TYPE
;

115 
ªt
 = 
	`Rï‹tEvít
(

116 
ñog_h™dÀ
,

117 
mesßge_Àvñ
,

119 
EVENT_MSG
,

120 
NULL
,

123 &
msg
,

124 
NULL
);

127  
ªt
 ? 
TRUE
 : 
FALSE
;

128 
	}
}

	@w32-eventlog.h

23 #i‚de‡
_EVENTLOG_H_


24 
	#_EVENTLOG_H_


	)

26 
ñog_ªgi°î
();

27 
ñog_uƒegi°î
();

28 
ñog_öô
();

29 
ñog_deöô
();

30 
ñog_mesßge
(
Àvñ
, *
msg
);

	@w32-service.c

23 #ifde‡
HAVE_CONFIG_H


24 
	~"c⁄fig.h
"

27 
	~<wödows.h
>

29 
	~"dØpd.h
"

30 
	~"îr.h
"

33 
BOOL
 
£rvi˚_upd©e_°©us
 (
DWORD
,DWORD,DWORD,DWORD,DWORD);

34 
£rvi˚_maöfunc
(
DWORD
, 
LPTSTR
 *);

35 
£rvi˚_öô
();

36 
£rvi˚_h™dÀr
(
DWORD
);

39 
SERVICE_STATUS_HANDLE
 
	g£rvi˚_°©us_h™dÀ
 = 
NULL
;

40 
HANDLE
 
	g£rvi˚_kûl_evít
 = 
NULL
;

41 
DWORD
 
	g£rvi˚_cuºít_°©us
;

48 
	$£rvi˚_h™dÀr
(
DWORD
 
code
) {

49 
code
) {

50 
SERVICE_CONTROL_INTERROGATE
:

53 
SERVICE_CONTROL_SHUTDOWN
:

56 
SERVICE_CONTROL_STOP
:

57 
	`£rvi˚_upd©e_°©us
(
SERVICE_STOP_PENDING
, 
NO_ERROR
, 0, 1, 5000);

58 
	`SëEvít
(
£rvi˚_kûl_evít
);

64 
	`£rvi˚_upd©e_°©us
(
£rvi˚_cuºít_°©us
, 
NO_ERROR
, 0, 0, 0);

65 
	}
}

75 
	$£rvi˚_shutdown
(
îr‹Àvñ
) {

76 
	`DPRINTF
(
E_INF
,
L_MISC
,"Sîvi˚ábouàtÿãrmö©êwôhÉº‹ %d\n",
îr‹Àvñ
);

78 if(
£rvi˚_cuºít_°©us
 !
SERVICE_STOPPED
) {

79 
	`£rvi˚_upd©e_°©us
(
SERVICE_STOP_PENDING
, 
NO_ERROR
, 0, 1, 5000);

81 
c⁄fig
.
°›
 = 1;

82 
	`£rvi˚_upd©e_°©us
(
SERVICE_STOPPED
,
îr‹Àvñ
,0,0,3000);

85 if(
£rvi˚_kûl_evít
) {

86 
	`SëEvít
(
£rvi˚_kûl_evít
);

87 
	`Clo£H™dÀ
(
£rvi˚_kûl_evít
);

92 
	`SÀï
(5000);

93 
	`exô
(1);

94 
	}
}

105 
	$£rvi˚_maöfunc
(
DWORD
 
¨gc
, 
LPTSTR
 *
¨gv
) {

106 
BOOL
 
suc˚ss
;

108 
£rvi˚_cuºít_°©us
 = 
SERVICE_STOPPED
;

109 
£rvi˚_°©us_h™dÀ
 = 
	`Regi°îSîvi˚CålH™dÀr
(
PACKAGE
,

110 (
LPHANDLER_FUNCTION
Ë
£rvi˚_h™dÀr
);

112 if(!
£rvi˚_°©us_h™dÀ
) {

113 
	`£rvi˚_shutdown
(
	`GëLa°Eº‹
());

118 
suc˚ss
 = 
	`£rvi˚_upd©e_°©us
(
SERVICE_START_PENDING
, 
NO_ERROR
, 0, 1, 5000);

119 i‡(!
suc˚ss
) {

120 
	`£rvi˚_shutdown
(
	`GëLa°Eº‹
());

124 
£rvi˚_kûl_evít
 = 
	`Cª©eEvít
 (0, 
TRUE
, 
FALSE
, 0);

125 if(!
£rvi˚_kûl_evít
) {

126 
	`£rvi˚_shutdown
(
	`GëLa°Eº‹
());

138 
£rvi˚_cuºít_°©us
 = 
SERVICE_RUNNING
;

139 
suc˚ss
 = 
	`£rvi˚_upd©e_°©us
(
SERVICE_RUNNING
, 
NO_ERROR
, 0, 0, 0);

140 i‡(!
suc˚ss
) {

141 
	`£rvi˚_shutdown
(
	`GëLa°Eº‹
());

147 
	`WaôF‹SögÀObje˘
 (
£rvi˚_kûl_evít
, 
INFINITE
);

148 
	`£rvi˚_shutdown
(0);

149 
	}
}

172 
BOOL
 
	$£rvi˚_upd©e_°©us
 (
DWORD
 
dwCuºítSèã
, DWORD 
dwWö32ExôCode
, DWORD 
dwSîvi˚S≥cificExôCode
, DWORD 
dwCheckPoöt
, DWORD 
dwWaôHöt
) {

173 
BOOL
 
suc˚ss
;

174 
SERVICE_STATUS
 
£rvi˚Sètus
;

176 
£rvi˚_cuºít_°©us
 = 
dwCuºítSèã
;

178 
£rvi˚Sètus
.
dwSîvi˚Ty≥
 = 
SERVICE_WIN32_OWN_PROCESS
;

179 
£rvi˚Sètus
.
dwCuºítSèã
 = dwCurrentState;

180 i‡(
dwCuºítSèã
 =
SERVICE_START_PENDING
) {

181 
£rvi˚Sètus
.
dwC⁄åﬁsAc˚±ed
 = 0;

183 
£rvi˚Sètus
.
dwC⁄åﬁsAc˚±ed
 =

184 
SERVICE_ACCEPT_STOP
 |

185 
SERVICE_ACCEPT_SHUTDOWN
;

188 i‡(
dwSîvi˚S≥cificExôCode
 == 0) {

189 
£rvi˚Sètus
.
dwWö32ExôCode
 = dwWin32ExitCode;

191 
£rvi˚Sètus
.
dwWö32ExôCode
 = 
ERROR_SERVICE_SPECIFIC_ERROR
;

194 
£rvi˚Sètus
.
dwSîvi˚S≥cificExôCode
 = dwServiceSpecificExitCode;

195 
£rvi˚Sètus
.
dwCheckPoöt
 = dwCheckPoint;

196 
£rvi˚Sètus
.
dwWaôHöt
 = dwWaitHint;

198 
suc˚ss
 = 
	`SëSîvi˚Sètus
 (
£rvi˚_°©us_h™dÀ
, &
£rvi˚Sètus
);

199 i‡(!
suc˚ss
) {

200 
	`SëEvít
(
£rvi˚_kûl_evít
);

202  
suc˚ss
;

203 
	}
}

208 *
	$£rvi˚_°¨tup
(*
¨g
) {

209 
SERVICE_TABLE_ENTRY
 
£rvi˚TabÀ
[] = {

210 { 
PACKAGE
, (
LPSERVICE_MAIN_FUNCTION
Ë
£rvi˚_maöfunc
 },

211 { 
NULL
, NULL }

214 
BOOL
 
suc˚ss
;

218 
suc˚ss
 = 
	`SèπSîvi˚CålDi•©chî
(
£rvi˚TabÀ
);

219  
NULL
;

220 
	}
}

225 
	$£rvi˚_ªgi°î
() {

226 
SC_HANDLE
 
scm
;

227 
SC_HANDLE
 
svc
;

228 
∑th
[
PATH_MAX
];

230 
	`GëModuÀFûeName
(
NULL
, 
∑th
, 
PATH_MAX
 );

232 if(!(
scm
 = 
	`O≥nSCM™agî
(0,0,
SC_MANAGER_CREATE_SERVICE
))) {

233 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"Cannot open service control manager\n");

236 
svc
 = 
	`Cª©eSîvi˚
(
scm
,
PACKAGE
,
SERVICENAME
,
SERVICE_ALL_ACCESS
,

237 
SERVICE_WIN32_OWN_PROCESS
,
SERVICE_AUTO_START
,
SERVICE_ERROR_NORMAL
,

238 
∑th
,0,0,0,0,0);

239 if(!
svc
) {

240 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"C™nŸ cª©ê£rvi˚: %d\n",
	`GëLa°Eº‹
());

243 
	`Clo£Sîvi˚H™dÀ
(
svc
);

244 
	`Clo£Sîvi˚H™dÀ
(
scm
);

246 
	`DPRINTF
(
E_LOG
,
L_MISC
,"Registered service successfully\n");

247 
	}
}

253 
	$£rvi˚_uƒegi°î
() {

254 
SC_HANDLE
 
scm
;

255 
SC_HANDLE
 
svc
;

256 
BOOL
 
ªs
;

257 
SERVICE_STATUS
 
°©us
;

259 if(!(
scm
 = 
	`O≥nSCM™agî
(0,0,
SC_MANAGER_CREATE_SERVICE
))) {

260 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"C™nŸ o≥¿£rvi˚ c⁄åﬁ m™agî: %d\n",
	`GëLa°Eº‹
());

263 
svc
 = 
	`O≥nSîvi˚
(
scm
,
PACKAGE
,
SERVICE_ALL_ACCESS
 | 
DELETE
);

264 if(!
svc
) {

265 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"C™nŸ o≥¿£rvi˚: %d (i†ô in°ÆÀd??)\n",
	`GëLa°Eº‹
());

268 
ªs
=
	`QuîySîvi˚Sètus
(
svc
,&
°©us
);

269 if(!
ªs
) {

270 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"C™nŸ quîy sîvi˚ sètus: %d\n",
	`GëLa°Eº‹
());

273 if(
°©us
.
dwCuºítSèã
 !
SERVICE_STOPPED
) {

274 
	`DPRINTF
(
E_LOG
,
L_MISC
,"Stopping service...\n");

275 
	`C⁄åﬁSîvi˚
(
svc
,
SERVICE_CONTROL_STOP
,&
°©us
);

277 
	`SÀï
(2000);

280 
	`DPRINTF
(
E_LOG
,
L_MISC
,"Deleting service...\n");

281 
ªs
 = 
	`DñëeSîvi˚
(
svc
);

283 if(
ªs
) {

284 
	`DPRINTF
(
E_LOG
,
L_MISC
,"Deleted successfully\n");

286 
	`DPRINTF
(
E_FATAL
,
L_MISC
,"Eº‹ dñëög sîvi˚: %d\n",
	`GëLa°Eº‹
());

289 
	`Clo£Sîvi˚H™dÀ
(
svc
);

290 
	`Clo£Sîvi˚H™dÀ
(
scm
);

291 
	}
}

	@w32-service.h

24 #i‚de‡
_SERVICE_H_


25 
	#_SERVICE_H_


	)

27 *
£rvi˚_°¨tup
(*);

28 
£rvi˚_shutdown
();

29 
£rvi˚_ªgi°î
();

30 
£rvi˚_uƒegi°î
();

	@wavstreamer.c

26 #ifde‡
HAVE_CONFIG_H


27 
	~"c⁄fig.h
"

30 
	~<˘y≥.h
>

31 
	~<î∫o.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

36 #ifde‡
HAVE_GETOPT_H


37 
	~"gë›t.h
"

40 #ifde‡
HAVE_UNISTD_H


41 
	~<uni°d.h
>

44 *
	gav0
;

48 
›ti⁄
 
	gl⁄g›ts
[] =

49 { { "hñp", 0, 
NULL
, 'h' },

50 { "ßm∂es", 1, 
NULL
, 's' },

51 { "Àngth", 1, 
NULL
, 'l' },

52 { "off£t", 1, 
NULL
, '0' },

53 { 
NULL
, 0, NULL, 0 } };

56 
	#GET_WAV_INT32
(
p
) (((()((p)[3])) << 24) | \

57 ((()((
p
)[2])) << 16) | \

58 ((()((
p
)[1])) << 8) | \

59 ((()((
p
)[0]))))

	)

61 
	#GET_WAV_INT16
(
p
) (((()((p)[1])) << 8) | \

62 ((()((
p
)[0]))))

	)

64 *
	$ªad_hdr
(
FILE
 *
f
, 
size_t
 *
hdr_Àn
)

66 *
hdr
;

67 
f‹m©_d©a_Àngth
;

69 
hdr
 = 
	`mÆloc
(256);

70 i‡(
hdr
 =
NULL
)

71  
NULL
;

73 i‡(
	`‰ód
(
hdr
, 44, 1, 
f
) != 1)

74 
Áû
;

76 i‡(
	`°∫cmp
((*)
hdr
 + 12, "fmt ", 4))

77 
Áû
;

79 
f‹m©_d©a_Àngth
 = 
	`GET_WAV_INT32
(
hdr
 + 16);

81 i‡((
f‹m©_d©a_Àngth
 < 16) || (format_data_length > 100))

82 
Áû
;

84 *
hdr_Àn
 = 44;

86 i‡(
f‹m©_d©a_Àngth
 > 16) {

87 i‡(
	`‰ód
(
hdr
 + 44, 
f‹m©_d©a_Àngth
 - 16, 1, 
f
) != 1)

88 
Áû
;

89 *
hdr_Àn
 +
f‹m©_d©a_Àngth
 - 16;

92  
hdr
;

94 
Áû
:

95 i‡(
hdr
 !
NULL
)

96 
	`‰ì
(
hdr
);

97  
NULL
;

98 
	}
}

100 
size_t
 
	$∑r£_hdr
(*
hdr
, 
size_t
 
hdr_Àn
,

101 *
chunk_d©a_Àngth_ªt
,

102 *
f‹m©_d©a_Àngth_ªt
,

103 *
com¥essi⁄_code_ªt
,

104 *
ch™√l_cou¡_ªt
,

105 *
ßm∂e_øã_ªt
,

106 *
ßm∂e_bô_Àngth_ªt
,

107 *
d©a_Àngth_ªt
)

109 
chunk_d©a_Àngth
;

110 
f‹m©_d©a_Àngth
;

111 
com¥essi⁄_code
;

112 
ch™√l_cou¡
;

113 
ßm∂e_øã
;

114 
ßm∂e_bô_Àngth
;

115 
d©a_Àngth
;

117 i‡(
	`°∫cmp
((*)
hdr
 + 0, "RIFF", 4) ||

118 
	`°∫cmp
((*)
hdr
 + 8, "WAVE", 4) ||

119 
	`°∫cmp
((*)
hdr
 + 12, "fmt ", 4))

122 
f‹m©_d©a_Àngth
 = 
	`GET_WAV_INT32
(
hdr
 + 16);

124 i‡(
	`°∫cmp
((*)
hdr
 + 20 + 
f‹m©_d©a_Àngth
, "data", 4))

127 
chunk_d©a_Àngth
 = 
	`GET_WAV_INT32
(
hdr
 + 4);

128 
com¥essi⁄_code
 = 
	`GET_WAV_INT16
(
hdr
 + 20);

129 
ch™√l_cou¡
 = 
	`GET_WAV_INT16
(
hdr
 + 22);

130 
ßm∂e_øã
 = 
	`GET_WAV_INT32
(
hdr
 + 24);

131 
ßm∂e_bô_Àngth
 = 
	`GET_WAV_INT16
(
hdr
 + 34);

132 
d©a_Àngth
 = 
	`GET_WAV_INT32
(
hdr
 + 20 + 
f‹m©_d©a_Àngth
 + 4);

134 i‡((
f‹m©_d©a_Àngth
 != 16) ||

135 (
com¥essi⁄_code
 != 1) ||

136 (
ch™√l_cou¡
 < 1) ||

137 (
ßm∂e_øã
 == 0) ||

138 (
ßm∂e_øã
 > 512000) ||

139 (
ßm∂e_bô_Àngth
 < 2))

142 *
chunk_d©a_Àngth_ªt
 = 
chunk_d©a_Àngth
;

143 *
f‹m©_d©a_Àngth_ªt
 = 
f‹m©_d©a_Àngth
;

144 *
com¥essi⁄_code_ªt
 = 
com¥essi⁄_code
;

145 *
ch™√l_cou¡_ªt
 = 
ch™√l_cou¡
;

146 *
ßm∂e_øã_ªt
 = 
ßm∂e_øã
;

147 *
ßm∂e_bô_Àngth_ªt
 = 
ßm∂e_bô_Àngth
;

148 *
d©a_Àngth_ªt
 = 
d©a_Àngth
;

150  20 + 
f‹m©_d©a_Àngth
 + 8;

151 
	}
}

153 
size_t
 
	$∑tch_hdr
(*
hdr
, 
size_t
 
hdr_Àn
,

154 
£c
, 
us
,

155 
ßm∂es
,

156 
size_t
 *
d©a_Àngth_ªt
)

158 
chunk_d©a_Àngth
;

159 
f‹m©_d©a_Àngth
;

160 
com¥essi⁄_code
;

161 
ch™√l_cou¡
;

162 
ßm∂e_øã
;

163 
ßm∂e_bô_Àngth
;

164 
d©a_Àngth
;

165 
byãs_≥r_ßm∂e
;

167 i‡(
	`∑r£_hdr
(
hdr
, 
hdr_Àn
,

168 &
chunk_d©a_Àngth
,

169 &
f‹m©_d©a_Àngth
,

170 &
com¥essi⁄_code
,

171 &
ch™√l_cou¡
,

172 &
ßm∂e_øã
,

173 &
ßm∂e_bô_Àngth
,

174 &
d©a_Àngth
Ë!
hdr_Àn
)

177 i‡(
hdr_Àn
 !(20 + 
f‹m©_d©a_Àngth
 + 8))

180 i‡(
f‹m©_d©a_Àngth
 > 16) {

181 
	`memmove
(
hdr
 + 20 + 16, hd∏+ 20 + 
f‹m©_d©a_Àngth
, 8);

182 
hdr
[16] = 16;

183 
hdr
[17] = 0;

184 
hdr
[18] = 0;

185 
hdr
[19] = 0;

186 
f‹m©_d©a_Àngth
 = 16;

187 
hdr_Àn
 = 44;

190 
byãs_≥r_ßm∂e
 = 
ch™√l_cou¡
 * ((
ßm∂e_bô_Àngth
 + 7) / 8);

192 i‡(
ßm∂es
 == 0) {

193 
ßm∂es
 = 
ßm∂e_øã
 * 
£c
;

194 
ßm∂es
 +((
ßm∂e_øã
 / 100Ë* (
us
 / 10)) / 1000;

197 i‡(
ßm∂es
 > 0) {

198 
d©a_Àngth
 = 
ßm∂es
 * 
byãs_≥r_ßm∂e
;

199 
chunk_d©a_Àngth
 = 
d©a_Àngth
 + 36;

201 
chunk_d©a_Àngth
 = 0xffffffff;

202 
d©a_Àngth
 = 
chunk_d©a_Àngth
 - 36;

205 i‡(
d©a_Àngth_ªt
 !
NULL
)

206 *
d©a_Àngth_ªt
 = 
d©a_Àngth
;

208 
hdr
[4] = 
chunk_d©a_Àngth
 % 0x100;

209 
hdr
[5] = (
chunk_d©a_Àngth
 >> 8) % 0x100;

210 
hdr
[6] = (
chunk_d©a_Àngth
 >> 16) % 0x100;

211 
hdr
[7] = (
chunk_d©a_Àngth
 >> 24) % 0x100;

213 
hdr
[40] = 
d©a_Àngth
 % 0x100;

214 
hdr
[41] = (
d©a_Àngth
 >> 8) % 0x100;

215 
hdr
[42] = (
d©a_Àngth
 >> 16) % 0x100;

216 
hdr
[43] = (
d©a_Àngth
 >> 24) % 0x100;

218  
hdr_Àn
;

219 
	}
}

221 
ußge
(
exôvÆ
);

223 
	$ußge
(
exôvÆ
)

225 
	`Ârötf
(
°dîr
,

226 "Ußge: %†[ o±i⁄†] [öput-fûe]\n", 
av0
);

227 
	`Ârötf
(
°dîr
,

229 
	`Ârötf
(
°dîr
,

231 
	`Ârötf
(
°dîr
,

233 
	`Ârötf
(
°dîr
,

235 
	`Ârötf
(
°dîr
,

237 
	`Ârötf
(
°dîr
,

239 
	`Ârötf
(
°dîr
,

243 
	`Ârötf
(
°dîr
,

247 
	`exô
(
exôvÆ
);

248 
	}
}

250 
	$maö
(
¨gc
, **
¨gv
)

252 
c
;

253 
£c
 = 0, 
us
 = 0, 
ßm∂es
 = 0;

254 
off£t
 = 0;

255 *
íd
;

256 
FILE
 *
f
=
NULL
;

257 *
hdr
;

258 
size_t
 
hdr_Àn
;

259 
size_t
 
d©a_Àn
;

260 
buf
[0x1000];

261 
size_t
 
buf_Àn
;

263 i‡(
	`°rchr
(
¨gv
[0], '/'))

264 
av0
 = 
	`°ºchr
(
¨gv
[0], '/') + 1;

266 
av0
 = 
¨gv
[0];

269 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "+hl:o:s:", 
l⁄g›ts
, 
NULL
)Ë!
EOF
) {

271 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "hl:o:s:")) != -1) {

273 
c
) {

275 
	`ußge
(0);

280 
£c
 = 
	`°πoul
(
›èrg
, &
íd
, 10);

281 i‡((
›èrg
[0] ='-'Ë|| (
íd
 == optarg) || ((end[0] != '\0') && (end[0] != '.'))) {

282 
	`Ârötf
(
°dîr
, "%s: InvÆid -»¨gumít.\n", 
av0
);

283 
	`exô
(-1);

284 } i‡(*
íd
 == '.') {

285 
tmp
[7];

286 
i
;

288 
	`mem£t
(
tmp
, '0',  (tmp) - 1);

289 
tmp
[ (tmp) - 1] = '\0';

290 
i
 = 0; (ò< ( (
tmp
Ë- 1)Ë&& (
	`isdigô
(
íd
[i+1])); i++)

291 
tmp
[
i
] = 
íd
[i+1];

292 
us
 = 
	`°πoul
(
tmp
, 
NULL
, 10);

294 
us
 = 0;

304 i‡(
ßm∂es
 != 0) {

305 
	`Ârötf
(
°dîr
, "%s: P¨amëî†-†™d -»¨êmutuÆlyÉx˛usive.\n", 
av0
);

306 
	`exô
(-1);

311 
ßm∂es
 = 
	`°πoul
(
›èrg
, &
íd
, 10);

312 i‡((
›èrg
[0] ='-'Ë|| (
íd
 == optarg) || (end[0] != '\0')) {

313 
	`Ârötf
(
°dîr
, "%s: InvÆid -†¨gumít.\n", 
av0
);

314 
	`exô
(-1);

316 i‡(
ßm∂es
 == 0) {

317 
	`Ârötf
(
°dîr
, "%s: InvÆid -†¨gumíà(zîÿi†nŸác˚±abÀ).\n", 
av0
);

318 
	`exô
(-1);

320 i‡((
£c
 !0Ë|| (
us
 != 0)) {

321 
	`Ârötf
(
°dîr
, "%s: P¨amëî†-»™d -†¨êmutuÆlyÉx˛usive.\n", 
av0
);

322 
	`exô
(-1);

327 
off£t
 = 
	`°πoul
(
›èrg
, &
íd
, 10);

328 i‡((*
›èrg
 ='-'Ë|| (
íd
 == optarg) || (*end != '\0')) {

329 
	`Ârötf
(
°dîr
, "%s: InvÆid -ÿ¨gumít.\n", 
av0
);

330 
	`exô
(-1);

335 
	`Ârötf
(
°dîr
, "%s: Bad comm™dÜöê›ti⁄ -%c.\n", 
av0
, 
›t›t
);

336 
	`ußge
(-1);

340 
¨gc
 -
›töd
;

341 
¨gv
 +
›töd
;

343 i‡(
¨gc
 == 0) {

344 
f
 = 
°dö
;

345 } i‡(
¨gc
 == 1) {

346 
f
 = 
	`f›í
(
¨gv
[0], "rb");

347 i‡(
f
 =
NULL
) {

348 
	`Ârötf
(
°dîr
, "%s: C™'à›í fûê%†f‹Ñódög.\n", 
av0
, 
¨gv
[0]);

349 
	`exô
(1);

352 
	`Ârötf
(
°dîr
, "%s: Toÿm™y comm™dÜöê¨gumíts.\n", 
av0
);

353 
	`ußge
(-1);

356 
hdr
 = 
	`ªad_hdr
(
f
, &
hdr_Àn
);

357 i‡(
hdr
 =
NULL
) {

358 
	`Ârötf
(
°dîr
, "%s: C™'àªad wav hódî.\n", 
av0
);

359 
	`exô
(2);

361 i‡((
hdr_Àn
 = 
	`∑tch_hdr
(
hdr
, hdr_Àn, 
£c
, 
us
, 
ßm∂es
, &
d©a_Àn
)) == 0) {

362 
	`‰ì
(
hdr
);

363 
	`Ârötf
(
°dîr
, "%s: C™'à∑r£ (‹Ö©chËwav hódî.\n", 
av0
);

364 
	`exô
(2);

367 i‡(
off£t
 > 
hdr_Àn
 + 
d©a_Àn
) {

368 
	`Ârötf
(
°dîr
, "%s: Off£ài†bey⁄d EOF.\n", 
av0
);

369 
	`exô
(3);

372 i‡((
off£t
 > 0Ë&& (off£à< 
hdr_Àn
)) {

373 
	`memmove
(
hdr
, hd∏+ 
off£t
, 
hdr_Àn
 - offset);

374 
hdr_Àn
 -
off£t
;

375 
off£t
 = 0;

378 i‡(
off£t
 > 0) {

379 
off£t
 -
hdr_Àn
;

381 i‡(
	`fwrôe
(
hdr
, 
hdr_Àn
, 1, 
°dout
) != 1) {

382 
	`Ârötf
(
°dîr
, "%s: WrôêÁûed.\n", 
av0
);

383 
	`exô
(4);

387 
	`‰ì
(
hdr
);

388 
hdr
 = 
NULL
;

389 
hdr_Àn
 = 0;

391 i‡(
off£t
 > 0) {

392 
d©a_Àn
 -
off£t
;

393 
off£t
 > 0) {

394 
buf_Àn
 = (
off£t
 >  (
buf
)) ?  (buf) : offset;

395 i‡(
	`‰ód
(
buf
, 
buf_Àn
, 1, 
f
) != 1) {

396 
	`Ârötf
(
°dîr
, "%s: Ród faûed.\n", 
av0
);

397 
	`exô
(5);

399 
off£t
 -
buf_Àn
;

403 
d©a_Àn
 > 0) {

404 
buf_Àn
 = (
d©a_Àn
 >  (
buf
)) ?  (buf) : data_len;

405 i‡(
	`‰ód
(
buf
, 
buf_Àn
, 1, 
f
) != 1) {

406 
	`Ârötf
(
°dîr
, "%s: Ród faûed.\n", 
av0
);

407 
	`exô
(5);

409 i‡(
	`fwrôe
(
buf
, 
buf_Àn
, 1, 
°dout
) != 1) {

410 
	`Ârötf
(
°dîr
, "%s: WrôêÁûed.\n", 
av0
);

411 
	`exô
(4);

413 
d©a_Àn
 -
buf_Àn
;

416 i‡(
f
 !
°dout
) {

417 
	`f˛o£
(
f
);

419 
	`exô
(0);

420 
	}
}

	@webserver.c

22 #ifde‡
HAVE_CONFIG_H


23 
	~"c⁄fig.h
"

26 
	~<˘y≥.h
>

27 
	~<î∫o.h
>

28 
	~<f˙é.h
>

29 
	~<limôs.h
>

30 
	~<±hªad.h
>

31 
	~<°d¨g.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<time.h
>

36 #ifde‡
HAVE_UNISTD_H


37 
	~<uni°d.h
>

40 #i‚de‡
WIN32


41 
	~<√tdb.h
>

42 
	~<sys/∑øm.h
>

43 
	~<sys/ty≥s.h
>

44 
	~<sys/sockë.h
>

45 
	~<√töë/ö.h
>

46 
	~<¨∑/öë.h
>

49 
	~"dØpd.h
"

50 
	~"web£rvî.h
"

51 
	~"io.h
"

57 #i‚de‡
PACKAGE


58 
	#PACKAGE
 "FúeÊy Web Sîvî"

	)

59 
	#VERSION
 "1.0"

	)

62 
	#MAX_HOSTNAME
 256

	)

63 
	#MAX_LINEBUFFER
 2048

	)

64 
	#BLKSIZE
 
PIPE_BUF


	)

66 #ifde‡
DEBUG


67 #i‚de‡
ASSERT


68 
	#ASSERT
(
f
) \

69 if(
f
) \

72 
	`ws_d¥ötf
(0,"As£πÉº‹ i¿%s,Üöê%d\n",
__FILE__
,
__LINE__
)

	)

74 
	#WS_ENTER
(Ë
	`ws_d¥ötf
(10,"E¡îög %s",
__func__
)

	)

75 
	#WS_EXIT
(Ë
	`ws_¥ötf
(10,"Exôög %s",
__func__
)

	)

77 #i‚de‡
ASSERT


78 
	#ASSERT
(
f
)

	)

80 
	#WS_ENTER
()

	)

81 
	#WS_EXIT
()

	)

88 
	sèg_ws_h™dÀr
 {

89 *
	m°em
;

90 (*
	mªq_h™dÀr
)(
	mWS_CONNINFO
*);

91 (*
	mauth_h™dÀr
)(
	mWS_CONNINFO
*, *, *);

92 
	mÊags
;

93 
	maddhódîs
;

94 
èg_ws_h™dÀr
 *
	m√xt
;

95 } 
	tWS_HANDLER
;

97 
	sèg_ws_c⁄∆i°
 {

98 
WS_CONNINFO
 *
	mpwsc
;

99 
èg_ws_c⁄∆i°
 *
	m√xt
;

100 } 
	tWS_CONNLIST
;

102 
	sèg_ws_¥iv©e
 {

103 
WSCONFIG
 
	mwsc⁄fig
;

104 
WS_HANDLER
 
	mh™dÀrs
;

105 
WS_CONNLIST
 
	mc⁄∆i°
;

107 
IOHANDLE
 
	mh£rvî
;

108 
	m°›
;

109 
	mru¬ög
;

110 
	mthªadno
;

111 
	mdi•©ch_thªads
;

112 
±hªad_t
 
	m£rvî_tid
;

113 
±hªad_c⁄d_t
 
	mexô_c⁄d
;

114 
±hªad_muãx_t
 
	mexô_muãx
;

115 } 
	tWS_PRIVATE
;

121 *
ws_maöthªad
(*);

122 *
ws_di•©chî
(*);

123 
ws_lock_unß„
();

124 
ws_u∆ock_unß„
();

125 
ws_deÁu…h™dÀr
(
WS_PRIVATE
 *
pw•
, 
WS_CONNINFO
 *
pwsc
);

126 
ws_add¨g
(
ARGLIST
 *
roŸ
, *
key
, *
fmt
, ...);

127 
ws_‰ì¨gli°
(
ARGLIST
 *
roŸ
);

128 *
ws_uædecode
(*
°rög
, 
•a˚_as_∂us
);

129 
ws_gëhódîs
(
WS_CONNINFO
 *
pwsc
);

130 
ws_gëpo°v¨s
(
WS_CONNINFO
 *
pwsc
);

131 
ws_gëgëv¨s
(
WS_CONNINFO
 *
pwsc
, *
°rög
);

132 *
ws_gë¨g
(
ARGLIST
 *
roŸ
, *
key
);

133 
ws_ã°¨g
(
ARGLIST
 *
roŸ
, *
key
, *
vÆue
);

134 
ws_födh™dÀr
(
WS_PRIVATE
 *
pw•
, 
WS_CONNINFO
 *
pwsc
,

135 (**
¥eq
)(
WS_CONNINFO
*),

136 (**
∑uth
)(
WS_CONNINFO
*, *, *),

137 *
addhódîs
);

138 
	`ws_ªgi°îh™dÀr
(
WSHANDLE
 
ws
, *
°em
,

139 (*
h™dÀr
)(
WS_CONNINFO
*),

140 (*
auth
)(
WS_CONNINFO
*, *, *),

141 
Êags
,

142 
addhódîs
);

143 
	`ws_decodïassw‹d
(*
hódî
, **
u£∫ame
, **
∑ssw‹d
);

144 
	`ws_ã°ªque°hódî
(
WS_CONNINFO
 *
pwsc
, *
hódî
, *
vÆue
);

145 *
	`ws_gëªque°hódî
(
WS_CONNINFO
 *
pwsc
, *
hódî
);

146 
	`ws_add_di•©ch_thªad
(
WS_PRIVATE
 *
pw•
, 
WS_CONNINFO
 *
pwsc
);

147 
	`ws_ªmove_di•©ch_thªad
(
WS_PRIVATE
 *
pw•
, 
WS_CONNINFO
 *
pwsc
);

148 
	`ws_ícodög_hack
(
WS_CONNINFO
 *
pwsc
);

150 
	`ws_deÁu…_îrh™dÀr
(
Àvñ
, *
msg
);

151 (*
ws_îr_h™dÀr
)(, *Ë
ws_deÁu…_îrh™dÀr
;

156 
±hªad_muãx_t
 
ws_unß„
=
PTHREAD_MUTEX_INITIALIZER
;

157 
auth_°©us
=0;

158 *
auth_ù
;

159 *
ws_dow
[] = { "Sun", "M⁄", "Tue", "Wed", "Thu", "Fri", "S©" 
	}
};

160 *
	gws_moy
[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",

163 *
	gws_îr‹s
[] = {

183 
	$ws_d¥ötf
(
Àvñ
, *
fmt
, ...) {

184 
îrbuf
[4096];

185 
va_li°
 
≠
;

187 
	`va_°¨t
(
≠
,
fmt
);

188 
	`v¢¥ötf
(
îrbuf
,”ºbuf),
fmt
,
≠
);

189 
	`va_íd
(
≠
);

191 
	`ws_îr_h™dÀr
(
Àvñ
,
îrbuf
);

192 
	}
}

199 
ws_£t_îrh™dÀr
((*
îr_h™dÀr
)(, *)) {

200 
ws_îr_h™dÀr
 = 
îr_h™dÀr
;

201 
	}
}

207 
	$ws_deÁu…_îrh™dÀr
(
Àvñ
, *
msg
) {

208 
	`Ârötf
(
°dîr
,"%d: %s", 
Àvñ
, 
msg
);

209 if(!
Àvñ
) {

210 
	`exô
(0);

212 
	}
}

221 
	$ws_lock_unß„
() {

222 
îr
;

223 
ªtvÆ
=
TRUE
;

225 
	`WS_ENTER
();

227 if((
îr
=
	`±hªad_muãx_lock
(&
ws_unß„
))) {

228 
	`ws_d¥ötf
(
L_WS_FATAL
,"C™nŸÜock muãx: %s\n",
	`°ªº‹
(
îr
));

229 
ªtvÆ
=
FALSE
;

232 
	`WS_EXIT
();

233  
ªtvÆ
;

234 
	}
}

243 
	$ws_u∆ock_unß„
() {

244 
îr
;

245 
ªtvÆ
=
TRUE
;

247 
	`WS_ENTER
();

249 if((
îr
=
	`±hªad_muãx_u∆ock
(&
ws_unß„
))) {

250 
	`ws_d¥ötf
(
L_WS_FATAL
,"C™nŸ u∆ock muãx: %s\n",
	`°ªº‹
(
îr
));

251 
ªtvÆ
=
FALSE
;

254 
	`WS_EXIT
();

255  
ªtvÆ
;

256 
	}
}

261 
	$ws_lock_c⁄∆i°
(
WS_PRIVATE
 *
pw•
) {

262 if(
	`±hªad_muãx_lock
(&
pw•
->
exô_muãx
))

263 
	`ws_d¥ötf
(
L_WS_FATAL
,"CannotÜock condition mutex\n");

264 
	}
}

269 
	$ws_u∆ock_c⁄∆i°
(
WS_PRIVATE
 *
pw•
) {

270 if(
	`±hªad_muãx_u∆ock
(&
pw•
->
exô_muãx
))

271 
	`ws_d¥ötf
(
L_WS_FATAL
,"Cannot unlock condition mutex\n");

272 
	}
}

280 
WSHANDLE
 
	$ws_öô
(
WSCONFIG
 *
c⁄fig
) {

281 
îr
;

282 
WS_PRIVATE
 *
pw•
;

284 
	`WS_ENTER
();

285 if((
pw•
=(
WS_PRIVATE
*)
	`mÆloc
((WS_PRIVATE))Ë=
NULL
) {

286 
	`ws_d¥ötf
(
L_WS_SPAM
,"MÆlo¯îr‹: %s\n",
	`°ªº‹
(
î∫o
));

287  
NULL
;

290 
	`mem˝y
(&
pw•
->
wsc⁄fig
,
c⁄fig
,(
WS_PRIVATE
));

291 
pw•
->
c⁄∆i°
.
√xt
=
NULL
;

292 
pw•
->
ru¬ög
=0;

293 
pw•
->
thªadno
=0;

294 
pw•
->
°›
=0;

295 
pw•
->
di•©ch_thªads
=0;

296 
pw•
->
h™dÀrs
.
√xt
=
NULL
;

298 if((
îr
=
	`±hªad_c⁄d_öô
(&
pw•
->
exô_c⁄d
, 
NULL
))) {

299 
	`ws_d¥ötf
(
L_WS_LOG
,"Eº‹ i¿±hªad_c⁄d_öô: %s\n",
	`°ªº‹
(
îr
));

300  
NULL
;

303 if((
îr
=
	`±hªad_muãx_öô
(&
pw•
->
exô_muãx
,
NULL
))) {

304 
	`ws_d¥ötf
(
L_WS_LOG
,"Eº‹ i¿±hªad_muãx_öô: %s\n",
	`°ªº‹
(
îr
));

305  
NULL
;

308 
	`WS_EXIT
();

309  (
WSHANDLE
)
pw•
;

310 
	}
}

326 
	$ws_°¨t
(
WSHANDLE
 
ws
) {

327 
îr
;

328 
ïhemîÆ
 = 0;

329 
WS_PRIVATE
 *
pw•
 = (WS_PRIVATE*)
ws
;

331 
	`WS_ENTER
();

337 if(
pw•
->
wsc⁄fig
.
p‹t
 == 0) {

338 
pw•
->
wsc⁄fig
.
p‹t
 = 1024;

339 
ïhemîÆ
 = 1;

343 
	`ws_d¥ötf
(
L_WS_INF
,"Li°íög o¿p‹à%d\n",
pw•
->
wsc⁄fig
.
p‹t
);

344 
pw•
->
h£rvî
 = 
	`io_√w
();

345 if(!
pw•
->
h£rvî
)

346 
	`ws_d¥ötf
(
L_WS_FATAL
,"Cannot createÇew IO object");

348 if(!
	`io_›í
(
pw•
->
h£rvî
,"li°í://%d",pw•->
wsc⁄fig
.
p‹t
)) {

349 if((!
ïhemîÆ
Ë|| (
	`io_îrcode
(
pw•
->
h£rvî
Ë!
IO_E_SOCKET_INUSE
)) {

350 
	`ws_d¥ötf
(
L_WS_LOG
,"Li°íÖ‹t: %s\n",
	`io_îr°r
(
pw•
->
h£rvî
));

351 
	`WS_EXIT
();

352  
E_WS_LISTEN
;

358 
pw•
->
wsc⁄fig
.
p‹t
++;

359 if(!
pw•
->
wsc⁄fig
.
p‹t
) {

360 
	`ws_d¥ötf
(
L_WS_LOG
,"ExhaustedÖorts\n");

361 
	`io_di•o£
(
pw•
->
h£rvî
);

362 
pw•
->
h£rvî
 = 
NULL
;

363 
	`WS_EXIT
();

364  
E_WS_EXHAUSTED
;

368 
	`ws_d¥ötf
(
L_WS_INF
,"Starting serverÅhread\n");

369 if((
îr
=
	`±hªad_¸óã
(&
pw•
->
£rvî_tid
,
NULL
,
ws_maöthªad
,(*)pwsp))) {

370 
	`ws_d¥ötf
(
L_WS_LOG
,"CouldÇŸ s∑w¿thªad: %s\n",
	`°ªº‹
(
îr
));

371 
	`io_˛o£
(
pw•
->
h£rvî
);

372 
	`io_di•o£
(
pw•
->
h£rvî
);

373 
	`WS_EXIT
();

374  
E_WS_PTHREADS
;

378 
pw•
->
ru¬ög
=1;

380 
	`WS_EXIT
();

381  
E_WS_SUCCESS
;

382 
	}
}

390 
	$ws_ªmove_di•©ch_thªad
(
WS_PRIVATE
 *
pw•
, 
WS_CONNINFO
 *
pwsc
) {

391 
WS_CONNLIST
 *
pHód
, *
pTaû
;

393 
	`WS_ENTER
();

395 
	`ws_lock_c⁄∆i°
(
pw•
);

397 
pTaû
=&(
pw•
->
c⁄∆i°
);

398 
pHód
=
pw•
->
c⁄∆i°
.
√xt
;

400 (
pHód
Ë&& (pHód->
pwsc
 !=Öwsc)) {

401 
pTaû
=
pHód
;

402 
pHód
ıHód->
√xt
;

405 if(
pHód
) {

407 
pw•
->
di•©ch_thªads
--;

408 
	`ws_d¥ötf
(
L_WS_DBG
,"WithÅhread %dÉxiting, %dáre stillÑunning\n",

409 
pwsc
->
thªadno
,
pw•
->
di•©ch_thªads
);

411 
pTaû
->
√xt
 = 
pHód
->next;

413 
	`‰ì
(
pHód
);

416 
	`±hªad_c⁄d_sig«l
(&
pw•
->
exô_c⁄d
);

419 
	`ws_u∆ock_c⁄∆i°
(
pw•
);

420 
	`WS_EXIT
();

421 
	}
}

429 
	$ws_add_di•©ch_thªad
(
WS_PRIVATE
 *
pw•
, 
WS_CONNINFO
 *
pwsc
) {

430 
WS_CONNLIST
 *
pNew
;

432 
	`WS_ENTER
();

434 
pNew
=(
WS_CONNLIST
*)
	`mÆloc
((WS_CONNLIST));

435 
pNew
->
√xt
=
NULL
;

436 
pNew
->
pwsc
=pwsc;

438 if(!
pNew
) {

439 
	`ws_d¥ötf
(
L_WS_FATAL
,"MÆloc: %s\n",
	`°ªº‹
(
î∫o
));

440 
	`exô
(1);

444 
	`ws_lock_c⁄∆i°
(
pw•
);

447 
pw•
->
di•©ch_thªads
++;

448 
pNew
->
√xt
 = 
pw•
->
c⁄∆i°
.next;

449 
pw•
->
c⁄∆i°
.
√xt
 = 
pNew
;

451 
	`ws_u∆ock_c⁄∆i°
(
pw•
);

452 
	`WS_EXIT
();

453 
	}
}

463 
	$ws_°›
(
WSHANDLE
 
ws
) {

464 
WS_PRIVATE
 *
pw•
 = (WS_PRIVATE*)
ws
;

465 
WS_HANDLER
 *
cuºít
;

466 
WS_CONNLIST
 *
p˛
;

467 *
ªsu…
;

469 
	`WS_ENTER
();

472 
pw•
->
h™dÀrs
.
√xt
) {

473 
cuºít
=
pw•
->
h™dÀrs
.
√xt
;

474 
pw•
->
h™dÀrs
.
√xt
=
cuºít
->next;

475 
	`‰ì
(&
cuºít
->
°em
);

476 
	`‰ì
(
cuºít
);

479 
pw•
->
°›
=1;

480 
pw•
->
ru¬ög
=0;

482 
	`ws_d¥ötf
(
L_WS_DBG
,"ws_stop: closingÅhe server fd\n");

483 
	`io_˛o£
(
pw•
->
h£rvî
);

484 
	`io_di•o£
(
pw•
->
h£rvî
);

487 
	`±hªad_joö
(
pw•
->
£rvî_tid
,&
ªsu…
);

490 
	`ws_lock_c⁄∆i°
(
pw•
);

492 
p˛
=
pw•
->
c⁄∆i°
.
√xt
;

497 
p˛
) {

498 if(
p˛
->
pwsc
->
h˛õ¡
) {

499 
	`io_˛o£
(
p˛
->
pwsc
->
h˛õ¡
);

500 
	`io_di•o£
(
p˛
->
pwsc
->
h˛õ¡
);

501 
p˛
->
pwsc
->
h˛õ¡
 = 
NULL
;

503 
p˛
ı˛->
√xt
;

507 
pw•
->
di•©ch_thªads
) {

508 
	`ws_d¥ötf
(
L_WS_DBG
,"ws_°›: I stû»£ê%dÅhªads\n",
pw•
->
di•©ch_thªads
);

509 
	`±hªad_c⁄d_waô
(&
pw•
->
exô_c⁄d
, &pw•->
exô_muãx
);

512 
	`ws_u∆ock_c⁄∆i°
(
pw•
);

514 
	`‰ì
(
pw•
);

516 
	`WS_EXIT
();

517  
TRUE
;

518 
	}
}

532 *
	$ws_maöthªad
(*
¨g
) {

533 
îr
;

534 
IOHANDLE
 
h√w
;

535 
WS_PRIVATE
 *
pw•
 = (WS_PRIVATE*)
¨g
;

536 
WS_CONNINFO
 *
pwsc
;

537 
±hªad_t
 
tid
;

539 
ho°«me
[
MAX_HOSTNAME
+1];

540 
ö_addr
 
ho°addr
;

542 
	`WS_ENTER
();

545 
pwsc
=(
WS_CONNINFO
*)
	`mÆloc
((WS_CONNINFO));

546 if(!
pwsc
) {

548 
	`ws_d¥ötf
(
L_WS_FATAL
,"Eº‹: %s\n",
	`°ªº‹
(
î∫o
));

549 
pw•
->
ru¬ög
=0;

550 
	`WS_EXIT
();

551 
	`exô
(1);

552  
NULL
;

555 
	`mem£t
(
pwsc
,0,(
WS_CONNINFO
));

557 
h√w
 = 
	`io_√w
();

558 if(!
h√w
)

559 
	`ws_d¥ötf
(
L_WS_FATAL
,"MallocÉrror in io_new()");

561 if(!
	`io_li°í_ac˚±
(
pw•
->
h£rvî
,
h√w
,&
ho°addr
)) {

562 
	`ws_d¥ötf
(
L_WS_LOG
,"Dispatcher:áccept failed: %s\n",

563 
	`io_îr°r
(
pw•
->
h£rvî
));

564 
	`io_˛o£
(
pw•
->
h£rvî
);

565 
	`io_di•o£
(
pw•
->
h£rvî
);

566 
pw•
->
ru¬ög
=0;

567 
	`‰ì
(
pwsc
);

569 
	`ws_d¥ötf
(
L_WS_FATAL
,"Dispatcher: Aborting\n");

570 
	`WS_EXIT
();

571  
NULL
;

575 
	`°∫˝y
(
ho°«me
,
	`öë_¡ﬂ
(
ho°addr
),
MAX_HOSTNAME
);

577 
pwsc
->
ho°«me
=
	`°rdup
(hostname);

578 
pwsc
->
h˛õ¡
 = 
h√w
;

579 
pwsc
->
pw•
 =Öwsp;

586 
	`ws_lock_unß„
();

587 
pwsc
->
thªadno
=
pw•
->threadno;

588 
pw•
->
thªadno
++;

592 if((
îr
=
	`±hªad_¸óã
(&
tid
,
NULL
,
ws_di•©chî
,(*)
pwsc
))) {

593 
	`ws_£t_îr
(
pwsc
,
E_WS_PTHREADS
);

594 
	`ws_d¥ötf
(
L_WS_FATAL
,"CouldÇŸ s∑w¿thªad: %s\n",
	`°ªº‹
(
îr
));

595 
	`ws_˛o£
(
pwsc
);

597 
	`ws_add_di•©ch_thªad
(
pw•
,
pwsc
);

598 
	`±hªad_dëach
(
tid
);

600 
	`ws_u∆ock_unß„
();

603 
	`WS_EXIT
();

604 
	}
}

619 
	$ws_˛o£
(
WS_CONNINFO
 *
pwsc
) {

620 
WS_PRIVATE
 *
pw•
 = (WS_PRIVATE *)(
pwsc
->pwsp);

622 
	`WS_ENTER
();

624 
	`ws_d¥ötf
(
L_WS_DBG
,"Thªad %d: Tîmö©ög\n",
pwsc
->
thªadno
);

625 
	`ws_d¥ötf
(
L_WS_DBG
,"Thªad %d: FªeögÑeque° hódîs\n",
pwsc
->
thªadno
);

626 
	`ws_‰ì¨gli°
(&
pwsc
->
ªque°_hódîs
);

627 
	`ws_d¥ötf
(
L_WS_DBG
,"Thªad %d: FªeögÑe•⁄£ hódîs\n",
pwsc
->
thªadno
);

628 
	`ws_‰ì¨gli°
(&
pwsc
->
ª•⁄£_hódîs
);

629 
	`ws_d¥ötf
(
L_WS_DBG
,"Thªad %d: FªeögÑeque° v¨s\n",
pwsc
->
thªadno
);

630 
	`ws_‰ì¨gli°
(&
pwsc
->
ªque°_v¨s
);

631 if(
pwsc
->
uri
) {

632 
	`‰ì
(
pwsc
->
uri
);

633 
pwsc
->
uri
=
NULL
;

636 if((
pwsc
->
˛o£
)||’wsc->
îr‹
)) {

637 
	`ws_d¥ötf
(
L_WS_DBG
,"Thªad %d: Closög fd\n",
pwsc
->
thªadno
);

638 
	`io_˛o£
(
pwsc
->
h˛õ¡
);

639 
	`io_di•o£
(
pwsc
->
h˛õ¡
);

641 
	`ws_ªmove_di•©ch_thªad
(
pw•
, 
pwsc
);

643 if(
pwsc
->
loˇl_°‹age
) {

644 if(
pwsc
->
°‹age_ˇŒback
) {

645 
pwsc
->
	`°‹age_ˇŒback
’wsc->
loˇl_°‹age
);

646 
pwsc
->
loˇl_°‹age
=
NULL
;

647 
pwsc
->
°‹age_ˇŒback
=
NULL
;

650 
	`‰ì
(
pwsc
->
ho°«me
);

651 
	`mem£t
(
pwsc
,0x00,(
WS_CONNINFO
));

652 
	`‰ì
(
pwsc
);

653 
	`WS_EXIT
();

654 
	`±hªad_exô
(
NULL
);

656 
	`WS_EXIT
();

657 
	}
}

664 
	$ws_‰ì¨gli°
(
ARGLIST
 *
roŸ
) {

665 
ARGLIST
 *
cuºít
;

667 
	`WS_ENTER
();

669 
roŸ
->
√xt
) {

670 
	`‰ì
(
roŸ
->
√xt
->
key
);

671 
	`‰ì
(
roŸ
->
√xt
->
vÆue
);

672 
cuºít
=
roŸ
->
√xt
;

673 
roŸ
->
√xt
=
cuºít
->next;

674 
	`‰ì
(
cuºít
);

677 
	`WS_EXIT
();

678 
	}
}

681 
	$ws_emôhódîs
(
WS_CONNINFO
 *
pwsc
) {

682 
ARGLIST
 *
pcuºít
=
pwsc
->
ª•⁄£_hódîs
.
√xt
;

684 
	`WS_ENTER
();

685 
pcuºít
) {

686 
	`ws_d¥ötf
(
L_WS_DBG
,"EmôtögÑï⁄£ hódî %s: %s\n",
pcuºít
->
key
,

687 
pcuºít
->
vÆue
);

688 
	`ws_wrôefd
(
pwsc
,"%s: %s\r\n",
pcuºít
->
key
,pcuºít->
vÆue
);

689 
pcuºít
ıcuºít->
√xt
;

692 
	`ws_wrôefd
(
pwsc
,"\r\n");

693 
	`WS_EXIT
();

694 
	}
}

706 
	$ws_gëpo°v¨s
(
WS_CONNINFO
 *
pwsc
) {

707 *
c⁄ã¡_Àngth
;

708 *
buf„r
;

709 
uöt32_t
 
Àngth
;

710 
uöt32_t
 
ms
;

712 
	`WS_ENTER
();

714 
c⁄ã¡_Àngth
 = 
	`ws_gë¨g
(&
pwsc
->
ªque°_hódîs
,"Content-Length");

715 if(!
c⁄ã¡_Àngth
) {

716 
	`ws_£t_îr
(
pwsc
,
E_WS_CONTENTLEN
);

717 
	`WS_EXIT
();

718  
FALSE
;

721 
Àngth
=
	`©oi
(
c⁄ã¡_Àngth
);

722 
	`ws_d¥ötf
(
L_WS_DBG
,"Thread %d: Post varÜength: %d\n",

723 
pwsc
->
thªadno
,
Àngth
);

725 
buf„r
=(*)
	`mÆloc
(
Àngth
+1);

727 if(!
buf„r
) {

728 
	`ws_£t_îr
(
pwsc
,
E_WS_MEMORY
);

729 
	`ws_d¥ötf
(
L_WS_INF
,"Thread %d: CouldÇot malloc %d bytes\n",

730 
pwsc
->
thªadno
, 
Àngth
);

731 
	`WS_EXIT
();

732  
FALSE
;

737 
ms
 = 1800 * 1000;

738 if(!
	`io_ªad_timeout
(
pwsc
->
h˛õ¡
, 
buf„r
, &
Àngth
, &
ms
)) {

739 if(0 =
ms
) {

740 
	`ws_d¥ötf
(
L_WS_INF
,"Thread %d: TimeoutÑeadingÖost vars\n",

741 
pwsc
->
thªadno
);

742 
	`ws_£t_îr
(
pwsc
,
E_WS_TIMEOUT
);

743 
	`WS_EXIT
();

744 
	`‰ì
(
buf„r
);

745  
FALSE
;

748 
	`ws_d¥ötf
(
L_WS_LOG
,"Thread %d: ReadÉrror: %s",

749 
pwsc
->
thªadno
,
	`io_îr°r
’wsc->
h˛õ¡
));

750 
	`ws_£t_îr
(
pwsc
,
E_WS_READ
);

751 
	`‰ì
(
buf„r
);

752  
FALSE
;

755 
	`ws_d¥ötf
(
L_WS_DBG
,"Thªad %d: RódÖo° v¨s: %s\n",
pwsc
->
thªadno
,
buf„r
);

757 if(!
	`ws_gëgëv¨s
(
pwsc
,(*)
buf„r
)) {

759 
	`‰ì
(
buf„r
);

760 
	`ws_d¥ötf
(
L_WS_LOG
,"CouldÇotÖarse get vars\n");

761  
FALSE
;

764 
	`‰ì
(
buf„r
);

766 
	`WS_EXIT
();

767  
TRUE
;

768 
	}
}

778 
	$ws_gëhódîs
(
WS_CONNINFO
 *
pwsc
) {

779 *
fú°
, *
œ°
;

780 
d⁄e
;

781 
buf„r
[
MAX_LINEBUFFER
];

782 
uöt32_t
 
Àn
;

784 
	`WS_ENTER
();

787 
d⁄e
=0;

788 !
d⁄e
) {

789 
Àn
 = (
buf„r
);

790 if(!
	`io_ªadlöe
(
pwsc
->
h˛õ¡
,(*)
buf„r
,&
Àn
)) {

791 
	`ws_£t_îr
(
pwsc
,
E_WS_READ
);

792 
pwsc
->
îr‹
=
î∫o
;

793 
	`ws_d¥ötf
(
L_WS_INF
,"Thªad %d:ÑódÉº‹: %s\n",
pwsc
->
thªadno
,

794 
	`io_îr°r
(
pwsc
->
h˛õ¡
));

795 
	`WS_EXIT
();

796  
FALSE
;

799 
	`ws_d¥ötf
(
L_WS_DBG
,"Thªad %d: Ród: %s",
pwsc
->
thªadno
,
buf„r
);

801 
fú°
=
buf„r
;

802 if(
buf„r
[0] == '\r')

803 
fú°
=&
buf„r
[1];

806 if(
fú°
[
	`°æí
(first)-1] == '\n')

807 
fú°
[
	`°æí
(first)-1] = '\0';

809 if(
	`°æí
(
fú°
) == 0) {

810 
	`ws_d¥ötf
(
L_WS_DBG
,"Thªad %d: Hódî†∑r£d!\n",
pwsc
->
thªadno
);

811 
d⁄e
=1;

814 
œ°
=
fú°
;

815 
	`°r£p
(&
œ°
,":");

817 if(!
œ°
) {

818 
	`ws_d¥ötf
(
L_WS_WARN
,"Thread %d: Invalid header: %s\n",

819 
pwsc
->
thªadno
,
fú°
);

821 *
œ°
==' ')

822 
œ°
++;

824 
œ°
[
	`°æí
(last)-1] == '\r')

825 
œ°
[
	`°æí
(last)-1] = '\0';

827 
	`ws_d¥ötf
(
L_WS_DBG
,"Thread %d: Adding header *%s=%s*\n",

828 
pwsc
->
thªadno
,
fú°
,
œ°
);

830 if(!
	`ws_add¨g
(&
pwsc
->
ªque°_hódîs
,
fú°
,"%s",
œ°
)) {

831 
	`ws_d¥ötf
(
L_WS_FATAL
,"Thread %d: Out of memory\n",

832 
pwsc
->
thªadno
);

833 
	`ws_£t_îr
(
pwsc
,
E_WS_MEMORY
);

834 
	`WS_EXIT
();

835  
FALSE
;

841 
	`WS_EXIT
();

842  
TRUE
;

843 
	}
}

868 
	$ws_ícodög_hack
(
WS_CONNINFO
 *
pwsc
) {

869 *
u£r_agít
;

870 
•a˚_as_∂us
=1;

872 
	`WS_ENTER
();

873 
u£r_agít
=
	`ws_gëªque°hódî
(
pwsc
, "user-agent");

874 if(
u£r_agít
) {

875 if(
	`°∫ˇ£cmp
(
u£r_agít
,"Roku",4) == 0)

876 
•a˚_as_∂us
=0;

877 if(
	`°∫ˇ£cmp
(
u£r_agít
,"iTunes",6) == 0)

878 
•a˚_as_∂us
=0;

880 
	`WS_EXIT
();

881  
•a˚_as_∂us
;

882 
	}
}

893 
	$ws_gëgëv¨s
(
WS_CONNINFO
 *
pwsc
, *
°rög
) {

894 *
fú°
, *
œ°
, *
middÀ
;

895 *
key
, *
vÆue
;

896 
d⁄e
;

898 
•a˚_as_∂us
;

900 
	`WS_ENTER
();

902 
•a˚_as_∂us
=
	`ws_ícodög_hack
(
pwsc
);

904 
d⁄e
=0;

906 
fú°
=
°rög
;

908 (!
d⁄e
Ë&& (
fú°
)) {

909 
œ°
=
middÀ
=
fú°
;

910 
	`°r£p
(&
œ°
,"&");

911 
	`°r£p
(&
middÀ
,"=");

913 if(!
middÀ
) {

914 
	`ws_d¥ötf
(
L_WS_WARN
,"Thread %d: Badárg: %s\n",

915 
pwsc
->
thªadno
,
fú°
);

917 
key
=
	`ws_uædecode
(
fú°
,
•a˚_as_∂us
);

918 
vÆue
=
	`ws_uædecode
(
middÀ
,
•a˚_as_∂us
);

920 
	`ws_d¥ötf
(
L_WS_DBG
,"Thread %d: Addingárg %s = %s\n",

921 
pwsc
->
thªadno
,
key
,
vÆue
);

922 
	`ws_add¨g
(&
pwsc
->
ªque°_v¨s
,
key
,"%s",
vÆue
);

924 
	`‰ì
(
key
);

925 
	`‰ì
(
vÆue
);

928 if(!
œ°
) {

929 
	`ws_d¥ötf
(
L_WS_DBG
,"Thread %d: DoneÖarsing GET/POSTárgs!\n",

930 
pwsc
->
thªadno
);

931 
d⁄e
=1;

933 
fú°
=
œ°
;

937 
	`WS_EXIT
();

938  
TRUE
;

939 
	}
}

949 *
	$ws_di•©chî
(*
¨g
) {

950 
WS_CONNINFO
 *
pwsc
=(WS_CONNINFO*)
¨g
;

951 
WS_PRIVATE
 *
pw•
=
pwsc
->pwsp;

954 
iTu√s_Êag
=0;

956 
buf„r
[
MAX_LINEBUFFER
];

957 *
fú°
,*
œ°
;

958 
c⁄√˘i⁄_d⁄e
=0;

959 
ˇn_di•©ch
;

960 *
auth
, *
u£∫ame
, *
∑ssw‹d
;

961 
hdrs
,
h™dÀr
;

962 
time_t
 
now
;

963 
tm
 
now_tm
;

964 (*
ªq_h™dÀr
)(
WS_CONNINFO
*);

965 (*
auth_h™dÀr
)(
WS_CONNINFO
*, *, *);

966 
uöt32_t
 
ms
, 
Àn
;

968 
	`WS_ENTER
()

971 
	`ws_lock_unß„
();

972 
	`ws_u∆ock_unß„
();

974 !
c⁄√˘i⁄_d⁄e
) {

977 
ms
 = 1800 * 1000;

978 
Àn
 = (
buf„r
);

979 if(!
	`io_ªadlöe_timeout
(
pwsc
->
h˛õ¡
,(*)
buf„r
,&
Àn
,&
ms
) || (!len)) {

980 
	`ws_£t_îr
(
pwsc
,
E_WS_TIMEOUT
);

981 
pwsc
->
îr‹
=
î∫o
;

982 
pwsc
->
˛o£
=1;

983 
	`ws_d¥ötf
(
L_WS_WARN
,"Thread %d: couldÇotÑead: %s\n",

984 
pwsc
->
thªadno
,
	`io_îr°r
’wsc->
h˛õ¡
));

986 
	`ws_˛o£
(
pwsc
);

987 
	`WS_EXIT
();

988  
NULL
;

991 
	`ws_d¥ötf
(
L_WS_DBG
,"Thªad %d: gŸÑeque°\n",
pwsc
->
thªadno
);

992 
	`ws_d¥ötf
(
L_WS_DBG
 - 1, "Reque°: %s", 
buf„r
);

994 
fú°
=
œ°
=
buf„r
;

995 
	`°r£p
(&
œ°
," ");

996 if(!
œ°
) {

997 
pwsc
->
˛o£
=1;

998 
	`ws_ªtu∫îr‹
(
pwsc
,400,"BadÑequest");

999 
	`ws_˛o£
(
pwsc
);

1000 
	`ws_d¥ötf
(
L_WS_SPAM
,"Error: badÑequest. Exiting ws_dispatcher\n");

1001 
	`WS_EXIT
();

1002  
NULL
;

1005 if(!
	`°rˇ£cmp
(
fú°
,"get")) {

1006 
pwsc
->
ªque°_ty≥
 = 
RT_GET
;

1007 } if(!
	`°rˇ£cmp
(
fú°
,"post")) {

1008 
pwsc
->
ªque°_ty≥
 = 
RT_POST
;

1012 
	`ws_£t_îr
(
pwsc
,
E_WS_REQTYPE
);

1013 
	`ws_ªtu∫îr‹
(
pwsc
,501,"Not implemented");

1014 
	`ws_˛o£
(
pwsc
);

1015 
	`ws_d¥ötf
(
L_WS_SPAM
,"Error:Çot get orÖost. Exiting ws_dispatcher\n");

1016 
	`WS_EXIT
();

1017  
NULL
;

1020 
fú°
=
œ°
;

1021 
	`°r£p
(&
œ°
," ");

1022 
pwsc
->
uri
=
	`°rdup
(
fú°
);

1025 if((!
	`ws_gëhódîs
(
pwsc
)Ë|| (!
œ°
)) {

1027 
	`ws_d¥ötf
(
L_WS_LOG
,"Thªad %d: Couldn'à∑r£ hódî†-áb‹tög\n",
pwsc
->
thªadno
);

1028 
	`ws_should_˛o£
(
pwsc
,
TRUE
);

1029 
	`ws_˛o£
(
pwsc
);

1030 
	`WS_EXIT
();

1031  
NULL
;

1038 if(
	`°∫ˇ£cmp
(
œ°
,"HTTP/1.0",8)==0) {

1039 
pwsc
->
˛o£
=!
	`ws_ã°¨g
(&pwsc->
ªque°_hódîs
,"connection","keep-alive");

1041 
pwsc
->
˛o£
=
	`ws_ã°¨g
(&pwsc->
ªque°_hódîs
,"connection","close");

1044 
	`ws_d¥ötf
(
L_WS_DBG
,"Thread %d: ConnectionÅype %s: Connection: %s\n",

1045 
pwsc
->
thªadno
, 
œ°
,Öwsc->
˛o£
 ? "non-persist" : "persist");

1047 if(!
pwsc
->
uri
) {

1048 
	`ws_£t_îr
(
pwsc
,
E_WS_MEMORY
);

1049 
	`ws_d¥ötf
(
L_WS_LOG
,"Thread %d: Errorállocation URI\n",

1050 
pwsc
->
thªadno
);

1051 
	`ws_ªtu∫îr‹
(
pwsc
,500,"Internal serverÉrror");

1052 
	`ws_˛o£
(
pwsc
);

1053 
	`WS_EXIT
();

1054  
NULL
;

1058 
fú°
=
pwsc
->
uri
;

1059 
	`°r£p
(&
fú°
,"?");

1061 if(
fú°
) {

1062 
	`ws_d¥ötf
(
L_WS_DBG
,"Thªad %d:Ö¨sög GETárgs\n",
pwsc
->
thªadno
);

1063 
	`ws_gëgëv¨s
(
pwsc
,
fú°
);

1068 
	`ws_d¥ötf
(
L_WS_DBG
,"Thread %d: Original URI: %s\n",

1069 
pwsc
->
thªadno
,pwsc->
uri
);

1071 
fú°
=
	`ws_uædecode
(
pwsc
->
uri
,
	`ws_ícodög_hack
(pwsc));

1072 
	`‰ì
(
pwsc
->
uri
);

1073 
pwsc
->
uri
=
fú°
;

1076 
fú°
=
	`°r°r
(
pwsc
->
uri
,"://");

1077 if(
fú°
) {

1078 
fú°
 += 3;

1079 
fú°
=
	`°rchr
(first,'/');

1080 if(
fú°
) {

1081 
fú°
=
	`°rdup
(first);

1082 
	`‰ì
(
pwsc
->
uri
);

1083 
pwsc
->
uri
=
fú°
;

1088 
	`ws_d¥ötf
(
L_WS_DBG
,"Thªad %d: Tøn¶©ed URI: %s\n",
pwsc
->
thªadno
,

1089 
pwsc
->
uri
);

1092 if(
pwsc
->
ªque°_ty≥
 =
RT_POST
)

1093 
	`ws_gëpo°v¨s
(
pwsc
);

1095 
hdrs
=1;

1097 
h™dÀr
=
	`ws_födh™dÀr
(
pw•
,
pwsc
,&
ªq_h™dÀr
,&
auth_h™dÀr
,&
hdrs
);

1099 
	`time
(&
now
);

1100 
	`ws_d¥ötf
(
L_WS_DBG
,"Thread %d: Time is %d secondsáfterÉpoch\n",

1101 
pwsc
->
thªadno
,
now
);

1102 
	`gmtime_r
(&
now
,&
now_tm
);

1103 
	`ws_d¥ötf
(
L_WS_DBG
,"Thªad %d: SëtögÅimêhódî\n",
pwsc
->
thªadno
);

1104 
	`ws_add¨g
(&
pwsc
->
ª•⁄£_hódîs
,"Date",

1106 
ws_dow
[
now_tm
.
tm_wday
],now_tm.
tm_mday
,

1107 
ws_moy
[
now_tm
.
tm_m⁄
],now_tm.
tm_yór
 + 1900,

1108 
now_tm
.
tm_hour
,now_tm.
tm_mö
,now_tm.
tm_£c
);

1110 if(
hdrs
) {

1111 
	`ws_add¨g
(&
pwsc
->
ª•⁄£_hódîs
,"Connection",

1112 
pwsc
->
˛o£
 ? "close" : "keep-alive");

1114 
	`ws_add¨g
(&
pwsc
->
ª•⁄£_hódîs
,"Server",

1115 
PACKAGE
 "/" 
VERSION
);

1117 
	`ws_add¨g
(&
pwsc
->
ª•⁄£_hódîs
,"Content-Type","text/html");

1118 
	`ws_add¨g
(&
pwsc
->
ª•⁄£_hódîs
,"Content-Language","en_us");

1122 if(
h™dÀr
 == -1) {

1123 
	`ws_d¥ötf
(
L_WS_DBG
,"Thread %d: Using default handler.\n",

1124 
pwsc
->
thªadno
);

1125 
	`ws_deÁu…h™dÀr
(
pw•
,
pwsc
);

1127 
	`ws_d¥ötf
(
L_WS_DBG
,"Thread %d: UsingÇon-default handler\n",

1128 
pwsc
->
thªadno
);

1130 
ˇn_di•©ch
=0;

1135 if((
auth_h™dÀr
Ë&& (
	`auth_h™dÀr
(
pwsc
,
NULL
,NULL)==0)) {

1137 
auth
=
	`ws_gë¨g
(&
pwsc
->
ªque°_hódîs
,"Authorization");

1138 if((
auth
Ë&& (
	`ws_decodïassw‹d
◊uth,&
u£∫ame
, &
∑ssw‹d
))) {

1139 if(
	`auth_h™dÀr
(
pwsc
,
u£∫ame
,
∑ssw‹d
))

1140 
ˇn_di•©ch
=1;

1141 
	`ws_add¨g
(&
pwsc
->
ªque°_v¨s
,"HTTP_USER","%s",
u£∫ame
);

1142 
	`ws_add¨g
(&
pwsc
->
ªque°_v¨s
,"HTTP_PASSWD","%s",
∑ssw‹d
);

1143 
	`‰ì
(
u£∫ame
);

1146 if(!
ˇn_di•©ch
) {

1148 
	`ws_add¨g
(&
pwsc
->
ª•⁄£_hódîs
,"WWW-Authenticate",

1150 
	`ws_ªtu∫îr‹
(
pwsc
,401,"Unauthorized");

1151 
	`ws_£t_îr
(
pwsc
,
E_WS_SUCCESS
);

1154 
ˇn_di•©ch
=1;

1157 if(
ˇn_di•©ch
) {

1158 if(
ªq_h™dÀr
)

1159 
	`ªq_h™dÀr
(
pwsc
);

1161 
	`ws_deÁu…h™dÀr
(
pw•
,
pwsc
);

1166 if((
pwsc
->
˛o£
Ë|| (pwsc->
îr‹
Ë|| (
pw•
->
°›
)) {

1167 
	`ws_should_˛o£
(
pwsc
,
TRUE
);

1168 
c⁄√˘i⁄_d⁄e
=1;

1170 
	`ws_˛o£
(
pwsc
);

1173 
	`WS_EXIT
();

1174  
NULL
;

1175 
	}
}

1192 
	$ws_wrôefd
(
WS_CONNINFO
 *
pwsc
, *
fmt
, ...) {

1193 
buf„r
[1024];

1194 
va_li°
 
≠
;

1195 
uöt32_t
 
Àn
;

1197 
	`WS_ENTER
();

1199 
	`va_°¨t
(
≠
, 
fmt
);

1200 
	`v¢¥ötf
(
buf„r
, (buf„r), 
fmt
, 
≠
);

1201 
	`va_íd
(
≠
);

1203 
Àn
 = (
uöt32_t
)
	`°æí
(
buf„r
);

1204 if(!
	`io_wrôe
(
pwsc
->
h˛õ¡
,(*)
buf„r
,&
Àn
)) {

1205 
	`ws_d¥ötf
(
L_WS_DBG
,"Error writingÅo client socket: %s\n",

1206 
	`io_îr°r
(
pwsc
->
h˛õ¡
));

1209 
	`WS_EXIT
();

1210  ()
Àn
;

1211 
	}
}

1221 
	$ws_wrôebö¨y
(
WS_CONNINFO
 *
pwsc
, *
d©a
, 
Àn
) {

1222 
uöt32_t
 
byãs_wrôãn
;

1224 
	`WS_ENTER
();

1225 
byãs_wrôãn
 = (
uöt32_t
Ë
Àn
;

1226 if(!
	`io_wrôe
(
pwsc
->
h˛õ¡
, (*)
d©a
, &
byãs_wrôãn
)) {

1227 
	`ws_d¥ötf
(
L_WS_LOG
,"Error writingÅo client socket: %s\n",

1228 
	`io_îr°r
(
pwsc
->
h˛õ¡
));

1231 
	`WS_EXIT
();

1232  ()
byãs_wrôãn
;

1233 
	}
}

1247 
	$ws_ªtu∫îr‹
(
WS_CONNINFO
 *
pwsc
,
îr‹
, *
des¸ùti⁄
) {

1248 *
u£øgít
;

1249 
îr_code
;

1250 *
îr_°r
;

1251 
kìp_Æive
 = 0;

1253 
	`WS_ENTER
();

1255 
	`ws_d¥ötf
(
L_WS_WARN
,"Thread %d: Entering ws_returnerror (%d: %s)\n",

1256 
pwsc
->
thªadno
,
îr‹
,
des¸ùti⁄
);

1257 
	`ws_wrôefd
(
pwsc
,"HTTP/1.1 %d %s\r\n",
îr‹
,
des¸ùti⁄
);

1262 
u£øgít
 = 
	`ws_gë¨g
(&
pwsc
->
ªque°_hódîs
,"User-Agent");

1263 if((
u£øgít
) &&

1264 (((
	`°∫cmp
(
u£øgít
,"iTu√s",6Ë=0Ë&& (
îr‹
 == 401)) ||

1265 ((
	`°∫cmp
(
u£øgít
,"Java",4) == 0)))) {

1266 
kìp_Æive
 = 1;

1269 if(
îr‹
 == 302) {

1270 
kìp_Æive
 = 1;

1273 if(
kìp_Æive
) {

1274 
	`ws_add¨g
(&
pwsc
->
ª•⁄£_hódîs
,"Connection","keep-alive");

1275 
	`ws_add¨g
(&
pwsc
->
ª•⁄£_hódîs
,"Content-Length","2");

1276 
	`ws_emôhódîs
(
pwsc
);

1277 
	`ws_wrôefd
(
pwsc
,"\r\n");

1278 
	`WS_EXIT
();

1279  
TRUE
;

1282 
	`ws_should_˛o£
(
pwsc
,
TRUE
);

1283 
	`ws_add¨g
(&
pwsc
->
ª•⁄£_hódîs
,"Connection","close");

1285 
	`ws_emôhódîs
(
pwsc
);

1287 
	`ws_wrôefd
(
pwsc
,"<HTML>\r\n<TITLE>");

1288 
	`ws_wrôefd
(
pwsc
,"%d %s</TITLE>\r\n<BODY>",
îr‹
,
des¸ùti⁄
);

1289 
	`ws_wrôefd
(
pwsc
,"\r\n<H1>%s</H1>\r\n",
des¸ùti⁄
);

1290 
	`ws_wrôefd
(
pwsc
,"Eº‹ %d\r\n<hr>\r\n",
îr‹
);

1291 
	`ws_wrôefd
(
pwsc
,"<i>" 
PACKAGE
 ": %s\r\n<br>",
VERSION
);

1293 
	`ws_gë_îr
(
pwsc
,&
îr_code
, &
îr_°r
);

1294 if(
E_WS_SUCCESS
 !
îr_code
)

1295 
	`ws_wrôefd
(
pwsc
,"Eº‹: %s\r\n",
	`°ªº‹
(
î∫o
));

1297 
	`ws_wrôefd
(
pwsc
,"</i></BODY>\r\n</HTML>\r\n");

1299 
	`WS_EXIT
();

1300  
TRUE
;

1301 
	}
}

1310 
	$ws_deÁu…h™dÀr
(
WS_PRIVATE
 *
pw•
, 
WS_CONNINFO
 *
pwsc
) {

1311 
∑th
[
PATH_MAX
];

1312 
ªsﬁved_∑th
[
PATH_MAX
];

1313 
IOHANDLE
 
hfûe
;

1314 
uöt64_t
 
Àn
;

1316 
	`WS_ENTER
();

1318 
	`¢¥ötf
(
∑th
,
PATH_MAX
,"%s/%s",
pw•
->
wsc⁄fig
.
web_roŸ
,
pwsc
->
uri
);

1319 if(!
	`ªÆ∑th
(
∑th
,
ªsﬁved_∑th
)) {

1320 
	`ws_£t_îr
(
pwsc
,
E_WS_NATIVE
);

1321 
	`ws_d¥ötf
(
L_WS_WARN
,"Exôög ws_deÁu…h™dÀr: C™nŸÑesﬁvê%s\n",
∑th
);

1322 
	`ws_ªtu∫îr‹
(
pwsc
,404,"Not found");

1323 
	`ws_˛o£
(
pwsc
);

1324 
	`WS_EXIT
();

1328 
	`ws_d¥ötf
(
L_WS_DBG
,"Thread %d: PreparingÅo serve %s\n",

1329 
pwsc
->
thªadno
, 
ªsﬁved_∑th
);

1331 if(
	`°∫cmp
(
ªsﬁved_∑th
,
pw•
->
wsc⁄fig
.
web_roŸ
,

1332 
	`°æí
(
pw•
->
wsc⁄fig
.
web_roŸ
))) {

1333 
	`ws_£t_îr
(
pwsc
,
E_WS_BADPATH
);

1334 
	`ws_d¥ötf
(
L_WS_WARN
,"Exiting ws_defaulthandler: Thread %d: "

1336 
pwsc
->
thªadno
,
ªsﬁved_∑th
);

1337 
	`ws_ªtu∫îr‹
(
pwsc
,403,"Forbidden");

1338 
	`ws_˛o£
(
pwsc
);

1339 
	`WS_EXIT
();

1343 
hfûe
 = 
	`io_√w
();

1344 if(!
hfûe
) {

1345 
	`ws_£t_îr
(
pwsc
,
E_WS_NATIVE
);

1346 
	`ws_d¥ötf
(
L_WS_LOG
,"Error creating file handle\n");

1347 
	`ws_ªtu∫îr‹
(
pwsc
,500,"Internal Server Error");

1348 
	`ws_˛o£
(
pwsc
);

1349 
	`WS_EXIT
();

1353 if(!
	`io_›í
(
hfûe
,"fûe://%U",
ªsﬁved_∑th
)) {

1354 
	`ws_£t_îr
(
pwsc
,
E_WS_NATIVE
);

1355 
	`ws_d¥ötf
(
L_WS_LOG
,"Eº‹ o≥nög %s: %s",
ªsﬁved_∑th
,

1356 
	`io_îr°r
(
hfûe
));

1357 
	`ws_d¥ötf
(
L_WS_WARN
,"Exiting ws_defaulthandler: Thread %d: "

1359 
pwsc
->
thªadno
,
ªsﬁved_∑th
,
	`°ªº‹
(
î∫o
));

1360 
	`ws_ªtu∫îr‹
(
pwsc
,404,"Not found");

1361 
	`ws_˛o£
(
pwsc
);

1363 
	`io_di•o£
(
hfûe
);

1364 
	`WS_EXIT
();

1369 
	`io_size
(
hfûe
,&
Àn
);

1371 
	`ws_d¥ötf
(
L_WS_DBG
,"Lígth o‡fûêi†%Œd\n",
Àn
);

1372 
	`ws_add¨g
(&
pwsc
->
ª•⁄£_hódîs
,"C⁄ã¡-Lígth","%Œd",
Àn
);

1374 
	`ws_wrôefd
(
pwsc
,"HTTP/1.1 200 OK\r\n");

1375 
	`ws_emôhódîs
(
pwsc
);

1379 
	`ws_c›yfûe
(
pwsc
,
hfûe
,
NULL
);

1381 
	`io_˛o£
(
hfûe
);

1382 
	`io_di•o£
(
hfûe
);

1384 
	`WS_EXIT
();

1386 
	}
}

1402 
	$ws_ã°ªque°hódî
(
WS_CONNINFO
 *
pwsc
, *
hódî
, *
vÆue
) {

1403  
	`ws_ã°¨g
(&
pwsc
->
ªque°_hódîs
,
hódî
,
vÆue
);

1404 
	}
}

1414 
	$ws_ã°¨g
(
ARGLIST
 *
roŸ
, *
key
, *
vÆue
) {

1415 *
ªtvÆ
;

1416 
ªsu…
;

1418 
	`WS_ENTER
();

1419 
	`ws_d¥ötf
(
L_WS_DBG
,"CheckögÅÿ£êi‡%†m©che†%s\n",
key
,
vÆue
);

1421 
ªtvÆ
=
	`ws_gë¨g
(
roŸ
,
key
);

1422 if(!
ªtvÆ
) {

1423 
	`ws_d¥ötf
(
L_WS_DBG
,"Nope!\n");

1424 
	`WS_EXIT
();

1425  
FALSE
;

1428 
ªsu…
=!
	`°rˇ£cmp
(
vÆue
,
ªtvÆ
);

1429 
	`ws_d¥ötf
(
L_WS_DBG
,"And ià%s\n",
ªsu…
 ? "DOES!" : "does NOT");

1430 
	`WS_EXIT
();

1431  
ªsu…
;

1432 
	}
}

1449 *
	$ws_gë¨g
(
ARGLIST
 *
roŸ
, *
key
) {

1450 
ARGLIST
 *
pcuºít
=
roŸ
->
√xt
;

1452 
	`WS_ENTER
();

1453 (
pcuºít
)&&(
	`°rˇ£cmp
’cuºít->
key
,key)))

1454 
pcuºít
ıcuºít->
√xt
;

1456 if(
pcuºít
) {

1457 
	`WS_EXIT
();

1458  
pcuºít
->
vÆue
;

1461 
	`WS_EXIT
();

1462  
NULL
;

1463 
	}
}

1482 
	$ws_add¨g
(
ARGLIST
 *
roŸ
, *
key
, *
fmt
, ...) {

1483 *
√wkey
;

1484 *
√wvÆue
;

1485 
ARGLIST
 *
≤ew
;

1486 
ARGLIST
 *
cuºít
;

1487 
va_li°
 
≠
;

1488 
vÆue
[
MAX_LINEBUFFER
];

1490 
	`WS_ENTER
();

1492 
	`va_°¨t
(
≠
,
fmt
);

1493 
	`v¢¥ötf
(
vÆue
,(vÆue),
fmt
,
≠
);

1494 
	`va_íd
(
≠
);

1496 
√wkey
=
	`°rdup
(
key
);

1497 
√wvÆue
=
	`°rdup
(
vÆue
);

1498 
≤ew
=(
ARGLIST
*)
	`mÆloc
((ARGLIST));

1500 if((!
≤ew
)||(!
√wkey
)||(!
√wvÆue
)) {

1501 
	`WS_EXIT
();

1502  
FALSE
;

1505 
≤ew
->
key
=
√wkey
;

1506 
≤ew
->
vÆue
=
√wvÆue
;

1512 
cuºít
=
roŸ
->
√xt
;

1513 
cuºít
) {

1514 if(!
	`°rˇ£cmp
(
cuºít
->
key
,key)) {

1516 
	`ws_d¥ötf
(
L_WS_DBG
,"Updating %s from %sÅo %s\n",

1517 
key
,
cuºít
->
vÆue
,value);

1518 
	`‰ì
(
cuºít
->
vÆue
);

1519 
cuºít
->
vÆue
 = 
√wvÆue
;

1520 
	`‰ì
(
√wkey
);

1521 
	`‰ì
(
≤ew
);

1522 
	`WS_EXIT
();

1525 
cuºít
=cuºít->
√xt
;

1529 
≤ew
->
√xt
=
roŸ
->next;

1530 
	`ws_d¥ötf
(
L_WS_DBG
,"Added *%s=%s*\n",
√wkey
,
√wvÆue
);

1531 
roŸ
->
√xt
=
≤ew
;

1533 
	`WS_EXIT
();

1534  
TRUE
;

1535 
	}
}

1547 *
	$ws_uædecode
(*
°rög
, 
•a˚_as_∂us
) {

1548 *
≤ew
;

1549 *
§c
,*
d°
;

1550 
vÆ
=0;

1552 
	`WS_ENTER
();

1554 
≤ew
=(*)
	`mÆloc
(
	`°æí
(
°rög
)+1);

1555 if(!
≤ew
) {

1556 
	`WS_EXIT
();

1557  
NULL
;

1560 
§c
=
°rög
;

1561 
d°
=
≤ew
;

1563 *
§c
) {

1564 *
§c
) {

1566 if(
•a˚_as_∂us
) {

1567 *
d°
++=' ';

1569 *
d°
++=*
§c
;

1571 
§c
++;

1575 
§c
++;

1576 if(*
§c
) {

1577 if((*
§c
 <= '9') && (*src >='0'))

1578 
vÆ
=(*
§c
 - '0');

1579 if((
	`tﬁowî
(*
§c
) <= 'f')&&(tolower(*src) >= 'a'))

1580 
vÆ
=10+(
	`tﬁowî
(*
§c
) - 'a');

1581 
§c
++;

1583 if(*
§c
) {

1584 
vÆ
 *= 16;

1585 if((*
§c
 <= '9') && (*src >='0'))

1586 
vÆ
+=(*
§c
 - '0');

1587 if((
	`tﬁowî
(*
§c
) <= 'f')&&(tolower(*src) >= 'a'))

1588 
vÆ
+=(10+(
	`tﬁowî
(*
§c
) - 'a'));

1589 
§c
++;

1591 *
d°
++=
vÆ
;

1594 *
d°
++=*
§c
++;

1599 *
d°
='\0';

1600 
	`WS_EXIT
();

1601  
≤ew
;

1602 
	}
}

1616 
ws_ªgi°îh™dÀr
(
WSHANDLE
 
ws
, *
°em
,

1617 (*
h™dÀr
)(
WS_CONNINFO
*),

1618 (*
auth
)(
WS_CONNINFO
 *, *, *),

1619 
Êags
,

1620 
addhódîs
) {

1621 
WS_HANDLER
 *
ph™dÀr
;

1622 
WS_PRIVATE
 *
pw•
 = (WS_PRIVATE *)
ws
;

1624 
	`WS_ENTER
();

1625 
ph™dÀr
=(
WS_HANDLER
 *)
	`mÆloc
((WS_HANDLER));

1626 if(!
ph™dÀr
)

1627 
	`ws_d¥ötf
(
L_WS_FATAL
,"MallocÉrror in ws_registerhandler\n");

1629 
ph™dÀr
->
°em
=
	`°rdup
(stem);

1630 
ph™dÀr
->
ªq_h™dÀr
=
h™dÀr
;

1631 
ph™dÀr
->
auth_h™dÀr
=
auth
;

1632 
ph™dÀr
->
addhódîs
=addheaders;

1634 
	`ws_lock_unß„
();

1635 
ph™dÀr
->
√xt
=
pw•
->
h™dÀrs
.next;

1636 
pw•
->
h™dÀrs
.
√xt
=
ph™dÀr
;

1637 
	`ws_u∆ock_unß„
();

1639 
	`WS_EXIT
();

1640  
TRUE
;

1641 
	}
}

1655 
ws_födh™dÀr
(
WS_PRIVATE
 *
pw•
, 
WS_CONNINFO
 *
pwsc
,

1656 (**
¥eq
)(
WS_CONNINFO
*),

1657 (**
∑uth
)(
WS_CONNINFO
 *, *, *),

1658 *
addhódîs
) {

1659 
WS_HANDLER
 *
ph™dÀr
;

1661 
	`WS_ENTER
();

1662 
	`ws_lock_unß„
();

1664 
ph™dÀr
 = 
pw•
->
h™dÀrs
.
√xt
;

1665 *
¥eq
=
NULL
;

1667 
	`ws_d¥ötf
(
L_WS_DBG
,"Thread %d: PreparingÅo find handler\n",

1668 
pwsc
->
thªadno
);

1670 
ph™dÀr
) {

1671 
	`ws_d¥ötf
(
L_WS_DBG
,"Checking %ságainst handler for %s\n",

1672 
pwsc
->
uri
, 
ph™dÀr
->
°em
);

1673 if(!
	`°∫ˇ£cmp
(
ph™dÀr
->
°em
,
pwsc
->
uri
,
	`°æí
(phandler->stem))) {

1675 
	`ws_d¥ötf
(
L_WS_DBG
,"Thªad %d: URI M©ch!\n",
pwsc
->
thªadno
);

1676 *
¥eq
=
ph™dÀr
->
ªq_h™dÀr
;

1677 *
∑uth
=
ph™dÀr
->
auth_h™dÀr
;

1678 *
addhódîs
=
ph™dÀr
->addheaders;

1679 
	`ws_u∆ock_unß„
();

1680 
	`WS_EXIT
();

1683 
ph™dÀr
ıh™dÀr->
√xt
;

1686 
	`ws_u∆ock_unß„
();

1687 
	`ws_d¥ötf
(
L_WS_DBG
,"Didn't find one!\n");

1688 
	`WS_EXIT
();

1690 
	}
}

1705 
	$ws_decodïassw‹d
(*
hódî
, **
u£∫ame
, **
∑ssw‹d
) {

1706 
ws_xœt
[256];

1707 
ws_xœt_öô
=0;

1708 
ödex
;

1709 
Àn
;

1710 
øck
=0;

1711 
∑ds
=0;

1712 *
decodebuf„r
;

1713 *
pö
, *
pout
;

1714 *
ty≥
,*
ba£64
;

1715 
lookup
;

1717 *
u£∫ame
=
NULL
;

1718 *
∑ssw‹d
=
NULL
;

1720 
	`WS_ENTER
();

1722 
	`ws_lock_unß„
();

1724 if(!
ws_xœt_öô
) {

1725 
ws_xœt_öô
=1;

1727 
	`mem£t
((*)&
ws_xœt
,0xFF,(ws_xlat));

1728 
ödex
=0; index < 26; index++) {

1729 
ws_xœt
['A' + 
ödex
] = index;

1730 
ws_xœt
['a' + 
ödex
] = index + 26;

1733 
ödex
=0; index < 10; index++) {

1734 
ws_xœt
['0' + 
ödex
] = index + 52;

1737 
ws_xœt
['+'] = 62;

1738 
ws_xœt
['/'] = 63;

1741 
	`ws_u∆ock_unß„
();

1746 (*
hódî
) && (*header == ' '))

1747 
hódî
++;

1750 
ty≥
=
hódî
;

1751 
ba£64
 = 
	`°rchr
(
hódî
,' ');

1752 if(!
ba£64
) {

1754 
	`ws_d¥ötf
(
L_WS_DBG
,"Badáuthítiˇti⁄ hódî: %s\n",
hódî
);

1755 
	`WS_EXIT
();

1756  
FALSE
;

1759 *
ba£64
 = '\0';

1760 
ba£64
++;

1762 
decodebuf„r
=(*)
	`mÆloc
(
	`°æí
(
ba£64
));

1763 if(!
decodebuf„r
) {

1764 
	`WS_EXIT
();

1765  
FALSE
;

1768 
	`ws_d¥ötf
(
L_WS_DBG
,"Pª∑rögÅÿdecodê%s\n",
ba£64
);

1770 
	`mem£t
(
decodebuf„r
,0,
	`°æí
(
ba£64
));

1771 
Àn
=0;

1772 
pout
=
decodebuf„r
;

1773 
pö
=(*)
ba£64
;

1776 
pö
[
øck
]) {

1777 if(
pö
[
øck
] != '=') {

1778 
lookup
=
ws_xœt
[
pö
[
øck
]];

1779 if(
lookup
 == 0xFF) {

1780 
	`ws_d¥ötf
(
L_WS_WARN
,"Got garbage Authenticate header\n");

1781 
	`‰ì
(
decodebuf„r
);

1782 *
u£∫ame
 = 
NULL
;

1783 *
∑ssw‹d
 = 
NULL
;

1784  
FALSE
;

1788 
øck
) {

1790 
pout
[0]=(
lookup
 << 2);

1793 
pout
[0] |(
lookup
 >> 4);

1794 
pout
[1] = (
lookup
 << 4);

1797 
pout
[1] |(
lookup
 >> 2);

1798 
pout
[2] = (
lookup
 << 6);

1801 
pout
[2] |
lookup
;

1804 
øck
++;

1807 
∑ds
++;

1808 
øck
++;

1811 if(
øck
 == 4) {

1812 
pö
 += 4;

1813 
pout
 += 3;

1815 
Àn
 +(3-
∑ds
);

1816 
øck
=0;

1821 
	`ws_d¥ötf
(
L_WS_DBG
,"Decoded %s\n",
decodebuf„r
);

1823 *
u£∫ame
 = (*)
decodebuf„r
;

1824 *
∑ssw‹d
 = *
u£∫ame
;

1826 
	`°r£p
(
∑ssw‹d
,":");

1828 
	`ws_d¥ötf
(
L_WS_DBG
,"Decoded u£r=%s,Öw=%s\n",*
u£∫ame
,*
∑ssw‹d
);

1829 
	`WS_EXIT
();

1830  
TRUE
;

1831 
	}
}

1843 
	$ws_addª•⁄£hódî
(
WS_CONNINFO
 *
pwsc
, *
hódî
, *
fmt
, ...) {

1844 
va_li°
 
≠
;

1845 
vÆue
[
MAX_LINEBUFFER
];

1847 
	`WS_ENTER
();

1849 
	`va_°¨t
(
≠
,
fmt
);

1850 
	`v¢¥ötf
(
vÆue
,(vÆue),
fmt
,
≠
);

1851 
	`va_íd
(
≠
);

1853 
	`WS_EXIT
();

1854  
	`ws_add¨g
(&
pwsc
->
ª•⁄£_hódîs
,
hódî
,
vÆue
);

1855 
	}
}

1864 *
	$ws_gëv¨
(
WS_CONNINFO
 *
pwsc
, *
v¨
) {

1865  
	`ws_gë¨g
(&(
pwsc
->
ªque°_v¨s
),
v¨
);

1866 
	}
}

1875 *
	$ws_gëªque°hódî
(
WS_CONNINFO
 *
pwsc
, *
hódî
) {

1876  
	`ws_gë¨g
(&
pwsc
->
ªque°_hódîs
,
hódî
);

1877 
	}
}

1884 *
	$ws_gë_loˇl_°‹age
(
WS_CONNINFO
 *
pwsc
) {

1885  
pwsc
->
loˇl_°‹age
;

1886 
	}
}

1896 
	$ws_lock_loˇl_°‹age
(
WS_CONNINFO
 *
pwsc
) {

1897 
WS_PRIVATE
 *
pw•
;

1899 
pw•
 = (
WS_PRIVATE
 *)
pwsc
->pwsp;

1900 
	`ws_lock_c⁄∆i°
(
pw•
);

1901 
	}
}

1910 
	$ws_u∆ock_loˇl_°‹age
(
WS_CONNINFO
 *
pwsc
) {

1911 
WS_PRIVATE
 *
pw•
;

1913 
pw•
 = (
WS_PRIVATE
 *)
pwsc
->pwsp;

1914 
	`ws_u∆ock_c⁄∆i°
(
pw•
);

1915 
	}
}

1927 
ws_£t_loˇl_°‹age
(
WS_CONNINFO
 *
pwsc
, *
±r
, (*
ˇŒback
)(*)) {

1928 if(!
pwsc
)

1931 if(
pwsc
->
loˇl_°‹age
) {

1932 
	`ws_d¥ötf
(
L_WS_FATAL
,"lsálreadyállocated");

1935 
pwsc
->
°‹age_ˇŒback
 = 
ˇŒback
;

1936 
pwsc
->
loˇl_°‹age
 = 
±r
;

1937 
	}
}

1953 
WS_CONNINFO
 *
	$ws_thªad_íum_fú°
(
WSHANDLE
 
wsh
, 
WSTHREADENUM
 *
vµ
) {

1954 
WS_PRIVATE
 *
pw•
 = (WS_PRIVATE *)
wsh
;

1955 
WS_CONNINFO
 *
pwsc
 = 
NULL
;

1956 
WS_CONNLIST
 *
pc⁄li°
;

1958 
	`ws_lock_c⁄∆i°
(
pw•
);

1960 
pc⁄li°
 = 
pw•
->
c⁄∆i°
.
√xt
;

1961 *
vµ
 = (
WSTHREADENUM
)
pc⁄li°
;

1962 if(
pc⁄li°
) {

1963 
pwsc
 = 
pc⁄li°
->pwsc;

1965 
	`ws_u∆ock_c⁄∆i°
(
pw•
);

1968  
pwsc
;

1969 
	}
}

1981 
WS_CONNINFO
 *
	$ws_thªad_íum_√xt
(
WSHANDLE
 
wsh
, 
WSTHREADENUM
 *
vµ
) {

1982 
WS_PRIVATE
 *
pw•
 = (WS_PRIVATE *)
wsh
;

1983 
WS_CONNINFO
 *
pwsc
 = 
NULL
;

1984 
WS_CONNLIST
 *
pc⁄li°
;

1986 
pc⁄li°
 = (
WS_CONNLIST
*)*
vµ
;

1987 if((!
pc⁄li°
Ë|| (!pc⁄li°->
√xt
)) {

1988 
	`ws_u∆ock_c⁄∆i°
(
pw•
);

1990 
pc⁄li°
ıc⁄li°->
√xt
;

1991 *
vµ
 = (
WSTHREADENUM
)
pc⁄li°
;

1992 
pwsc
 = 
pc⁄li°
->pwsc;

1995  
pwsc
;

1996 
	}
}

2008 *
	$ws_íum_v¨
(
WS_CONNINFO
 *
pwsc
, **
key
, **
vÆue
, *
œ°
) {

2009 
ARGLIST
 *
∂i°
 = (ARGLIST *)
œ°
;

2011 if(!
∂i°
) {

2012 
∂i°
 = 
pwsc
->
ªque°_v¨s
.
√xt
;

2014 
∂i°
 =Öli°->
√xt
;

2017 if(
∂i°
) {

2018 if(
key
Ë*key = 
∂i°
->key;

2019 if(
vÆue
Ë*vÆuê
∂i°
->value;

2022  
∂i°
;

2023 
	}
}

2034 
	$ws_c›yfûe
(
WS_CONNINFO
 *
pwsc
, 
IOHANDLE
 
hfûe
, 
uöt64_t
 *
byãs_c›õd
) {

2035 
ªtvÆ
 = 
FALSE
;

2036 
buf
[
BLKSIZE
];

2038 
uöt64_t
 
tŸÆ_byãs
 = 0;

2039 
uöt32_t
 
byãs_ªad
 = 0;

2040 
uöt32_t
 
byãs_wrôãn
 = 0;

2042 
	`ASSERT
(
pwsc
);

2043 if(!
pwsc
)

2046 
byãs_ªad
 = 
BLKSIZE
;

2047 
	`io_ªad
(
hfûe
,
buf
,&
byãs_ªad
) && bytes_read) {

2048 
byãs_wrôãn
 = 
byãs_ªad
;

2051 if(!
	`io_wrôe
(
pwsc
->
h˛õ¡
,
buf
,&
byãs_wrôãn
)) {

2052 
	`ws_d¥ötf
(
L_WS_LOG
,"Wrôêîr‹: %s\n",
	`io_îr°r
(
pwsc
->
h˛õ¡
));

2055 if(
byãs_c›õd
)

2056 *
byãs_c›õd
 = 
tŸÆ_byãs
;

2058  
FALSE
;

2061 if(
byãs_wrôãn
 !
byãs_ªad
) {

2062 
	`ws_d¥ötf
(
L_WS_LOG
,"InternalÉrror in ws_copyfile\n");

2066 
tŸÆ_byãs
 +
byãs_ªad
;

2069 if(!
byãs_ªad
) {

2070 
ªtvÆ
 = 
TRUE
;

2072 
	`ws_d¥ötf
(
L_WS_LOG
,"RódÉº‹ %s\n",
	`io_îr°r
(
hfûe
));

2075 if(
byãs_c›õd
)

2076 *
byãs_c›õd
 = 
tŸÆ_byãs
;

2078  
ªtvÆ
;

2079 
	}
}

2088 *
	$ws_uri
(
WS_CONNINFO
 *
pwsc
) {

2089  
pwsc
->
uri
;

2090 
	}
}

2098 
	$ws_should_˛o£
(
WS_CONNINFO
 *
pwsc
, 
should_˛o£
) {

2099 
	`ASSERT
(
pwsc
);

2101 
pwsc
->
˛o£
 = 
should_˛o£
;

2102 
	}
}

2110 
	$ws_thªadno
(
WS_CONNINFO
 *
pwsc
) {

2111 
	`ASSERT
(
pwsc
);

2113 if(
pwsc
)

2114  
pwsc
->
thªadno
;

2116 
	}
}

2123 *
	$ws_ho°«me
(
WS_CONNINFO
 *
pwsc
) {

2124 
	`ASSERT
(
pwsc
);

2125 
	`ASSERT
(
pwsc
->
ho°«me
);

2127 if((
pwsc
Ë&& (pwsc->
ho°«me
)) {

2128  
pwsc
->
ho°«me
;

2131  
NULL
;

2132 
	}
}

2144 
	$ws_£t_îr
(
WS_CONNINFO
 *
pwsc
, 
ws_îr‹
) {

2145 #ifde‡
WIN32


2146 
ÕEº‹Buf
[256];

2149 
	`ASSERT
(
pwsc
);

2151 if(!
pwsc
)

2152  
FALSE
;

2154 if(
pwsc
->
îr_msg
)

2155 
	`‰ì
(
pwsc
->
îr_msg
);

2157 
pwsc
->
îr_code
 = 
ws_îr‹
;

2158 if(
E_WS_SUCCESS
 =
ws_îr‹
)

2159  
TRUE
;

2161 
	`ws_should_˛o£
(
pwsc
,
TRUE
);

2163 if(
E_WS_NATIVE
 =
ws_îr‹
) {

2164 #ifde‡
WIN32


2165 
pwsc
->
îr_«tive
 = 
	`GëLa°Eº‹
();

2166 
	`F‹m©Mesßge
(
FORMAT_MESSAGE_FROM_SYSTEM
 | 
FORMAT_MESSAGE_IGNORE_INSERTS
,

2167 
NULL
,
pwsc
->
îr_«tive
,
	`MAKELANGID
(
LANG_NEUTRAL
,
SUBLANG_DEFAULT
),

2168 (
LPTSTR
)
ÕEº‹Buf
,÷pEº‹Buf),
NULL
);

2169 
pwsc
->
îr_msg
 = 
	`°rdup
(
ÕEº‹Buf
);

2172 
pwsc
->
îr_«tive
 = 
î∫o
;

2173 
pwsc
->
îr_msg
 = 
	`°rdup
(
	`°ªº‹
’wsc->
îr_«tive
));

2177  
TRUE
;

2178 
	}
}

2199 
	$ws_gë_îr
(
WS_CONNINFO
 *
pwsc
, *
îrcode
, **
îr_msg
) {

2200 
	`ASSERT
(
pwsc
);

2202 if(!
pwsc
)

2203  
FALSE
;

2205 if(
îrcode
) {

2206 *
îrcode
 = 
pwsc
->
îr_code
;

2209 if(
îr_msg
) {

2210 if(
E_WS_NATIVE
 !
pwsc
->
îr_code
) {

2211 *
îr_msg
 = 
ws_îr‹s
[
pwsc
->
îr_code
];

2213 *
îr_msg
 = 
pwsc
->err_msg;

2217  
TRUE
;

2218 
	}
}

	@webserver.h

22 #i‚de‡
_WEBSERVER_H_


23 
	#_WEBSERVER_H_


	)

25 
	~"io.h
"

31 
	#RT_GET
 0

	)

32 
	#RT_POST
 1

	)

34 
	#E_WS_SUCCESS
 0

	)

35 
	#E_WS_NATIVE
 1

	)

36 
	#E_WS_MEMORY
 2

	)

37 
	#E_WS_PTHREADS
 3

	)

38 
	#E_WS_EXHAUSTED
 4

	)

39 
	#E_WS_LISTEN
 5

	)

40 
	#E_WS_CONTENTLEN
 6

	)

41 
	#E_WS_READ
 7

	)

42 
	#E_WS_GETVARS
 8

	)

43 
	#E_WS_TIMEOUT
 9

	)

44 
	#E_WS_REQTYPE
 10

	)

45 
	#E_WS_BADPATH
 11

	)

47 
	#L_WS_SPAM
 10

	)

48 
	#L_WS_DBG
 9

	)

49 
	#L_WS_INF
 5

	)

50 
	#L_WS_WARN
 2

	)

51 
	#L_WS_LOG
 1

	)

52 
	#L_WS_FATAL
 0

	)

57 * 
	tWSHANDLE
;

58 * 
	tWSTHREADENUM
;

60 
	sèg_wsc⁄fig
 {

61 *
	mweb_roŸ
;

62 *
	mid
;

63 *
	ms¶_˚π
;

64 *
	ms¶_key
;

65 *
	ms¶_pw
;

66 
	mp‹t
;

67 
	ms¶_p‹t
;

68 } 
	tWSCONFIG
;

70 
	sèg_¨gli°
 {

71 *
	mkey
;

72 *
	mvÆue
;

73 
èg_¨gli°
 *
	m√xt
;

74 } 
	tARGLIST
;

76 
	sèg_ws_c⁄nöfo
 {

77 
	mîr_code
;

78 
	mîr_«tive
;

79 *
	mîr_msg
;

80 
WSHANDLE
 
	mpw•
;

81 
	mthªadno
;

82 
	mîr‹
;

83 
IOHANDLE
 
	mh˛õ¡
;

84 
	mªque°_ty≥
;

85 *
	muri
;

86 *
	mho°«me
;

87 
	m˛o£
;

88 
	m£cuª
;

89 *
	m£cuª_°‹age
;

90 *
	mloˇl_°‹age
;

91 (*
	m°‹age_ˇŒback
)(*);

92 
ARGLIST
 
	mªque°_hódîs
;

93 
ARGLIST
 
	mª•⁄£_hódîs
;

94 
ARGLIST
 
	mªque°_v¨s
;

95 } 
	tWS_CONNINFO
;

101 
	#WS_REQ_HANDLER
 (*)(
WS_CONNINFO
 *)

	)

102 
	#WS_AUTH_HANDLER
 (*)(
WS_CONNINFO
*, *, *)

	)

105 
WSHANDLE
 
ws_öô
(
WSCONFIG
 *
c⁄fig
);

106 
ws_°¨t
(
WSHANDLE
 
ws
);

107 
ws_°›
(
WSHANDLE
 
ws
);

108 
ws_ªgi°îh™dÀr
(
WSHANDLE
 
ws
, *
°em
,

109 (*
h™dÀr
)(
WS_CONNINFO
*),

110 (*
auth
)(
WS_CONNINFO
*, *, *),

111 
Êags
,

112 
addhódîs
);

113 
	`ws_£rvî_îrcode
(
WSHANDLE
 
ws
);

118 
	`ws_lock_loˇl_°‹age
(
WS_CONNINFO
 *
pwsc
);

119 
	`ws_u∆ock_loˇl_°‹age
(
WS_CONNINFO
 *
pwsc
);

120 *
	`ws_gë_loˇl_°‹age
(
WS_CONNINFO
 *
pwsc
);

121 
	`ws_£t_loˇl_°‹age
(
WS_CONNINFO
 *
pwsc
, *
±r
, (*
ˇŒback
)(*));

123 
WS_CONNINFO
 *
	`ws_thªad_íum_fú°
(
WSHANDLE
, 
WSTHREADENUM
 *);

124 
WS_CONNINFO
 *
	`ws_thªad_íum_√xt
(
WSHANDLE
, 
WSTHREADENUM
 *);

127 
	`ws_˛o£
(
WS_CONNINFO
 *
pwsc
);

128 
	`ws_ªtu∫îr‹
(
WS_CONNINFO
 *
pwsc
, 
îr‹
, *
des¸ùti⁄
);

129 
	`ws_addª•⁄£hódî
(
WS_CONNINFO
 *
pwsc
, *
hódî
, *
fmt
, ...);

130 
	`ws_wrôefd
(
WS_CONNINFO
 *
pwsc
, *
fmt
, ...);

131 
	`ws_wrôebö¨y
(
WS_CONNINFO
 *
pwsc
, *
d©a
, 
Àn
);

132 *
	`ws_gëv¨
(
WS_CONNINFO
 *
pwsc
, *
v¨
);

133 *
	`ws_gëªque°hódî
(
WS_CONNINFO
 *
pwsc
, *
hódî
);

134 
	`ws_ã°ªque°hódî
(
WS_CONNINFO
 *
pwsc
, *
hódî
, *
vÆue
);

135 
	`ws_emôhódîs
(
WS_CONNINFO
 *
pwsc
);

136 *
	`ws_uri
(
WS_CONNINFO
 *
pwsc
);

137 *
	`ws_íum_v¨
(
WS_CONNINFO
 *
pwsc
, **
key
, **
vÆue
, *
œ°
);

138 
	`ws_c›yfûe
(
WS_CONNINFO
 *
pwsc
, 
IOHANDLE
 
hfûe
, 
uöt64_t
 *
byãs_c›õd
);

139 
	`ws_should_˛o£
(
WS_CONNINFO
 *
pwsc
, 
should_˛o£
);

140 
	`ws_thªadno
(
WS_CONNINFO
 *
pwsc
);

141 *
	`ws_ho°«me
(
WS_CONNINFO
 *
pwsc
);

143 
	`ws_£t_îrh™dÀr
((*
îr_h™dÀr
)(, *));

144 
	`ws_£t_îr
(
WS_CONNINFO
 *
pwsc
, 
ws_îr‹
);

145 
	`ws_gë_îr
(
WS_CONNINFO
 *
pwsc
, *
îrcode
, **
îr_msg
);

	@win32.h

7 #i‚de‡
_WIN32_H_


8 
	#_WIN32_H_


	)

12 #i‡
deföed
(
_MSC_VER
)

13 #i‡
_MSC_VER
 >= 1400

14 
	#_CRT_SECURE_NO_DEPRECATE
 1

	)

15 
	#_CRT_NONSTDC_NO_DEPRECATE
 1

	)

20 
	#WIN32_LEAN_AND_MEAN


	)

24 
	~<wödows.h
>

26 
	~<°ddef.h
>

27 
	~<f˙é.h
>

28 
	~<dúe˘.h
>

29 
	~<°dio.h
>

32 
	#mode_t
 

	)

33 
	#ssize_t
 

	)

37 
	#PIPE_BUF
 256

	)

38 
	#MAXDESC
 512

	)

39 
	#ETIME
 101

	)

40 
	#PATH_MAX
 2048

	)

41 
	#MAX_NAME_LEN
 
_MAX_PATH


	)

42 
	#EADDRINUSE
 
WSAEADDRINUSE


	)

43 
	#S_IFLNK
 0x1

	)

45 
	#HOST
 "unknown-wödows-ick"

	)

46 
	#SERVICENAME
 "FúeÊy Medü Sîvî"

	)

48 
	~"os-wö32.h
"

50 #i‚de‡
TRUE


51 
	#TRUE
 1

	)

52 
	#FALSE
 0

	)

55 
UINT8
 
	tuöt8_t
;

56 
INT8
 
	töt8_t
;

57 
UINT16
 
	tuöt16_t
;

58 
INT16
 
	töt16_t
;

59 
UINT32
 
	tuöt32_t
;

60 
INT32
 
	töt32_t
;

61 
UINT64
 
	tuöt64_t
;

62 
INT64
 
	töt64_t
;

66 
	#u¶ìp
 
SÀï


	)

67 
	#¶ìp
(
a
Ë
	`SÀï
(◊Ë* 1000)

	)

68 
	#mkdú
(
a
,
b
Ë
	`_mkdú
(◊))

	)

69 
	#°πﬁl
 
°πﬁ


	)

70 
	#©ﬁl
 
©ﬁ


	)

72 
	#ªÆ∑th
 
os_ªÆ∑th


	)

73 
	#°r£p
 
os_°r£p


	)

75 
	#°∫ˇ£cmp
 
°∫icmp


	)

76 
	#°rˇ£cmp
 
°ricmp


	)

77 
	#¢¥ötf
 
_¢¥ötf


	)

78 
	#v¢¥ötf
 
_v¢¥ötf


	)

79 
	#ac˚ss
 
_ac˚ss


	)

81 
	#ªaddú_r
 
os_ªaddú_r


	)

82 
	#˛o£dú
 
os_˛o£dú


	)

83 
	#›ídú
 
os_›ídú


	)

85 
	#gëuid
 
os_gëuid


	)

86 
	#°ªº‹
 
os_°ªº‹


	)

93 
	#gëtimeofday
 
os_gëtimeofday


	)

96 
	#CONFFILE
 
	`os_c⁄fig∑th
()

	)

98 *
os_c⁄fig∑th
();

	@xml-rpc.c

7 #ifde‡
HAVE_CONFIG_H


8 
	~"c⁄fig.h
"

11 #ifde‡
HAVE_DIRENT_H


12 
	~<dúít.h
>

14 
	~<î∫o.h
>

15 
	~<limôs.h
>

16 #ifde‡
HAVE_STDINT_H


17 
	~<°döt.h
>

19 
	~<°dio.h
>

20 
	~<°d¨g.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<time.h
>

25 #ifde‡
HAVE_UNISTD_H


26 
	~<uni°d.h
>

29 #ifde‡
WIN32


30 
	~<io.h
>

33 
	~<sys/°©.h
>

34 
	~<sys/ty≥s.h
>

36 
	~"dØpd.h
"

38 
	~"c⁄figfûe.h
"

39 
	~"c⁄f.h
"

40 
	~"db-gíîic.h
"

41 
	~"îr.h
"

42 
	~"mp3-sˇ¬î.h
"

43 
	~"os.h
"

44 
	~"∂ugö.h
"

45 
	~"ªnd.h
"

46 
	~"web£rvî.h
"

47 
	~"xml-Ωc.h
"

50 
	sèg_xml°ack
 {

51 *
	mèg
;

52 
èg_xml°ack
 *
	m√xt
;

53 } 
	tXMLSTACK
;

55 
	sèg_xml°ru˘
 {

56 
WS_CONNINFO
 *
	mpwsc
;

57 
	m°ack_Àvñ
;

58 
XMLSTACK
 
	m°ack
;

62 
xml_gë_°©s
(
WS_CONNINFO
 *
pwsc
);

63 
xml_£t_c⁄fig
(
WS_CONNINFO
 *
pwsc
);

64 
xml_brow£_∑th
(
WS_CONNINFO
 *
pwsc
);

65 
xml_ªsˇn
(
WS_CONNINFO
 *
pwsc
);

66 
xml_ªtu∫_îr‹
(
WS_CONNINFO
 *
pwsc
, 
îr
, *
îr°r
);

67 *
xml_ítôy_ícode
(*
‹igöÆ
);

69 
	$xml_ªtu∫_îr‹
(
WS_CONNINFO
 *
pwsc
, 
îr
, *
îr°r
) {

70 
XMLSTRUCT
 *
pxml
;

72 
pxml
=
	`xml_öô
(
pwsc
,
TRUE
);

73 
	`xml_push
(
pxml
,"results");

75 
	`xml_ouçut
(
pxml
,"°©us","%d",
îr
);

76 
	`xml_ouçut
(
pxml
,"°©us°rög","%s",
îr°r
);

78 
	`xml_p›
(
pxml
);

79 
	`xml_deöô
(
pxml
);

81 
	}
}

92 
XMLSTRUCT
 *
	$xml_öô
(
WS_CONNINFO
 *
pwsc
, 
emô_hódî
) {

93 
XMLSTRUCT
 *
pxml
;

95 
pxml
=(
XMLSTRUCT
*)
	`mÆloc
((XMLSTRUCT));

96 if(!
pxml
) {

97 
	`DPRINTF
(
E_FATAL
,
L_XML
,"MallocÉrror\n");

100 
	`mem£t
(
pxml
,0,(
XMLSTRUCT
));

102 
pxml
->
pwsc
 =Öwsc;

105 
	`ws_addª•⁄£hódî
(
pwsc
,"Cache-Control","no-cache");

106 
	`ws_addª•⁄£hódî
(
pwsc
,"Expires","-1");

108 if(
emô_hódî
) {

109 
	`ws_addª•⁄£hódî
(
pwsc
,"Content-Type","text/xml; charset=utf-8");

110 
	`ws_wrôefd
(
pwsc
,"HTTP/1.0 200 OK\r\n");

111 
	`ws_emôhódîs
(
pwsc
);

113 
	`ws_wrôefd
(
pwsc
,"<?xml version=\"1.0\"Éncoding=\"UTF-8\" standalone=\"yes\"?>");

116  
pxml
;

117 
	}
}

122 
	$xml_upd©e_c⁄fig
(
WS_CONNINFO
 *
pwsc
) {

123 *
¨g
, *
vÆue
, *
du∑rg
;

124 *
±mp
;

125 *
bad∑rms
=
NULL
;

126 *
h™dÀ
;

127 
has_îr‹
=0;

128 
bad∑rms_Àn
=0;

129 
îr
;

131 
h™dÀ
 = 
NULL
;

134 (
h™dÀ
=
	`ws_íum_v¨
(
pwsc
,&
¨g
,&
vÆue
,h™dÀ)Ë!
NULL
) {

136 
du∑rg
 = 
	`°rdup
(
¨g
);

137 
±mp
 = 
	`°rchr
(
du∑rg
,':');

138 if(
±mp
) {

139 *
±mp
++ = '\0';

142 
	`DPRINTF
(
E_DBG
,
L_XML
,"Sëtög %s/%†tÿ%s\n",
du∑rg
,
±mp
,
vÆue
);

143 
îr
 = 
	`c⁄f_£t_°rög
(
du∑rg
,
±mp
,
vÆue
,
TRUE
);

144 if(
îr
 !
CONF_E_SUCCESS
) {

145 
	`DPRINTF
(
E_DBG
,
L_XML
,"Eº‹ sëtög %s/%s\n",
du∑rg
,
±mp
);

146 
has_îr‹
 = 
TRUE
;

147 if(!
bad∑rms
) {

148 
bad∑rms_Àn
 = ()
	`°æí
(
¨g
) + 1;

149 
bad∑rms
 = (*)
	`mÆloc
(
bad∑rms_Àn
);

150 if(!
bad∑rms
) {

151 
	`DPRINTF
(
E_FATAL
,
L_XML
,"xml_update_config: malloc\n");

153 
	`°r˝y
(
bad∑rms
,
¨g
);

155 
bad∑rms_Àn
 +()
	`°æí
(
¨g
) + 1;

156 
bad∑rms
 = (*)
	`ªÆloc
(bad∑rms,
bad∑rms_Àn
);

157 if(!
bad∑rms
) {

158 
	`DPRINTF
(
E_FATAL
,
L_XML
,"xml_update_config: malloc\n");

160 
	`°rˇt
(
bad∑rms
,",");

161 
	`°rˇt
(
bad∑rms
,
¨g
);

165 
	`‰ì
(
du∑rg
);

168 if(
has_îr‹
) {

169 
	`DPRINTF
(
E_INF
,
L_XML
,"BadÖ¨ms; %s\n",
bad∑rms
);

170 
	`xml_ªtu∫_îr‹
(
pwsc
,500,
bad∑rms
);

171 
	`‰ì
(
bad∑rms
);

175 
h™dÀ
 = 
NULL
;

178 (
h™dÀ
=
	`ws_íum_v¨
(
pwsc
,&
¨g
,&
vÆue
,h™dÀ)Ë!
NULL
) {

180 
du∑rg
 = 
	`°rdup
(
¨g
);

181 
±mp
 = 
	`°rchr
(
du∑rg
,':');

182 if(
±mp
) {

183 *
±mp
++ = '\0';

186 
	`DPRINTF
(
E_DBG
,
L_XML
,"Sëtög %s/%†tÿ%s\n",
du∑rg
,
±mp
,
vÆue
);

187 
îr
 = 
	`c⁄f_£t_°rög
(
du∑rg
,
±mp
,
vÆue
,
FALSE
);

188 if(
îr
 !
CONF_E_SUCCESS
) {

190 
	`DPRINTF
(
E_DBG
,
L_XML
,"Eº‹ sëtög %s/%s\n",
du∑rg
,
±mp
);

191 
	`xml_ªtu∫_îr‹
(
pwsc
,500,
¨g
);

195 
	`‰ì
(
du∑rg
);

198 
	`xml_ªtu∫_îr‹
(
pwsc
,200,"Success");

199 
	}
}

204 
	$xml_ªsˇn
(
WS_CONNINFO
 *
pwsc
) {

205 if(
	`ws_gëv¨
(
pwsc
,"full")) {

206 
c⁄fig
.
fuŒ_ªlﬂd
=1;

209 
c⁄fig
.
ªlﬂd
=1;

211 
	`xml_ªtu∫_îr‹
(
pwsc
,200,"Success");

212 
	}
}

219 
	$xml_£t_c⁄fig
(
WS_CONNINFO
 *
pwsc
) {

220 *
£˘i⁄
;

221 *
key
;

222 *
vÆue
;

223 
vîify_⁄ly
;

224 
îr
;

226 
£˘i⁄
 = 
	`ws_gëv¨
(
pwsc
,"section");

227 
key
 = 
	`ws_gëv¨
(
pwsc
,"key");

228 
vÆue
 = 
	`ws_gëv¨
(
pwsc
,"value");

230 
vîify_⁄ly
=0;

231 if(
	`ws_gëv¨
(
pwsc
,"verify_only")) {

232 
vîify_⁄ly
 = 1;

235 if((!
£˘i⁄
Ë|| (!
key
Ë|| (!
vÆue
)) {

236 
	`xml_ªtu∫_îr‹
(
pwsc
,500,"Missing section, key, or value");

240 if((
îr
=
	`c⁄f_£t_°rög
(
£˘i⁄
,
key
,
vÆue
,
vîify_⁄ly
)!=
CONF_E_SUCCESS
)) {

242 
îr
) {

243 
CONF_E_BADELEMENT
:

244 
	`xml_ªtu∫_îr‹
(
pwsc
,500,"Unknown section/keyÖair");

246 
CONF_E_PATHEXPECTED
:

247 
	`xml_ªtu∫_îr‹
(
pwsc
,500,"Expecting validÖath");

249 
CONF_E_INTEXPECTED
:

250 
	`xml_ªtu∫_îr‹
(
pwsc
,500,"Expecting integer value");

252 
CONF_E_NOTWRITABLE
:

253 
	`xml_ªtu∫_îr‹
(
pwsc
,500,"Config fileÇot writable");

256 
	`xml_ªtu∫_îr‹
(
pwsc
,500,"conf_set_string:Érror");

261 
	`xml_ªtu∫_îr‹
(
pwsc
,200,"Success");

263 
	}
}

271 
	$xml_push
(
XMLSTRUCT
 *
pxml
, *
ãrm
) {

272 
XMLSTACK
 *
p°ack
;

274 
p°ack
 = (
XMLSTACK
 *)
	`mÆloc
((XMLSTACK));

275 
p°ack
->
√xt
=
pxml
->
°ack
.next;

276 
p°ack
->
èg
=
	`°rdup
(
ãrm
);

277 
pxml
->
°ack
.
√xt
=
p°ack
;

279 
pxml
->
°ack_Àvñ
++;

281 
	`ws_wrôefd
(
pxml
->
pwsc
,"<%s>",
ãrm
);

282 
	}
}

289 
	$xml_p›
(
XMLSTRUCT
 *
pxml
) {

290 
XMLSTACK
 *
p°ack
;

292 
p°ack
=
pxml
->
°ack
.
√xt
;

293 if(!
p°ack
) {

294 
	`DPRINTF
(
E_LOG
,
L_XML
,"xml_pop:ÅriedÅoÖopánÉmpty stack\n");

298 
pxml
->
°ack
.
√xt
 = 
p°ack
->next;

300 
	`ws_wrôefd
(
pxml
->
pwsc
,"</%s>",
p°ack
->
èg
);

301 
	`‰ì
(
p°ack
->
èg
);

302 
	`‰ì
(
p°ack
);

304 
pxml
->
°ack_Àvñ
--;

305 
	}
}

312 
	$xml_ouçut
(
XMLSTRUCT
 *
pxml
, *
£˘i⁄
, *
fmt
, ...) {

313 
va_li°
 
≠
;

314 
buf
[256];

315 *
ouçut
;

317 
	`va_°¨t
(
≠
, 
fmt
);

318 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

319 
	`va_íd
(
≠
);

321 
ouçut
 = 
	`xml_ítôy_ícode
(
buf
);

322 if(
£˘i⁄
) {

323 
	`xml_push
(
pxml
,
£˘i⁄
);

325 
	`ws_wrôefd
(
pxml
->
pwsc
,"%s",
ouçut
);

326 
	`‰ì
(
ouçut
);

327 if(
£˘i⁄
) {

328 
	`xml_p›
(
pxml
);

330 
	}
}

337 
	$xml_deöô
(
XMLSTRUCT
 *
pxml
) {

338 
XMLSTACK
 *
p°ack
;

340 if(
pxml
->
°ack
.
√xt
) {

341 
	`DPRINTF
(
E_LOG
,
L_XML
,"xml_deinit:Éntries still on stack (%s)\n",

342 
pxml
->
°ack
.
√xt
->
èg
);

345 (
p°ack
=
pxml
->
°ack
.
√xt
)) {

346 
pxml
->
°ack
.
√xt
=
p°ack
->next;

347 
	`‰ì
(
p°ack
->
èg
);

348 
	`‰ì
(
p°ack
);

350 
	`‰ì
(
pxml
);

351 
	}
}

358 
	$xml_h™dÀ
(
WS_CONNINFO
 *
pwsc
) {

359 *
mëhod
;

361 if((
mëhod
=
	`ws_gëv¨
(
pwsc
,"mëhod")Ë=
NULL
) {

362 
	`ws_ªtu∫îr‹
(
pwsc
,500,"no method specified");

366 if(
	`°rˇ£cmp
(
mëhod
,"stats") == 0) {

367 
	`xml_gë_°©s
(
pwsc
);

371 if(
	`°rˇ£cmp
(
mëhod
,"config") == 0) {

372 
	`c⁄f_xml_dump
(
pwsc
);

376 if(
	`°rˇ£cmp
(
mëhod
,"setconfig") == 0) {

377 
	`xml_£t_c⁄fig
(
pwsc
);

381 if(
	`°rˇ£cmp
(
mëhod
,"updateconfig") == 0) {

382 
	`xml_upd©e_c⁄fig
(
pwsc
);

387 if(
	`°rˇ£cmp
(
mëhod
,"browse_path") == 0) {

388 
	`xml_brow£_∑th
(
pwsc
);

393 if(
	`°rˇ£cmp
(
mëhod
,"rescan") == 0) {

394 
	`xml_ªsˇn
(
pwsc
);

398 if(
	`°rˇ£cmp
(
mëhod
,"shutdown") == 0) {

399 
c⁄fig
.
°›
=1;

400 
	`xml_ªtu∫_îr‹
(
pwsc
,200,"Success");

404 
	`xml_ªtu∫_îr‹
(
pwsc
,500,"Invalid method");

406 
	}
}

414 
	$xml_brow£_∑th
(
WS_CONNINFO
 *
pwsc
) {

415 
XMLSTRUCT
 *
pxml
;

416 
DIR
 *
pd
;

417 *
ba£_∑th
;

418 
de
[(
dúít
Ë+ 
MAXNAMLEN
 + 1];

419 
dúít
 *
pde
;

420 
ªadabÀ
, 
wrôabÀ
;

421 
fuŒ_∑th
[
PATH_MAX
+1];

422 
ªsﬁved_∑th
[
PATH_MAX
];

423 
îr
;

424 
ign‹e_dŸfûes
=1;

425 
ign‹e_fûes
=1;

426 
°©
 
sb
;

428 
ba£_∑th
 = 
	`ws_gëv¨
(
pwsc
, "path");

429 if(!
ba£_∑th
)

430 
ba£_∑th
 = 
PATHSEP_STR
;

432 if(
	`ws_gëv¨
(
pwsc
,"show_dotfiles"))

433 
ign‹e_dŸfûes
 = 0;

435 if(
	`ws_gëv¨
(
pwsc
,"show_files"))

436 
ign‹e_fûes
 = 0;

438 
pd
 = 
	`›ídú
(
ba£_∑th
);

439 if(!
pd
) {

440 
	`xml_ªtu∫_îr‹
(
pwsc
,500,"BadÖath");

444 
pxml
=
	`xml_öô
(
pwsc
,1);

445 
	`xml_push
(
pxml
,"results");

449 
pde
 = (
dúít
 *)&
de
;

450 
îr
 = 
	`ªaddú_r
(
pd
,(
dúít
 *)
de
, &
pde
);

452 if(
îr
 == -1) {

453 
	`DPRINTF
(
E_LOG
,
L_SCAN
,"Error inÑeaddir_r: %s\n",

454 
	`°ªº‹
(
î∫o
));

458 if(!
pde
)

461 if((!
	`°rcmp
(
pde
->
d_«me
,".")) || (!strcmp(pde->d_name,"..")))

465 
	`¢¥ötf
(
fuŒ_∑th
,
PATH_MAX
,"%s%c%s",
ba£_∑th
,
PATHSEP
,
pde
->
d_«me
);

466 
	`ªÆ∑th
(
fuŒ_∑th
,
ªsﬁved_∑th
);

468 if(
	`os_°©
(
ªsﬁved_∑th
,&
sb
)) {

469 
	`DPRINTF
(
E_INF
,
L_XML
,"Error statting %s: %s\n",

470 
ªsﬁved_∑th
,
	`°ªº‹
(
î∫o
));

474 if((
sb
.
°_mode
 & 
S_IFREG
Ë&& (
ign‹e_fûes
))

478 if((!(
sb
.
°_mode
 & 
S_IFDIR
)) &&

479 (!(
sb
.
°_mode
 & 
S_IFREG
)))

482 if((
ign‹e_dŸfûes
Ë&& (
pde
->
d_«me
) && (pde->d_name[0] == '.'))

485 
ªadabÀ
 = !
	`ac˚ss
(
ªsﬁved_∑th
,
R_OK
);

486 
wrôabÀ
 = !
	`ac˚ss
(
ªsﬁved_∑th
,
W_OK
);

488 if(
sb
.
°_mode
 & 
S_IFDIR
) {

489 
	`xml_push
(
pxml
,"directory");

490 } if((
sb
.
°_mode
 & 
S_IFLNK
) == S_IFLNK) {

491 
	`xml_push
(
pxml
,"symlink");

493 
	`xml_push
(
pxml
,"file");

495 
	`xml_ouçut
(
pxml
,"«me",
pde
->
d_«me
);

496 
	`xml_ouçut
(
pxml
,"fuŒ_∑th",
ªsﬁved_∑th
);

497 
	`xml_ouçut
(
pxml
,"ªadabÀ","%d",
ªadabÀ
);

498 
	`xml_ouçut
(
pxml
,"wrôabÀ","%d",
wrôabÀ
);

500 
	`xml_p›
(
pxml
);

505 
	`xml_p›
(
pxml
);

506 
	`xml_deöô
(
pxml
);

508 
	`˛o£dú
(
pd
);

509 
	}
}

514 
	$xml_gë_°©s
(
WS_CONNINFO
 *
pwsc
) {

515 
r_£cs
, 
r_days
, 
r_hours
, 
r_mös
;

516 
buf
[80];

517 
WS_CONNINFO
 *
pci
;

518 
SCAN_STATUS
 *
pss
;

519 
WSTHREADENUM
 
w°e
;

520 
cou¡
;

521 
XMLSTRUCT
 *
pxml
;

522 *
ph™dÀ
;

524 
pxml
=
	`xml_öô
(
pwsc
,1);

525 
	`xml_push
(
pxml
,"status");

527 
	`xml_push
(
pxml
,"service_status");

529 
	`xml_push
(
pxml
,"service");

531 
	`xml_ouçut
(
pxml
,"name","Rendezvous");

533 #i‚de‡
WITHOUT_MDNS


534 if(
c⁄fig
.
u£_mdns
) {

535 
	`xml_ouçut
(
pxml
,"°©us",
	`ªnd_ru¬ög
() ? "Running" : "Stopped");

537 
	`xml_ouçut
(
pxml
,"status","Disabled");

540 
	`ws_wrôefd
(
pwsc
,"<td>No Support</td><td>&nbsp;</td></tr>\n");

542 
	`xml_p›
(
pxml
);

544 
	`xml_push
(
pxml
,"service");

545 
	`xml_ouçut
(
pxml
,"name","DAAP Server");

546 
	`xml_ouçut
(
pxml
,"°©us",
c⁄fig
.
°›
 ? "Stopping" : "Running");

547 
	`xml_p›
(
pxml
);

549 
	`xml_push
(
pxml
,"service");

550 
	`xml_ouçut
(
pxml
,"name","File Scanner");

551 
	`xml_ouçut
(
pxml
,"°©us",
c⁄fig
.
ªlﬂd
 ? "Running" : "Idle");

552 
	`xml_p›
(
pxml
);

554 
	`xml_p›
(
pxml
);

556 
	`xml_push
(
pxml
,"plugins");

557 
ph™dÀ
 = 
NULL
;

558 (
ph™dÀ
 = 
	`∂ugö_íum
(phandle))) {

559 
	`xml_push
(
pxml
,"plugin");

560 
	`xml_ouçut
(
pxml
,"«me",
	`∂ugö_gë_des¸ùti⁄
(
ph™dÀ
));

561 
	`xml_p›
(
pxml
);

564 
	`xml_p›
(
pxml
);

566 
	`xml_push
(
pxml
,"thread_status");

568 
pci
 = 
	`ws_thªad_íum_fú°
(
c⁄fig
.
£rvî
,&
w°e
);

569 
pci
) {

570 
pss
 = 
	`ws_gë_loˇl_°‹age
(
pci
);

571 if(
pss
) {

572 
	`xml_push
(
pxml
,"thread");

573 
	`xml_ouçut
(
pxml
,"id","%d",
pss
->
thªad
);

574 
	`xml_ouçut
(
pxml
,"sour˚ù","%s",
pss
->
ho°
);

575 
	`xml_ouçut
(
pxml
,"a˘i⁄","%s",
pss
->
wh©
);

576 
	`xml_p›
(
pxml
);

578 
pci
=
	`ws_thªad_íum_√xt
(
c⁄fig
.
£rvî
,&
w°e
);

581 
	`xml_p›
(
pxml
);

583 
	`xml_push
(
pxml
,"statistics");

585 
r_£cs
=()(
	`time
(
NULL
)-
c⁄fig
.
°©s
.
°¨t_time
);

587 
r_days
=
r_£cs
/(3600 * 24);

588 
r_£cs
 -((3600 * 24Ë* 
r_days
);

590 
r_hours
=
r_£cs
/3600;

591 
r_£cs
 -(3600 * 
r_hours
);

593 
r_mös
=
r_£cs
/60;

594 
r_£cs
 -60 * 
r_mös
;

596 
	`mem£t
(
buf
,0x0,(buf));

597 if(
r_days
)

598 
	`•rötf
((*)&
buf
[
	`°æí
(buf)],"%d day%s, ", 
r_days
,

599 
r_days
 == 1 ? "" : "s");

601 if(
r_days
 || 
r_hours
)

602 
	`•rötf
((*)&
buf
[
	`°æí
(buf)],"%d hour%s, ", 
r_hours
,

603 
r_hours
 == 1 ? "" : "s");

605 if(
r_days
 || 
r_hours
 || 
r_mös
)

606 
	`•rötf
((*)&
buf
[
	`°æí
(buf)],"%d möuã%s, ", 
r_mös
,

607 
r_mös
 == 1 ? "" : "s");

609 
	`•rötf
((*)&
buf
[
	`°æí
(buf)],"%d sec⁄d%†", 
r_£cs
,

610 
r_£cs
 == 1 ? "" : "s");

612 
	`xml_push
(
pxml
,"stat");

613 
	`xml_ouçut
(
pxml
,"name","Uptime");

614 
	`xml_ouçut
(
pxml
,"vÆue","%s",
buf
);

615 
	`xml_p›
(
pxml
);

617 
	`xml_push
(
pxml
,"stat");

618 
	`xml_ouçut
(
pxml
,"name","Songs");

619 
	`db_gë_s⁄g_cou¡
(
NULL
,&
cou¡
);

620 
	`xml_ouçut
(
pxml
,"vÆue","%d",
cou¡
);

621 
	`xml_p›
(
pxml
);

623 
	`xml_push
(
pxml
,"stat");

624 
	`xml_ouçut
(
pxml
,"name","Songs Served");

625 
	`xml_ouçut
(
pxml
,"vÆue","%d",
c⁄fig
.
°©s
.
s⁄gs_£rved
);

626 
	`xml_p›
(
pxml
);

628 
	`xml_p›
(
pxml
);

631 
	`xml_push
(
pxml
,"misc");

632 
	`xml_ouçut
(
pxml
,"wrôabÀ_c⁄fig","%d",
	`c⁄f_iswrôabÀ
());

633 
	`xml_ouçut
(
pxml
,"c⁄fig_∑th","%s",
	`c⁄f_gë_fûíame
());

634 
	`xml_ouçut
(
pxml
,"vîsi⁄","%s",
VERSION
);

635 
	`xml_p›
(
pxml
);

637 
	`xml_p›
(
pxml
);

639 
	`xml_deöô
(
pxml
);

641 
	}
}

646 *
	$xml_ítôy_ícode
(*
‹igöÆ
) {

647 *
√w
;

648 *
s
, *
d
;

649 
de°size
;

651 
de°size
 = 6*()
	`°æí
(
‹igöÆ
)+1;

652 
√w
=(*)
	`mÆloc
(
de°size
);

653 if(!
√w
Ë 
NULL
;

655 
	`mem£t
(
√w
,0x00,
de°size
);

657 
s
=
‹igöÆ
;

658 
d
=
√w
;

660 *
s
) {

661 *
s
) {

663 
	`°rˇt
(
d
,"&gt;");

664 
d
 += 4;

665 
s
++;

668 
	`°rˇt
(
d
,"&lt;");

669 
d
 += 4;

670 
s
++;

673 
	`°rˇt
(
d
,"&quot;");

674 
d
 += 6;

675 
s
++;

678 
	`°rˇt
(
d
,"&apos;");

679 
d
 += 6;

680 
s
++;

683 
	`°rˇt
(
d
,"&amp;");

684 
d
 += 5;

685 
s
++;

688 *
d
++ = *
s
++;

692  
√w
;

693 
	}
}

	@xml-rpc.h

5 #i‚de‡
_XMLRPC_H_


6 
	#_XMLRPC_H_


	)

8 
	~"web£rvî.h
"

10 
xml_h™dÀ
(
WS_CONNINFO
 *
pwsc
);

12 
	gèg_xml°ru˘
;

13 
èg_xml°ru˘
 
	tXMLSTRUCT
;

15 
XMLSTRUCT
 *
xml_öô
(
WS_CONNINFO
 *
pwsc
, 
emô_hódî
);

16 
xml_push
(
XMLSTRUCT
 *
pxml
, *
ãrm
);

17 
xml_p›
(
XMLSTRUCT
 *
pxml
);

18 
xml_ouçut
(
XMLSTRUCT
 *
pxml
, *
£˘i⁄
, *
fmt
, ...);

19 
xml_deöô
(
XMLSTRUCT
 *
pxml
);

	@
1
.
0
119
1486
bsd-snprintf.c
bsd-snprintf.h
chardetect.h
compat.c
compat.h
conf.c
conf.h
configfile.c
configfile.h
daapd.h
db-gdbm.c
db-gdbm.h
db-generic.c
db-generic.h
db-sql-sqlite2.c
db-sql-sqlite2.h
db-sql-sqlite3.c
db-sql-sqlite3.h
db-sql-updates.c
db-sql.c
db-sql.h
debug.h
err.c
err.h
ff-dbstruct.h
ff-plugin-events.h
ff-plugins.c
ff-plugins.h
global.h
iconv_string.c
iconv_string.h
io-errors.h
io-plugin.h
io.c
io.h
ll.c
ll.h
main.c
mdns/DNSCommon.c
mdns/DNSCommon.h
mdns/DNSDigest.c
mdns/GenLinkedList.c
mdns/GenLinkedList.h
mdns/dns_sd.h
mdns/mDNS.c
mdns/mDNSDebug.c
mdns/mDNSDebug.h
mdns/mDNSEmbeddedAPI.h
mdns/mDNSPosix.c
mdns/mDNSPosix.h
mdns/mDNSUNP.c
mdns/mDNSUNP.h
mdns/uDNS.c
mdns/uDNS.h
memdebug.c
memdebug.h
mp3-scanner.c
mp3-scanner.h
os-unix.c
os-unix.h
os-win32.c
os-win32.h
os.h
plugin.c
plugin.h
plugins/compat.c
plugins/compat.h
plugins/out-daap-proto.c
plugins/out-daap-proto.h
plugins/out-daap.c
plugins/out-daap.h
plugins/rsp.c
plugins/rsp.h
plugins/ssc-ffmpeg.c
plugins/ssc-script.c
plugins/xml-rpc.c
plugins/xml-rpc.h
redblack.c
redblack.h
rend-avahi.c
rend-howl.c
rend-osx.c
rend-posix.c
rend-unix.c
rend-unix.h
rend.h
restart.c
restart.h
rxml.c
rxml.h
scan-aac.c
scan-aac.h
scan-aif.c
scan-flac.c
scan-mp3.c
scan-mpc.c
scan-ogg.c
scan-url.c
scan-wav.c
scan-wma.c
scan-xml.c
smart-parser.c
smart-parser.h
ssl.c
ssl.h
upnp.c
upnp.h
util.c
util.h
w32-eventlog.c
w32-eventlog.h
w32-service.c
w32-service.h
wavstreamer.c
webserver.c
webserver.h
win32.h
xml-rpc.c
xml-rpc.h
