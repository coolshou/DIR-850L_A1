#!/bin/sh

ifconfig lo 127.0.0.1

CINIT=1

hostname rlx-linux

mount -t proc proc /proc
mount -t ramfs ramfs /var

mkdir /var/tmp
mkdir /var/web
mkdir /var/log
mkdir /var/run
mkdir /var/lock
mkdir /var/system
mkdir /var/dnrd
mkdir /var/lib
mkdir /var/lib/misc

##For miniigd
mkdir /var/linuxigd
cp /etc/tmp/pics* /var/linuxigd 2>/dev/null

##For pptp
mkdir /var/ppp
mkdir /var/ppp/peers

#smbd
mkdir /var/config
mkdir /var/private
mkdir /var/tmp/usb

#snmpd
mkdir /var/net-snmp

cp /bin/pppoe.sh /var/ppp/true
echo "#!/bin/sh" > /var/ppp/true
#echo "PASS"     >> /var/ppp/true

#for console login
cp /etc/shadow.sample /var/shadow

#extact web pages
cd /web
flash extr /web
cd /
 
mkdir -p /var/udhcpc
mkdir -p /var/udhcpd
cp /bin/init.sh /var/udhcpc/eth0.deconfig
echo " " > /var/udhcpc/eth0.deconfig
cp /bin/init.sh /var/udhcpc/eth1.deconfig
echo " " > /var/udhcpc/eth1.deconfig
cp /bin/init.sh /var/udhcpc/br0.deconfig
echo " " > /var/udhcpc/br0.deconfig
cp /bin/init.sh /var/udhcpc/wlan0.deconfig
echo " " > /var/udhcpc/wlan0.deconfig

if [ "$CINIT" = 1 ]; then
startup.sh
fi

# for wapi certs related
mkdir /var/myca
# wapi cert(must done before init.sh)
cp -rf /usr/local/ssl/* /var/myca/ 2>/dev/null
# loadWapiFiles >/dev/null 2>&1
 
# for wireless client mode 802.1x
mkdir /var/1x
cp -rf /usr/1x/* /var/1x/ 2>/dev/null
 
# set rndis mac
eval `flash get HW_WLAN0_WLAN_ADDR7`
eval `echo $HW_WLAN0_WLAN_ADDR7 > /proc/ulinker_rndis_mac` >/dev/null 2>&1

echo "" > /var/hosts

##### begin of autorun/wall_mount detect #####
echo "gadget eth" > /proc/otg_gadget
sleep 1
ifconfig usb0 up

# wall mount detect by getting device desc 
OTG_COUNT=0
echo "OTG: wall mount detect"
while [ $OTG_COUNT -le 30 ]; do
	read WALL_MOUNT < /proc/wall_mount
	if [ $WALL_MOUNT = "0" ]; then
		echo "not wall mount"
		break
	fi

	echo -n "."
	sleep 1
	OTG_COUNT=$(($OTG_COUNT+1))
done

OTG_COUNT=0
SWITCH_FSG=1
read WALL_MOUNT < /proc/wall_mount
if [ $WALL_MOUNT = "0" ]; then
	echo "OTG: mode switch detect"
	while [ $OTG_COUNT -le 3 ]; do
		read ETHER_STATE < /proc/ether_state
		if [ $ETHER_STATE = "2" ]; then
			SWITCH_FSG=0
			echo "get set configuration, don't need to switch to fsg"
			break
		fi
		echo -n "."
		sleep 1
		OTG_COUNT=$(($OTG_COUNT+1))
	done		

	if [ $SWITCH_FSG = "1" ]; then
		ifconfig usb0 down
		echo "gadget fsg" > /proc/otg_gadget
		while [ -e "/proc/otg_gadget" ]; do
			read OTG_GADGET < /proc/otg_gadget
			if [ $OTG_GADGET = "1" ]; then
				echo "gadget eth" > /proc/otg_gadget
				echo "OTG: get notification, switch to ether mode."
				break
			fi
			echo -n "."
			sleep 1
		done
	fi
fi

ifconfig usb0 down >/dev/null 2>&1
##### end of autorun/wall_mount detect #####

# Start system script
init.sh gw all
 
# modify dst-cache setting
echo "8192" > /proc/sys/net/ipv4/route/max_size
echo "180" > /proc/sys/net/ipv4/route/gc_thresh
echo 20 > /proc/sys/net/ipv4/route/gc_elasticity
echo 35 > /proc/sys/net/ipv4/route/gc_interval
echo 60 > /proc/sys/net/ipv4/route/secret_interval
echo 10 > /proc/sys/net/ipv4/route/gc_timeout
 
# echo "4096" > /proc/sys/net/nf_conntrack_max
echo "4096" > /proc/sys/net/netfilter/nf_conntrack_max
echo "600" > /proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_timeout_established
echo "20" > /proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_timeout_time_wait
echo "20" > /proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_timeout_close
echo "90" > /proc/sys/net/ipv4/netfilter/ip_conntrack_udp_timeout
echo "120" > /proc/sys/net/ipv4/netfilter/ip_conntrack_udp_timeout_stream
echo "90" > /proc/sys/net/ipv4/netfilter/ip_conntrack_generic_timeout
echo "1048576" > /proc/sys/net/ipv4/rt_cache_rebuild_count
echo "32" > /proc/sys/net/netfilter/nf_conntrack_expect_max

echo 1 > /proc/sys/net/ipv4/ip_forward
#echo 2048 > /proc/sys/net/core/hot_list_length

# start web server
webs&

